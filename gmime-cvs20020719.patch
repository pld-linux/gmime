diff -uNr gmime-1.90.0/ChangeLog gmime/ChangeLog
--- gmime-1.90.0/ChangeLog	Fri Jun 28 06:43:38 2002
+++ gmime/ChangeLog	Fri Jul 19 01:16:12 2002
@@ -1,3 +1,33 @@
+2002-07-18  Jeffrey Stedfast  <fejj@ximian.com>
+
+	* gmime-part.c (set_disposition): Fix to parse the disposition
+	parameter values rather than assuming it is only the "attachment"
+	or "inline" part of the value.
+
+2002-07-14  Jeffrey Stedfast  <fejj@ximian.com>
+
+	* configure.in: check for gmtime_r
+
+	* gmime-utils.c (g_mime_utils_header_format_date): Use gmtime_r() if
+	we have this function available to us.
+
+	* gmime-parser.c (parser_step_from): Save the From-line offset.
+	(g_mime_parser_get_from_offset): Newly implemented function used
+	for retrieving the offset of the From-line (for use when parsing
+	mbox files).
+
+2002-07-11  Jeffrey Stedfast  <fejj@ximian.com>
+
+	* strlib.c (strlcpy): Changed to behave the same as the Solaris
+	strlcpy function.
+	(strlcat): Changed to behave the same as the Solaris strlcat
+	function.
+
+2002-07-04  Jeffrey Stedfast  <fejj@ximian.com>
+
+	* gmime-iconv-utils.c (g_mime_iconv_strndup): Fix for
+	nul-terminating some multibyte charsets.
+
 2002-06-28  Jeffrey Stedfast  <fejj@ximian.com>
 
 	* gmime-gpg-context.c (gpg_ctx_op_step): If we get an EOF from the
diff -uNr gmime-1.90.0/HACKING gmime/HACKING
--- gmime-1.90.0/HACKING	Thu Jan  1 01:00:00 1970
+++ gmime/HACKING	Mon Jul  2 21:25:17 2001
@@ -0,0 +1,7 @@
+
+     Rules for commits on the gmime module
+     =========================================
+
+ALWAYS update the ChangeLog accurately when commiting changes to
+gmime. This is as much for me as it is for any other contributors.
+It allows everyone to know exactly what's being modified and when.
diff -uNr gmime-1.90.0/MAINTAINERS gmime/MAINTAINERS
--- gmime-1.90.0/MAINTAINERS	Thu Jan  1 01:00:00 1970
+++ gmime/MAINTAINERS	Tue Oct 24 23:01:36 2000
@@ -0,0 +1 @@
+Email: fejj@helixcode.com
diff -uNr gmime-1.90.0/aclocal.m4 gmime/aclocal.m4
--- gmime-1.90.0/aclocal.m4	Fri Jun 28 08:00:24 2002
+++ gmime/aclocal.m4	Sun Jul 14 08:08:01 2002
@@ -234,6 +234,7 @@
 # libtool.m4 - Configure libtool for the host system. -*-Shell-script-*-
 
 # serial 46 AC_PROG_LIBTOOL
+
 AC_DEFUN([AC_PROG_LIBTOOL],
 [AC_REQUIRE([AC_LIBTOOL_SETUP])dnl
 
@@ -359,9 +360,30 @@
 
 ])
 
+# AC_LIBTOOL_HEADER_ASSERT
+# ------------------------
+AC_DEFUN([AC_LIBTOOL_HEADER_ASSERT],
+[AC_CACHE_CHECK([whether $CC supports assert without backlinking],
+    [lt_cv_func_assert_works],
+    [case $host in
+    *-*-solaris*)
+      if test "$GCC" = yes && test "$with_gnu_ld" != yes; then
+        case `$CC --version 2>/dev/null` in
+        [[12]].*) lt_cv_func_assert_works=no ;;
+        *)        lt_cv_func_assert_works=yes ;;
+        esac
+      fi
+      ;;
+    esac])
+
+if test "x$lt_cv_func_assert_works" = xyes; then
+  AC_CHECK_HEADERS(assert.h)
+fi
+])# AC_LIBTOOL_HEADER_ASSERT
+
 # _LT_AC_CHECK_DLFCN
 # --------------------
-AC_DEFUN(_LT_AC_CHECK_DLFCN,
+AC_DEFUN([_LT_AC_CHECK_DLFCN],
 [AC_CHECK_HEADERS(dlfcn.h)
 ])# _LT_AC_CHECK_DLFCN
 
@@ -379,10 +401,10 @@
 # [They come from Ultrix.  What could be older than Ultrix?!! ;)]
 
 # Character class describing NM global symbol codes.
-[symcode='[BCDEGRST]']
+symcode='[[BCDEGRST]]'
 
 # Regexp to match symbols that can be accessed directly from C.
-[sympat='\([_A-Za-z][_A-Za-z0-9]*\)']
+sympat='\([[_A-Za-z]][[_A-Za-z0-9]]*\)'
 
 # Transform the above into a raw symbol and a C symbol.
 symxfrm='\1 \2\3 \3'
@@ -390,25 +412,29 @@
 # Transform an extracted symbol line into a proper C declaration
 lt_cv_global_symbol_to_cdecl="sed -n -e 's/^. .* \(.*\)$/extern char \1;/p'"
 
+# Transform an extracted symbol line into symbol name and symbol address
+lt_cv_global_symbol_to_c_name_address="sed -n -e 's/^: \([[^ ]]*\) $/  {\\\"\1\\\", (lt_ptr) 0},/p' -e 's/^$symcode \([[^ ]]*\) \([[^ ]]*\)$/  {\"\2\", (lt_ptr) \&\2},/p'"
+
 # Define system-specific variables.
 case $host_os in
 aix*)
-  [symcode='[BCDT]']
+  symcode='[[BCDT]]'
   ;;
 cygwin* | mingw* | pw32*)
-  [symcode='[ABCDGISTW]']
+  symcode='[[ABCDGISTW]]'
   ;;
 hpux*) # Its linker distinguishes data from code symbols
   lt_cv_global_symbol_to_cdecl="sed -n -e 's/^T .* \(.*\)$/extern char \1();/p' -e 's/^$symcode* .* \(.*\)$/extern char \1;/p'"
+  lt_cv_global_symbol_to_c_name_address="sed -n -e 's/^: \([[^ ]]*\) $/  {\\\"\1\\\", (lt_ptr) 0},/p' -e 's/^$symcode* \([[^ ]]*\) \([[^ ]]*\)$/  {\"\2\", (lt_ptr) \&\2},/p'"
   ;;
 irix*)
-  [symcode='[BCDEGRST]']
+  symcode='[[BCDEGRST]]'
   ;;
 solaris* | sysv5*)
-  [symcode='[BDT]']
+  symcode='[[BDT]]'
   ;;
 sysv4)
-  [symcode='[DFNSTU]']
+  symcode='[[DFNSTU]]'
   ;;
 esac
 
@@ -422,14 +448,14 @@
 
 # If we're using GNU nm, then use its standard symbol codes.
 if $NM -V 2>&1 | egrep '(GNU|with BFD)' > /dev/null; then
-  [symcode='[ABCDGISTW]']
+  symcode='[[ABCDGISTW]]'
 fi
 
 # Try without a prefix undercore, then with it.
 for ac_symprfx in "" "_"; do
 
   # Write the raw and C identifiers.
-[lt_cv_sys_global_symbol_pipe="sed -n -e 's/^.*[ 	]\($symcode$symcode*\)[ 	][ 	]*\($ac_symprfx\)$sympat$opt_cr$/$symxfrm/p'"]
+lt_cv_sys_global_symbol_pipe="sed -n -e 's/^.*[[ 	]]\($symcode$symcode*\)[[ 	]][[ 	]]*\($ac_symprfx\)$sympat$opt_cr$/$symxfrm/p'"
 
   # Check to see that the pipe works correctly.
   pipe_works=no
@@ -471,23 +497,23 @@
 
 	  cat <<EOF >> conftest.$ac_ext
 #if defined (__STDC__) && __STDC__
-# define lt_ptr_t void *
+# define lt_ptr void *
 #else
-# define lt_ptr_t char *
+# define lt_ptr char *
 # define const
 #endif
 
 /* The mapping between symbol names and symbols. */
 const struct {
   const char *name;
-  lt_ptr_t address;
+  lt_ptr address;
 }
-[lt_preloaded_symbols[] =]
+lt_preloaded_symbols[[]] =
 {
 EOF
-	  sed "s/^$symcode$symcode* \(.*\) \(.*\)$/  {\"\2\", (lt_ptr_t) \&\2},/" < "$nlist" >> conftest.$ac_ext
+	  sed "s/^$symcode$symcode* \(.*\) \(.*\)$/  {\"\2\", (lt_ptr) \&\2},/" < "$nlist" >> conftest.$ac_ext
 	  cat <<\EOF >> conftest.$ac_ext
-  {0, (lt_ptr_t) 0}
+  {0, (lt_ptr) 0}
 };
 
 #ifdef __cplusplus
@@ -531,10 +557,13 @@
 global_symbol_pipe="$lt_cv_sys_global_symbol_pipe"
 if test -z "$lt_cv_sys_global_symbol_pipe"; then
   global_symbol_to_cdecl=
+  global_symbol_to_c_name_address=
 else
   global_symbol_to_cdecl="$lt_cv_global_symbol_to_cdecl"
+  global_symbol_to_c_name_address="$lt_cv_global_symbol_to_c_name_address"
 fi
-if test -z "$global_symbol_pipe$global_symbol_to_cdecl"; then
+if test -z "$global_symbol_pipe$global_symbol_to_cdec$global_symbol_to_c_name_address";
+then
   AC_MSG_RESULT(failed)
 else
   AC_MSG_RESULT(ok)
@@ -552,16 +581,17 @@
     *-DOS) lt_cv_sys_path_separator=';' ;;
     *)     lt_cv_sys_path_separator=':' ;;
   esac
+  PATH_SEPARATOR=$lt_cv_sys_path_separator
 fi
 ])# _LT_AC_LIBTOOL_SYS_PATH_SEPARATOR
 
 # _LT_AC_PROG_ECHO_BACKSLASH
 # --------------------------
 # Add some code to the start of the generated configure script which
-# will find an echo command which doesn;t interpret backslashes.
+# will find an echo command which doesn't interpret backslashes.
 AC_DEFUN([_LT_AC_PROG_ECHO_BACKSLASH],
 [ifdef([AC_DIVERSION_NOTICE], [AC_DIVERT_PUSH(AC_DIVERSION_NOTICE)],
-                              [AC_DIVERT_PUSH(NOTICE)])
+			      [AC_DIVERT_PUSH(NOTICE)])
 _LT_AC_LIBTOOL_SYS_PATH_SEPARATOR
 
 # Check that we are running under the correct shell.
@@ -627,7 +657,7 @@
   #
   # So, first we look for a working echo in the user's PATH.
 
-  IFS="${IFS= 	}"; save_ifs="$IFS"; IFS="${IFS}${PATH_SEPARATOR}"
+  IFS="${IFS= 	}"; save_ifs="$IFS"; IFS=$PATH_SEPARATOR
   for dir in $PATH /usr/ucb; do
     if (test -f $dir/echo || test -f $dir/echo$ac_exeext) &&
        test "X`($dir/echo '\t') 2>/dev/null`" = 'X\t' &&
@@ -716,7 +746,7 @@
 # _LT_AC_TRY_DLOPEN_SELF (ACTION-IF-TRUE, ACTION-IF-TRUE-W-USCORE,
 #                           ACTION-IF-FALSE, ACTION-IF-CROSS-COMPILING)
 # ------------------------------------------------------------------
-AC_DEFUN(_LT_AC_TRY_DLOPEN_SELF,
+AC_DEFUN([_LT_AC_TRY_DLOPEN_SELF],
 [if test "$cross_compiling" = yes; then :
   [$4]
 else
@@ -803,7 +833,7 @@
 
 # AC_LIBTOOL_DLOPEN_SELF
 # -------------------
-AC_DEFUN(AC_LIBTOOL_DLOPEN_SELF,
+AC_DEFUN([AC_LIBTOOL_DLOPEN_SELF],
 [if test "x$enable_dlopen" != xyes; then
   enable_dlopen=unknown
   enable_dlopen_self=unknown
@@ -825,16 +855,22 @@
    ;;
 
   *)
-    AC_CHECK_LIB(dl, dlopen,  [lt_cv_dlopen="dlopen" lt_cv_dlopen_libs="-ldl"],
-      [AC_CHECK_FUNC(dlopen, lt_cv_dlopen="dlopen",
-        [AC_CHECK_FUNC(shl_load, lt_cv_dlopen="shl_load",
-          [AC_CHECK_LIB(svld, dlopen,
-	    [lt_cv_dlopen="dlopen" lt_cv_dlopen_libs="-lsvld"],
-            [AC_CHECK_LIB(dld, shl_load,
-              [lt_cv_dlopen="dld_link" lt_cv_dlopen_libs="-dld"])
+    AC_CHECK_FUNC([shl_load],
+          [lt_cv_dlopen="shl_load"],
+      [AC_CHECK_LIB([dld], [shl_load],
+            [lt_cv_dlopen="shl_load" lt_cv_dlopen_libs="-dld"],
+	[AC_CHECK_FUNC([dlopen],
+	      [lt_cv_dlopen="dlopen"],
+	  [AC_CHECK_LIB([dl], [dlopen],
+	        [lt_cv_dlopen="dlopen" lt_cv_dlopen_libs="-ldl"],
+	    [AC_CHECK_LIB([svld], [dlopen],
+	          [lt_cv_dlopen="dlopen" lt_cv_dlopen_libs="-lsvld"],
+	      [AC_CHECK_LIB([dld], [dld_link],
+	            [lt_cv_dlopen="dld_link" lt_cv_dlopen_libs="-dld"])
+	      ])
 	    ])
-          ])
-        ])
+	  ])
+	])
       ])
     ;;
   esac
@@ -897,10 +933,10 @@
 # Sed substitution that helps us do robust quoting.  It backslashifies
 # metacharacters that are still active within double-quoted strings.
 Xsed='sed -e s/^X//'
-[sed_quote_subst='s/\([\\"\\`$\\\\]\)/\\\1/g']
+sed_quote_subst='s/\([[\\"\\`$\\\\]]\)/\\\1/g'
 
 # Same as above, but do not quote variable references.
-[double_quote_subst='s/\([\\"\\`\\\\]\)/\\\1/g']
+double_quote_subst='s/\([[\\"\\`\\\\]]\)/\\\1/g'
 
 # Sed substitution to delay expansion of an escaped shell variable in a
 # double_quote_subst'ed string.
@@ -969,8 +1005,15 @@
 old_postuninstall_cmds=
 
 if test -n "$RANLIB"; then
+  case $host_os in
+  openbsd*)
+    old_postinstall_cmds="\$RANLIB -t \$oldlib~$old_postinstall_cmds"
+    ;;
+  *)
+    old_postinstall_cmds="\$RANLIB \$oldlib~$old_postinstall_cmds"
+    ;;
+  esac
   old_archive_cmds="$old_archive_cmds~\$RANLIB \$oldlib"
-  old_postinstall_cmds="\$RANLIB \$oldlib~$old_postinstall_cmds"
 fi
 
 # Allow CC to be a program name with arguments.
@@ -990,7 +1033,7 @@
 AC_MSG_RESULT($objdir)
 
 
-AC_ARG_WITH(pic, 
+AC_ARG_WITH(pic,
 [  --with-pic              try to use only PIC/non-PIC objects [default=use both]],
 pic_mode="$withval", pic_mode=default)
 test -z "$pic_mode" && pic_mode=default
@@ -1018,7 +1061,7 @@
       # libC (AIX C++ library), which obviously doesn't included in libraries
       # list by gcc. This cause undefined symbols with -static flags.
       # This hack allows C programs to be linked with "-static -ldl", but
-      # we not sure about C++ programs.
+      # not sure about C++ programs.
       lt_cv_prog_cc_static="$lt_cv_prog_cc_static ${lt_cv_prog_cc_wl}-lC"
       ;;
     amigaos*)
@@ -1053,13 +1096,13 @@
     # PORTME Check for PIC flags for the system compiler.
     case $host_os in
     aix3* | aix4* | aix5*)
+      lt_cv_prog_cc_wl='-Wl,'
       # All AIX code is PIC.
       if test "$host_cpu" = ia64; then
-        # AIX 5 now supports IA64 processor
-        lt_cv_prog_cc_static='-Bstatic'
-        lt_cv_prog_cc_wl='-Wl,'
+	# AIX 5 now supports IA64 processor
+	lt_cv_prog_cc_static='-Bstatic'
       else
-        lt_cv_prog_cc_static='-bnso -bI:/lib/syscalls.exp'
+	lt_cv_prog_cc_static='-bnso -bI:/lib/syscalls.exp'
       fi
       ;;
 
@@ -1115,9 +1158,9 @@
       lt_cv_prog_cc_pic='-KPIC'
       lt_cv_prog_cc_static='-Bstatic'
       if test "x$host_vendor" = xsni; then
-        lt_cv_prog_cc_wl='-LD'
+	lt_cv_prog_cc_wl='-LD'
       else
-        lt_cv_prog_cc_wl='-Wl,'
+	lt_cv_prog_cc_wl='-Wl,'
       fi
       ;;
 
@@ -1184,7 +1227,7 @@
 # Check for any special shared library compilation flags.
 if test -n "$lt_cv_prog_cc_shlib"; then
   AC_MSG_WARN([\`$CC' requires \`$lt_cv_prog_cc_shlib' to build shared libraries])
-  if echo "$old_CC $old_CFLAGS " | [egrep -e "[ 	]$lt_cv_prog_cc_shlib[ 	]"] >/dev/null; then :
+  if echo "$old_CC $old_CFLAGS " | egrep -e "[[ 	]]$lt_cv_prog_cc_shlib[[ 	]]" >/dev/null; then :
   else
    AC_MSG_WARN([add \`$lt_cv_prog_cc_shlib' to the CC or CFLAGS env variable and reconfigure])
     lt_cv_prog_cc_can_build_shared=no
@@ -1260,6 +1303,8 @@
   lt_cv_compiler_o_lo=no
   save_CFLAGS="$CFLAGS"
   CFLAGS="$CFLAGS -c -o conftest.lo"
+  save_objext="$ac_objext"
+  ac_objext=lo
   AC_TRY_COMPILE([], [int some_variable = 0;], [dnl
     # The compiler can only warn and ignore the option if not recognized
     # So say no if there are warnings
@@ -1269,10 +1314,11 @@
       lt_cv_compiler_o_lo=yes
     fi
   ])
+  ac_objext="$save_objext"
   CFLAGS="$save_CFLAGS"
   ])
   compiler_o_lo=$lt_cv_compiler_o_lo
-  AC_MSG_RESULT([$compiler_c_lo])
+  AC_MSG_RESULT([$compiler_o_lo])
 else
   compiler_o_lo=no
 fi
@@ -1365,7 +1411,7 @@
 extract_expsyms_cmds=
 
 case $host_os in
-cygwin* | mingw* | pw32* )
+cygwin* | mingw* | pw32*)
   # FIXME: the MSVC++ port hasn't been tested in a loooong time
   # When not using gcc, we currently assume that we are using
   # Microsoft Visual C++.
@@ -1373,7 +1419,9 @@
     with_gnu_ld=no
   fi
   ;;
-
+openbsd*)
+  with_gnu_ld=no
+  ;;
 esac
 
 ld_shlibs=yes
@@ -1460,7 +1508,7 @@
     # can override, but on older systems we have to supply one (in ltdll.c)
     if test "x$lt_cv_need_dllmain" = "xyes"; then
       ltdll_obj='$output_objdir/$soname-ltdll.'"$ac_objext "
-      ltdll_cmds='test -f $output_objdir/$soname-ltdll.c || sed -e "/^# \/\* ltdll\.c starts here \*\//,/^# \/\* ltdll.c ends here \*\// { s/^# //; p; }" -e d < [$]0 > $output_objdir/$soname-ltdll.c~
+      ltdll_cmds='test -f $output_objdir/$soname-ltdll.c || sed -e "/^# \/\* ltdll\.c starts here \*\//,/^# \/\* ltdll.c ends here \*\// { s/^# //; p; }" -e d < $''0 > $output_objdir/$soname-ltdll.c~
 	test -f $output_objdir/$soname-ltdll.$ac_objext || (cd $output_objdir && $CC -c $soname-ltdll.c)~'
     else
       ltdll_obj=
@@ -1473,24 +1521,24 @@
     # Be careful not to strip the DATA tag left be newer dlltools.
     export_symbols_cmds="$ltdll_cmds"'
       $DLLTOOL --export-all --exclude-symbols '$dll_exclude_symbols' --output-def $output_objdir/$soname-def '$ltdll_obj'$libobjs $convenience~
-      [sed -e "1,/EXPORTS/d" -e "s/ @ [0-9]*//" -e "s/ *;.*$//"] < $output_objdir/$soname-def > $export_symbols'
+      sed -e "1,/EXPORTS/d" -e "s/ @ [[0-9]]*//" -e "s/ *;.*$//" < $output_objdir/$soname-def > $export_symbols'
 
     # If the export-symbols file already is a .def file (1st line
     # is EXPORTS), use it as is.
     # If DATA tags from a recent dlltool are present, honour them!
     archive_expsym_cmds='if test "x`head -1 $export_symbols`" = xEXPORTS; then
-        cp $export_symbols $output_objdir/$soname-def;
+	cp $export_symbols $output_objdir/$soname-def;
       else
-        echo EXPORTS > $output_objdir/$soname-def;
-        _lt_hint=1;
-        cat $export_symbols | while read symbol; do
-         set dummy \$symbol;
-         case \[$]# in
-           2) echo "   \[$]2 @ \$_lt_hint ; " >> $output_objdir/$soname-def;;
-           *) echo "     \[$]2 @ \$_lt_hint \[$]3 ; " >> $output_objdir/$soname-def;;
-         esac;
-         _lt_hint=`expr 1 + \$_lt_hint`;
-        done;
+	echo EXPORTS > $output_objdir/$soname-def;
+	_lt_hint=1;
+	cat $export_symbols | while read symbol; do
+	 set dummy \$symbol;
+	 case \[$]# in
+	   2) echo "   \[$]2 @ \$_lt_hint ; " >> $output_objdir/$soname-def;;
+	   *) echo "     \[$]2 @ \$_lt_hint \[$]3 ; " >> $output_objdir/$soname-def;;
+	 esac;
+	 _lt_hint=`expr 1 + \$_lt_hint`;
+	done;
       fi~
       '"$ltdll_cmds"'
       $CC -Wl,--base-file,$output_objdir/$soname-base '$lt_cv_cc_dll_switch' -Wl,-e,'$dll_entry' -o $output_objdir/$soname '$ltdll_obj'$libobjs $deplibs $compiler_flags~
@@ -1585,80 +1633,96 @@
     ;;
 
   aix4* | aix5*)
+    if test "$host_cpu" = ia64; then
+      # On IA64, the linker does run time linking by default, so we don't
+      # have to do anything special.
+      aix_use_runtimelinking=no
+      exp_sym_flag='-Bexport'
+      no_entry_flag=""
+    else
+      aix_use_runtimelinking=no
+
+      # Test if we are trying to use run time linking or normal
+      # AIX style linking. If -brtl is somewhere in LDFLAGS, we
+      # need to do runtime linking.
+      case $host_os in aix4.[[23]]|aix4.[[23]].*|aix5*)
+	for ld_flag in $LDFLAGS; do
+	  if (test $ld_flag = "-brtl" || test $ld_flag = "-Wl,-brtl"); then
+	    aix_use_runtimelinking=yes
+	    break
+	  fi
+	done
+      esac
+
+      exp_sym_flag='-bexport'
+      no_entry_flag='-bnoentry'
+    fi
+
     # When large executables or shared objects are built, AIX ld can
     # have problems creating the table of contents.  If linking a library
     # or program results in "error TOC overflow" add -mminimal-toc to
     # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not
     # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.
 
+    hardcode_direct=yes
     archive_cmds=''
     hardcode_libdir_separator=':'
     if test "$GCC" = yes; then
-      collect2name=`${CC} -print-prog-name=collect2`
-      if test -f "$collect2name" && \
-	 strings "$collect2name" | grep resolve_lib_name >/dev/null
-      then
-	# We have reworked collect2
-	hardcode_direct=yes
-      else
-        # We have old collect2
-        hardcode_direct=unsupported
-        # It fails to find uninstalled libraries when the uninstalled
-        # path is not listed in the libpath.  Setting hardcode_minus_L
-        # to unsupported forces relinking
-        hardcode_minus_L=yes
-        hardcode_libdir_flag_spec='-L$libdir'
-        hardcode_libdir_separator=
-      fi
+      case $host_os in aix4.[[012]]|aix4.[[012]].*)
+	collect2name=`${CC} -print-prog-name=collect2`
+	if test -f "$collect2name" && \
+	  strings "$collect2name" | grep resolve_lib_name >/dev/null
+	then
+	  # We have reworked collect2
+	  hardcode_direct=yes
+	else
+	  # We have old collect2
+	  hardcode_direct=unsupported
+	  # It fails to find uninstalled libraries when the uninstalled
+	  # path is not listed in the libpath.  Setting hardcode_minus_L
+	  # to unsupported forces relinking
+	  hardcode_minus_L=yes
+	  hardcode_libdir_flag_spec='-L$libdir'
+	  hardcode_libdir_separator=
+	fi
+      esac
+
       shared_flag='-shared'
     else
+      # not using gcc
       if test "$host_cpu" = ia64; then
-        shared_flag='-G'
+	shared_flag='${wl}-G'
       else
-        shared_flag='${wl}-bM:SRE'
+	if test "$aix_use_runtimelinking" = yes; then
+	  shared_flag='${wl}-G'
+	else
+	  shared_flag='${wl}-bM:SRE'
+	fi
       fi
-      hardcode_direct=yes
     fi
 
-    if test "$host_cpu" = ia64; then
-      # On IA64, the linker does run time linking by default, so we don't
-      # have to do anything special.
-      aix_use_runtimelinking=no
-      exp_sym_flag='-Bexport'
-      no_entry_flag=""
-    else
-      # Test if we are trying to use run time linking, or normal AIX style linking.
-      # If -brtl is somewhere in LDFLAGS, we need to do run time linking.
-      aix_use_runtimelinking=no
-      for ld_flag in $LDFLAGS; do
-        if (test $ld_flag = "-brtl" || test $ld_flag = "-Wl,-brtl" ); then
-          aix_use_runtimelinking=yes
-          break
-        fi
-      done
-      exp_sym_flag='-bexport'
-      no_entry_flag='-bnoentry'
-    fi
     # It seems that -bexpall can do strange things, so it is better to
     # generate a list of symbols to export.
     always_export_symbols=yes
     if test "$aix_use_runtimelinking" = yes; then
+      # Warning - without using the other runtime loading flags (-brtl),
+      # -berok will link without error, but may produce a broken library.
+      allow_undefined_flag='-berok'
       hardcode_libdir_flag_spec='${wl}-blibpath:$libdir:/usr/lib:/lib'
-      allow_undefined_flag=' -Wl,-G'
-      archive_expsym_cmds="\$CC $shared_flag"' -o $output_objdir/$soname $libobjs $deplibs $compiler_flags ${allow_undefined_flag} '"\${wl}$no_entry_flag \${wl}$exp_sym_flag:\$export_symbols"
+      archive_expsym_cmds="\$CC"' -o $output_objdir/$soname $libobjs $deplibs $compiler_flags `if test "x${allow_undefined_flag}" != "x"; then echo "${wl}${allow_undefined_flag}"; else :; fi` '"\${wl}$no_entry_flag \${wl}$exp_sym_flag:\$export_symbols $shared_flag"
     else
       if test "$host_cpu" = ia64; then
-        hardcode_libdir_flag_spec='${wl}-R $libdir:/usr/lib:/lib'
-       allow_undefined_flag="-znodefs"
-        archive_expsym_cmds="\$CC $shared_flag"' -o $output_objdir/$soname ${wl}-h$soname $libobjs $deplibs $compiler_flags ${wl}${allow_undefined_flag} '"\${wl}$no_entry_flag \${wl}$exp_sym_flag:\$export_symbols"
+	hardcode_libdir_flag_spec='${wl}-R $libdir:/usr/lib:/lib'
+	allow_undefined_flag="-z nodefs"
+	archive_expsym_cmds="\$CC $shared_flag"' -o $output_objdir/$soname ${wl}-h$soname $libobjs $deplibs $compiler_flags ${wl}${allow_undefined_flag} '"\${wl}$no_entry_flag \${wl}$exp_sym_flag:\$export_symbols"
       else
-        hardcode_libdir_flag_spec='${wl}-bnolibpath ${wl}-blibpath:$libdir:/usr/lib:/lib'
-        # Warning - without using the other run time loading flags, -berok will
-        #           link without error, but may produce a broken library.
-        allow_undefined_flag='${wl}-berok"
-        # This is a bit strange, but is similar to how AIX traditionally builds
-        # it's shared libraries.
-        archive_expsym_cmds="\$CC $shared_flag"' -o $output_objdir/$soname $libobjs $deplibs $compiler_flags ${allow_undefined_flag} '"\${wl}$no_entry_flag \${wl}$exp_sym_flag:\$export_symbols"' ~$AR -crlo $objdir/$libname$release.a $objdir/$soname'
+	hardcode_libdir_flag_spec='${wl}-bnolibpath ${wl}-blibpath:$libdir:/usr/lib:/lib'
+	# Warning - without using the other run time loading flags,
+	# -berok will link without error, but may produce a broken library.
+	allow_undefined_flag='${wl}-berok'
+	# This is a bit strange, but is similar to how AIX traditionally builds
+	# it's shared libraries.
+	archive_expsym_cmds="\$CC $shared_flag"' -o $output_objdir/$soname $libobjs $deplibs $compiler_flags ${allow_undefined_flag} '"\${wl}$no_entry_flag \${wl}$exp_sym_flag:\$export_symbols"' ~$AR -crlo $objdir/$libname$release.a $objdir/$soname'
       fi
     fi
     ;;
@@ -1690,11 +1754,18 @@
     ;;
 
   darwin* | rhapsody*)
-    allow_undefined_flag='-undefined suppress'
+    case "$host_os" in
+    rhapsody* | darwin1.[[012]])
+      allow_undefined_flag='-undefined suppress'
+      ;;
+    *) # Darwin 1.3 on
+      allow_undefined_flag='-flat_namespace -undefined suppress'
+      ;;
+    esac
     # FIXME: Relying on posixy $() will cause problems for
     #        cross-compilation, but unfortunately the echo tests do not
     #        yet detect zsh echo's removal of \ escapes.
-    archive_cmds='$CC $(test .$module = .yes && echo -bundle || echo -dynamiclib) $allow_undefined_flag -o $lib $libobjs $deplibs$linkopts -install_name $rpath/$soname $(test -n "$verstring" -a x$verstring != x0.0 && echo $verstring)'
+    archive_cmds='$nonopt $(test "x$module" = xyes && echo -bundle || echo -dynamiclib) $allow_undefined_flag -o $lib $libobjs $deplibs$linker_flags -install_name $rpath/$soname $verstring'
     # We need to add '_' to the symbols in $export_symbols first
     #archive_expsym_cmds="$archive_cmds"' && strip -s $export_symbols'
     hardcode_direct=yes
@@ -1769,7 +1840,7 @@
     ;;
 
   newsos6)
-    archive_cmds='$LD -G -h $soname -o $lib $libobjs $deplibs $linkopts'
+    archive_cmds='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'
     hardcode_direct=yes
     hardcode_libdir_flag_spec='${wl}-rpath ${wl}$libdir'
     hardcode_libdir_separator=:
@@ -1777,10 +1848,24 @@
     ;;
 
   openbsd*)
-    archive_cmds='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'
-    hardcode_libdir_flag_spec='-R$libdir'
     hardcode_direct=yes
     hardcode_shlibpath_var=no
+    if test -z "`echo __ELF__ | $CC -E - | grep __ELF__`" || test "$host_os-$host_cpu" = "openbsd2.8-powerpc"; then
+      archive_cmds='$CC -shared $pic_flag -o $lib $libobjs $deplibs $linker_flags'
+      hardcode_libdir_flag_spec='${wl}-rpath,$libdir'
+      export_dynamic_flag_spec='${wl}-E'
+    else
+      case "$host_os" in
+      openbsd[[01]].* | openbsd2.[[0-7]] | openbsd2.[[0-7]].*)
+	archive_cmds='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'
+	hardcode_libdir_flag_spec='-R$libdir'
+        ;;
+      *)
+        archive_cmds='$CC -shared $pic_flag -o $lib $libobjs $deplibs $linker_flags'
+        hardcode_libdir_flag_spec='${wl}-rpath,$libdir'
+        ;;
+      esac
+    fi
     ;;
 
   os2*)
@@ -1825,10 +1910,39 @@
     hardcode_shlibpath_var=no
     runpath_var=LD_RUN_PATH
     hardcode_runpath_var=yes
+    export_dynamic_flag_spec='${wl}-Bexport'
     ;;
 
   solaris*)
+    # gcc --version < 3.0 without binutils cannot create self contained
+    # shared libraries reliably, requiring libgcc.a to resolve some of
+    # the object symbols generated in some cases.  Libraries that use
+    # assert need libgcc.a to resolve __eprintf, for example.  Linking
+    # a copy of libgcc.a into every shared library to guarantee resolving
+    # such symbols causes other problems:  According to Tim Van Holder
+    # <tim.van.holder@pandora.be>, C++ libraries end up with a separate
+    # (to the application) exception stack for one thing.
     no_undefined_flag=' -z defs'
+    if test "$GCC" = yes; then
+      case `$CC --version 2>/dev/null` in
+      [[12]].*)
+	cat <<EOF 1>&2
+
+*** Warning: Releases of GCC earlier than version 3.0 cannot reliably
+*** create self contained shared libraries on Solaris systems, without
+*** introducing a dependency on libgcc.a.  Therefore, libtool is disabling
+*** -no-undefined support, which will at least allow you to build shared
+*** libraries.  However, you may find that when you link such libraries
+*** into an application without using GCC, you have to manually add
+*** \`gcc --print-libgcc-file-name\` to the link command.  We urge you to
+*** upgrade to a newer version of GCC.  Another option is to rebuild your
+*** current GCC to use the GNU linker from GNU binutils 2.9.1 or newer.
+
+EOF
+        no_undefined_flag=
+	;;
+      esac
+    fi
     # $CC -shared without GNU ld will not create a library from C++
     # object files and a static libstdc++, better avoid it by now
     archive_cmds='$LD -G${allow_undefined_flag} -h $soname -o $lib $libobjs $deplibs $linker_flags'
@@ -1837,7 +1951,7 @@
     hardcode_libdir_flag_spec='-R$libdir'
     hardcode_shlibpath_var=no
     case $host_os in
-    [solaris2.[0-5] | solaris2.[0-5].*]) ;;
+    solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;
     *) # Supported since Solaris 2.6 (maybe 2.5.1?)
       whole_archive_flag_spec='-z allextract$convenience -z defaultextract' ;;
     esac
@@ -1860,7 +1974,7 @@
 
   sysv4)
     if test "x$host_vendor" = xsno; then
-      archive_cmds='$LD -G -Bsymbolic -h $soname -o $lib $libobjs $deplibs $linkopts'
+      archive_cmds='$LD -G -Bsymbolic -h $soname -o $lib $libobjs $deplibs $linker_flags'
       hardcode_direct=yes # is this really true???
     else
       archive_cmds='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'
@@ -2017,22 +2131,24 @@
     # depend on `.', always an invalid library.  This was fixed in
     # development snapshots of GCC prior to 3.0.
     case $host_os in
-      [ aix4 | aix4.[01] | aix4.[01].*)]
-      if { echo '#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 97)'
-           echo ' yes '
-           echo '#endif'; } | ${CC} -E - | grep yes > /dev/null; then
-        :
-      else
-        can_build_shared=no
-      fi
-      ;;
+      aix4 | aix4.[[01]] | aix4.[[01]].*)
+	if { echo '#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 97)'
+	     echo ' yes '
+	     echo '#endif'; } | ${CC} -E - | grep yes > /dev/null; then
+	  :
+	else
+	  can_build_shared=no
+	fi
+	;;
     esac
-    # AIX (on Power*) has no versioning support, so currently we can not hardcode correct
-    # soname into executable. Probably we can add versioning support to
-    # collect2, so additional links can be useful in future.
+    # AIX (on Power*) has no versioning support, so currently we can
+    # not hardcode correct soname into executable. Probably we can
+    # add versioning support to collect2, so additional links can
+    # be useful in future.
     if test "$aix_use_runtimelinking" = yes; then
-      # If using run time linking (on AIX 4.2 or later) use lib<name>.so instead of
-      # lib<name>.a to let people know that these are not typical AIX shared libraries.
+      # If using run time linking (on AIX 4.2 or later) use lib<name>.so
+      # instead of lib<name>.a to let people know that these are not
+      # typical AIX shared libraries.
       library_names_spec='${libname}${release}.so$versuffix ${libname}${release}.so$major $libname.so'
     else
       # We preserve .a as extension for shared libraries through AIX4.2
@@ -2041,14 +2157,13 @@
       soname_spec='${libname}${release}.so$major'
     fi
     shlibpath_var=LIBPATH
-    deplibs_check_method=pass_all
   fi
   ;;
 
 amigaos*)
   library_names_spec='$libname.ixlibrary $libname.a'
   # Create ${libname}_ixlibrary.a entries in /sys/libs.
-  finish_eval='for lib in `ls $libdir/*.ixlibrary 2>/dev/null`; do libname=`$echo "X$lib" | [$Xsed -e '\''s%^.*/\([^/]*\)\.ixlibrary$%\1%'\'']`; test $rm /sys/libs/${libname}_ixlibrary.a; $show "(cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a)"; (cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a) || exit 1; done'
+  finish_eval='for lib in `ls $libdir/*.ixlibrary 2>/dev/null`; do libname=`$echo "X$lib" | $Xsed -e '\''s%^.*/\([[^/]]*\)\.ixlibrary$%\1%'\''`; test $rm /sys/libs/${libname}_ixlibrary.a; $show "(cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a)"; (cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a) || exit 1; done'
   ;;
 
 beos*)
@@ -2079,7 +2194,7 @@
   case $GCC,$host_os in
   yes,cygwin*)
     library_names_spec='$libname.dll.a'
-    soname_spec='`echo ${libname} | sed -e 's/^lib/cyg/'``echo ${release} | [sed -e 's/[.]/-/g']`${versuffix}.dll'
+    soname_spec='`echo ${libname} | sed -e 's/^lib/cyg/'``echo ${release} | sed -e 's/[[.]]/-/g'`${versuffix}.dll'
     postinstall_cmds='dlpath=`bash 2>&1 -c '\''. $dir/${file}i;echo \$dlname'\''`~
       dldir=$destdir/`dirname \$dlpath`~
       test -d \$dldir || mkdir -p \$dldir~
@@ -2089,14 +2204,14 @@
        $rm \$dlpath'
     ;;
   yes,mingw*)
-    library_names_spec='${libname}`echo ${release} | [sed -e 's/[.]/-/g']`${versuffix}.dll'
+    library_names_spec='${libname}`echo ${release} | sed -e 's/[[.]]/-/g'`${versuffix}.dll'
     sys_lib_search_path_spec=`$CC -print-search-dirs | grep "^libraries:" | sed -e "s/^libraries://" -e "s/;/ /g"`
     ;;
   yes,pw32*)
     library_names_spec='`echo ${libname} | sed -e 's/^lib/pw/'``echo ${release} | sed -e 's/[.]/-/g'`${versuffix}.dll'
     ;;
   *)
-    library_names_spec='${libname}`echo ${release} | [sed -e 's/[.]/-/g']`${versuffix}.dll $libname.lib'
+    library_names_spec='${libname}`echo ${release} | sed -e 's/[[.]]/-/g'`${versuffix}.dll $libname.lib'
     ;;
   esac
   dynamic_linker='Win32 ld.exe'
@@ -2254,9 +2369,19 @@
 
 openbsd*)
   version_type=sunos
-  if test "$with_gnu_ld" = yes; then
-    need_lib_prefix=no
-    need_version=no
+  need_lib_prefix=no
+  need_version=no
+  if test -z "`echo __ELF__ | $CC -E - | grep __ELF__`" || test "$host_os-$host_cpu" = "openbsd2.8-powerpc"; then
+    case "$host_os" in
+    openbsd2.[[89]] | openbsd2.[[89]].*)
+      shlibpath_overrides_runpath=no
+      ;;
+    *)
+      shlibpath_overrides_runpath=yes
+      ;;
+    esac
+  else
+    shlibpath_overrides_runpath=yes
   fi
   library_names_spec='${libname}${release}.so$versuffix ${libname}.so$versuffix'
   finish_cmds='PATH="\$PATH:/sbin" ldconfig -m $libdir'
@@ -2367,6 +2492,33 @@
 AC_MSG_CHECKING([if libtool supports shared libraries])
 AC_MSG_RESULT([$can_build_shared])
 
+AC_MSG_CHECKING([whether to build shared libraries])
+test "$can_build_shared" = "no" && enable_shared=no
+
+# On AIX, shared libraries and static libraries use the same namespace, and
+# are all built from PIC.
+case "$host_os" in
+aix3*)
+  test "$enable_shared" = yes && enable_static=no
+  if test -n "$RANLIB"; then
+    archive_cmds="$archive_cmds~\$RANLIB \$lib"
+    postinstall_cmds='$RANLIB $lib'
+  fi
+  ;;
+
+aix4*)
+  if test "$host_cpu" != ia64 && test "$aix_use_runtimelinking" = no ; then
+    test "$enable_shared" = yes && enable_static=no
+  fi
+  ;;
+esac
+AC_MSG_RESULT([$enable_shared])
+
+AC_MSG_CHECKING([whether to build static libraries])
+# Make sure either enable_shared or enable_static is yes.
+test "$enable_shared" = yes || enable_static=yes
+AC_MSG_RESULT([$enable_static])
+
 if test "$hardcode_action" = relink; then
   # Fast installation is not supported
   enable_fast_install=no
@@ -2460,6 +2612,7 @@
     old_striplib striplib file_magic_cmd export_symbols_cmds \
     deplibs_check_method allow_undefined_flag no_undefined_flag \
     finish_cmds finish_eval global_symbol_pipe global_symbol_to_cdecl \
+    global_symbol_to_c_name_address \
     hardcode_libdir_flag_spec hardcode_libdir_separator  \
     sys_lib_search_path_spec sys_lib_dlsearch_path_spec \
     compiler_c_o compiler_o_lo need_locks exclude_expsyms include_expsyms; do
@@ -2526,12 +2679,12 @@
 # Whether or not to build shared libraries.
 build_libtool_libs=$enable_shared
 
-# Whether or not to add -lc for building shared libraries.
-build_libtool_need_lc=$need_lc
-
 # Whether or not to build static libraries.
 build_old_libs=$enable_static
 
+# Whether or not to add -lc for building shared libraries.
+build_libtool_need_lc=$need_lc
+
 # Whether or not to optimize for fast installation.
 fast_install=$enable_fast_install
 
@@ -2697,6 +2850,9 @@
 # Transform the output of nm in a proper C declaration
 global_symbol_to_cdecl=$lt_global_symbol_to_cdecl
 
+# Transform the output of nm in a C name address pair
+global_symbol_to_c_name_address=$lt_global_symbol_to_c_name_address
+
 # This is the shared library runtime path variable.
 runpath_var=$runpath_var
 
@@ -2819,9 +2975,9 @@
 #   return TRUE;
 # }
 # /* ltdll.c ends here */
-        # This is a source program that is used to create import libraries
-        # on Windows for dlls which lack them. Don't remove nor modify the
-        # starting and closing comments
+	# This is a source program that is used to create import libraries
+	# on Windows for dlls which lack them. Don't remove nor modify the
+	# starting and closing comments
 # /* impgen.c starts here */
 # /*   Copyright (C) 1999-2000 Free Software Foundation, Inc.
 #
@@ -3176,6 +3332,7 @@
 AC_REQUIRE([AC_PROG_CC])dnl
 AC_REQUIRE([AC_CANONICAL_HOST])dnl
 AC_REQUIRE([AC_CANONICAL_BUILD])dnl
+AC_REQUIRE([_LT_AC_LIBTOOL_SYS_PATH_SEPARATOR])dnl
 ac_prog=ld
 if test "$GCC" = yes; then
   # Check if gcc -print-prog-name=ld gives a path.
@@ -3189,8 +3346,8 @@
   esac
   case $ac_prog in
     # Accept absolute paths.
-    [[\\/]* | [A-Za-z]:[\\/]*)]
-      [re_direlt='/[^/][^/]*/\.\./']
+    [[\\/]]* | [[A-Za-z]]:[[\\/]]*)
+      re_direlt='/[[^/]][[^/]]*/\.\./'
       # Canonicalize the path of ld
       ac_prog=`echo $ac_prog| sed 's%\\\\%/%g'`
       while echo $ac_prog | grep "$re_direlt" > /dev/null 2>&1; do
@@ -3214,7 +3371,7 @@
 fi
 AC_CACHE_VAL(lt_cv_path_LD,
 [if test -z "$LD"; then
-  IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS="${IFS}${PATH_SEPARATOR-:}"
+  IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=$PATH_SEPARATOR
   for ac_dir in $PATH; do
     test -z "$ac_dir" && ac_dir=.
     if test -f "$ac_dir/$ac_prog" || test -f "$ac_dir/$ac_prog$ac_exeext"; then
@@ -3278,7 +3435,7 @@
 # `unknown' -- same as none, but documents that we really don't know.
 # 'pass_all' -- all dependencies passed with no checks.
 # 'test_compile' -- check by making test program.
-# ['file_magic [regex]'] -- check by looking for files in library path
+# 'file_magic [[regex]]' -- check by looking for files in library path
 # which responds to the $file_magic_cmd with a given egrep regex.
 # If you have `file' or equivalent on your system and you're not sure
 # whether `pass_all' will *always* work, you probably want this one.
@@ -3293,7 +3450,7 @@
   ;;
 
 bsdi4*)
-  [lt_cv_deplibs_check_method='file_magic ELF [0-9][0-9]*-bit [ML]SB (shared object|dynamic lib)']
+  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib)'
   lt_cv_file_magic_cmd='/usr/bin/file -L'
   lt_cv_file_magic_test_file=/shlib/libc.so
   ;;
@@ -3307,7 +3464,7 @@
   lt_cv_deplibs_check_method='file_magic Mach-O dynamically linked shared library'
   lt_cv_file_magic_cmd='/usr/bin/file -L'
   case "$host_os" in
-  rhapsody* | darwin1.[012])
+  rhapsody* | darwin1.[[012]])
     lt_cv_file_magic_test_file=`echo /System/Library/Frameworks/System.framework/Versions/*/System | head -1`
     ;;
   *) # Darwin 1.3 on
@@ -3322,7 +3479,7 @@
     i*86 )
       # Not sure whether the presence of OpenBSD here was a mistake.
       # Let's accept both of them until this is cleared up.
-      [lt_cv_deplibs_check_method='file_magic (FreeBSD|OpenBSD)/i[3-9]86 (compact )?demand paged shared library']
+      lt_cv_deplibs_check_method='file_magic (FreeBSD|OpenBSD)/i[[3-9]]86 (compact )?demand paged shared library'
       lt_cv_file_magic_cmd=/usr/bin/file
       lt_cv_file_magic_test_file=`echo /usr/lib/libc.so.*`
       ;;
@@ -3337,7 +3494,7 @@
   ;;
 
 hpux10.20*|hpux11*)
-  [lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|PA-RISC[0-9].[0-9]) shared library']
+  lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|PA-RISC[[0-9]].[[0-9]]) shared library'
   lt_cv_file_magic_cmd=/usr/bin/file
   lt_cv_file_magic_test_file=/usr/lib/libc.sl
   ;;
@@ -3356,7 +3513,7 @@
     *) libmagic=never-match;;
     esac
     # this will be overridden with pass_all, but let us keep it just in case
-    [lt_cv_deplibs_check_method="file_magic ELF ${libmagic} MSB mips-[1234] dynamic lib MIPS - version 1"]
+    lt_cv_deplibs_check_method="file_magic ELF ${libmagic} MSB mips-[[1234]] dynamic lib MIPS - version 1"
     ;;
   esac
   lt_cv_file_magic_test_file=`echo /lib${libsuff}/libc.so*`
@@ -3366,29 +3523,39 @@
 # This must be Linux ELF.
 linux-gnu*)
   case $host_cpu in
-  alpha* | i*86 | powerpc* | sparc* | ia64* )
+  alpha* | hppa* | i*86 | powerpc* | sparc* | ia64* )
     lt_cv_deplibs_check_method=pass_all ;;
   *)
     # glibc up to 2.1.1 does not perform some relocations on ARM
-    [lt_cv_deplibs_check_method='file_magic ELF [0-9][0-9]*-bit [LM]SB (shared object|dynamic lib )' ;;]
+    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB (shared object|dynamic lib )' ;;
   esac
   lt_cv_file_magic_test_file=`echo /lib/libc.so* /lib/libc-*.so`
   ;;
 
 netbsd*)
   if echo __ELF__ | $CC -E - | grep __ELF__ > /dev/null; then
-    [lt_cv_deplibs_check_method='match_pattern /lib[^/\.]+\.so\.[0-9]+\.[0-9]+$']
+    lt_cv_deplibs_check_method='match_pattern /lib[[^/\.]]+\.so\.[[0-9]]+\.[[0-9]]+$'
   else
-    [lt_cv_deplibs_check_method='match_pattern /lib[^/\.]+\.so$']
+    lt_cv_deplibs_check_method='match_pattern /lib[[^/\.]]+\.so$'
   fi
   ;;
 
 newos6*)
-  [lt_cv_deplibs_check_method='file_magic ELF [0-9][0-9]*-bit [ML]SB (executable|dynamic lib)']
+  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (executable|dynamic lib)'
   lt_cv_file_magic_cmd=/usr/bin/file
   lt_cv_file_magic_test_file=/usr/lib/libnls.so
   ;;
 
+openbsd*)
+  lt_cv_file_magic_cmd=/usr/bin/file
+  lt_cv_file_magic_test_file=`echo /usr/lib/libc.so.*`
+  if test -z "`echo __ELF__ | $CC -E - | grep __ELF__`" || test "$host_os-$host_cpu" = "openbsd2.8-powerpc"; then
+    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB shared object'
+  else
+    lt_cv_deplibs_check_method='file_magic OpenBSD.* shared library'
+  fi
+  ;;
+
 osf3* | osf4* | osf5*)
   # this will be overridden with pass_all, but let us keep it just in case
   lt_cv_deplibs_check_method='file_magic COFF format alpha shared library'
@@ -3405,14 +3572,14 @@
   lt_cv_file_magic_test_file=/lib/libc.so
   ;;
 
-[sysv5uw[78]* | sysv4*uw2*)]
+sysv5uw[[78]]* | sysv4*uw2*)
   lt_cv_deplibs_check_method=pass_all
   ;;
 
 sysv4 | sysv4.2uw2* | sysv4.3* | sysv5*)
   case $host_vendor in
   motorola)
-    [lt_cv_deplibs_check_method='file_magic ELF [0-9][0-9]*-bit [ML]SB (shared object|dynamic lib) M[0-9][0-9]* Version [0-9]']
+    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib) M[[0-9]][[0-9]]* Version [[0-9]]'
     lt_cv_file_magic_test_file=`echo /usr/lib/libc.so*`
     ;;
   ncr)
@@ -3420,11 +3587,11 @@
     ;;
   sequent)
     lt_cv_file_magic_cmd='/bin/file'
-    [lt_cv_deplibs_check_method='file_magic ELF [0-9][0-9]*-bit [LM]SB (shared object|dynamic lib )']
+    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB (shared object|dynamic lib )'
     ;;
   sni)
     lt_cv_file_magic_cmd='/bin/file'
-    [lt_cv_deplibs_check_method="file_magic ELF [0-9][0-9]*-bit [LM]SB dynamic lib"]
+    lt_cv_deplibs_check_method="file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB dynamic lib"
     lt_cv_file_magic_test_file=/lib/libc.so
     ;;
   esac
@@ -3438,13 +3605,14 @@
 
 # AC_PROG_NM - find the path to a BSD-compatible name lister
 AC_DEFUN([AC_PROG_NM],
-[AC_MSG_CHECKING([for BSD-compatible nm])
+[AC_REQUIRE([_LT_AC_LIBTOOL_SYS_PATH_SEPARATOR])dnl
+AC_MSG_CHECKING([for BSD-compatible nm])
 AC_CACHE_VAL(lt_cv_path_NM,
 [if test -n "$NM"; then
   # Let the user override the test.
   lt_cv_path_NM="$NM"
 else
-  IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS="${IFS}${PATH_SEPARATOR-:}"
+  IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=$PATH_SEPARATOR
   for ac_dir in $PATH /usr/ccs/bin /usr/ucb /bin; do
     test -z "$ac_dir" && ac_dir=.
     tmp_nm=$ac_dir/${ac_tool_prefix}nm
diff -uNr gmime-1.90.0/configure.in gmime/configure.in
--- gmime-1.90.0/configure.in	Wed Jun 12 05:20:51 2002
+++ gmime/configure.in	Sun Jul 14 08:08:01 2002
@@ -64,6 +64,8 @@
 
 AC_CHECK_FUNCS(memchr memrchr memmem strlen strcpy strncpy strlcpy stpcpy strcat strncat strlcat strchr strrchr strnstr strstr strncasestr strcasestr strncasecmp strcasecmp)
 
+AC_CHECK_FUNCS(gmtime_r)
+
 dnl Specific dir for HTML output ?
 AC_ARG_WITH(html-dir, [  --with-html-dir=PATH path to installed docs ])
 if test "x$with_html_dir" = "x" ; then
diff -uNr gmime-1.90.0/doc/sgml/gmime-charset.sgml gmime/doc/sgml/gmime-charset.sgml
--- gmime-1.90.0/doc/sgml/gmime-charset.sgml	Thu Jan  1 01:00:00 1970
+++ gmime/doc/sgml/gmime-charset.sgml	Thu May 23 07:21:37 2002
@@ -0,0 +1,110 @@
+<refentry id="gmime-gmime-charset">
+<refmeta>
+<refentrytitle>gmime-charset</refentrytitle>
+<manvolnum>3</manvolnum>
+<refmiscinfo>GMIME Library</refmiscinfo>
+</refmeta>
+
+<refnamediv>
+<refname>gmime-charset</refname><refpurpose></refpurpose>
+</refnamediv>
+
+<refsynopsisdiv><title>Synopsis</title>
+<synopsis>
+
+
+
+void        <link linkend="g-mime-charset-init">g_mime_charset_init</link>             (void);
+const char* <link linkend="g-mime-charset-locale-name">g_mime_charset_locale_name</link>      (void);
+const char* <link linkend="g-mime-charset-name">g_mime_charset_name</link>             (const char *charset);
+const char* <link linkend="g-mime-charset-best">g_mime_charset_best</link>             (const char *in,
+                                             <link linkend="size-t">size_t</link> inlen);
+</synopsis>
+</refsynopsisdiv>
+
+
+
+
+
+<refsect1>
+<title>Description</title>
+<para>
+
+</para>
+</refsect1>
+
+<refsect1>
+<title>Details</title>
+<refsect2>
+<title><anchor id="g-mime-charset-init">g_mime_charset_init ()</title>
+<programlisting>void        g_mime_charset_init             (void);</programlisting>
+<para>
+Initializes the locale charset variable for later calls to
+gmime_charset_locale_name. Only really needs to be called for non-
+iso-8859-1 locales.</para>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="g-mime-charset-locale-name">g_mime_charset_locale_name ()</title>
+<programlisting>const char* g_mime_charset_locale_name      (void);</programlisting>
+<para>
+Gets the user's locale charset (or iso-8859-1 by default).</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the user's locale charset (or iso-8859-1 by default).
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-charset-name">g_mime_charset_name ()</title>
+<programlisting>const char* g_mime_charset_name             (const char *charset);</programlisting>
+<para>
+Attempts to find an iconv-friendly charset name for <parameter>charset</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>charset</parameter>&nbsp;:</entry>
+<entry> charset name
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>an iconv-friendly charset name for <parameter>charset</parameter>.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-charset-best">g_mime_charset_best ()</title>
+<programlisting>const char* g_mime_charset_best             (const char *in,
+                                             <link linkend="size-t">size_t</link> inlen);</programlisting>
+<para>
+Computes the best charset to use to encode this text buffer.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
+<entry> a UTF-8 text buffer
+</entry></row>
+<row><entry align="right"><parameter>inlen</parameter>&nbsp;:</entry>
+<entry> length of <parameter>in</parameter>
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the charset name best suited for the input text or <literal>NULL</literal> if
+it is US-ASCII safe.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+
+</refsect1>
+
+
+
+
+</refentry>
diff -uNr gmime-1.90.0/doc/sgml/gmime-content-type.sgml gmime/doc/sgml/gmime-content-type.sgml
--- gmime-1.90.0/doc/sgml/gmime-content-type.sgml	Thu Jan  1 01:00:00 1970
+++ gmime/doc/sgml/gmime-content-type.sgml	Thu May 23 07:21:37 2002
@@ -0,0 +1,223 @@
+<refentry id="gmime-gmime-content-type">
+<refmeta>
+<refentrytitle>gmime-content-type</refentrytitle>
+<manvolnum>3</manvolnum>
+<refmiscinfo>GMIME Library</refmiscinfo>
+</refmeta>
+
+<refnamediv>
+<refname>gmime-content-type</refname><refpurpose></refpurpose>
+</refnamediv>
+
+<refsynopsisdiv><title>Synopsis</title>
+<synopsis>
+
+
+
+struct      <link linkend="GMimeContentType">GMimeContentType</link>;
+<link linkend="GMimeContentType">GMimeContentType</link>* <link linkend="g-mime-content-type-new">g_mime_content_type_new</link>   (const char *type,
+                                             const char *subtype);
+<link linkend="GMimeContentType">GMimeContentType</link>* <link linkend="g-mime-content-type-new-from-string">g_mime_content_type_new_from_string</link>
+                                            (const char *string);
+void        <link linkend="g-mime-content-type-destroy">g_mime_content_type_destroy</link>     (<link linkend="GMimeContentType">GMimeContentType</link> *mime_type);
+char*       <link linkend="g-mime-content-type-to-string">g_mime_content_type_to_string</link>   (const <link linkend="GMimeContentType">GMimeContentType</link> *mime_type);
+<link linkend="gboolean">gboolean</link>    <link linkend="g-mime-content-type-is-type">g_mime_content_type_is_type</link>     (const <link linkend="GMimeContentType">GMimeContentType</link> *mime_type,
+                                             const char *type,
+                                             const char *subtype);
+void        <link linkend="g-mime-content-type-set-parameter">g_mime_content_type_set_parameter</link>
+                                            (<link linkend="GMimeContentType">GMimeContentType</link> *mime_type,
+                                             const char *attribute,
+                                             const char *value);
+const char* <link linkend="g-mime-content-type-get-parameter">g_mime_content_type_get_parameter</link>
+                                            (const <link linkend="GMimeContentType">GMimeContentType</link> *mime_type,
+                                             const char *attribute);
+</synopsis>
+</refsynopsisdiv>
+
+
+
+
+
+<refsect1>
+<title>Description</title>
+<para>
+
+</para>
+</refsect1>
+
+<refsect1>
+<title>Details</title>
+<refsect2>
+<title><anchor id="GMimeContentType">struct GMimeContentType</title>
+<programlisting>struct GMimeContentType {
+	char *type;
+	char *subtype;
+	
+	GMimeParam *params;
+	GHashTable *param_hash;
+};
+</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="g-mime-content-type-new">g_mime_content_type_new ()</title>
+<programlisting><link linkend="GMimeContentType">GMimeContentType</link>* g_mime_content_type_new   (const char *type,
+                                             const char *subtype);</programlisting>
+<para>
+Creates a Content-Type object with type <parameter>type</parameter> and subtype <parameter>subtype</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>type</parameter>&nbsp;:</entry>
+<entry> MIME type (or NULL for "text")
+</entry></row>
+<row><entry align="right"><parameter>subtype</parameter>&nbsp;:</entry>
+<entry> MIME subtype (or NULL for "plain")
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a new MIME Content-Type object.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-content-type-new-from-string">g_mime_content_type_new_from_string ()</title>
+<programlisting><link linkend="GMimeContentType">GMimeContentType</link>* g_mime_content_type_new_from_string
+                                            (const char *string);</programlisting>
+<para>
+Constructs a new Content-Type object based on the input string.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>string</parameter>&nbsp;:</entry>
+<entry> input string containing a content-type (and params)
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a new MIME Content-Type based on the input string.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-content-type-destroy">g_mime_content_type_destroy ()</title>
+<programlisting>void        g_mime_content_type_destroy     (<link linkend="GMimeContentType">GMimeContentType</link> *mime_type);</programlisting>
+<para>
+Destroys the given MIME Content-Type object.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mime_type</parameter>&nbsp;:</entry>
+<entry> MIME Content-Type object to destroy
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-content-type-to-string">g_mime_content_type_to_string ()</title>
+<programlisting>char*       g_mime_content_type_to_string   (const <link linkend="GMimeContentType">GMimeContentType</link> *mime_type);</programlisting>
+<para>
+Allocates a string buffer containing the type and subtype defined
+by the <parameter>mime_type</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mime_type</parameter>&nbsp;:</entry>
+<entry> MIME Content-Type
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>an allocated string containing the type and subtype of the
+content-type in the format: type/subtype.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-content-type-is-type">g_mime_content_type_is_type ()</title>
+<programlisting><link linkend="gboolean">gboolean</link>    g_mime_content_type_is_type     (const <link linkend="GMimeContentType">GMimeContentType</link> *mime_type,
+                                             const char *type,
+                                             const char *subtype);</programlisting>
+<para>
+Compares the given type and subtype with that of the given mime
+type object.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mime_type</parameter>&nbsp;:</entry>
+<entry> MIME Content-Type
+</entry></row>
+<row><entry align="right"><parameter>type</parameter>&nbsp;:</entry>
+<entry> MIME type to compare against
+</entry></row>
+<row><entry align="right"><parameter>subtype</parameter>&nbsp;:</entry>
+<entry> MIME subtype to compare against
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>TRUE if the MIME types match or FALSE otherwise. You may
+use "*" in place of <parameter>type</parameter> and/or <parameter>subtype</parameter> as a wilcard.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-content-type-set-parameter">g_mime_content_type_set_parameter ()</title>
+<programlisting>void        g_mime_content_type_set_parameter
+                                            (<link linkend="GMimeContentType">GMimeContentType</link> *mime_type,
+                                             const char *attribute,
+                                             const char *value);</programlisting>
+<para>
+Sets a parameter on the Content-Type.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mime_type</parameter>&nbsp;:</entry>
+<entry> MIME Content-Type
+</entry></row>
+<row><entry align="right"><parameter>attribute</parameter>&nbsp;:</entry>
+<entry> parameter name (aka attribute)
+</entry></row>
+<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
+<entry> parameter value
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-content-type-get-parameter">g_mime_content_type_get_parameter ()</title>
+<programlisting>const char* g_mime_content_type_get_parameter
+                                            (const <link linkend="GMimeContentType">GMimeContentType</link> *mime_type,
+                                             const char *attribute);</programlisting>
+<para>
+Gets the parameter value specified by <parameter>attribute</parameter> if it's available.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mime_type</parameter>&nbsp;:</entry>
+<entry> MIME Content-Type
+</entry></row>
+<row><entry align="right"><parameter>attribute</parameter>&nbsp;:</entry>
+<entry> parameter name (aka attribute)
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a const pointer to the paramer value specified by
+<parameter>attribute</parameter> or <literal>NULL</literal> on fail.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+
+</refsect1>
+
+
+
+
+</refentry>
diff -uNr gmime-1.90.0/doc/sgml/gmime-data-wrapper.sgml gmime/doc/sgml/gmime-data-wrapper.sgml
--- gmime-1.90.0/doc/sgml/gmime-data-wrapper.sgml	Thu Jan  1 01:00:00 1970
+++ gmime/doc/sgml/gmime-data-wrapper.sgml	Thu May 23 07:21:37 2002
@@ -0,0 +1,226 @@
+<refentry id="gmime-gmime-data-wrapper">
+<refmeta>
+<refentrytitle>gmime-data-wrapper</refentrytitle>
+<manvolnum>3</manvolnum>
+<refmiscinfo>GMIME Library</refmiscinfo>
+</refmeta>
+
+<refnamediv>
+<refname>gmime-data-wrapper</refname><refpurpose></refpurpose>
+</refnamediv>
+
+<refsynopsisdiv><title>Synopsis</title>
+<synopsis>
+
+
+
+struct      <link linkend="GMimeDataWrapper">GMimeDataWrapper</link>;
+<link linkend="GMimeDataWrapper">GMimeDataWrapper</link>* <link linkend="g-mime-data-wrapper-new">g_mime_data_wrapper_new</link>   (void);
+<link linkend="GMimeDataWrapper">GMimeDataWrapper</link>* <link linkend="g-mime-data-wrapper-new-with-stream">g_mime_data_wrapper_new_with_stream</link>
+                                            (<link linkend="GMimeStream">GMimeStream</link> *stream,
+                                             <link linkend="GMimePartEncodingType">GMimePartEncodingType</link> encoding);
+void        <link linkend="g-mime-data-wrapper-destroy">g_mime_data_wrapper_destroy</link>     (<link linkend="GMimeDataWrapper">GMimeDataWrapper</link> *wrapper);
+void        <link linkend="g-mime-data-wrapper-set-stream">g_mime_data_wrapper_set_stream</link>  (<link linkend="GMimeDataWrapper">GMimeDataWrapper</link> *wrapper,
+                                             <link linkend="GMimeStream">GMimeStream</link> *stream);
+<link linkend="GMimeStream">GMimeStream</link>* <link linkend="g-mime-data-wrapper-get-stream">g_mime_data_wrapper_get_stream</link> (<link linkend="GMimeDataWrapper">GMimeDataWrapper</link> *wrapper);
+void        <link linkend="g-mime-data-wrapper-set-encoding">g_mime_data_wrapper_set_encoding</link>
+                                            (<link linkend="GMimeDataWrapper">GMimeDataWrapper</link> *wrapper,
+                                             <link linkend="GMimePartEncodingType">GMimePartEncodingType</link> encoding);
+<link linkend="GMimePartEncodingType">GMimePartEncodingType</link> <link linkend="g-mime-data-wrapper-get-encoding">g_mime_data_wrapper_get_encoding</link>
+                                            (<link linkend="GMimeDataWrapper">GMimeDataWrapper</link> *wrapper);
+<link linkend="ssize-t">ssize_t</link>     <link linkend="g-mime-data-wrapper-write-to-stream">g_mime_data_wrapper_write_to_stream</link>
+                                            (<link linkend="GMimeDataWrapper">GMimeDataWrapper</link> *wrapper,
+                                             <link linkend="GMimeStream">GMimeStream</link> *stream);
+</synopsis>
+</refsynopsisdiv>
+
+
+
+
+
+<refsect1>
+<title>Description</title>
+<para>
+
+</para>
+</refsect1>
+
+<refsect1>
+<title>Details</title>
+<refsect2>
+<title><anchor id="GMimeDataWrapper">struct GMimeDataWrapper</title>
+<programlisting>struct GMimeDataWrapper {
+	GMimePartEncodingType encoding;
+	GMimeStream *stream;
+};
+</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="g-mime-data-wrapper-new">g_mime_data_wrapper_new ()</title>
+<programlisting><link linkend="GMimeDataWrapper">GMimeDataWrapper</link>* g_mime_data_wrapper_new   (void);</programlisting>
+<para>
+Creates a new GMimeDataWrapper object.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a new data wrapper object.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-data-wrapper-new-with-stream">g_mime_data_wrapper_new_with_stream ()</title>
+<programlisting><link linkend="GMimeDataWrapper">GMimeDataWrapper</link>* g_mime_data_wrapper_new_with_stream
+                                            (<link linkend="GMimeStream">GMimeStream</link> *stream,
+                                             <link linkend="GMimePartEncodingType">GMimePartEncodingType</link> encoding);</programlisting>
+<para>
+Creates a new GMimeDataWrapper object around <parameter>stream</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
+<entry> stream
+</entry></row>
+<row><entry align="right"><parameter>encoding</parameter>&nbsp;:</entry>
+<entry> stream's encoding
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a data wrapper around <parameter>stream</parameter>. Since the wrapper owns it's
+own reference on the stream, caller is responsible for unrefing
+it's own copy.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-data-wrapper-destroy">g_mime_data_wrapper_destroy ()</title>
+<programlisting>void        g_mime_data_wrapper_destroy     (<link linkend="GMimeDataWrapper">GMimeDataWrapper</link> *wrapper);</programlisting>
+<para>
+Destroys the data wrapper and unref's its internal stream.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>wrapper</parameter>&nbsp;:</entry>
+<entry> data wrapper
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-data-wrapper-set-stream">g_mime_data_wrapper_set_stream ()</title>
+<programlisting>void        g_mime_data_wrapper_set_stream  (<link linkend="GMimeDataWrapper">GMimeDataWrapper</link> *wrapper,
+                                             <link linkend="GMimeStream">GMimeStream</link> *stream);</programlisting>
+<para>
+Replaces the wrapper's internal stream with <parameter>stream</parameter>.
+Note: caller is responsible for it's own reference on
+<parameter>stream</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>wrapper</parameter>&nbsp;:</entry>
+<entry> data wrapper
+</entry></row>
+<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
+<entry> stream
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-data-wrapper-get-stream">g_mime_data_wrapper_get_stream ()</title>
+<programlisting><link linkend="GMimeStream">GMimeStream</link>* g_mime_data_wrapper_get_stream (<link linkend="GMimeDataWrapper">GMimeDataWrapper</link> *wrapper);</programlisting>
+<para>
+Gets a reference to the stream wrapped by <parameter>wrapper</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>wrapper</parameter>&nbsp;:</entry>
+<entry> data wrapper
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a reference to the internal stream. Caller is responsable
+for unrefing it.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-data-wrapper-set-encoding">g_mime_data_wrapper_set_encoding ()</title>
+<programlisting>void        g_mime_data_wrapper_set_encoding
+                                            (<link linkend="GMimeDataWrapper">GMimeDataWrapper</link> *wrapper,
+                                             <link linkend="GMimePartEncodingType">GMimePartEncodingType</link> encoding);</programlisting>
+<para>
+Sets the encoding type of the internal stream.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>wrapper</parameter>&nbsp;:</entry>
+<entry> data wrapper
+</entry></row>
+<row><entry align="right"><parameter>encoding</parameter>&nbsp;:</entry>
+<entry> encoding
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-data-wrapper-get-encoding">g_mime_data_wrapper_get_encoding ()</title>
+<programlisting><link linkend="GMimePartEncodingType">GMimePartEncodingType</link> g_mime_data_wrapper_get_encoding
+                                            (<link linkend="GMimeDataWrapper">GMimeDataWrapper</link> *wrapper);</programlisting>
+<para>
+Gets the encoding type of the stream wrapped by <parameter>wrapper</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>wrapper</parameter>&nbsp;:</entry>
+<entry> data wrapper
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the encoding type of the internal stream.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-data-wrapper-write-to-stream">g_mime_data_wrapper_write_to_stream ()</title>
+<programlisting><link linkend="ssize-t">ssize_t</link>     g_mime_data_wrapper_write_to_stream
+                                            (<link linkend="GMimeDataWrapper">GMimeDataWrapper</link> *wrapper,
+                                             <link linkend="GMimeStream">GMimeStream</link> *stream);</programlisting>
+<para>
+Write's the raw (decoded) data to the output stream.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>wrapper</parameter>&nbsp;:</entry>
+<entry> data wrapper
+</entry></row>
+<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
+<entry> output stream
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes written or -1 on failure.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+
+</refsect1>
+
+
+
+
+</refentry>
diff -uNr gmime-1.90.0/doc/sgml/gmime-disposition.sgml gmime/doc/sgml/gmime-disposition.sgml
--- gmime-1.90.0/doc/sgml/gmime-disposition.sgml	Thu Jan  1 01:00:00 1970
+++ gmime/doc/sgml/gmime-disposition.sgml	Thu May 23 07:21:37 2002
@@ -0,0 +1,231 @@
+<refentry id="gmime-gmime-disposition">
+<refmeta>
+<refentrytitle>gmime-disposition</refentrytitle>
+<manvolnum>3</manvolnum>
+<refmiscinfo>GMIME Library</refmiscinfo>
+</refmeta>
+
+<refnamediv>
+<refname>gmime-disposition</refname><refpurpose></refpurpose>
+</refnamediv>
+
+<refsynopsisdiv><title>Synopsis</title>
+<synopsis>
+
+
+
+#define     <link linkend="GMIME-DISPOSITION-ATTACHMENT-CAPS">GMIME_DISPOSITION_ATTACHMENT</link>
+#define     <link linkend="GMIME-DISPOSITION-INLINE-CAPS">GMIME_DISPOSITION_INLINE</link>
+struct      <link linkend="GMimeDisposition">GMimeDisposition</link>;
+<link linkend="GMimeDisposition">GMimeDisposition</link>* <link linkend="g-mime-disposition-new">g_mime_disposition_new</link>    (const char *disposition);
+void        <link linkend="g-mime-disposition-destroy">g_mime_disposition_destroy</link>      (<link linkend="GMimeDisposition">GMimeDisposition</link> *disposition);
+void        <link linkend="g-mime-disposition-set">g_mime_disposition_set</link>          (<link linkend="GMimeDisposition">GMimeDisposition</link> *disposition,
+                                             const char *value);
+const char* <link linkend="g-mime-disposition-get">g_mime_disposition_get</link>          (<link linkend="GMimeDisposition">GMimeDisposition</link> *disposition);
+void        <link linkend="g-mime-disposition-add-parameter">g_mime_disposition_add_parameter</link>
+                                            (<link linkend="GMimeDisposition">GMimeDisposition</link> *disposition,
+                                             const char *attribute,
+                                             const char *value);
+const char* <link linkend="g-mime-disposition-get-parameter">g_mime_disposition_get_parameter</link>
+                                            (<link linkend="GMimeDisposition">GMimeDisposition</link> *disposition,
+                                             const char *attribute);
+char*       <link linkend="g-mime-disposition-header">g_mime_disposition_header</link>       (<link linkend="GMimeDisposition">GMimeDisposition</link> *disposition,
+                                             <link linkend="gboolean">gboolean</link> fold);
+</synopsis>
+</refsynopsisdiv>
+
+
+
+
+
+<refsect1>
+<title>Description</title>
+<para>
+
+</para>
+</refsect1>
+
+<refsect1>
+<title>Details</title>
+<refsect2>
+<title><anchor id="GMIME-DISPOSITION-ATTACHMENT-CAPS">GMIME_DISPOSITION_ATTACHMENT</title>
+<programlisting>#define     GMIME_DISPOSITION_ATTACHMENT</programlisting>
+<para>
+Standard attachment disposition.</para>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="GMIME-DISPOSITION-INLINE-CAPS">GMIME_DISPOSITION_INLINE</title>
+<programlisting>#define     GMIME_DISPOSITION_INLINE</programlisting>
+<para>
+Standard inline disposition.</para>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="GMimeDisposition">struct GMimeDisposition</title>
+<programlisting>struct GMimeDisposition {
+	char *disposition;
+	GMimeParam *params;
+	GHashTable *param_hash;
+};
+</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="g-mime-disposition-new">g_mime_disposition_new ()</title>
+<programlisting><link linkend="GMimeDisposition">GMimeDisposition</link>* g_mime_disposition_new    (const char *disposition);</programlisting>
+<para>
+Creates a new GMimeDisposition object.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>disposition</parameter>&nbsp;:</entry>
+<entry> disposition header (and params)
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a new disposition object
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-disposition-destroy">g_mime_disposition_destroy ()</title>
+<programlisting>void        g_mime_disposition_destroy      (<link linkend="GMimeDisposition">GMimeDisposition</link> *disposition);</programlisting>
+<para>
+Destroy the disposition object.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>disposition</parameter>&nbsp;:</entry>
+<entry> disposition object
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-disposition-set">g_mime_disposition_set ()</title>
+<programlisting>void        g_mime_disposition_set          (<link linkend="GMimeDisposition">GMimeDisposition</link> *disposition,
+                                             const char *value);</programlisting>
+<para>
+Sets the disposition to <parameter>value</parameter> which may be one of
+GMIME_DISPOSITION_ATTACHMENT or GMIME_DISPOSITION_INLINE or, by your
+choice, any other string which would indicate how the MIME part
+should be displayed by the MUA.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>disposition</parameter>&nbsp;:</entry>
+<entry> disposition object
+</entry></row>
+<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
+<entry> disposition value
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-disposition-get">g_mime_disposition_get ()</title>
+<programlisting>const char* g_mime_disposition_get          (<link linkend="GMimeDisposition">GMimeDisposition</link> *disposition);</programlisting>
+<para>
+Gets the disposition or <literal>NULL</literal> on fail.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>disposition</parameter>&nbsp;:</entry>
+<entry> disposition object
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the disposition string which is probably one of
+GMIME_DISPOSITION_ATTACHMENT or GMIME_DISPOSITION_INLINE.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-disposition-add-parameter">g_mime_disposition_add_parameter ()</title>
+<programlisting>void        g_mime_disposition_add_parameter
+                                            (<link linkend="GMimeDisposition">GMimeDisposition</link> *disposition,
+                                             const char *attribute,
+                                             const char *value);</programlisting>
+<para>
+Adds a new parameter of name <parameter>name</parameter> and value <parameter>value</parameter> to the
+disposition.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>disposition</parameter>&nbsp;:</entry>
+<entry> disposition object
+</entry></row>
+<row><entry align="right"><parameter>attribute</parameter>&nbsp;:</entry>
+<entry> parameter name
+</entry></row>
+<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
+<entry> parameter value
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-disposition-get-parameter">g_mime_disposition_get_parameter ()</title>
+<programlisting>const char* g_mime_disposition_get_parameter
+                                            (<link linkend="GMimeDisposition">GMimeDisposition</link> *disposition,
+                                             const char *attribute);</programlisting>
+<para>
+Gets the value of the parameter <parameter>attribute</parameter>, or <literal>NULL</literal> on fail.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>disposition</parameter>&nbsp;:</entry>
+<entry> disposition object
+</entry></row>
+<row><entry align="right"><parameter>attribute</parameter>&nbsp;:</entry>
+<entry> parameter name
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the value of the parameter of name <parameter>attribute</parameter>.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-disposition-header">g_mime_disposition_header ()</title>
+<programlisting>char*       g_mime_disposition_header       (<link linkend="GMimeDisposition">GMimeDisposition</link> *disposition,
+                                             <link linkend="gboolean">gboolean</link> fold);</programlisting>
+<para>
+Allocates a string buffer containing the Content-Disposition header
+represented by the disposition object <parameter>disposition</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>disposition</parameter>&nbsp;:</entry>
+<entry> disposition object
+</entry></row>
+<row><entry align="right"><parameter>fold</parameter>&nbsp;:</entry>
+<entry> fold header if needed
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a string containing the disposition header
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+
+</refsect1>
+
+
+
+
+</refentry>
diff -uNr gmime-1.90.0/doc/sgml/gmime-doc.bottom gmime/doc/sgml/gmime-doc.bottom
--- gmime-1.90.0/doc/sgml/gmime-doc.bottom	Thu Jan  1 01:00:00 1970
+++ gmime/doc/sgml/gmime-doc.bottom	Thu May 23 07:21:37 2002
@@ -0,0 +1,33 @@
+    &gmime-gmime;
+    &gmime-gmime-stream;
+    &gmime-gmime-stream-buffer;
+    &gmime-gmime-stream-cat;
+    &gmime-gmime-stream-file;
+    &gmime-gmime-stream-fs;
+    &gmime-gmime-stream-mem;
+    &gmime-gmime-stream-mmap;
+    &gmime-gmime-stream-null;
+    &gmime-gmime-stream-filter;
+    &gmime-gmime-filter;
+    &gmime-gmime-filter-basic;
+    &gmime-gmime-filter-charset;
+    &gmime-gmime-filter-crlf;
+    &gmime-gmime-filter-from;
+    &gmime-gmime-filter-html;
+    &gmime-gmime-filter-yenc;
+    &gmime-gmime-data-wrapper;
+    &gmime-gmime-param;
+    &gmime-gmime-header;
+    &gmime-gmime-content-type;
+    &gmime-gmime-disposition;
+    &gmime-gmime-object;
+    &gmime-gmime-part;
+    &gmime-gmime-multipart;
+    &gmime-gmime-message;
+    &gmime-gmime-message-partial;
+    &gmime-gmime-utils;
+    &gmime-internet-address;
+    &gmime-gmime-parser;
+    &gmime-gmime-charset;
+    &gmime-gmime-iconv;
+    &gmime-gmime-iconv-utils;
diff -uNr gmime-1.90.0/doc/sgml/gmime-doc.top gmime/doc/sgml/gmime-doc.top
--- gmime-1.90.0/doc/sgml/gmime-doc.top	Thu Jan  1 01:00:00 1970
+++ gmime/doc/sgml/gmime-doc.top	Thu May 23 07:21:37 2002
@@ -0,0 +1,33 @@
+<!ENTITY gmime-gmime SYSTEM "sgml/gmime.sgml">
+<!ENTITY gmime-gmime-stream SYSTEM "sgml/gmime-stream.sgml">
+<!ENTITY gmime-gmime-stream-buffer SYSTEM "sgml/gmime-stream-buffer.sgml">
+<!ENTITY gmime-gmime-stream-cat SYSTEM "sgml/gmime-stream-cat.sgml">
+<!ENTITY gmime-gmime-stream-file SYSTEM "sgml/gmime-stream-file.sgml">
+<!ENTITY gmime-gmime-stream-fs SYSTEM "sgml/gmime-stream-fs.sgml">
+<!ENTITY gmime-gmime-stream-mem SYSTEM "sgml/gmime-stream-mem.sgml">
+<!ENTITY gmime-gmime-stream-mmap SYSTEM "sgml/gmime-stream-mmap.sgml">
+<!ENTITY gmime-gmime-stream-null SYSTEM "sgml/gmime-stream-null.sgml">
+<!ENTITY gmime-gmime-stream-filter SYSTEM "sgml/gmime-stream-filter.sgml">
+<!ENTITY gmime-gmime-filter SYSTEM "sgml/gmime-filter.sgml">
+<!ENTITY gmime-gmime-filter-basic SYSTEM "sgml/gmime-filter-basic.sgml">
+<!ENTITY gmime-gmime-filter-charset SYSTEM "sgml/gmime-filter-charset.sgml">
+<!ENTITY gmime-gmime-filter-crlf SYSTEM "sgml/gmime-filter-crlf.sgml">
+<!ENTITY gmime-gmime-filter-from SYSTEM "sgml/gmime-filter-from.sgml">
+<!ENTITY gmime-gmime-filter-html SYSTEM "sgml/gmime-filter-html.sgml">
+<!ENTITY gmime-gmime-filter-yenc SYSTEM "sgml/gmime-filter-yenc.sgml">
+<!ENTITY gmime-gmime-data-wrapper SYSTEM "sgml/gmime-data-wrapper.sgml">
+<!ENTITY gmime-gmime-param SYSTEM "sgml/gmime-param.sgml">
+<!ENTITY gmime-gmime-header SYSTEM "sgml/gmime-header.sgml">
+<!ENTITY gmime-gmime-content-type SYSTEM "sgml/gmime-content-type.sgml">
+<!ENTITY gmime-gmime-disposition SYSTEM "sgml/gmime-disposition.sgml">
+<!ENTITY gmime-gmime-object SYSTEM "sgml/gmime-object.sgml">
+<!ENTITY gmime-gmime-part SYSTEM "sgml/gmime-part.sgml">
+<!ENTITY gmime-gmime-multipart SYSTEM "sgml/gmime-multipart.sgml">
+<!ENTITY gmime-gmime-message SYSTEM "sgml/gmime-message.sgml">
+<!ENTITY gmime-gmime-message-partial SYSTEM "sgml/gmime-message-partial.sgml">
+<!ENTITY gmime-gmime-utils SYSTEM "sgml/gmime-utils.sgml">
+<!ENTITY gmime-internet-address SYSTEM "sgml/internet-address.sgml">
+<!ENTITY gmime-gmime-parser SYSTEM "sgml/gmime-parser.sgml">
+<!ENTITY gmime-gmime-charset SYSTEM "sgml/gmime-charset.sgml">
+<!ENTITY gmime-gmime-iconv SYSTEM "sgml/gmime-iconv.sgml">
+<!ENTITY gmime-gmime-iconv-utils SYSTEM "sgml/gmime-iconv-utils.sgml">
diff -uNr gmime-1.90.0/doc/sgml/gmime-filter-basic.sgml gmime/doc/sgml/gmime-filter-basic.sgml
--- gmime-1.90.0/doc/sgml/gmime-filter-basic.sgml	Thu Jan  1 01:00:00 1970
+++ gmime/doc/sgml/gmime-filter-basic.sgml	Thu May 23 07:21:37 2002
@@ -0,0 +1,73 @@
+<refentry id="gmime-gmime-filter-basic">
+<refmeta>
+<refentrytitle>gmime-filter-basic</refentrytitle>
+<manvolnum>3</manvolnum>
+<refmiscinfo>GMIME Library</refmiscinfo>
+</refmeta>
+
+<refnamediv>
+<refname>gmime-filter-basic</refname><refpurpose></refpurpose>
+</refnamediv>
+
+<refsynopsisdiv><title>Synopsis</title>
+<synopsis>
+
+
+
+enum        <link linkend="GMimeFilterBasicType">GMimeFilterBasicType</link>;
+<link linkend="GMimeFilter">GMimeFilter</link>* <link linkend="g-mime-filter-basic-new-type">g_mime_filter_basic_new_type</link>   (<link linkend="GMimeFilterBasicType">GMimeFilterBasicType</link> type);
+</synopsis>
+</refsynopsisdiv>
+
+
+
+
+
+<refsect1>
+<title>Description</title>
+<para>
+
+</para>
+</refsect1>
+
+<refsect1>
+<title>Details</title>
+<refsect2>
+<title><anchor id="GMimeFilterBasicType">enum GMimeFilterBasicType</title>
+<programlisting>typedef enum {
+	GMIME_FILTER_BASIC_BASE64_ENC = 1,
+	GMIME_FILTER_BASIC_BASE64_DEC,
+	GMIME_FILTER_BASIC_QP_ENC,
+	GMIME_FILTER_BASIC_QP_DEC,
+	GMIME_FILTER_BASIC_UU_ENC,
+	GMIME_FILTER_BASIC_UU_DEC,
+} GMimeFilterBasicType;
+</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="g-mime-filter-basic-new-type">g_mime_filter_basic_new_type ()</title>
+<programlisting><link linkend="GMimeFilter">GMimeFilter</link>* g_mime_filter_basic_new_type   (<link linkend="GMimeFilterBasicType">GMimeFilterBasicType</link> type);</programlisting>
+<para>
+Creates a new filter of type <parameter>type</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>type</parameter>&nbsp;:</entry>
+<entry> filter type
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a new basic filter of type <parameter>type</parameter>.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+
+</refsect1>
+
+
+
+
+</refentry>
diff -uNr gmime-1.90.0/doc/sgml/gmime-filter-charset.sgml gmime/doc/sgml/gmime-filter-charset.sgml
--- gmime-1.90.0/doc/sgml/gmime-filter-charset.sgml	Thu Jan  1 01:00:00 1970
+++ gmime/doc/sgml/gmime-filter-charset.sgml	Thu May 23 07:21:37 2002
@@ -0,0 +1,63 @@
+<refentry id="gmime-gmime-filter-charset">
+<refmeta>
+<refentrytitle>gmime-filter-charset</refentrytitle>
+<manvolnum>3</manvolnum>
+<refmiscinfo>GMIME Library</refmiscinfo>
+</refmeta>
+
+<refnamediv>
+<refname>gmime-filter-charset</refname><refpurpose></refpurpose>
+</refnamediv>
+
+<refsynopsisdiv><title>Synopsis</title>
+<synopsis>
+
+
+
+<link linkend="GMimeFilter">GMimeFilter</link>* <link linkend="g-mime-filter-charset-new">g_mime_filter_charset_new</link>      (const char *from_charset,
+                                             const char *to_charset);
+</synopsis>
+</refsynopsisdiv>
+
+
+
+
+
+<refsect1>
+<title>Description</title>
+<para>
+
+</para>
+</refsect1>
+
+<refsect1>
+<title>Details</title>
+<refsect2>
+<title><anchor id="g-mime-filter-charset-new">g_mime_filter_charset_new ()</title>
+<programlisting><link linkend="GMimeFilter">GMimeFilter</link>* g_mime_filter_charset_new      (const char *from_charset,
+                                             const char *to_charset);</programlisting>
+<para>
+Creates a new GMimeFilterCharset filter.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>from_charset</parameter>&nbsp;:</entry>
+<entry>
+</entry></row>
+<row><entry align="right"><parameter>to_charset</parameter>&nbsp;:</entry>
+<entry>
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a new charset filter.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+
+</refsect1>
+
+
+
+
+</refentry>
diff -uNr gmime-1.90.0/doc/sgml/gmime-filter-crlf.sgml gmime/doc/sgml/gmime-filter-crlf.sgml
--- gmime-1.90.0/doc/sgml/gmime-filter-crlf.sgml	Thu Jan  1 01:00:00 1970
+++ gmime/doc/sgml/gmime-filter-crlf.sgml	Thu May 23 07:21:37 2002
@@ -0,0 +1,85 @@
+<refentry id="gmime-gmime-filter-crlf">
+<refmeta>
+<refentrytitle>gmime-filter-crlf</refentrytitle>
+<manvolnum>3</manvolnum>
+<refmiscinfo>GMIME Library</refmiscinfo>
+</refmeta>
+
+<refnamediv>
+<refname>gmime-filter-crlf</refname><refpurpose></refpurpose>
+</refnamediv>
+
+<refsynopsisdiv><title>Synopsis</title>
+<synopsis>
+
+
+
+enum        <link linkend="GMimeFilterCRLFDirection">GMimeFilterCRLFDirection</link>;
+enum        <link linkend="GMimeFilterCRLFMode">GMimeFilterCRLFMode</link>;
+<link linkend="GMimeFilter">GMimeFilter</link>* <link linkend="g-mime-filter-crlf-new">g_mime_filter_crlf_new</link>         (<link linkend="GMimeFilterCRLFDirection">GMimeFilterCRLFDirection</link> direction,
+                                             <link linkend="GMimeFilterCRLFMode">GMimeFilterCRLFMode</link> mode);
+</synopsis>
+</refsynopsisdiv>
+
+
+
+
+
+<refsect1>
+<title>Description</title>
+<para>
+
+</para>
+</refsect1>
+
+<refsect1>
+<title>Details</title>
+<refsect2>
+<title><anchor id="GMimeFilterCRLFDirection">enum GMimeFilterCRLFDirection</title>
+<programlisting>typedef enum {
+	GMIME_FILTER_CRLF_ENCODE,
+	GMIME_FILTER_CRLF_DECODE
+} GMimeFilterCRLFDirection;
+</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="GMimeFilterCRLFMode">enum GMimeFilterCRLFMode</title>
+<programlisting>typedef enum {
+	GMIME_FILTER_CRLF_MODE_CRLF_DOTS,
+	GMIME_FILTER_CRLF_MODE_CRLF_ONLY,
+} GMimeFilterCRLFMode;
+</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="g-mime-filter-crlf-new">g_mime_filter_crlf_new ()</title>
+<programlisting><link linkend="GMimeFilter">GMimeFilter</link>* g_mime_filter_crlf_new         (<link linkend="GMimeFilterCRLFDirection">GMimeFilterCRLFDirection</link> direction,
+                                             <link linkend="GMimeFilterCRLFMode">GMimeFilterCRLFMode</link> mode);</programlisting>
+<para>
+Creates a new GMimeFilterCRLF filter.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>direction</parameter>&nbsp;:</entry>
+<entry> encode direction
+</entry></row>
+<row><entry align="right"><parameter>mode</parameter>&nbsp;:</entry>
+<entry> crlf or crlf &amp; dot mode
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a new crlf(/dot) filter.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+
+</refsect1>
+
+
+
+
+</refentry>
diff -uNr gmime-1.90.0/doc/sgml/gmime-filter-from.sgml gmime/doc/sgml/gmime-filter-from.sgml
--- gmime-1.90.0/doc/sgml/gmime-filter-from.sgml	Thu Jan  1 01:00:00 1970
+++ gmime/doc/sgml/gmime-filter-from.sgml	Thu May 23 07:21:37 2002
@@ -0,0 +1,55 @@
+<refentry id="gmime-gmime-filter-from">
+<refmeta>
+<refentrytitle>gmime-filter-from</refentrytitle>
+<manvolnum>3</manvolnum>
+<refmiscinfo>GMIME Library</refmiscinfo>
+</refmeta>
+
+<refnamediv>
+<refname>gmime-filter-from</refname><refpurpose></refpurpose>
+</refnamediv>
+
+<refsynopsisdiv><title>Synopsis</title>
+<synopsis>
+
+
+
+<link linkend="GMimeFilter">GMimeFilter</link>* <link linkend="g-mime-filter-from-new">g_mime_filter_from_new</link>         (void);
+</synopsis>
+</refsynopsisdiv>
+
+
+
+
+
+<refsect1>
+<title>Description</title>
+<para>
+
+</para>
+</refsect1>
+
+<refsect1>
+<title>Details</title>
+<refsect2>
+<title><anchor id="g-mime-filter-from-new">g_mime_filter_from_new ()</title>
+<programlisting><link linkend="GMimeFilter">GMimeFilter</link>* g_mime_filter_from_new         (void);</programlisting>
+<para>
+Creates a new GMimeFilterFrom filter.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a new from filter.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+
+</refsect1>
+
+
+
+
+</refentry>
diff -uNr gmime-1.90.0/doc/sgml/gmime-filter-html.sgml gmime/doc/sgml/gmime-filter-html.sgml
--- gmime-1.90.0/doc/sgml/gmime-filter-html.sgml	Thu Jan  1 01:00:00 1970
+++ gmime/doc/sgml/gmime-filter-html.sgml	Thu May 23 07:21:37 2002
@@ -0,0 +1,136 @@
+<refentry id="gmime-gmime-filter-html">
+<refmeta>
+<refentrytitle>gmime-filter-html</refentrytitle>
+<manvolnum>3</manvolnum>
+<refmiscinfo>GMIME Library</refmiscinfo>
+</refmeta>
+
+<refnamediv>
+<refname>gmime-filter-html</refname><refpurpose></refpurpose>
+</refnamediv>
+
+<refsynopsisdiv><title>Synopsis</title>
+<synopsis>
+
+
+
+#define     <link linkend="GMIME-FILTER-HTML-PRE-CAPS">GMIME_FILTER_HTML_PRE</link>
+#define     <link linkend="GMIME-FILTER-HTML-CONVERT-NL-CAPS">GMIME_FILTER_HTML_CONVERT_NL</link>
+#define     <link linkend="GMIME-FILTER-HTML-CONVERT-SPACES-CAPS">GMIME_FILTER_HTML_CONVERT_SPACES</link>
+#define     <link linkend="GMIME-FILTER-HTML-CONVERT-URLS-CAPS">GMIME_FILTER_HTML_CONVERT_URLS</link>
+#define     <link linkend="GMIME-FILTER-HTML-MARK-CITATION-CAPS">GMIME_FILTER_HTML_MARK_CITATION</link>
+#define     <link linkend="GMIME-FILTER-HTML-CONVERT-ADDRESSES-CAPS">GMIME_FILTER_HTML_CONVERT_ADDRESSES</link>
+#define     <link linkend="GMIME-FILTER-HTML-ESCAPE-8BIT-CAPS">GMIME_FILTER_HTML_ESCAPE_8BIT</link>
+#define     <link linkend="GMIME-FILTER-HTML-CITE-CAPS">GMIME_FILTER_HTML_CITE</link>
+<link linkend="GMimeFilter">GMimeFilter</link>* <link linkend="g-mime-filter-html-new">g_mime_filter_html_new</link>         (<link linkend="guint32">guint32</link> flags,
+                                             <link linkend="guint32">guint32</link> colour);
+</synopsis>
+</refsynopsisdiv>
+
+
+
+
+
+<refsect1>
+<title>Description</title>
+<para>
+
+</para>
+</refsect1>
+
+<refsect1>
+<title>Details</title>
+<refsect2>
+<title><anchor id="GMIME-FILTER-HTML-PRE-CAPS">GMIME_FILTER_HTML_PRE</title>
+<programlisting>#define     GMIME_FILTER_HTML_PRE</programlisting>
+<para>
+Wrap stream in &lt;pre&gt; tags.</para>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="GMIME-FILTER-HTML-CONVERT-NL-CAPS">GMIME_FILTER_HTML_CONVERT_NL</title>
+<programlisting>#define     GMIME_FILTER_HTML_CONVERT_NL</programlisting>
+<para>
+Convert new-lines ('\n') into &lt;br&gt; tags.</para>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="GMIME-FILTER-HTML-CONVERT-SPACES-CAPS">GMIME_FILTER_HTML_CONVERT_SPACES</title>
+<programlisting>#define     GMIME_FILTER_HTML_CONVERT_SPACES</programlisting>
+<para>
+Preserve whitespace by converting spaces into their appropriate
+html entities.</para>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="GMIME-FILTER-HTML-CONVERT-URLS-CAPS">GMIME_FILTER_HTML_CONVERT_URLS</title>
+<programlisting>#define     GMIME_FILTER_HTML_CONVERT_URLS</programlisting>
+<para>
+Wrap detected URLs in &lt;a href=...&gt; tags.</para>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="GMIME-FILTER-HTML-MARK-CITATION-CAPS">GMIME_FILTER_HTML_MARK_CITATION</title>
+<programlisting>#define     GMIME_FILTER_HTML_MARK_CITATION</programlisting>
+<para>
+Change the colour of citation text.</para>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="GMIME-FILTER-HTML-CONVERT-ADDRESSES-CAPS">GMIME_FILTER_HTML_CONVERT_ADDRESSES</title>
+<programlisting>#define     GMIME_FILTER_HTML_CONVERT_ADDRESSES</programlisting>
+<para>
+Wrap email addresses in "mailto:" href tags.</para>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="GMIME-FILTER-HTML-ESCAPE-8BIT-CAPS">GMIME_FILTER_HTML_ESCAPE_8BIT</title>
+<programlisting>#define     GMIME_FILTER_HTML_ESCAPE_8BIT</programlisting>
+<para>
+Converts 8bit characters to '?'.</para>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="GMIME-FILTER-HTML-CITE-CAPS">GMIME_FILTER_HTML_CITE</title>
+<programlisting>#define     GMIME_FILTER_HTML_CITE</programlisting>
+<para>
+Cites text by prepending "&gt; " to each cited line.</para>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="g-mime-filter-html-new">g_mime_filter_html_new ()</title>
+<programlisting><link linkend="GMimeFilter">GMimeFilter</link>* g_mime_filter_html_new         (<link linkend="guint32">guint32</link> flags,
+                                             <link linkend="guint32">guint32</link> colour);</programlisting>
+<para>
+Creates a new GMimeFilterHTML filter.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>flags</parameter>&nbsp;:</entry>
+<entry> html flags
+</entry></row>
+<row><entry align="right"><parameter>colour</parameter>&nbsp;:</entry>
+<entry> citation colour
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a new html filter.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+
+</refsect1>
+
+
+
+
+</refentry>
diff -uNr gmime-1.90.0/doc/sgml/gmime-filter-yenc.sgml gmime/doc/sgml/gmime-filter-yenc.sgml
--- gmime-1.90.0/doc/sgml/gmime-filter-yenc.sgml	Thu Jan  1 01:00:00 1970
+++ gmime/doc/sgml/gmime-filter-yenc.sgml	Thu May 23 07:21:37 2002
@@ -0,0 +1,390 @@
+<refentry id="gmime-gmime-filter-yenc">
+<refmeta>
+<refentrytitle>gmime-filter-yenc</refentrytitle>
+<manvolnum>3</manvolnum>
+<refmiscinfo>GMIME Library</refmiscinfo>
+</refmeta>
+
+<refnamediv>
+<refname>gmime-filter-yenc</refname><refpurpose></refpurpose>
+</refnamediv>
+
+<refsynopsisdiv><title>Synopsis</title>
+<synopsis>
+
+
+
+#define     <link linkend="GMIME-YENCODE-CRC-INIT-CAPS">GMIME_YENCODE_CRC_INIT</link>
+#define     <link linkend="GMIME-YENCODE-CRC-FINAL-CAPS">GMIME_YENCODE_CRC_FINAL</link>         (crc)
+<link linkend="size-t">size_t</link>      <link linkend="g-mime-ydecode-step">g_mime_ydecode_step</link>             (unsigned char *in,
+                                             <link linkend="size-t">size_t</link> inlen,
+                                             unsigned char *out,
+                                             int *state,
+                                             <link linkend="guint32">guint32</link> *pcrc,
+                                             <link linkend="guint32">guint32</link> *crc);
+<link linkend="size-t">size_t</link>      <link linkend="g-mime-yencode-step">g_mime_yencode_step</link>             (unsigned char *in,
+                                             <link linkend="size-t">size_t</link> inlen,
+                                             unsigned char *out,
+                                             int *state,
+                                             <link linkend="guint32">guint32</link> *pcrc,
+                                             <link linkend="guint32">guint32</link> *crc);
+<link linkend="size-t">size_t</link>      <link linkend="g-mime-yencode-close">g_mime_yencode_close</link>            (unsigned char *in,
+                                             <link linkend="size-t">size_t</link> inlen,
+                                             unsigned char *out,
+                                             int *state,
+                                             <link linkend="guint32">guint32</link> *pcrc,
+                                             <link linkend="guint32">guint32</link> *crc);
+enum        <link linkend="GMimeFilterYencDirection">GMimeFilterYencDirection</link>;
+#define     <link linkend="GMIME-YENCODE-STATE-INIT-CAPS">GMIME_YENCODE_STATE_INIT</link>
+#define     <link linkend="GMIME-YDECODE-STATE-INIT-CAPS">GMIME_YDECODE_STATE_INIT</link>
+#define     <link linkend="GMIME-YDECODE-STATE-EOLN-CAPS">GMIME_YDECODE_STATE_EOLN</link>
+#define     <link linkend="GMIME-YDECODE-STATE-ESCAPE-CAPS">GMIME_YDECODE_STATE_ESCAPE</link>
+#define     <link linkend="GMIME-YDECODE-STATE-BEGIN-CAPS">GMIME_YDECODE_STATE_BEGIN</link>
+#define     <link linkend="GMIME-YDECODE-STATE-PART-CAPS">GMIME_YDECODE_STATE_PART</link>
+#define     <link linkend="GMIME-YDECODE-STATE-DECODE-CAPS">GMIME_YDECODE_STATE_DECODE</link>
+#define     <link linkend="GMIME-YDECODE-STATE-END-CAPS">GMIME_YDECODE_STATE_END</link>
+<link linkend="GMimeFilter">GMimeFilter</link>* <link linkend="g-mime-filter-yenc-new">g_mime_filter_yenc_new</link>         (<link linkend="GMimeFilterYencDirection">GMimeFilterYencDirection</link> direction);
+void        <link linkend="g-mime-filter-yenc-set-state">g_mime_filter_yenc_set_state</link>    (<link linkend="GMimeFilterYenc">GMimeFilterYenc</link> *yenc,
+                                             int state);
+void        <link linkend="g-mime-filter-yenc-set-crc">g_mime_filter_yenc_set_crc</link>      (<link linkend="GMimeFilterYenc">GMimeFilterYenc</link> *yenc,
+                                             <link linkend="guint32">guint32</link> crc);
+<link linkend="guint32">guint32</link>     <link linkend="g-mime-filter-yenc-get-crc">g_mime_filter_yenc_get_crc</link>      (<link linkend="GMimeFilterYenc">GMimeFilterYenc</link> *yenc);
+<link linkend="guint32">guint32</link>     <link linkend="g-mime-filter-yenc-get-pcrc">g_mime_filter_yenc_get_pcrc</link>     (<link linkend="GMimeFilterYenc">GMimeFilterYenc</link> *yenc);
+</synopsis>
+</refsynopsisdiv>
+
+
+
+
+
+<refsect1>
+<title>Description</title>
+<para>
+
+</para>
+</refsect1>
+
+<refsect1>
+<title>Details</title>
+<refsect2>
+<title><anchor id="GMIME-YENCODE-CRC-INIT-CAPS">GMIME_YENCODE_CRC_INIT</title>
+<programlisting>#define     GMIME_YENCODE_CRC_INIT</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="GMIME-YENCODE-CRC-FINAL-CAPS">GMIME_YENCODE_CRC_FINAL()</title>
+<programlisting>#define     GMIME_YENCODE_CRC_FINAL(crc)</programlisting>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>crc</parameter>&nbsp;:</entry>
+<entry>
+
+
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-ydecode-step">g_mime_ydecode_step ()</title>
+<programlisting><link linkend="size-t">size_t</link>      g_mime_ydecode_step             (unsigned char *in,
+                                             <link linkend="size-t">size_t</link> inlen,
+                                             unsigned char *out,
+                                             int *state,
+                                             <link linkend="guint32">guint32</link> *pcrc,
+                                             <link linkend="guint32">guint32</link> *crc);</programlisting>
+<para>
+Performs a 'decode step' on a chunk of yEncoded data of length
+<parameter>inlen</parameter> pointed to by <parameter>in</parameter> and writes to <parameter>out</parameter>. Assumes the =ybegin
+and =ypart lines have already been stripped off.
+</para>
+<para>
+To get the crc32 value of the part, use GMIME_YENCODE_CRC_FINAL
+(<parameter>pcrc</parameter>). If there are more parts, you should reuse <parameter>crc</parameter> without
+re-initializing. Once all parts have been decoded, you may get the
+combined crc32 value of all the parts using GMIME_YENCODE_CRC_FINAL
+(<parameter>crc</parameter>).</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
+<entry> input buffer
+</entry></row>
+<row><entry align="right"><parameter>inlen</parameter>&nbsp;:</entry>
+<entry> input buffer length
+</entry></row>
+<row><entry align="right"><parameter>out</parameter>&nbsp;:</entry>
+<entry> output buffer
+</entry></row>
+<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
+<entry> ydecode state
+</entry></row>
+<row><entry align="right"><parameter>pcrc</parameter>&nbsp;:</entry>
+<entry> part crc state
+</entry></row>
+<row><entry align="right"><parameter>crc</parameter>&nbsp;:</entry>
+<entry> crc state
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes decoded.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-yencode-step">g_mime_yencode_step ()</title>
+<programlisting><link linkend="size-t">size_t</link>      g_mime_yencode_step             (unsigned char *in,
+                                             <link linkend="size-t">size_t</link> inlen,
+                                             unsigned char *out,
+                                             int *state,
+                                             <link linkend="guint32">guint32</link> *pcrc,
+                                             <link linkend="guint32">guint32</link> *crc);</programlisting>
+<para>
+Performs an yEncode 'encode step' on a chunk of raw data of length
+<parameter>inlen</parameter> pointed to by <parameter>in</parameter> and writes to <parameter>out</parameter>.
+</para>
+<para>
+<parameter>state</parameter> should be initialized to GMIME_YENCODE_STATE_INIT before
+beginning making the first call to this function. Subsequent calls
+should reuse <parameter>state</parameter>.
+</para>
+<para>
+Along the same lines, <parameter>pcrc</parameter> and <parameter>crc</parameter> should be initialized to
+GMIME_YENCODE_CRC_INIT before using.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
+<entry> input buffer
+</entry></row>
+<row><entry align="right"><parameter>inlen</parameter>&nbsp;:</entry>
+<entry> input buffer length
+</entry></row>
+<row><entry align="right"><parameter>out</parameter>&nbsp;:</entry>
+<entry> output buffer
+</entry></row>
+<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
+<entry> yencode state
+</entry></row>
+<row><entry align="right"><parameter>pcrc</parameter>&nbsp;:</entry>
+<entry> part crc state
+</entry></row>
+<row><entry align="right"><parameter>crc</parameter>&nbsp;:</entry>
+<entry> crc state
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes encoded.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-yencode-close">g_mime_yencode_close ()</title>
+<programlisting><link linkend="size-t">size_t</link>      g_mime_yencode_close            (unsigned char *in,
+                                             <link linkend="size-t">size_t</link> inlen,
+                                             unsigned char *out,
+                                             int *state,
+                                             <link linkend="guint32">guint32</link> *pcrc,
+                                             <link linkend="guint32">guint32</link> *crc);</programlisting>
+<para>
+Call this function when finished encoding data with
+g_mime_yencode_step to flush off the remaining state.
+</para>
+<para>
+GMIME_YENCODE_CRC_FINAL (<parameter>pcrc</parameter>) will give you the crc32 of the
+encoded "part". If there are more "parts" to encode, you should
+re-use <parameter>crc</parameter> when encoding the next "parts" and then use
+GMIME_YENCODE_CRC_FINAL (<parameter>crc</parameter>) to get the combined crc32 value of
+all the parts.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
+<entry> input buffer
+</entry></row>
+<row><entry align="right"><parameter>inlen</parameter>&nbsp;:</entry>
+<entry> input buffer length
+</entry></row>
+<row><entry align="right"><parameter>out</parameter>&nbsp;:</entry>
+<entry> output buffer
+</entry></row>
+<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
+<entry> yencode state
+</entry></row>
+<row><entry align="right"><parameter>pcrc</parameter>&nbsp;:</entry>
+<entry> part crc state
+</entry></row>
+<row><entry align="right"><parameter>crc</parameter>&nbsp;:</entry>
+<entry> crc state
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes encoded.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="GMimeFilterYencDirection">enum GMimeFilterYencDirection</title>
+<programlisting>typedef enum {
+	GMIME_FILTER_YENC_DIRECTION_ENCODE,
+	GMIME_FILTER_YENC_DIRECTION_DECODE,
+} GMimeFilterYencDirection;
+</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="GMIME-YENCODE-STATE-INIT-CAPS">GMIME_YENCODE_STATE_INIT</title>
+<programlisting>#define     GMIME_YENCODE_STATE_INIT</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="GMIME-YDECODE-STATE-INIT-CAPS">GMIME_YDECODE_STATE_INIT</title>
+<programlisting>#define     GMIME_YDECODE_STATE_INIT</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="GMIME-YDECODE-STATE-EOLN-CAPS">GMIME_YDECODE_STATE_EOLN</title>
+<programlisting>#define     GMIME_YDECODE_STATE_EOLN</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="GMIME-YDECODE-STATE-ESCAPE-CAPS">GMIME_YDECODE_STATE_ESCAPE</title>
+<programlisting>#define     GMIME_YDECODE_STATE_ESCAPE</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="GMIME-YDECODE-STATE-BEGIN-CAPS">GMIME_YDECODE_STATE_BEGIN</title>
+<programlisting>#define     GMIME_YDECODE_STATE_BEGIN</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="GMIME-YDECODE-STATE-PART-CAPS">GMIME_YDECODE_STATE_PART</title>
+<programlisting>#define     GMIME_YDECODE_STATE_PART</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="GMIME-YDECODE-STATE-DECODE-CAPS">GMIME_YDECODE_STATE_DECODE</title>
+<programlisting>#define     GMIME_YDECODE_STATE_DECODE</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="GMIME-YDECODE-STATE-END-CAPS">GMIME_YDECODE_STATE_END</title>
+<programlisting>#define     GMIME_YDECODE_STATE_END</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="g-mime-filter-yenc-new">g_mime_filter_yenc_new ()</title>
+<programlisting><link linkend="GMimeFilter">GMimeFilter</link>* g_mime_filter_yenc_new         (<link linkend="GMimeFilterYencDirection">GMimeFilterYencDirection</link> direction);</programlisting>
+<para>
+Creates a new yEnc filter.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>direction</parameter>&nbsp;:</entry>
+<entry> encode direction
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a new yEnc filter.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-filter-yenc-set-state">g_mime_filter_yenc_set_state ()</title>
+<programlisting>void        g_mime_filter_yenc_set_state    (<link linkend="GMimeFilterYenc">GMimeFilterYenc</link> *yenc,
+                                             int state);</programlisting>
+<para>
+Sets the current state of the yencoder/ydecoder</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>yenc</parameter>&nbsp;:</entry>
+<entry> yEnc filter
+</entry></row>
+<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
+<entry> encode/decode state
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-filter-yenc-set-crc">g_mime_filter_yenc_set_crc ()</title>
+<programlisting>void        g_mime_filter_yenc_set_crc      (<link linkend="GMimeFilterYenc">GMimeFilterYenc</link> *yenc,
+                                             <link linkend="guint32">guint32</link> crc);</programlisting>
+<para>
+Sets the current crc32 value on the yEnc filter <parameter>yenc</parameter> to <parameter>crc</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>yenc</parameter>&nbsp;:</entry>
+<entry> yEnc filter
+</entry></row>
+<row><entry align="right"><parameter>crc</parameter>&nbsp;:</entry>
+<entry> crc32
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-filter-yenc-get-crc">g_mime_filter_yenc_get_crc ()</title>
+<programlisting><link linkend="guint32">guint32</link>     g_mime_filter_yenc_get_crc      (<link linkend="GMimeFilterYenc">GMimeFilterYenc</link> *yenc);</programlisting>
+<para>
+Get the computed crc or (guint32) -1 on fail.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>yenc</parameter>&nbsp;:</entry>
+<entry> yEnc filter
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the computed crc or (guint32) -1 on fail.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-filter-yenc-get-pcrc">g_mime_filter_yenc_get_pcrc ()</title>
+<programlisting><link linkend="guint32">guint32</link>     g_mime_filter_yenc_get_pcrc     (<link linkend="GMimeFilterYenc">GMimeFilterYenc</link> *yenc);</programlisting>
+<para>
+Get the computed part crc or (guint32) -1 on fail.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>yenc</parameter>&nbsp;:</entry>
+<entry> yEnc filter
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the computed part crc or (guint32) -1 on fail.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+
+</refsect1>
+
+
+
+
+</refentry>
diff -uNr gmime-1.90.0/doc/sgml/gmime-filter.sgml gmime/doc/sgml/gmime-filter.sgml
--- gmime-1.90.0/doc/sgml/gmime-filter.sgml	Thu Jan  1 01:00:00 1970
+++ gmime/doc/sgml/gmime-filter.sgml	Thu May 23 07:21:37 2002
@@ -0,0 +1,299 @@
+<refentry id="gmime-gmime-filter">
+<refmeta>
+<refentrytitle>gmime-filter</refentrytitle>
+<manvolnum>3</manvolnum>
+<refmiscinfo>GMIME Library</refmiscinfo>
+</refmeta>
+
+<refnamediv>
+<refname>gmime-filter</refname><refpurpose></refpurpose>
+</refnamediv>
+
+<refsynopsisdiv><title>Synopsis</title>
+<synopsis>
+
+
+
+struct      <link linkend="GMimeFilter">GMimeFilter</link>;
+void        <link linkend="g-mime-filter-construct">g_mime_filter_construct</link>         (<link linkend="GMimeFilter">GMimeFilter</link> *filter,
+                                             <link linkend="GMimeFilter">GMimeFilter</link> *filter_template);
+void        <link linkend="g-mime-filter-destroy">g_mime_filter_destroy</link>           (<link linkend="GMimeFilter">GMimeFilter</link> *filter);
+<link linkend="GMimeFilter">GMimeFilter</link>* <link linkend="g-mime-filter-copy">g_mime_filter_copy</link>             (<link linkend="GMimeFilter">GMimeFilter</link> *filter);
+void        <link linkend="g-mime-filter-filter">g_mime_filter_filter</link>            (<link linkend="GMimeFilter">GMimeFilter</link> *filter,
+                                             char *in,
+                                             <link linkend="size-t">size_t</link> len,
+                                             <link linkend="size-t">size_t</link> prespace,
+                                             char **out,
+                                             <link linkend="size-t">size_t</link> *outlen,
+                                             <link linkend="size-t">size_t</link> *outprespace);
+void        <link linkend="g-mime-filter-complete">g_mime_filter_complete</link>          (<link linkend="GMimeFilter">GMimeFilter</link> *filter,
+                                             char *in,
+                                             <link linkend="size-t">size_t</link> len,
+                                             <link linkend="size-t">size_t</link> prespace,
+                                             char **out,
+                                             <link linkend="size-t">size_t</link> *outlen,
+                                             <link linkend="size-t">size_t</link> *outprespace);
+void        <link linkend="g-mime-filter-reset">g_mime_filter_reset</link>             (<link linkend="GMimeFilter">GMimeFilter</link> *filter);
+void        <link linkend="g-mime-filter-backup">g_mime_filter_backup</link>            (<link linkend="GMimeFilter">GMimeFilter</link> *filter,
+                                             const char *data,
+                                             <link linkend="size-t">size_t</link> length);
+void        <link linkend="g-mime-filter-set-size">g_mime_filter_set_size</link>          (<link linkend="GMimeFilter">GMimeFilter</link> *filter,
+                                             <link linkend="size-t">size_t</link> size,
+                                             <link linkend="gboolean">gboolean</link> keep);
+
+</synopsis>
+</refsynopsisdiv>
+
+
+
+
+
+<refsect1>
+<title>Description</title>
+<para>
+
+</para>
+</refsect1>
+
+<refsect1>
+<title>Details</title>
+<refsect2>
+<title><anchor id="GMimeFilter">struct GMimeFilter</title>
+<programlisting>struct GMimeFilter {
+	struct _GMimeFilterPrivate *priv;
+	
+	char *outreal;		/* real malloc'd buffer */
+	char *outbuf;		/* first 'writable' position allowed (outreal + outpre) */
+	char *outptr;
+	size_t outsize;
+	size_t outpre;		/* prespace of this buffer */
+	
+	char *backbuf;
+	size_t backsize;
+	size_t backlen;		/* significant data there */
+	
+	/* virtual functions */
+	void (*destroy)  (GMimeFilter *filter);
+	
+	GMimeFilter *(*copy) (GMimeFilter *filter);
+	
+	void (*filter)   (GMimeFilter *filter,
+			  char *in, size_t len, size_t prespace,
+			  char **out, size_t *outlen, size_t *outprespace);
+	
+	void (*complete) (GMimeFilter *filter,
+			  char *in, size_t len, size_t prespace,
+			  char **out, size_t *outlen, size_t *outprespace);
+	
+	void (*reset)    (GMimeFilter *filter);
+};
+</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="g-mime-filter-construct">g_mime_filter_construct ()</title>
+<programlisting>void        g_mime_filter_construct         (<link linkend="GMimeFilter">GMimeFilter</link> *filter,
+                                             <link linkend="GMimeFilter">GMimeFilter</link> *filter_template);</programlisting>
+<para>
+Initializes a filter object using the virtual methods in <parameter>filter_template</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>filter</parameter>&nbsp;:</entry>
+<entry> filter
+</entry></row>
+<row><entry align="right"><parameter>filter_template</parameter>&nbsp;:</entry>
+<entry> filter template
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-filter-destroy">g_mime_filter_destroy ()</title>
+<programlisting>void        g_mime_filter_destroy           (<link linkend="GMimeFilter">GMimeFilter</link> *filter);</programlisting>
+<para>
+Destroys <parameter>filter</parameter> and releases the memory to the system.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>filter</parameter>&nbsp;:</entry>
+<entry> filter
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-filter-copy">g_mime_filter_copy ()</title>
+<programlisting><link linkend="GMimeFilter">GMimeFilter</link>* g_mime_filter_copy             (<link linkend="GMimeFilter">GMimeFilter</link> *filter);</programlisting>
+<para>
+Copies <parameter>filter</parameter> into a new GMimeFilter object.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>filter</parameter>&nbsp;:</entry>
+<entry> filter
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a duplicate of <parameter>filter</parameter>.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-filter-filter">g_mime_filter_filter ()</title>
+<programlisting>void        g_mime_filter_filter            (<link linkend="GMimeFilter">GMimeFilter</link> *filter,
+                                             char *in,
+                                             <link linkend="size-t">size_t</link> len,
+                                             <link linkend="size-t">size_t</link> prespace,
+                                             char **out,
+                                             <link linkend="size-t">size_t</link> *outlen,
+                                             <link linkend="size-t">size_t</link> *outprespace);</programlisting>
+<para>
+Filters the input data and writes it to <parameter>out</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>filter</parameter>&nbsp;:</entry>
+<entry> filter
+</entry></row>
+<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
+<entry> input buffer
+</entry></row>
+<row><entry align="right"><parameter>len</parameter>&nbsp;:</entry>
+<entry> input buffer length
+</entry></row>
+<row><entry align="right"><parameter>prespace</parameter>&nbsp;:</entry>
+<entry> prespace buffer length
+</entry></row>
+<row><entry align="right"><parameter>out</parameter>&nbsp;:</entry>
+<entry> pointer to output buffer
+</entry></row>
+<row><entry align="right"><parameter>outlen</parameter>&nbsp;:</entry>
+<entry> pointer to output length
+</entry></row>
+<row><entry align="right"><parameter>outprespace</parameter>&nbsp;:</entry>
+<entry> pointer to output prespace buffer length
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-filter-complete">g_mime_filter_complete ()</title>
+<programlisting>void        g_mime_filter_complete          (<link linkend="GMimeFilter">GMimeFilter</link> *filter,
+                                             char *in,
+                                             <link linkend="size-t">size_t</link> len,
+                                             <link linkend="size-t">size_t</link> prespace,
+                                             char **out,
+                                             <link linkend="size-t">size_t</link> *outlen,
+                                             <link linkend="size-t">size_t</link> *outprespace);</programlisting>
+<para>
+Completes the filtering.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>filter</parameter>&nbsp;:</entry>
+<entry> filter
+</entry></row>
+<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
+<entry> input buffer
+</entry></row>
+<row><entry align="right"><parameter>len</parameter>&nbsp;:</entry>
+<entry> input length
+</entry></row>
+<row><entry align="right"><parameter>prespace</parameter>&nbsp;:</entry>
+<entry> prespace buffer length
+</entry></row>
+<row><entry align="right"><parameter>out</parameter>&nbsp;:</entry>
+<entry> pointer to output buffer
+</entry></row>
+<row><entry align="right"><parameter>outlen</parameter>&nbsp;:</entry>
+<entry> pointer to output length
+</entry></row>
+<row><entry align="right"><parameter>outprespace</parameter>&nbsp;:</entry>
+<entry> pointer to output prespace buffer length
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-filter-reset">g_mime_filter_reset ()</title>
+<programlisting>void        g_mime_filter_reset             (<link linkend="GMimeFilter">GMimeFilter</link> *filter);</programlisting>
+<para>
+Resets the filter.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>filter</parameter>&nbsp;:</entry>
+<entry>
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-filter-backup">g_mime_filter_backup ()</title>
+<programlisting>void        g_mime_filter_backup            (<link linkend="GMimeFilter">GMimeFilter</link> *filter,
+                                             const char *data,
+                                             <link linkend="size-t">size_t</link> length);</programlisting>
+<para>
+Sets number of bytes backed up on the input, new calls replace
+previous ones</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>filter</parameter>&nbsp;:</entry>
+<entry> filter
+</entry></row>
+<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
+<entry> 
+</entry></row>
+<row><entry align="right"><parameter>length</parameter>&nbsp;:</entry>
+<entry> 
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-filter-set-size">g_mime_filter_set_size ()</title>
+<programlisting>void        g_mime_filter_set_size          (<link linkend="GMimeFilter">GMimeFilter</link> *filter,
+                                             <link linkend="size-t">size_t</link> size,
+                                             <link linkend="gboolean">gboolean</link> keep);</programlisting>
+<para>
+Ensure this much size available for filter output (if required)</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>filter</parameter>&nbsp;:</entry>
+<entry> filter
+</entry></row>
+<row><entry align="right"><parameter>size</parameter>&nbsp;:</entry>
+<entry> 
+</entry></row>
+<row><entry align="right"><parameter>keep</parameter>&nbsp;:</entry>
+<entry> 
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+
+</refsect1>
+
+
+
+
+</refentry>
diff -uNr gmime-1.90.0/doc/sgml/gmime-header.sgml gmime/doc/sgml/gmime-header.sgml
--- gmime-1.90.0/doc/sgml/gmime-header.sgml	Thu Jan  1 01:00:00 1970
+++ gmime/doc/sgml/gmime-header.sgml	Thu May 23 07:21:37 2002
@@ -0,0 +1,282 @@
+<refentry id="gmime-gmime-header">
+<refmeta>
+<refentrytitle>gmime-header</refentrytitle>
+<manvolnum>3</manvolnum>
+<refmiscinfo>GMIME Library</refmiscinfo>
+</refmeta>
+
+<refnamediv>
+<refname>gmime-header</refname><refpurpose></refpurpose>
+</refnamediv>
+
+<refsynopsisdiv><title>Synopsis</title>
+<synopsis>
+
+
+
+struct      <link linkend="GMimeHeader">GMimeHeader</link>;
+void        (<link linkend="GMimeHeaderFunc">*GMimeHeaderFunc</link>)              (const char *name,
+                                             const char *value,
+                                             <link linkend="gpointer">gpointer</link> data);
+<link linkend="GMimeHeader">GMimeHeader</link>* <link linkend="g-mime-header-new">g_mime_header_new</link>              (void);
+void        <link linkend="g-mime-header-destroy">g_mime_header_destroy</link>           (<link linkend="GMimeHeader">GMimeHeader</link> *header);
+void        <link linkend="g-mime-header-add">g_mime_header_add</link>               (<link linkend="GMimeHeader">GMimeHeader</link> *header,
+                                             const char *name,
+                                             const char *value);
+void        <link linkend="g-mime-header-set">g_mime_header_set</link>               (<link linkend="GMimeHeader">GMimeHeader</link> *header,
+                                             const char *name,
+                                             const char *value);
+const char* <link linkend="g-mime-header-get">g_mime_header_get</link>               (const <link linkend="GMimeHeader">GMimeHeader</link> *header,
+                                             const char *name);
+void        <link linkend="g-mime-header-remove">g_mime_header_remove</link>            (<link linkend="GMimeHeader">GMimeHeader</link> *header,
+                                             const char *name);
+<link linkend="ssize-t">ssize_t</link>     <link linkend="g-mime-header-write-to-stream">g_mime_header_write_to_stream</link>   (const <link linkend="GMimeHeader">GMimeHeader</link> *header,
+                                             <link linkend="GMimeStream">GMimeStream</link> *stream);
+char*       <link linkend="g-mime-header-to-string">g_mime_header_to_string</link>         (const <link linkend="GMimeHeader">GMimeHeader</link> *header);
+void        <link linkend="g-mime-header-foreach">g_mime_header_foreach</link>           (const <link linkend="GMimeHeader">GMimeHeader</link> *header,
+                                             <link linkend="GMimeHeaderFunc">GMimeHeaderFunc</link> func,
+                                             <link linkend="gpointer">gpointer</link> data);
+</synopsis>
+</refsynopsisdiv>
+
+
+
+
+
+<refsect1>
+<title>Description</title>
+<para>
+
+</para>
+</refsect1>
+
+<refsect1>
+<title>Details</title>
+<refsect2>
+<title><anchor id="GMimeHeader">struct GMimeHeader</title>
+<programlisting>struct GMimeHeader;</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="GMimeHeaderFunc">GMimeHeaderFunc ()</title>
+<programlisting>void        (*GMimeHeaderFunc)              (const char *name,
+                                             const char *value,
+                                             <link linkend="gpointer">gpointer</link> data);</programlisting>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
+<entry>
+</entry></row>
+<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
+<entry>
+</entry></row>
+<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
+<entry>
+
+
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-header-new">g_mime_header_new ()</title>
+<programlisting><link linkend="GMimeHeader">GMimeHeader</link>* g_mime_header_new              (void);</programlisting>
+<para>
+Creates a new GMimeHeader object.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a new header object.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-header-destroy">g_mime_header_destroy ()</title>
+<programlisting>void        g_mime_header_destroy           (<link linkend="GMimeHeader">GMimeHeader</link> *header);</programlisting>
+<para>
+Destroy the header object</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>header</parameter>&nbsp;:</entry>
+<entry> header object
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-header-add">g_mime_header_add ()</title>
+<programlisting>void        g_mime_header_add               (<link linkend="GMimeHeader">GMimeHeader</link> *header,
+                                             const char *name,
+                                             const char *value);</programlisting>
+<para>
+Adds a header. If <parameter>value</parameter> is <literal>NULL</literal>, a space will be set aside for it
+(useful for setting the order of headers before values can be
+obtained for them) otherwise the header will be unset.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>header</parameter>&nbsp;:</entry>
+<entry> header object
+</entry></row>
+<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
+<entry> header name
+</entry></row>
+<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
+<entry> header value
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-header-set">g_mime_header_set ()</title>
+<programlisting>void        g_mime_header_set               (<link linkend="GMimeHeader">GMimeHeader</link> *header,
+                                             const char *name,
+                                             const char *value);</programlisting>
+<para>
+Set the value of the specified header. If <parameter>value</parameter> is <literal>NULL</literal> and the
+header, <parameter>name</parameter>, had not been previously set, a space will be set
+aside for it (useful for setting the order of headers before values
+can be obtained for them) otherwise the header will be unset.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>header</parameter>&nbsp;:</entry>
+<entry> header object
+</entry></row>
+<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
+<entry> header name
+</entry></row>
+<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
+<entry> header value
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-header-get">g_mime_header_get ()</title>
+<programlisting>const char* g_mime_header_get               (const <link linkend="GMimeHeader">GMimeHeader</link> *header,
+                                             const char *name);</programlisting>
+<para>
+Gets the value of the header requested.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>header</parameter>&nbsp;:</entry>
+<entry> header object
+</entry></row>
+<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
+<entry> header name
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the value of the header requested.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-header-remove">g_mime_header_remove ()</title>
+<programlisting>void        g_mime_header_remove            (<link linkend="GMimeHeader">GMimeHeader</link> *header,
+                                             const char *name);</programlisting>
+<para>
+Remove the specified header.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>header</parameter>&nbsp;:</entry>
+<entry> header object
+</entry></row>
+<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
+<entry> header name
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-header-write-to-stream">g_mime_header_write_to_stream ()</title>
+<programlisting><link linkend="ssize-t">ssize_t</link>     g_mime_header_write_to_stream   (const <link linkend="GMimeHeader">GMimeHeader</link> *header,
+                                             <link linkend="GMimeStream">GMimeStream</link> *stream);</programlisting>
+<para>
+Write the headers to a stream.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>header</parameter>&nbsp;:</entry>
+<entry> header object
+</entry></row>
+<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
+<entry> output stream
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes written or -1 on fail.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-header-to-string">g_mime_header_to_string ()</title>
+<programlisting>char*       g_mime_header_to_string         (const <link linkend="GMimeHeader">GMimeHeader</link> *header);</programlisting>
+<para>
+Allocates a string buffer containing the raw rfc822 headers
+contained in <parameter>header</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>header</parameter>&nbsp;:</entry>
+<entry> header object
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a string containing the header block
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-header-foreach">g_mime_header_foreach ()</title>
+<programlisting>void        g_mime_header_foreach           (const <link linkend="GMimeHeader">GMimeHeader</link> *header,
+                                             <link linkend="GMimeHeaderFunc">GMimeHeaderFunc</link> func,
+                                             <link linkend="gpointer">gpointer</link> data);</programlisting>
+<para>
+Calls <parameter>func</parameter> for each header name/value pair.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>header</parameter>&nbsp;:</entry>
+<entry> header object
+</entry></row>
+<row><entry align="right"><parameter>func</parameter>&nbsp;:</entry>
+<entry> function to be called for each header.
+</entry></row>
+<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
+<entry> User data to be passed to the func.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+
+</refsect1>
+
+
+
+
+</refentry>
diff -uNr gmime-1.90.0/doc/sgml/gmime-iconv-utils.sgml gmime/doc/sgml/gmime-iconv-utils.sgml
--- gmime-1.90.0/doc/sgml/gmime-iconv-utils.sgml	Thu Jan  1 01:00:00 1970
+++ gmime/doc/sgml/gmime-iconv-utils.sgml	Thu May 23 07:21:37 2002
@@ -0,0 +1,194 @@
+<refentry id="gmime-gmime-iconv-utils">
+<refmeta>
+<refentrytitle>gmime-iconv-utils</refentrytitle>
+<manvolnum>3</manvolnum>
+<refmiscinfo>GMIME Library</refmiscinfo>
+</refmeta>
+
+<refnamediv>
+<refname>gmime-iconv-utils</refname><refpurpose></refpurpose>
+</refnamediv>
+
+<refsynopsisdiv><title>Synopsis</title>
+<synopsis>
+
+
+
+char*       <link linkend="g-mime-iconv-strdup">g_mime_iconv_strdup</link>             (<link linkend="iconv-t">iconv_t</link> cd,
+                                             const char *string);
+char*       <link linkend="g-mime-iconv-strndup">g_mime_iconv_strndup</link>            (<link linkend="iconv-t">iconv_t</link> cd,
+                                             const char *string,
+                                             <link linkend="size-t">size_t</link> n);
+char*       <link linkend="g-mime-iconv-utf8-to-locale">g_mime_iconv_utf8_to_locale</link>     (const char *string);
+char*       <link linkend="g-mime-iconv-utf8-to-locale-length">g_mime_iconv_utf8_to_locale_length</link>
+                                            (const char *string,
+                                             <link linkend="size-t">size_t</link> n);
+char*       <link linkend="g-mime-iconv-locale-to-utf8">g_mime_iconv_locale_to_utf8</link>     (const char *string);
+char*       <link linkend="g-mime-iconv-locale-to-utf8-length">g_mime_iconv_locale_to_utf8_length</link>
+                                            (const char *string,
+                                             <link linkend="size-t">size_t</link> n);
+</synopsis>
+</refsynopsisdiv>
+
+
+
+
+
+<refsect1>
+<title>Description</title>
+<para>
+
+</para>
+</refsect1>
+
+<refsect1>
+<title>Details</title>
+<refsect2>
+<title><anchor id="g-mime-iconv-strdup">g_mime_iconv_strdup ()</title>
+<programlisting>char*       g_mime_iconv_strdup             (<link linkend="iconv-t">iconv_t</link> cd,
+                                             const char *string);</programlisting>
+<para>
+Allocates a new string buffer containing <parameter>string</parameter> converted to
+the destination charset described in <parameter>cd</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>cd</parameter>&nbsp;:</entry>
+<entry> conversion descriptor
+</entry></row>
+<row><entry align="right"><parameter>string</parameter>&nbsp;:</entry>
+<entry> string in source charset
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a new string buffer containing the original string
+converted to the new charset.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-iconv-strndup">g_mime_iconv_strndup ()</title>
+<programlisting>char*       g_mime_iconv_strndup            (<link linkend="iconv-t">iconv_t</link> cd,
+                                             const char *string,
+                                             <link linkend="size-t">size_t</link> n);</programlisting>
+<para>
+Allocates a new string buffer containing the first <parameter>n</parameter> bytes of
+<parameter>string</parameter> converted to the destination charset as described by the
+conversion descriptor <parameter>cd</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>cd</parameter>&nbsp;:</entry>
+<entry> conversion descriptor
+</entry></row>
+<row><entry align="right"><parameter>string</parameter>&nbsp;:</entry>
+<entry> string in source charset
+</entry></row>
+<row><entry align="right"><parameter>n</parameter>&nbsp;:</entry>
+<entry> number of bytes to convert
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a new string buffer containing the first <parameter>n</parameter> bytes of
+<parameter>string</parameter> converted to the destination charset as described by the
+conversion descriptor <parameter>cd</parameter>.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-iconv-utf8-to-locale">g_mime_iconv_utf8_to_locale ()</title>
+<programlisting>char*       g_mime_iconv_utf8_to_locale     (const char *string);</programlisting>
+<para>
+Allocates a new string buffer containing <parameter>string</parameter> converted to the
+user's locale charset.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>string</parameter>&nbsp;:</entry>
+<entry> string in UTF-8 charset
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a new string buffer containing <parameter>string</parameter> converted to the
+user's locale charset.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-iconv-utf8-to-locale-length">g_mime_iconv_utf8_to_locale_length ()</title>
+<programlisting>char*       g_mime_iconv_utf8_to_locale_length
+                                            (const char *string,
+                                             <link linkend="size-t">size_t</link> n);</programlisting>
+<para>
+Allocates a new string buffer containing the first <parameter>n</parameter> bytes of
+<parameter>string</parameter> converted to the user's locale charset.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>string</parameter>&nbsp;:</entry>
+<entry> string in UTF-8 charset
+</entry></row>
+<row><entry align="right"><parameter>n</parameter>&nbsp;:</entry>
+<entry> number of bytes to convert
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a new string buffer containing the first <parameter>n</parameter> bytes of
+<parameter>string</parameter> converted to the user's locale charset.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-iconv-locale-to-utf8">g_mime_iconv_locale_to_utf8 ()</title>
+<programlisting>char*       g_mime_iconv_locale_to_utf8     (const char *string);</programlisting>
+<para>
+Allocates a new string buffer containing <parameter>string</parameter> in UTF-8.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>string</parameter>&nbsp;:</entry>
+<entry> string in locale charset
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a new string buffer containing <parameter>string</parameter> converted to UTF-8.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-iconv-locale-to-utf8-length">g_mime_iconv_locale_to_utf8_length ()</title>
+<programlisting>char*       g_mime_iconv_locale_to_utf8_length
+                                            (const char *string,
+                                             <link linkend="size-t">size_t</link> n);</programlisting>
+<para>
+Allocates a new string buffer containing the first <parameter>n</parameter> bytes of
+<parameter>string</parameter> converted to UTF-8.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>string</parameter>&nbsp;:</entry>
+<entry> string in locale charset
+</entry></row>
+<row><entry align="right"><parameter>n</parameter>&nbsp;:</entry>
+<entry> number of bytes to convert
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a new string buffer containing the first <parameter>n</parameter> bytes of
+<parameter>string</parameter> converted to UTF-8.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+
+</refsect1>
+
+
+
+
+</refentry>
diff -uNr gmime-1.90.0/doc/sgml/gmime-iconv.sgml gmime/doc/sgml/gmime-iconv.sgml
--- gmime-1.90.0/doc/sgml/gmime-iconv.sgml	Thu Jan  1 01:00:00 1970
+++ gmime/doc/sgml/gmime-iconv.sgml	Thu May 23 07:21:37 2002
@@ -0,0 +1,127 @@
+<refentry id="gmime-gmime-iconv">
+<refmeta>
+<refentrytitle>gmime-iconv</refentrytitle>
+<manvolnum>3</manvolnum>
+<refmiscinfo>GMIME Library</refmiscinfo>
+</refmeta>
+
+<refnamediv>
+<refname>gmime-iconv</refname><refpurpose></refpurpose>
+</refnamediv>
+
+<refsynopsisdiv><title>Synopsis</title>
+<synopsis>
+
+
+
+void        <link linkend="g-mime-iconv-init">g_mime_iconv_init</link>               (void);
+<link linkend="iconv-t">iconv_t</link>     <link linkend="g-mime-iconv-open">g_mime_iconv_open</link>               (const char *to,
+                                             const char *from);
+#define     <link linkend="g-mime-iconv">g_mime_iconv</link>                    (cd,inbuf,inleft,outbuf,outleft)
+int         <link linkend="g-mime-iconv-close">g_mime_iconv_close</link>              (<link linkend="iconv-t">iconv_t</link> cd);
+</synopsis>
+</refsynopsisdiv>
+
+
+
+
+
+<refsect1>
+<title>Description</title>
+<para>
+
+</para>
+</refsect1>
+
+<refsect1>
+<title>Details</title>
+<refsect2>
+<title><anchor id="g-mime-iconv-init">g_mime_iconv_init ()</title>
+<programlisting>void        g_mime_iconv_init               (void);</programlisting>
+<para>
+Initialize GMime's iconv cache. This *MUST* be called before any
+gmime-iconv interfaces will work correctly.</para>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="g-mime-iconv-open">g_mime_iconv_open ()</title>
+<programlisting><link linkend="iconv-t">iconv_t</link>     g_mime_iconv_open               (const char *to,
+                                             const char *from);</programlisting>
+<para>
+Allocates a coversion descriptor suitable for converting byte
+sequences from charset <parameter>from</parameter> to charset <parameter>to</parameter>. The resulting
+descriptor can be used with iconv (or the g_mime_iconv wrapper) any
+number of times until closed using g_mime_iconv_close.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>to</parameter>&nbsp;:</entry>
+<entry> charset to convert to
+</entry></row>
+<row><entry align="right"><parameter>from</parameter>&nbsp;:</entry>
+<entry> charset to convert from
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a new conversion descriptor for use with iconv on success
+or (iconv_t) -1 on fail as well as setting an appropriate errno
+value.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-iconv">g_mime_iconv()</title>
+<programlisting>#define     g_mime_iconv(cd,inbuf,inleft,outbuf,outleft)</programlisting>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>cd</parameter>&nbsp;:</entry>
+<entry>
+</entry></row>
+<row><entry align="right"><parameter>inbuf</parameter>&nbsp;:</entry>
+<entry>
+</entry></row>
+<row><entry align="right"><parameter>inleft</parameter>&nbsp;:</entry>
+<entry>
+</entry></row>
+<row><entry align="right"><parameter>outbuf</parameter>&nbsp;:</entry>
+<entry>
+</entry></row>
+<row><entry align="right"><parameter>outleft</parameter>&nbsp;:</entry>
+<entry>
+
+
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-iconv-close">g_mime_iconv_close ()</title>
+<programlisting>int         g_mime_iconv_close              (<link linkend="iconv-t">iconv_t</link> cd);</programlisting>
+<para>
+Closes the iconv descriptor <parameter>cd</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>cd</parameter>&nbsp;:</entry>
+<entry> iconv conversion descriptor
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or -1 on fail as well as setting an
+appropriate errno value.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+
+</refsect1>
+
+
+
+
+</refentry>
diff -uNr gmime-1.90.0/doc/sgml/gmime-message-partial.sgml gmime/doc/sgml/gmime-message-partial.sgml
--- gmime-1.90.0/doc/sgml/gmime-message-partial.sgml	Thu Jan  1 01:00:00 1970
+++ gmime/doc/sgml/gmime-message-partial.sgml	Thu May 23 07:21:37 2002
@@ -0,0 +1,211 @@
+<refentry id="gmime-gmime-message-partial">
+<refmeta>
+<refentrytitle>gmime-message-partial</refentrytitle>
+<manvolnum>3</manvolnum>
+<refmiscinfo>GMIME Library</refmiscinfo>
+</refmeta>
+
+<refnamediv>
+<refname>gmime-message-partial</refname><refpurpose></refpurpose>
+</refnamediv>
+
+<refsynopsisdiv><title>Synopsis</title>
+<synopsis>
+
+
+
+struct      <link linkend="GMimeMessagePartial">GMimeMessagePartial</link>;
+<link linkend="GMimeMessagePartial">GMimeMessagePartial</link>* <link linkend="g-mime-message-partial-new">g_mime_message_partial_new</link>
+                                            (const char *id,
+                                             int number,
+                                             int total);
+const char* <link linkend="g-mime-message-partial-get-id">g_mime_message_partial_get_id</link>   (<link linkend="GMimeMessagePartial">GMimeMessagePartial</link> *partial);
+int         <link linkend="g-mime-message-partial-get-number">g_mime_message_partial_get_number</link>
+                                            (<link linkend="GMimeMessagePartial">GMimeMessagePartial</link> *partial);
+int         <link linkend="g-mime-message-partial-get-total">g_mime_message_partial_get_total</link>
+                                            (<link linkend="GMimeMessagePartial">GMimeMessagePartial</link> *partial);
+<link linkend="GMimeMessage">GMimeMessage</link>* <link linkend="g-mime-message-partial-reconstruct-message">g_mime_message_partial_reconstruct_message</link>
+                                            (<link linkend="GMimeMessagePartial">GMimeMessagePartial</link> **partials,
+                                             <link linkend="size-t">size_t</link> num);
+<link linkend="GMimeMessage">GMimeMessage</link>** <link linkend="g-mime-message-partial-split-message">g_mime_message_partial_split_message</link>
+                                            (<link linkend="GMimeMessage">GMimeMessage</link> *message,
+                                             <link linkend="size-t">size_t</link> max_size,
+                                             <link linkend="size-t">size_t</link> *nparts);
+
+
+</synopsis>
+</refsynopsisdiv>
+
+
+
+
+
+<refsect1>
+<title>Description</title>
+<para>
+
+</para>
+</refsect1>
+
+<refsect1>
+<title>Details</title>
+<refsect2>
+<title><anchor id="GMimeMessagePartial">struct GMimeMessagePartial</title>
+<programlisting>struct GMimeMessagePartial {
+	GMimePart parent_object;
+	
+	char *id;
+	int number;
+	int total;
+};
+</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="g-mime-message-partial-new">g_mime_message_partial_new ()</title>
+<programlisting><link linkend="GMimeMessagePartial">GMimeMessagePartial</link>* g_mime_message_partial_new
+                                            (const char *id,
+                                             int number,
+                                             int total);</programlisting>
+<para>
+Creates a new MIME message/partial object.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>id</parameter>&nbsp;:</entry>
+<entry> message/partial part id
+</entry></row>
+<row><entry align="right"><parameter>number</parameter>&nbsp;:</entry>
+<entry> message/partial part number
+</entry></row>
+<row><entry align="right"><parameter>total</parameter>&nbsp;:</entry>
+<entry> total number of message/partial parts
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>an empty MIME message/partial object.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-message-partial-get-id">g_mime_message_partial_get_id ()</title>
+<programlisting>const char* g_mime_message_partial_get_id   (<link linkend="GMimeMessagePartial">GMimeMessagePartial</link> *partial);</programlisting>
+<para>
+Gets the message/partial id parameter value.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>partial</parameter>&nbsp;:</entry>
+<entry> message/partial object
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the message/partial id or <literal>NULL</literal> on fail.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-message-partial-get-number">g_mime_message_partial_get_number ()</title>
+<programlisting>int         g_mime_message_partial_get_number
+                                            (<link linkend="GMimeMessagePartial">GMimeMessagePartial</link> *partial);</programlisting>
+<para>
+Gets the message/partial part number.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>partial</parameter>&nbsp;:</entry>
+<entry> message/partial object
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the message/partial part number or -1 on fail.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-message-partial-get-total">g_mime_message_partial_get_total ()</title>
+<programlisting>int         g_mime_message_partial_get_total
+                                            (<link linkend="GMimeMessagePartial">GMimeMessagePartial</link> *partial);</programlisting>
+<para>
+Gets the total number of message/partial parts needed to
+reconstruct the original message.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>partial</parameter>&nbsp;:</entry>
+<entry> message/partial object
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the total number of message/partial parts needed to
+reconstruct the original message or -1 on fail.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-message-partial-reconstruct-message">g_mime_message_partial_reconstruct_message ()</title>
+<programlisting><link linkend="GMimeMessage">GMimeMessage</link>* g_mime_message_partial_reconstruct_message
+                                            (<link linkend="GMimeMessagePartial">GMimeMessagePartial</link> **partials,
+                                             <link linkend="size-t">size_t</link> num);</programlisting>
+<para>
+Reconstructs the GMimeMessage from the given message/partial parts
+in <parameter>partials</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>partials</parameter>&nbsp;:</entry>
+<entry> an array of message/partial mime parts
+</entry></row>
+<row><entry align="right"><parameter>num</parameter>&nbsp;:</entry>
+<entry> the number of elements in <parameter>partials</parameter>
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a GMimeMessage object on success or <literal>NULL</literal> on fail.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-message-partial-split-message">g_mime_message_partial_split_message ()</title>
+<programlisting><link linkend="GMimeMessage">GMimeMessage</link>** g_mime_message_partial_split_message
+                                            (<link linkend="GMimeMessage">GMimeMessage</link> *message,
+                                             <link linkend="size-t">size_t</link> max_size,
+                                             <link linkend="size-t">size_t</link> *nparts);</programlisting>
+<para>
+Splits <parameter>message</parameter> into an array of <link linkend="GMimeMessage">GMimeMessage</link> objects each
+containing a single <link linkend="GMimeMessagePartial">GMimeMessagePartial</link> object containing
+<parameter>max_size</parameter> bytes or fewer. <parameter>nparts</parameter> is set to the number of
+<link linkend="GMimeMessagePartial">GMimeMessagePartial</link> objects created.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>message</parameter>&nbsp;:</entry>
+<entry> message object
+</entry></row>
+<row><entry align="right"><parameter>max_size</parameter>&nbsp;:</entry>
+<entry> max size
+</entry></row>
+<row><entry align="right"><parameter>nparts</parameter>&nbsp;:</entry>
+<entry> number of parts
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>an array of <link linkend="GMimeMessage">GMimeMessage</link> objects and sets <parameter>nparts</parameter> to th
+number of messages returned or <literal>NULL</literal> on fail.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+
+</refsect1>
+
+
+
+
+</refentry>
diff -uNr gmime-1.90.0/doc/sgml/gmime-message.sgml gmime/doc/sgml/gmime-message.sgml
--- gmime-1.90.0/doc/sgml/gmime-message.sgml	Thu Jan  1 01:00:00 1970
+++ gmime/doc/sgml/gmime-message.sgml	Thu May 23 07:21:37 2002
@@ -0,0 +1,677 @@
+<refentry id="gmime-gmime-message">
+<refmeta>
+<refentrytitle>gmime-message</refentrytitle>
+<manvolnum>3</manvolnum>
+<refmiscinfo>GMIME Library</refmiscinfo>
+</refmeta>
+
+<refnamediv>
+<refname>gmime-message</refname><refpurpose></refpurpose>
+</refnamediv>
+
+<refsynopsisdiv><title>Synopsis</title>
+<synopsis>
+
+
+
+#define     <link linkend="GMIME-RECIPIENT-TYPE-TO-CAPS">GMIME_RECIPIENT_TYPE_TO</link>
+#define     <link linkend="GMIME-RECIPIENT-TYPE-CC-CAPS">GMIME_RECIPIENT_TYPE_CC</link>
+#define     <link linkend="GMIME-RECIPIENT-TYPE-BCC-CAPS">GMIME_RECIPIENT_TYPE_BCC</link>
+struct      <link linkend="GMimeMessage">GMimeMessage</link>;
+<link linkend="GMimeMessage">GMimeMessage</link>* <link linkend="g-mime-message-new">g_mime_message_new</link>            (<link linkend="gboolean">gboolean</link> pretty_headers);
+void        <link linkend="g-mime-message-set-sender">g_mime_message_set_sender</link>       (<link linkend="GMimeMessage">GMimeMessage</link> *message,
+                                             const char *sender);
+const char* <link linkend="g-mime-message-get-sender">g_mime_message_get_sender</link>       (<link linkend="GMimeMessage">GMimeMessage</link> *message);
+void        <link linkend="g-mime-message-set-reply-to">g_mime_message_set_reply_to</link>     (<link linkend="GMimeMessage">GMimeMessage</link> *message,
+                                             const char *reply_to);
+const char* <link linkend="g-mime-message-get-reply-to">g_mime_message_get_reply_to</link>     (<link linkend="GMimeMessage">GMimeMessage</link> *message);
+void        <link linkend="g-mime-message-add-recipient">g_mime_message_add_recipient</link>    (<link linkend="GMimeMessage">GMimeMessage</link> *message,
+                                             char *type,
+                                             const char *name,
+                                             const char *address);
+void        <link linkend="g-mime-message-add-recipients-from-string">g_mime_message_add_recipients_from_string</link>
+                                            (<link linkend="GMimeMessage">GMimeMessage</link> *message,
+                                             char *type,
+                                             const char *string);
+<link linkend="InternetAddressList">InternetAddressList</link>* <link linkend="g-mime-message-get-recipients">g_mime_message_get_recipients</link>
+                                            (<link linkend="GMimeMessage">GMimeMessage</link> *message,
+                                             const char *type);
+void        <link linkend="g-mime-message-set-subject">g_mime_message_set_subject</link>      (<link linkend="GMimeMessage">GMimeMessage</link> *message,
+                                             const char *subject);
+const char* <link linkend="g-mime-message-get-subject">g_mime_message_get_subject</link>      (<link linkend="GMimeMessage">GMimeMessage</link> *message);
+void        <link linkend="g-mime-message-set-date">g_mime_message_set_date</link>         (<link linkend="GMimeMessage">GMimeMessage</link> *message,
+                                             <link linkend="time-t">time_t</link> date,
+                                             int gmt_offset);
+void        <link linkend="g-mime-message-get-date">g_mime_message_get_date</link>         (<link linkend="GMimeMessage">GMimeMessage</link> *message,
+                                             <link linkend="time-t">time_t</link> *date,
+                                             int *gmt_offset);
+char*       <link linkend="g-mime-message-get-date-string">g_mime_message_get_date_string</link>  (<link linkend="GMimeMessage">GMimeMessage</link> *message);
+void        <link linkend="g-mime-message-set-message-id">g_mime_message_set_message_id</link>   (<link linkend="GMimeMessage">GMimeMessage</link> *message,
+                                             const char *message_id);
+const char* <link linkend="g-mime-message-get-message-id">g_mime_message_get_message_id</link>   (<link linkend="GMimeMessage">GMimeMessage</link> *message);
+void        <link linkend="g-mime-message-add-header">g_mime_message_add_header</link>       (<link linkend="GMimeMessage">GMimeMessage</link> *message,
+                                             const char *header,
+                                             const char *value);
+void        <link linkend="g-mime-message-set-header">g_mime_message_set_header</link>       (<link linkend="GMimeMessage">GMimeMessage</link> *message,
+                                             const char *header,
+                                             const char *value);
+const char* <link linkend="g-mime-message-get-header">g_mime_message_get_header</link>       (<link linkend="GMimeMessage">GMimeMessage</link> *message,
+                                             const char *header);
+void        <link linkend="g-mime-message-set-mime-part">g_mime_message_set_mime_part</link>    (<link linkend="GMimeMessage">GMimeMessage</link> *message,
+                                             <link linkend="GMimeObject">GMimeObject</link> *mime_part);
+<link linkend="ssize-t">ssize_t</link>     <link linkend="g-mime-message-write-to-stream">g_mime_message_write_to_stream</link>  (<link linkend="GMimeMessage">GMimeMessage</link> *message,
+                                             <link linkend="GMimeStream">GMimeStream</link> *stream);
+char*       <link linkend="g-mime-message-to-string">g_mime_message_to_string</link>        (<link linkend="GMimeMessage">GMimeMessage</link> *message);
+char*       <link linkend="g-mime-message-get-body">g_mime_message_get_body</link>         (const <link linkend="GMimeMessage">GMimeMessage</link> *message,
+                                             <link linkend="gboolean">gboolean</link> want_plain,
+                                             <link linkend="gboolean">gboolean</link> *is_html);
+char*       <link linkend="g-mime-message-get-headers">g_mime_message_get_headers</link>      (<link linkend="GMimeMessage">GMimeMessage</link> *message);
+void        <link linkend="g-mime-message-foreach-part">g_mime_message_foreach_part</link>     (<link linkend="GMimeMessage">GMimeMessage</link> *message,
+                                             <link linkend="GMimePartFunc">GMimePartFunc</link> callback,
+                                             <link linkend="gpointer">gpointer</link> data);
+
+
+</synopsis>
+</refsynopsisdiv>
+
+
+
+
+
+<refsect1>
+<title>Description</title>
+<para>
+
+</para>
+</refsect1>
+
+<refsect1>
+<title>Details</title>
+<refsect2>
+<title><anchor id="GMIME-RECIPIENT-TYPE-TO-CAPS">GMIME_RECIPIENT_TYPE_TO</title>
+<programlisting>#define     GMIME_RECIPIENT_TYPE_TO</programlisting>
+<para>
+Recipients in the To: header.</para>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="GMIME-RECIPIENT-TYPE-CC-CAPS">GMIME_RECIPIENT_TYPE_CC</title>
+<programlisting>#define     GMIME_RECIPIENT_TYPE_CC</programlisting>
+<para>
+Recipients in the Cc: header.</para>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="GMIME-RECIPIENT-TYPE-BCC-CAPS">GMIME_RECIPIENT_TYPE_BCC</title>
+<programlisting>#define     GMIME_RECIPIENT_TYPE_BCC</programlisting>
+<para>
+Recipients in the Bcc: header.</para>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="GMimeMessage">struct GMimeMessage</title>
+<programlisting>struct GMimeMessage {
+	GMimeObject parent_object;
+	
+	char *from;
+	char *reply_to;
+	
+	GHashTable *recipients;
+	
+	char *subject;
+	
+	time_t date;
+	int gmt_offset;     /* GMT offset */
+	
+	char *message_id;
+	
+	GMimeObject *mime_part;
+};
+</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="g-mime-message-new">g_mime_message_new ()</title>
+<programlisting><link linkend="GMimeMessage">GMimeMessage</link>* g_mime_message_new            (<link linkend="gboolean">gboolean</link> pretty_headers);</programlisting>
+<para>
+If <parameter>pretty_headers</parameter> is <literal>TRUE</literal>, then the standard rfc822 headers are
+initialized so as to put headers in a nice friendly order. This is
+strictly a cosmetic thing, so if you are unsure, it is safe to say
+no (<literal>FALSE</literal>).</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>pretty_headers</parameter>&nbsp;:</entry>
+<entry> make pretty headers 
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>an empty MIME Message object.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-message-set-sender">g_mime_message_set_sender ()</title>
+<programlisting>void        g_mime_message_set_sender       (<link linkend="GMimeMessage">GMimeMessage</link> *message,
+                                             const char *sender);</programlisting>
+<para>
+Set the sender's name and address on the MIME Message.
+(ex: "\"Joe Sixpack\" &lt;joe<parameter>sixpack</parameter>.org&gt;")</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>message</parameter>&nbsp;:</entry>
+<entry> MIME Message to change
+</entry></row>
+<row><entry align="right"><parameter>sender</parameter>&nbsp;:</entry>
+<entry> The name and address of the sender
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-message-get-sender">g_mime_message_get_sender ()</title>
+<programlisting>const char* g_mime_message_get_sender       (<link linkend="GMimeMessage">GMimeMessage</link> *message);</programlisting>
+<para>
+Gets the email address of the sender from <parameter>message</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>message</parameter>&nbsp;:</entry>
+<entry> MIME Message
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the sender's name and address of the MIME Message.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-message-set-reply-to">g_mime_message_set_reply_to ()</title>
+<programlisting>void        g_mime_message_set_reply_to     (<link linkend="GMimeMessage">GMimeMessage</link> *message,
+                                             const char *reply_to);</programlisting>
+<para>
+Set the sender's Reply-To address on the MIME Message.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>message</parameter>&nbsp;:</entry>
+<entry> MIME Message to change
+</entry></row>
+<row><entry align="right"><parameter>reply_to</parameter>&nbsp;:</entry>
+<entry> The Reply-To address
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-message-get-reply-to">g_mime_message_get_reply_to ()</title>
+<programlisting>const char* g_mime_message_get_reply_to     (<link linkend="GMimeMessage">GMimeMessage</link> *message);</programlisting>
+<para>
+Gets the Reply-To address from <parameter>message</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>message</parameter>&nbsp;:</entry>
+<entry> MIME Message
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the sender's Reply-To address from the MIME Message.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-message-add-recipient">g_mime_message_add_recipient ()</title>
+<programlisting>void        g_mime_message_add_recipient    (<link linkend="GMimeMessage">GMimeMessage</link> *message,
+                                             char *type,
+                                             const char *name,
+                                             const char *address);</programlisting>
+<para>
+Add a recipient of a chosen type to the MIME Message. Available
+recipient types include: <link linkend="GMIME-RECIPIENT-TYPE-TO-CAPS">GMIME_RECIPIENT_TYPE_TO</link>,
+<link linkend="GMIME-RECIPIENT-TYPE-CC-CAPS">GMIME_RECIPIENT_TYPE_CC</link> and <link linkend="GMIME-RECIPIENT-TYPE-BCC-CAPS">GMIME_RECIPIENT_TYPE_BCC</link>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>message</parameter>&nbsp;:</entry>
+<entry> MIME Message to change
+</entry></row>
+<row><entry align="right"><parameter>type</parameter>&nbsp;:</entry>
+<entry> Recipient type
+</entry></row>
+<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
+<entry> The recipient's name
+</entry></row>
+<row><entry align="right"><parameter>address</parameter>&nbsp;:</entry>
+<entry> The recipient's address
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-message-add-recipients-from-string">g_mime_message_add_recipients_from_string ()</title>
+<programlisting>void        g_mime_message_add_recipients_from_string
+                                            (<link linkend="GMimeMessage">GMimeMessage</link> *message,
+                                             char *type,
+                                             const char *string);</programlisting>
+<para>
+Add a list of recipients of a chosen type to the MIME
+Message. Available recipient types include:
+<link linkend="GMIME-RECIPIENT-TYPE-TO-CAPS">GMIME_RECIPIENT_TYPE_TO</link>, <link linkend="GMIME-RECIPIENT-TYPE-CC-CAPS">GMIME_RECIPIENT_TYPE_CC</link> and
+<link linkend="GMIME-RECIPIENT-TYPE-BCC-CAPS">GMIME_RECIPIENT_TYPE_BCC</link>. The string must be in the format
+specified in rfc822.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>message</parameter>&nbsp;:</entry>
+<entry> MIME Message
+</entry></row>
+<row><entry align="right"><parameter>type</parameter>&nbsp;:</entry>
+<entry> Recipient type
+</entry></row>
+<row><entry align="right"><parameter>string</parameter>&nbsp;:</entry>
+<entry> A string of recipient names and addresses.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-message-get-recipients">g_mime_message_get_recipients ()</title>
+<programlisting><link linkend="InternetAddressList">InternetAddressList</link>* g_mime_message_get_recipients
+                                            (<link linkend="GMimeMessage">GMimeMessage</link> *message,
+                                             const char *type);</programlisting>
+<para>
+Gets a list of recipients of type <parameter>type</parameter> from <parameter>message</parameter>. Available
+recipient types include: <link linkend="GMIME-RECIPIENT-TYPE-TO-CAPS">GMIME_RECIPIENT_TYPE_TO</link>,
+<link linkend="GMIME-RECIPIENT-TYPE-CC-CAPS">GMIME_RECIPIENT_TYPE_CC</link> and <link linkend="GMIME-RECIPIENT-TYPE-BCC-CAPS">GMIME_RECIPIENT_TYPE_BCC</link>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>message</parameter>&nbsp;:</entry>
+<entry> MIME Message
+</entry></row>
+<row><entry align="right"><parameter>type</parameter>&nbsp;:</entry>
+<entry> Recipient type
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a list of recipients of a chosen type from the MIME
+Message.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-message-set-subject">g_mime_message_set_subject ()</title>
+<programlisting>void        g_mime_message_set_subject      (<link linkend="GMimeMessage">GMimeMessage</link> *message,
+                                             const char *subject);</programlisting>
+<para>
+Set the Subject field on a MIME Message.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>message</parameter>&nbsp;:</entry>
+<entry> MIME Message
+</entry></row>
+<row><entry align="right"><parameter>subject</parameter>&nbsp;:</entry>
+<entry> Subject string
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-message-get-subject">g_mime_message_get_subject ()</title>
+<programlisting>const char* g_mime_message_get_subject      (<link linkend="GMimeMessage">GMimeMessage</link> *message);</programlisting>
+<para>
+Gets the message's subject.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>message</parameter>&nbsp;:</entry>
+<entry> MIME Message
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the Subject field on a MIME Message.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-message-set-date">g_mime_message_set_date ()</title>
+<programlisting>void        g_mime_message_set_date         (<link linkend="GMimeMessage">GMimeMessage</link> *message,
+                                             <link linkend="time-t">time_t</link> date,
+                                             int gmt_offset);</programlisting>
+<para>
+Sets the sent-date on a MIME Message.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>message</parameter>&nbsp;:</entry>
+<entry> MIME Message
+</entry></row>
+<row><entry align="right"><parameter>date</parameter>&nbsp;:</entry>
+<entry> Sent-date (ex: gotten from time (NULL))
+</entry></row>
+<row><entry align="right"><parameter>gmt_offset</parameter>&nbsp;:</entry>
+<entry> GMT date offset (in +/- hours)
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-message-get-date">g_mime_message_get_date ()</title>
+<programlisting>void        g_mime_message_get_date         (<link linkend="GMimeMessage">GMimeMessage</link> *message,
+                                             <link linkend="time-t">time_t</link> *date,
+                                             int *gmt_offset);</programlisting>
+<para>
+Stores the date in time_t format in <link linkend="date">date</link> and the GMT offset in
+<parameter>gmt_offset</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>message</parameter>&nbsp;:</entry>
+<entry> MIME Message
+</entry></row>
+<row><entry align="right"><parameter>date</parameter>&nbsp;:</entry>
+<entry> Sent-date
+</entry></row>
+<row><entry align="right"><parameter>gmt_offset</parameter>&nbsp;:</entry>
+<entry> GMT date offset (in +/- hours)
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-message-get-date-string">g_mime_message_get_date_string ()</title>
+<programlisting>char*       g_mime_message_get_date_string  (<link linkend="GMimeMessage">GMimeMessage</link> *message);</programlisting>
+<para>
+Gets the message's sent date in string format.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>message</parameter>&nbsp;:</entry>
+<entry> MIME Message
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the sent-date of the MIME Message in string format.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-message-set-message-id">g_mime_message_set_message_id ()</title>
+<programlisting>void        g_mime_message_set_message_id   (<link linkend="GMimeMessage">GMimeMessage</link> *message,
+                                             const char *message_id);</programlisting>
+<para>
+Set the Message-Id on a message.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>message</parameter>&nbsp;:</entry>
+<entry> MIME Message
+</entry></row>
+<row><entry align="right"><parameter>message_id</parameter>&nbsp;:</entry>
+<entry> message-id
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-message-get-message-id">g_mime_message_get_message_id ()</title>
+<programlisting>const char* g_mime_message_get_message_id   (<link linkend="GMimeMessage">GMimeMessage</link> *message);</programlisting>
+<para>
+Gets the Message-Id header of <parameter>message</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>message</parameter>&nbsp;:</entry>
+<entry> MIME Message
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the Message-Id of a message.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-message-add-header">g_mime_message_add_header ()</title>
+<programlisting>void        g_mime_message_add_header       (<link linkend="GMimeMessage">GMimeMessage</link> *message,
+                                             const char *header,
+                                             const char *value);</programlisting>
+<para>
+Add an arbitrary message header to the MIME Message such as X-Mailer,
+X-Priority, or In-Reply-To.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>message</parameter>&nbsp;:</entry>
+<entry> MIME Message
+</entry></row>
+<row><entry align="right"><parameter>header</parameter>&nbsp;:</entry>
+<entry> rfc822 header field
+</entry></row>
+<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
+<entry> the contents of the header field
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-message-set-header">g_mime_message_set_header ()</title>
+<programlisting>void        g_mime_message_set_header       (<link linkend="GMimeMessage">GMimeMessage</link> *message,
+                                             const char *header,
+                                             const char *value);</programlisting>
+<para>
+Set an arbitrary message header to the MIME Message such as X-Mailer,
+X-Priority, or In-Reply-To.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>message</parameter>&nbsp;:</entry>
+<entry> MIME Message
+</entry></row>
+<row><entry align="right"><parameter>header</parameter>&nbsp;:</entry>
+<entry> rfc822 header field
+</entry></row>
+<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
+<entry> the contents of the header field
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-message-get-header">g_mime_message_get_header ()</title>
+<programlisting>const char* g_mime_message_get_header       (<link linkend="GMimeMessage">GMimeMessage</link> *message,
+                                             const char *header);</programlisting>
+<para>
+Gets the value of the requested header <parameter>header</parameter> if it exists, or
+<literal>NULL</literal> otherwise.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>message</parameter>&nbsp;:</entry>
+<entry> MIME Message
+</entry></row>
+<row><entry align="right"><parameter>header</parameter>&nbsp;:</entry>
+<entry> rfc822 header field
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the value of the requested header (or <literal>NULL</literal> if it isn't set)
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-message-set-mime-part">g_mime_message_set_mime_part ()</title>
+<programlisting>void        g_mime_message_set_mime_part    (<link linkend="GMimeMessage">GMimeMessage</link> *message,
+                                             <link linkend="GMimeObject">GMimeObject</link> *mime_part);</programlisting>
+<para>
+Set the root-level MIME part of the message.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>message</parameter>&nbsp;:</entry>
+<entry> MIME Message
+</entry></row>
+<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
+<entry> The root-level MIME Part
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-message-write-to-stream">g_mime_message_write_to_stream ()</title>
+<programlisting><link linkend="ssize-t">ssize_t</link>     g_mime_message_write_to_stream  (<link linkend="GMimeMessage">GMimeMessage</link> *message,
+                                             <link linkend="GMimeStream">GMimeStream</link> *stream);</programlisting>
+<para>
+Write the contents of the MIME Message to <parameter>stream</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>message</parameter>&nbsp;:</entry>
+<entry> MIME Message
+</entry></row>
+<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
+<entry> output stream
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>-1 on fail.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-message-to-string">g_mime_message_to_string ()</title>
+<programlisting>char*       g_mime_message_to_string        (<link linkend="GMimeMessage">GMimeMessage</link> *message);</programlisting>
+<para>
+Allocates a string buffer containing the mime message <parameter>message</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>message</parameter>&nbsp;:</entry>
+<entry> MIME Message
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>an allocated string containing the MIME Message.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-message-get-body">g_mime_message_get_body ()</title>
+<programlisting>char*       g_mime_message_get_body         (const <link linkend="GMimeMessage">GMimeMessage</link> *message,
+                                             <link linkend="gboolean">gboolean</link> want_plain,
+                                             <link linkend="gboolean">gboolean</link> *is_html);</programlisting>
+<para>
+Attempts to get the body of the message in the preferred format
+specified by <parameter>want_plain</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>message</parameter>&nbsp;:</entry>
+<entry> MIME Message
+</entry></row>
+<row><entry align="right"><parameter>want_plain</parameter>&nbsp;:</entry>
+<entry> request text/plain
+</entry></row>
+<row><entry align="right"><parameter>is_html</parameter>&nbsp;:</entry>
+<entry> body returned is in html format
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the prefered form of the message body. Sets the value of
+<parameter>is_html</parameter> to <literal>TRUE</literal> if the part returned is in HTML format, otherwise
+<literal>FALSE</literal>.
+
+Note: This function is NOT guarenteed to always work as it
+makes some assumptions that are not necessarily true. It is
+recommended that you traverse the MIME structure yourself.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-message-get-headers">g_mime_message_get_headers ()</title>
+<programlisting>char*       g_mime_message_get_headers      (<link linkend="GMimeMessage">GMimeMessage</link> *message);</programlisting>
+<para>
+Allocates a string buffer containing the raw message headers.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>message</parameter>&nbsp;:</entry>
+<entry> MIME Message
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>an allocated string containing the raw message headers.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-message-foreach-part">g_mime_message_foreach_part ()</title>
+<programlisting>void        g_mime_message_foreach_part     (<link linkend="GMimeMessage">GMimeMessage</link> *message,
+                                             <link linkend="GMimePartFunc">GMimePartFunc</link> callback,
+                                             <link linkend="gpointer">gpointer</link> data);</programlisting>
+<para>
+Calls <parameter>callback</parameter> on each of the mime parts in the mime message.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>message</parameter>&nbsp;:</entry>
+<entry> MIME message
+</entry></row>
+<row><entry align="right"><parameter>callback</parameter>&nbsp;:</entry>
+<entry> function to call on each of the mime parts contained by the mime message
+</entry></row>
+<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
+<entry> extra data to pass to the callback
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+
+</refsect1>
+
+
+
+
+</refentry>
diff -uNr gmime-1.90.0/doc/sgml/gmime-multipart.sgml gmime/doc/sgml/gmime-multipart.sgml
--- gmime-1.90.0/doc/sgml/gmime-multipart.sgml	Thu Jan  1 01:00:00 1970
+++ gmime/doc/sgml/gmime-multipart.sgml	Thu May 23 07:21:37 2002
@@ -0,0 +1,420 @@
+<refentry id="gmime-gmime-multipart">
+<refmeta>
+<refentrytitle>gmime-multipart</refentrytitle>
+<manvolnum>3</manvolnum>
+<refmiscinfo>GMIME Library</refmiscinfo>
+</refmeta>
+
+<refnamediv>
+<refname>gmime-multipart</refname><refpurpose></refpurpose>
+</refnamediv>
+
+<refsynopsisdiv><title>Synopsis</title>
+<synopsis>
+
+
+
+struct      <link linkend="GMimeMultipart">GMimeMultipart</link>;
+<link linkend="GMimeMultipart">GMimeMultipart</link>* <link linkend="g-mime-multipart-new">g_mime_multipart_new</link>        (void);
+<link linkend="GMimeMultipart">GMimeMultipart</link>* <link linkend="g-mime-multipart-new-with-subtype">g_mime_multipart_new_with_subtype</link>
+                                            (const char *subtype);
+void        <link linkend="g-mime-multipart-set-preface">g_mime_multipart_set_preface</link>    (<link linkend="GMimeMultipart">GMimeMultipart</link> *multipart,
+                                             const char *preface);
+const char* <link linkend="g-mime-multipart-get-preface">g_mime_multipart_get_preface</link>    (<link linkend="GMimeMultipart">GMimeMultipart</link> *multipart);
+void        <link linkend="g-mime-multipart-set-postface">g_mime_multipart_set_postface</link>   (<link linkend="GMimeMultipart">GMimeMultipart</link> *multipart,
+                                             const char *postface);
+const char* <link linkend="g-mime-multipart-get-postface">g_mime_multipart_get_postface</link>   (<link linkend="GMimeMultipart">GMimeMultipart</link> *multipart);
+void        <link linkend="g-mime-multipart-set-boundary">g_mime_multipart_set_boundary</link>   (<link linkend="GMimeMultipart">GMimeMultipart</link> *multipart,
+                                             const char *boundary);
+const char* <link linkend="g-mime-multipart-get-boundary">g_mime_multipart_get_boundary</link>   (<link linkend="GMimeMultipart">GMimeMultipart</link> *multipart);
+void        <link linkend="g-mime-multipart-add-part">g_mime_multipart_add_part</link>       (<link linkend="GMimeMultipart">GMimeMultipart</link> *multipart,
+                                             <link linkend="GMimeObject">GMimeObject</link> *part);
+void        <link linkend="g-mime-multipart-add-part-at">g_mime_multipart_add_part_at</link>    (<link linkend="GMimeMultipart">GMimeMultipart</link> *multipart,
+                                             <link linkend="GMimeObject">GMimeObject</link> *part,
+                                             int index);
+int         <link linkend="g-mime-multipart-get-number">g_mime_multipart_get_number</link>     (<link linkend="GMimeMultipart">GMimeMultipart</link> *multipart);
+<link linkend="GMimeObject">GMimeObject</link>* <link linkend="g-mime-multipart-get-part">g_mime_multipart_get_part</link>      (<link linkend="GMimeMultipart">GMimeMultipart</link> *multipart,
+                                             int index);
+void        <link linkend="g-mime-multipart-remove-part">g_mime_multipart_remove_part</link>    (<link linkend="GMimeMultipart">GMimeMultipart</link> *multipart,
+                                             <link linkend="GMimeObject">GMimeObject</link> *part);
+<link linkend="GMimeObject">GMimeObject</link>* <link linkend="g-mime-multipart-remove-part-at">g_mime_multipart_remove_part_at</link>
+                                            (<link linkend="GMimeMultipart">GMimeMultipart</link> *multipart,
+                                             int index);
+void        <link linkend="g-mime-multipart-foreach">g_mime_multipart_foreach</link>        (<link linkend="GMimeMultipart">GMimeMultipart</link> *multipart,
+                                             <link linkend="GMimePartFunc">GMimePartFunc</link> callback,
+                                             <link linkend="gpointer">gpointer</link> user_data);
+const <link linkend="GMimeObject">GMimeObject</link>* <link linkend="g-mime-multipart-get-subpart-from-content-id">g_mime_multipart_get_subpart_from_content_id</link>
+                                            (<link linkend="GMimeMultipart">GMimeMultipart</link> *multipart,
+                                             const char *content_id);
+
+
+</synopsis>
+</refsynopsisdiv>
+
+
+
+
+
+<refsect1>
+<title>Description</title>
+<para>
+
+</para>
+</refsect1>
+
+<refsect1>
+<title>Details</title>
+<refsect2>
+<title><anchor id="GMimeMultipart">struct GMimeMultipart</title>
+<programlisting>struct GMimeMultipart {
+	GMimeObject parent_object;
+	
+	char *boundary;
+	
+	char *preface;
+	char *postface;
+	
+	GList *subparts;
+};
+</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="g-mime-multipart-new">g_mime_multipart_new ()</title>
+<programlisting><link linkend="GMimeMultipart">GMimeMultipart</link>* g_mime_multipart_new        (void);</programlisting>
+<para>
+Creates a new MIME multipart object with a default content-type of
+multipart/mixed.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>an empty MIME multipart object with a default content-type of
+multipart/mixed.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-multipart-new-with-subtype">g_mime_multipart_new_with_subtype ()</title>
+<programlisting><link linkend="GMimeMultipart">GMimeMultipart</link>* g_mime_multipart_new_with_subtype
+                                            (const char *subtype);</programlisting>
+<para>
+Creates a new MIME multipart object with a content-type of
+multipart/<parameter>subtype</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>subtype</parameter>&nbsp;:</entry>
+<entry> content-type subtype
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>an empty MIME multipart object with a content-type of
+multipart/<parameter>subtype</parameter>.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-multipart-set-preface">g_mime_multipart_set_preface ()</title>
+<programlisting>void        g_mime_multipart_set_preface    (<link linkend="GMimeMultipart">GMimeMultipart</link> *multipart,
+                                             const char *preface);</programlisting>
+<para>
+Sets the preface on the multipart.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>multipart</parameter>&nbsp;:</entry>
+<entry> multipart
+</entry></row>
+<row><entry align="right"><parameter>preface</parameter>&nbsp;:</entry>
+<entry> preface
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-multipart-get-preface">g_mime_multipart_get_preface ()</title>
+<programlisting>const char* g_mime_multipart_get_preface    (<link linkend="GMimeMultipart">GMimeMultipart</link> *multipart);</programlisting>
+<para>
+Gets the preface on the multipart.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>multipart</parameter>&nbsp;:</entry>
+<entry> multipart
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a pointer to the preface string on the multipart.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-multipart-set-postface">g_mime_multipart_set_postface ()</title>
+<programlisting>void        g_mime_multipart_set_postface   (<link linkend="GMimeMultipart">GMimeMultipart</link> *multipart,
+                                             const char *postface);</programlisting>
+<para>
+Sets the postface on the multipart.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>multipart</parameter>&nbsp;:</entry>
+<entry> multipart
+</entry></row>
+<row><entry align="right"><parameter>postface</parameter>&nbsp;:</entry>
+<entry> postface
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-multipart-get-postface">g_mime_multipart_get_postface ()</title>
+<programlisting>const char* g_mime_multipart_get_postface   (<link linkend="GMimeMultipart">GMimeMultipart</link> *multipart);</programlisting>
+<para>
+Gets the postface on the multipart.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>multipart</parameter>&nbsp;:</entry>
+<entry> multipart
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a pointer to the postface string on the multipart.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-multipart-set-boundary">g_mime_multipart_set_boundary ()</title>
+<programlisting>void        g_mime_multipart_set_boundary   (<link linkend="GMimeMultipart">GMimeMultipart</link> *multipart,
+                                             const char *boundary);</programlisting>
+<para>
+Sets <parameter>boundary</parameter> as the boundary on the multipart. If <parameter>boundary</parameter> is
+<literal>NULL</literal>, then a boundary will be auto-generated for you.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>multipart</parameter>&nbsp;:</entry>
+<entry> multipart
+</entry></row>
+<row><entry align="right"><parameter>boundary</parameter>&nbsp;:</entry>
+<entry> boundary or <literal>NULL</literal> to autogenerate one
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-multipart-get-boundary">g_mime_multipart_get_boundary ()</title>
+<programlisting>const char* g_mime_multipart_get_boundary   (<link linkend="GMimeMultipart">GMimeMultipart</link> *multipart);</programlisting>
+<para>
+Gets the boundary on the multipart. If the internal boundary is
+<literal>NULL</literal>, then an auto-generated boundary will be set on the multipart
+and returned.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>multipart</parameter>&nbsp;:</entry>
+<entry> multipart
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the boundary on the multipart.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-multipart-add-part">g_mime_multipart_add_part ()</title>
+<programlisting>void        g_mime_multipart_add_part       (<link linkend="GMimeMultipart">GMimeMultipart</link> *multipart,
+                                             <link linkend="GMimeObject">GMimeObject</link> *part);</programlisting>
+<para>
+Adds a mime part to the multipart.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>multipart</parameter>&nbsp;:</entry>
+<entry> multipart
+</entry></row>
+<row><entry align="right"><parameter>part</parameter>&nbsp;:</entry>
+<entry> mime part
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-multipart-add-part-at">g_mime_multipart_add_part_at ()</title>
+<programlisting>void        g_mime_multipart_add_part_at    (<link linkend="GMimeMultipart">GMimeMultipart</link> *multipart,
+                                             <link linkend="GMimeObject">GMimeObject</link> *part,
+                                             int index);</programlisting>
+<para>
+Adds a mime part to the multipart at the position <parameter>index</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>multipart</parameter>&nbsp;:</entry>
+<entry> multipart
+</entry></row>
+<row><entry align="right"><parameter>part</parameter>&nbsp;:</entry>
+<entry> mime part
+</entry></row>
+<row><entry align="right"><parameter>index</parameter>&nbsp;:</entry>
+<entry> position to insert the mime part
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-multipart-get-number">g_mime_multipart_get_number ()</title>
+<programlisting>int         g_mime_multipart_get_number     (<link linkend="GMimeMultipart">GMimeMultipart</link> *multipart);</programlisting>
+<para>
+Gets the number of mime parts contained within the multipart.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>multipart</parameter>&nbsp;:</entry>
+<entry> multipart
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of mime parts contained within the multipart.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-multipart-get-part">g_mime_multipart_get_part ()</title>
+<programlisting><link linkend="GMimeObject">GMimeObject</link>* g_mime_multipart_get_part      (<link linkend="GMimeMultipart">GMimeMultipart</link> *multipart,
+                                             int index);</programlisting>
+<para>
+Gets the mime part at position <parameter>index</parameter> within the multipart.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>multipart</parameter>&nbsp;:</entry>
+<entry> multipart
+</entry></row>
+<row><entry align="right"><parameter>index</parameter>&nbsp;:</entry>
+<entry> position of the mime part
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the mime part at position <parameter>index</parameter>.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-multipart-remove-part">g_mime_multipart_remove_part ()</title>
+<programlisting>void        g_mime_multipart_remove_part    (<link linkend="GMimeMultipart">GMimeMultipart</link> *multipart,
+                                             <link linkend="GMimeObject">GMimeObject</link> *part);</programlisting>
+<para>
+Removes the specified mime part from the multipart.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>multipart</parameter>&nbsp;:</entry>
+<entry> multipart
+</entry></row>
+<row><entry align="right"><parameter>part</parameter>&nbsp;:</entry>
+<entry> mime part
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-multipart-remove-part-at">g_mime_multipart_remove_part_at ()</title>
+<programlisting><link linkend="GMimeObject">GMimeObject</link>* g_mime_multipart_remove_part_at
+                                            (<link linkend="GMimeMultipart">GMimeMultipart</link> *multipart,
+                                             int index);</programlisting>
+<para>
+Removes the mime part at position <parameter>index</parameter> from the multipart.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>multipart</parameter>&nbsp;:</entry>
+<entry> multipart
+</entry></row>
+<row><entry align="right"><parameter>index</parameter>&nbsp;:</entry>
+<entry> position of the mime part to remove
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the mime part that was removed.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-multipart-foreach">g_mime_multipart_foreach ()</title>
+<programlisting>void        g_mime_multipart_foreach        (<link linkend="GMimeMultipart">GMimeMultipart</link> *multipart,
+                                             <link linkend="GMimePartFunc">GMimePartFunc</link> callback,
+                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
+<para>
+Calls <parameter>callback</parameter> on <parameter>multipart</parameter> and each of its subparts.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>multipart</parameter>&nbsp;:</entry>
+<entry> a multipart
+</entry></row>
+<row><entry align="right"><parameter>callback</parameter>&nbsp;:</entry>
+<entry> function to call for <parameter>multipart</parameter> and all of its subparts
+</entry></row>
+<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
+<entry> extra data to pass to the callback
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-multipart-get-subpart-from-content-id">g_mime_multipart_get_subpart_from_content_id ()</title>
+<programlisting>const <link linkend="GMimeObject">GMimeObject</link>* g_mime_multipart_get_subpart_from_content_id
+                                            (<link linkend="GMimeMultipart">GMimeMultipart</link> *multipart,
+                                             const char *content_id);</programlisting>
+<para>
+Gets the mime part with the content-id <parameter>content_id</parameter> from the
+multipart <parameter>multipart</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>multipart</parameter>&nbsp;:</entry>
+<entry> a multipart
+</entry></row>
+<row><entry align="right"><parameter>content_id</parameter>&nbsp;:</entry>
+<entry> the content id of the part to look for
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the GMimeObject whose content-id matches the search string,
+or <literal>NULL</literal> if a match cannot be found.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+
+</refsect1>
+
+
+
+
+</refentry>
diff -uNr gmime-1.90.0/doc/sgml/gmime-object.sgml gmime/doc/sgml/gmime-object.sgml
--- gmime-1.90.0/doc/sgml/gmime-object.sgml	Thu Jan  1 01:00:00 1970
+++ gmime/doc/sgml/gmime-object.sgml	Thu May 23 07:21:37 2002
@@ -0,0 +1,482 @@
+<refentry id="gmime-gmime-object">
+<refmeta>
+<refentrytitle>gmime-object</refentrytitle>
+<manvolnum>3</manvolnum>
+<refmiscinfo>GMIME Library</refmiscinfo>
+</refmeta>
+
+<refnamediv>
+<refname>gmime-object</refname><refpurpose></refpurpose>
+</refnamediv>
+
+<refsynopsisdiv><title>Synopsis</title>
+<synopsis>
+
+
+
+struct      <link linkend="GMimeObject">GMimeObject</link>;
+void        (<link linkend="GMimePartFunc">*GMimePartFunc</link>)                (<link linkend="GMimeObject">GMimeObject</link> *part,
+                                             <link linkend="gpointer">gpointer</link> data);
+void        <link linkend="g-mime-object-register-type">g_mime_object_register_type</link>     (const char *type,
+                                             const char *subtype,
+                                             <link linkend="GType">GType</link> object_type);
+<link linkend="GMimeObject">GMimeObject</link>* <link linkend="g-mime-object-new-type">g_mime_object_new_type</link>         (const char *type,
+                                             const char *subtype);
+void        <link linkend="g-mime-object-ref">g_mime_object_ref</link>               (<link linkend="GMimeObject">GMimeObject</link> *object);
+void        <link linkend="g-mime-object-unref">g_mime_object_unref</link>             (<link linkend="GMimeObject">GMimeObject</link> *object);
+void        <link linkend="g-mime-object-set-content-type">g_mime_object_set_content_type</link>  (<link linkend="GMimeObject">GMimeObject</link> *object,
+                                             <link linkend="GMimeContentType">GMimeContentType</link> *mime_type);
+const <link linkend="GMimeContentType">GMimeContentType</link>* <link linkend="g-mime-object-get-content-type">g_mime_object_get_content_type</link>
+                                            (<link linkend="GMimeObject">GMimeObject</link> *object);
+void        <link linkend="g-mime-object-set-content-type-parameter">g_mime_object_set_content_type_parameter</link>
+                                            (<link linkend="GMimeObject">GMimeObject</link> *object,
+                                             const char *name,
+                                             const char *value);
+const char* <link linkend="g-mime-object-get-content-type-parameter">g_mime_object_get_content_type_parameter</link>
+                                            (<link linkend="GMimeObject">GMimeObject</link> *object,
+                                             const char *name);
+void        <link linkend="g-mime-object-set-content-id">g_mime_object_set_content_id</link>    (<link linkend="GMimeObject">GMimeObject</link> *object,
+                                             const char *content_id);
+const char* <link linkend="g-mime-object-get-content-id">g_mime_object_get_content_id</link>    (<link linkend="GMimeObject">GMimeObject</link> *object);
+void        <link linkend="g-mime-object-add-header">g_mime_object_add_header</link>        (<link linkend="GMimeObject">GMimeObject</link> *object,
+                                             const char *header,
+                                             const char *value);
+void        <link linkend="g-mime-object-set-header">g_mime_object_set_header</link>        (<link linkend="GMimeObject">GMimeObject</link> *object,
+                                             const char *header,
+                                             const char *value);
+const char* <link linkend="g-mime-object-get-header">g_mime_object_get_header</link>        (<link linkend="GMimeObject">GMimeObject</link> *object,
+                                             const char *header);
+void        <link linkend="g-mime-object-remove-header">g_mime_object_remove_header</link>     (<link linkend="GMimeObject">GMimeObject</link> *object,
+                                             const char *header);
+char*       <link linkend="g-mime-object-get-headers">g_mime_object_get_headers</link>       (<link linkend="GMimeObject">GMimeObject</link> *object);
+<link linkend="ssize-t">ssize_t</link>     <link linkend="g-mime-object-write-to-stream">g_mime_object_write_to_stream</link>   (<link linkend="GMimeObject">GMimeObject</link> *object,
+                                             <link linkend="GMimeStream">GMimeStream</link> *stream);
+char*       <link linkend="g-mime-object-to-string">g_mime_object_to_string</link>         (<link linkend="GMimeObject">GMimeObject</link> *object);
+
+
+</synopsis>
+</refsynopsisdiv>
+
+
+
+
+
+<refsect1>
+<title>Description</title>
+<para>
+
+</para>
+</refsect1>
+
+<refsect1>
+<title>Details</title>
+<refsect2>
+<title><anchor id="GMimeObject">struct GMimeObject</title>
+<programlisting>struct GMimeObject {
+	GObject parent_object;
+	
+	GMimeContentType *content_type;
+	GMimeHeader *headers;
+	
+	char *content_id;
+};
+</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="GMimePartFunc">GMimePartFunc ()</title>
+<programlisting>void        (*GMimePartFunc)                (<link linkend="GMimeObject">GMimeObject</link> *part,
+                                             <link linkend="gpointer">gpointer</link> data);</programlisting>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>part</parameter>&nbsp;:</entry>
+<entry>
+</entry></row>
+<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
+<entry>
+
+
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-object-register-type">g_mime_object_register_type ()</title>
+<programlisting>void        g_mime_object_register_type     (const char *type,
+                                             const char *subtype,
+                                             <link linkend="GType">GType</link> object_type);</programlisting>
+<para>
+Registers the object type <parameter>object_type</parameter> for use with the
+<link linkend="g-mime-object-new-type">g_mime_object_new_type</link> convenience function.
+</para>
+<para>
+Note: You may use the wildcard "*" to match any type and/or
+subtype.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>type</parameter>&nbsp;:</entry>
+<entry> mime type
+</entry></row>
+<row><entry align="right"><parameter>subtype</parameter>&nbsp;:</entry>
+<entry> mime subtype
+</entry></row>
+<row><entry align="right"><parameter>object_type</parameter>&nbsp;:</entry>
+<entry> object type
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-object-new-type">g_mime_object_new_type ()</title>
+<programlisting><link linkend="GMimeObject">GMimeObject</link>* g_mime_object_new_type         (const char *type,
+                                             const char *subtype);</programlisting>
+<para>
+Performs a lookup of registered <link linkend="GMimeObject">GMimeObject</link> subclasses, registered
+using <link linkend="g-mime-object-register-type">g_mime_object_register_type</link>, to find an appropriate class
+capable of handling MIME parts of type <parameter>type</parameter>/<parameter>subtype</parameter>. If no class
+has been registered to handle that type, it looks for a registered
+class that can handle <parameter>type</parameter>/*. If that also fails, then it will use
+the generic part class, <link linkend="GMimePart">GMimePart</link>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>type</parameter>&nbsp;:</entry>
+<entry> mime type
+</entry></row>
+<row><entry align="right"><parameter>subtype</parameter>&nbsp;:</entry>
+<entry> mime subtype
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>an appropriate <link linkend="GMimeObject">GMimeObject</link> registered to handle mime-types
+of <parameter>type</parameter>/<parameter>subtype</parameter>.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-object-ref">g_mime_object_ref ()</title>
+<programlisting>void        g_mime_object_ref               (<link linkend="GMimeObject">GMimeObject</link> *object);</programlisting>
+<para>
+Ref's a MIME object.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>object</parameter>&nbsp;:</entry>
+<entry> mime object
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-object-unref">g_mime_object_unref ()</title>
+<programlisting>void        g_mime_object_unref             (<link linkend="GMimeObject">GMimeObject</link> *object);</programlisting>
+<para>
+Unref's a MIME object.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>object</parameter>&nbsp;:</entry>
+<entry> mime object
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-object-set-content-type">g_mime_object_set_content_type ()</title>
+<programlisting>void        g_mime_object_set_content_type  (<link linkend="GMimeObject">GMimeObject</link> *object,
+                                             <link linkend="GMimeContentType">GMimeContentType</link> *mime_type);</programlisting>
+<para>
+Sets the content-type for the specified MIME object.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>object</parameter>&nbsp;:</entry>
+<entry> MIME object
+</entry></row>
+<row><entry align="right"><parameter>mime_type</parameter>&nbsp;:</entry>
+<entry> MIME type
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-object-get-content-type">g_mime_object_get_content_type ()</title>
+<programlisting>const <link linkend="GMimeContentType">GMimeContentType</link>* g_mime_object_get_content_type
+                                            (<link linkend="GMimeObject">GMimeObject</link> *object);</programlisting>
+<para>
+Gets the Content-Type object for the given MIME object or <literal>NULL</literal> on
+fail.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>object</parameter>&nbsp;:</entry>
+<entry> MIME object
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the content-type object for the specified MIME object.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-object-set-content-type-parameter">g_mime_object_set_content_type_parameter ()</title>
+<programlisting>void        g_mime_object_set_content_type_parameter
+                                            (<link linkend="GMimeObject">GMimeObject</link> *object,
+                                             const char *name,
+                                             const char *value);</programlisting>
+<para>
+Sets the content-type param <parameter>name</parameter> to the value <parameter>value</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>object</parameter>&nbsp;:</entry>
+<entry> MIME object
+</entry></row>
+<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
+<entry> param name
+</entry></row>
+<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
+<entry> param value
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-object-get-content-type-parameter">g_mime_object_get_content_type_parameter ()</title>
+<programlisting>const char* g_mime_object_get_content_type_parameter
+                                            (<link linkend="GMimeObject">GMimeObject</link> *object,
+                                             const char *name);</programlisting>
+<para>
+Gets the value of the content-type param <parameter>name</parameter> set on the MIME part
+<parameter>object</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>object</parameter>&nbsp;:</entry>
+<entry> MIME object
+</entry></row>
+<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
+<entry> param name
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the value of the requested content-type param or <literal>NULL</literal> on
+if the param doesn't exist.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-object-set-content-id">g_mime_object_set_content_id ()</title>
+<programlisting>void        g_mime_object_set_content_id    (<link linkend="GMimeObject">GMimeObject</link> *object,
+                                             const char *content_id);</programlisting>
+<para>
+Sets the Content-Id of the MIME object.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>object</parameter>&nbsp;:</entry>
+<entry> MIME object
+</entry></row>
+<row><entry align="right"><parameter>content_id</parameter>&nbsp;:</entry>
+<entry> content-id
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-object-get-content-id">g_mime_object_get_content_id ()</title>
+<programlisting>const char* g_mime_object_get_content_id    (<link linkend="GMimeObject">GMimeObject</link> *object);</programlisting>
+<para>
+Gets the Content-Id of the MIME object or NULL if one is not set.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>object</parameter>&nbsp;:</entry>
+<entry> MIME object
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a const pointer to the Content-Id header.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-object-add-header">g_mime_object_add_header ()</title>
+<programlisting>void        g_mime_object_add_header        (<link linkend="GMimeObject">GMimeObject</link> *object,
+                                             const char *header,
+                                             const char *value);</programlisting>
+<para>
+Adds an arbitrary header to the MIME object.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>object</parameter>&nbsp;:</entry>
+<entry> mime object
+</entry></row>
+<row><entry align="right"><parameter>header</parameter>&nbsp;:</entry>
+<entry> header name
+</entry></row>
+<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
+<entry> header value
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-object-set-header">g_mime_object_set_header ()</title>
+<programlisting>void        g_mime_object_set_header        (<link linkend="GMimeObject">GMimeObject</link> *object,
+                                             const char *header,
+                                             const char *value);</programlisting>
+<para>
+Sets an arbitrary header on the MIME object.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>object</parameter>&nbsp;:</entry>
+<entry> mime object
+</entry></row>
+<row><entry align="right"><parameter>header</parameter>&nbsp;:</entry>
+<entry> header name
+</entry></row>
+<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
+<entry> header value
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-object-get-header">g_mime_object_get_header ()</title>
+<programlisting>const char* g_mime_object_get_header        (<link linkend="GMimeObject">GMimeObject</link> *object,
+                                             const char *header);</programlisting>
+<para>
+Gets the value of the requested header if it exists or <literal>NULL</literal>
+otherwise.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>object</parameter>&nbsp;:</entry>
+<entry> mime object
+</entry></row>
+<row><entry align="right"><parameter>header</parameter>&nbsp;:</entry>
+<entry> header name
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the value of the header <parameter>header</parameter> if it exists or <literal>NULL</literal>
+otherwise.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-object-remove-header">g_mime_object_remove_header ()</title>
+<programlisting>void        g_mime_object_remove_header     (<link linkend="GMimeObject">GMimeObject</link> *object,
+                                             const char *header);</programlisting>
+<para>
+Removed the specified header if it exists.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>object</parameter>&nbsp;:</entry>
+<entry> mime object
+</entry></row>
+<row><entry align="right"><parameter>header</parameter>&nbsp;:</entry>
+<entry> header name
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-object-get-headers">g_mime_object_get_headers ()</title>
+<programlisting>char*       g_mime_object_get_headers       (<link linkend="GMimeObject">GMimeObject</link> *object);</programlisting>
+<para>
+Allocates a string buffer containing all of the MIME object's raw
+headers.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>object</parameter>&nbsp;:</entry>
+<entry> mime object
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>an allocated string containing all of the raw MIME headers.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-object-write-to-stream">g_mime_object_write_to_stream ()</title>
+<programlisting><link linkend="ssize-t">ssize_t</link>     g_mime_object_write_to_stream   (<link linkend="GMimeObject">GMimeObject</link> *object,
+                                             <link linkend="GMimeStream">GMimeStream</link> *stream);</programlisting>
+<para>
+Write the contents of the MIME object to <parameter>stream</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>object</parameter>&nbsp;:</entry>
+<entry> mime object
+</entry></row>
+<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
+<entry> stream
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>-1 on fail.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-object-to-string">g_mime_object_to_string ()</title>
+<programlisting>char*       g_mime_object_to_string         (<link linkend="GMimeObject">GMimeObject</link> *object);</programlisting>
+<para>
+Allocates a string buffer containing the contents of <parameter>object</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>object</parameter>&nbsp;:</entry>
+<entry> mime object
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>an allocated string containing the contents of the mime
+object.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+
+</refsect1>
+
+
+
+
+</refentry>
diff -uNr gmime-1.90.0/doc/sgml/gmime-param.sgml gmime/doc/sgml/gmime-param.sgml
--- gmime-1.90.0/doc/sgml/gmime-param.sgml	Thu Jan  1 01:00:00 1970
+++ gmime/doc/sgml/gmime-param.sgml	Thu May 23 07:21:37 2002
@@ -0,0 +1,199 @@
+<refentry id="gmime-gmime-param">
+<refmeta>
+<refentrytitle>gmime-param</refentrytitle>
+<manvolnum>3</manvolnum>
+<refmiscinfo>GMIME Library</refmiscinfo>
+</refmeta>
+
+<refnamediv>
+<refname>gmime-param</refname><refpurpose></refpurpose>
+</refnamediv>
+
+<refsynopsisdiv><title>Synopsis</title>
+<synopsis>
+
+
+
+struct      <link linkend="GMimeParam">GMimeParam</link>;
+<link linkend="GMimeParam">GMimeParam</link>* <link linkend="g-mime-param-new">g_mime_param_new</link>                (const char *name,
+                                             const char *value);
+<link linkend="GMimeParam">GMimeParam</link>* <link linkend="g-mime-param-new-from-string">g_mime_param_new_from_string</link>    (const char *string);
+void        <link linkend="g-mime-param-destroy">g_mime_param_destroy</link>            (<link linkend="GMimeParam">GMimeParam</link> *param);
+<link linkend="GMimeParam">GMimeParam</link>* <link linkend="g-mime-param-append">g_mime_param_append</link>             (<link linkend="GMimeParam">GMimeParam</link> *params,
+                                             const char *name,
+                                             const char *value);
+<link linkend="GMimeParam">GMimeParam</link>* <link linkend="g-mime-param-append-param">g_mime_param_append_param</link>       (<link linkend="GMimeParam">GMimeParam</link> *params,
+                                             <link linkend="GMimeParam">GMimeParam</link> *param);
+void        <link linkend="g-mime-param-write-to-string">g_mime_param_write_to_string</link>    (<link linkend="GMimeParam">GMimeParam</link> *param,
+                                             <link linkend="gboolean">gboolean</link> fold,
+                                             <link linkend="GString">GString</link> *string);
+</synopsis>
+</refsynopsisdiv>
+
+
+
+
+
+<refsect1>
+<title>Description</title>
+<para>
+
+</para>
+</refsect1>
+
+<refsect1>
+<title>Details</title>
+<refsect2>
+<title><anchor id="GMimeParam">struct GMimeParam</title>
+<programlisting>struct GMimeParam {
+	struct _GMimeParam *next;
+	char *name;
+	char *value;
+};
+</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="g-mime-param-new">g_mime_param_new ()</title>
+<programlisting><link linkend="GMimeParam">GMimeParam</link>* g_mime_param_new                (const char *name,
+                                             const char *value);</programlisting>
+<para>
+Creates a new GMimeParam node with name <parameter>name</parameter> and value <parameter>value</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
+<entry> parameter name
+</entry></row>
+<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
+<entry> parameter value
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a new paramter structure.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-param-new-from-string">g_mime_param_new_from_string ()</title>
+<programlisting><link linkend="GMimeParam">GMimeParam</link>* g_mime_param_new_from_string    (const char *string);</programlisting>
+<para>
+Creates a parameter list based on the input string.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>string</parameter>&nbsp;:</entry>
+<entry> input string
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a GMimeParam structure based on <parameter>string</parameter>.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-param-destroy">g_mime_param_destroy ()</title>
+<programlisting>void        g_mime_param_destroy            (<link linkend="GMimeParam">GMimeParam</link> *param);</programlisting>
+<para>
+Releases all memory used by this mime param back to the Operating
+System.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>param</parameter>&nbsp;:</entry>
+<entry> Mime param list to destroy
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-param-append">g_mime_param_append ()</title>
+<programlisting><link linkend="GMimeParam">GMimeParam</link>* g_mime_param_append             (<link linkend="GMimeParam">GMimeParam</link> *params,
+                                             const char *name,
+                                             const char *value);</programlisting>
+<para>
+Appends a new parameter with name <parameter>name</parameter> and value <parameter>value</parameter> to the
+parameter list <parameter>params</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>params</parameter>&nbsp;:</entry>
+<entry> param list
+</entry></row>
+<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
+<entry> new param name
+</entry></row>
+<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
+<entry> new param value
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a param list with the new param of name <parameter>name</parameter> and value
+<parameter>value</parameter> appended to the list of params <parameter>params</parameter>.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-param-append-param">g_mime_param_append_param ()</title>
+<programlisting><link linkend="GMimeParam">GMimeParam</link>* g_mime_param_append_param       (<link linkend="GMimeParam">GMimeParam</link> *params,
+                                             <link linkend="GMimeParam">GMimeParam</link> *param);</programlisting>
+<para>
+Appends <parameter>param</parameter> to the param list <parameter>params</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>params</parameter>&nbsp;:</entry>
+<entry> param list
+</entry></row>
+<row><entry align="right"><parameter>param</parameter>&nbsp;:</entry>
+<entry> param to append
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a param list with the new param <parameter>param</parameter> appended to the list
+of params <parameter>params</parameter>.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-param-write-to-string">g_mime_param_write_to_string ()</title>
+<programlisting>void        g_mime_param_write_to_string    (<link linkend="GMimeParam">GMimeParam</link> *param,
+                                             <link linkend="gboolean">gboolean</link> fold,
+                                             <link linkend="GString">GString</link> *string);</programlisting>
+<para>
+Assumes the output string contains only the Content-* header and
+it's immediate value.
+</para>
+<para>
+Writes the params out to the string <parameter>string</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>param</parameter>&nbsp;:</entry>
+<entry> MIME Param list
+</entry></row>
+<row><entry align="right"><parameter>fold</parameter>&nbsp;:</entry>
+<entry> specifies whether or not to fold headers
+</entry></row>
+<row><entry align="right"><parameter>string</parameter>&nbsp;:</entry>
+<entry> output string
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+
+</refsect1>
+
+
+
+
+</refentry>
diff -uNr gmime-1.90.0/doc/sgml/gmime-parser.sgml gmime/doc/sgml/gmime-parser.sgml
--- gmime-1.90.0/doc/sgml/gmime-parser.sgml	Thu Jan  1 01:00:00 1970
+++ gmime/doc/sgml/gmime-parser.sgml	Thu May 23 07:21:37 2002
@@ -0,0 +1,249 @@
+<refentry id="gmime-gmime-parser">
+<refmeta>
+<refentrytitle>gmime-parser</refentrytitle>
+<manvolnum>3</manvolnum>
+<refmiscinfo>GMIME Library</refmiscinfo>
+</refmeta>
+
+<refnamediv>
+<refname>gmime-parser</refname><refpurpose></refpurpose>
+</refnamediv>
+
+<refsynopsisdiv><title>Synopsis</title>
+<synopsis>
+
+
+
+struct      <link linkend="GMimeParser">GMimeParser</link>;
+<link linkend="GMimeParser">GMimeParser</link>* <link linkend="g-mime-parser-new">g_mime_parser_new</link>              (void);
+void        <link linkend="g-mime-parser-init-with-stream">g_mime_parser_init_with_stream</link>  (<link linkend="GMimeParser">GMimeParser</link> *parser,
+                                             <link linkend="GMimeStream">GMimeStream</link> *stream);
+void        <link linkend="g-mime-parser-set-scan-from">g_mime_parser_set_scan_from</link>     (<link linkend="GMimeParser">GMimeParser</link> *parser,
+                                             <link linkend="gboolean">gboolean</link> scan_from);
+<link linkend="gboolean">gboolean</link>    <link linkend="g-mime-parser-get-scan-from">g_mime_parser_get_scan_from</link>     (<link linkend="GMimeParser">GMimeParser</link> *parser);
+<link linkend="off-t">off_t</link>       <link linkend="g-mime-parser-tell">g_mime_parser_tell</link>              (<link linkend="GMimeParser">GMimeParser</link> *parser);
+<link linkend="gboolean">gboolean</link>    <link linkend="g-mime-parser-eos">g_mime_parser_eos</link>               (<link linkend="GMimeParser">GMimeParser</link> *parser);
+<link linkend="GMimeObject">GMimeObject</link>* <link linkend="g-mime-parser-construct-part">g_mime_parser_construct_part</link>   (<link linkend="GMimeParser">GMimeParser</link> *parser);
+<link linkend="GMimeMessage">GMimeMessage</link>* <link linkend="g-mime-parser-construct-message">g_mime_parser_construct_message</link>
+                                            (<link linkend="GMimeParser">GMimeParser</link> *parser);
+char*       <link linkend="g-mime-parser-get-from">g_mime_parser_get_from</link>          (<link linkend="GMimeParser">GMimeParser</link> *parser);
+
+
+</synopsis>
+</refsynopsisdiv>
+
+
+
+
+
+<refsect1>
+<title>Description</title>
+<para>
+
+</para>
+</refsect1>
+
+<refsect1>
+<title>Details</title>
+<refsect2>
+<title><anchor id="GMimeParser">struct GMimeParser</title>
+<programlisting>struct GMimeParser {
+	GObject parent_object;
+	
+	struct _GMimeParserPrivate *priv;
+};
+</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="g-mime-parser-new">g_mime_parser_new ()</title>
+<programlisting><link linkend="GMimeParser">GMimeParser</link>* g_mime_parser_new              (void);</programlisting>
+<para>
+Creates a new parser object.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a new parser object.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-parser-init-with-stream">g_mime_parser_init_with_stream ()</title>
+<programlisting>void        g_mime_parser_init_with_stream  (<link linkend="GMimeParser">GMimeParser</link> *parser,
+                                             <link linkend="GMimeStream">GMimeStream</link> *stream);</programlisting>
+<para>
+Initializes <parameter>parser</parameter> to use <parameter>stream</parameter>.
+</para>
+<para>
+WARNING: Initializing a parser with a stream is comparable to
+selling your soul (<parameter>stream</parameter>) to the devil (<parameter>parser</parameter>). You are
+basically giving the parser complete control of the stream, this
+means that you had better not touch the stream so long as the
+parser is still using it. This means no reading, writing, seeking,
+or resetting of the stream. Anything that will/could change the
+current stream's offset is PROHIBITED.
+</para>
+<para>
+It is also recommended that you not use <link linkend="g-mime-stream-tell">g_mime_stream_tell</link> because
+it will not necessarily give you the current <parameter>parser</parameter> offset since
+<parameter>parser</parameter> handles its own internal read-ahead buffer. Instead, it is
+recommended that you use <link linkend="g-mime-parser-tell">g_mime_parser_tell</link> if you have a reason
+to need the current offset of the <parameter>parser</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>parser</parameter>&nbsp;:</entry>
+<entry> MIME parser object
+</entry></row>
+<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
+<entry> raw message or part stream
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-parser-set-scan-from">g_mime_parser_set_scan_from ()</title>
+<programlisting>void        g_mime_parser_set_scan_from     (<link linkend="GMimeParser">GMimeParser</link> *parser,
+                                             <link linkend="gboolean">gboolean</link> scan_from);</programlisting>
+<para>
+Sets whether or not <parameter>parser</parameter> should scan mbox-style From-lines.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>parser</parameter>&nbsp;:</entry>
+<entry> MIME parser object
+</entry></row>
+<row><entry align="right"><parameter>scan_from</parameter>&nbsp;:</entry>
+<entry> <literal>TRUE</literal> to scan From-lines or <literal>FALSE</literal> otherwise
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-parser-get-scan-from">g_mime_parser_get_scan_from ()</title>
+<programlisting><link linkend="gboolean">gboolean</link>    g_mime_parser_get_scan_from     (<link linkend="GMimeParser">GMimeParser</link> *parser);</programlisting>
+<para>
+Gets whether or not <parameter>parser</parameter> is set to scan mbox-style From-lines.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>parser</parameter>&nbsp;:</entry>
+<entry> MIME parser object
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>whether or not <parameter>parser</parameter> is set to scan mbox-style
+From-lines.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-parser-tell">g_mime_parser_tell ()</title>
+<programlisting><link linkend="off-t">off_t</link>       g_mime_parser_tell              (<link linkend="GMimeParser">GMimeParser</link> *parser);</programlisting>
+<para>
+Gets the current stream offset from the parser's internal stream.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>parser</parameter>&nbsp;:</entry>
+<entry> MIME parser object
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the current stream offset from the parser's internal stream
+or -1 on error.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-parser-eos">g_mime_parser_eos ()</title>
+<programlisting><link linkend="gboolean">gboolean</link>    g_mime_parser_eos               (<link linkend="GMimeParser">GMimeParser</link> *parser);</programlisting>
+<para>
+Tests the end-of-stream indicator for <parameter>parser</parameter>'s internal stream.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>parser</parameter>&nbsp;:</entry>
+<entry> MIME parser
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry><literal>TRUE</literal> on EOS or <literal>FALSE</literal> otherwise.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-parser-construct-part">g_mime_parser_construct_part ()</title>
+<programlisting><link linkend="GMimeObject">GMimeObject</link>* g_mime_parser_construct_part   (<link linkend="GMimeParser">GMimeParser</link> *parser);</programlisting>
+<para>
+Constructs a MIME part from <parameter>parser</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>parser</parameter>&nbsp;:</entry>
+<entry> MIME parser object
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a MIME part based on <parameter>parser</parameter> or <literal>NULL</literal> on fail.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-parser-construct-message">g_mime_parser_construct_message ()</title>
+<programlisting><link linkend="GMimeMessage">GMimeMessage</link>* g_mime_parser_construct_message
+                                            (<link linkend="GMimeParser">GMimeParser</link> *parser);</programlisting>
+<para>
+Constructs a MIME message from <parameter>parser</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>parser</parameter>&nbsp;:</entry>
+<entry> MIME parser object
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a MIME message or <literal>NULL</literal> on fail.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-parser-get-from">g_mime_parser_get_from ()</title>
+<programlisting>char*       g_mime_parser_get_from          (<link linkend="GMimeParser">GMimeParser</link> *parser);</programlisting>
+<para>
+Gets the mbox-style From-line of the most recently parsed message
+(gotten from <link linkend="g-mime-parser-construct-message">g_mime_parser_construct_message</link>).</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>parser</parameter>&nbsp;:</entry>
+<entry> MIME parser object
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the mbox-style From-line of the most recently parsed
+message or <literal>NULL</literal> on error.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+
+</refsect1>
+
+
+
+
+</refentry>
diff -uNr gmime-1.90.0/doc/sgml/gmime-part.sgml gmime/doc/sgml/gmime-part.sgml
--- gmime-1.90.0/doc/sgml/gmime-part.sgml	Thu Jan  1 01:00:00 1970
+++ gmime/doc/sgml/gmime-part.sgml	Thu May 23 07:21:37 2002
@@ -0,0 +1,865 @@
+<refentry id="gmime-gmime-part">
+<refmeta>
+<refentrytitle>gmime-part</refentrytitle>
+<manvolnum>3</manvolnum>
+<refmiscinfo>GMIME Library</refmiscinfo>
+</refmeta>
+
+<refnamediv>
+<refname>gmime-part</refname><refpurpose></refpurpose>
+</refnamediv>
+
+<refsynopsisdiv><title>Synopsis</title>
+<synopsis>
+
+
+
+struct      <link linkend="GMimePart">GMimePart</link>;
+<link linkend="GMimePart">GMimePart</link>*  <link linkend="g-mime-part-new">g_mime_part_new</link>                 (void);
+<link linkend="GMimePart">GMimePart</link>*  <link linkend="g-mime-part-new-with-type">g_mime_part_new_with_type</link>       (const char *type,
+                                             const char *subtype);
+void        <link linkend="g-mime-part-set-content-header">g_mime_part_set_content_header</link>  (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             const char *header,
+                                             const char *value);
+const char* <link linkend="g-mime-part-get-content-header">g_mime_part_get_content_header</link>  (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             const char *header);
+void        <link linkend="g-mime-part-set-content-description">g_mime_part_set_content_description</link>
+                                            (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             const char *description);
+const char* <link linkend="g-mime-part-get-content-description">g_mime_part_get_content_description</link>
+                                            (const <link linkend="GMimePart">GMimePart</link> *mime_part);
+void        <link linkend="g-mime-part-set-content-id">g_mime_part_set_content_id</link>      (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             const char *content_id);
+const char* <link linkend="g-mime-part-get-content-id">g_mime_part_get_content_id</link>      (<link linkend="GMimePart">GMimePart</link> *mime_part);
+void        <link linkend="g-mime-part-set-content-md5">g_mime_part_set_content_md5</link>     (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             const char *content_md5);
+const char* <link linkend="g-mime-part-get-content-md5">g_mime_part_get_content_md5</link>     (<link linkend="GMimePart">GMimePart</link> *mime_part);
+<link linkend="gboolean">gboolean</link>    <link linkend="g-mime-part-verify-content-md5">g_mime_part_verify_content_md5</link>  (<link linkend="GMimePart">GMimePart</link> *mime_part);
+void        <link linkend="g-mime-part-set-content-location">g_mime_part_set_content_location</link>
+                                            (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             const char *content_location);
+const char* <link linkend="g-mime-part-get-content-location">g_mime_part_get_content_location</link>
+                                            (<link linkend="GMimePart">GMimePart</link> *mime_part);
+void        <link linkend="g-mime-part-set-content-type">g_mime_part_set_content_type</link>    (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             <link linkend="GMimeContentType">GMimeContentType</link> *mime_type);
+const <link linkend="GMimeContentType">GMimeContentType</link>* <link linkend="g-mime-part-get-content-type">g_mime_part_get_content_type</link>
+                                            (<link linkend="GMimePart">GMimePart</link> *mime_part);
+void        <link linkend="g-mime-part-set-encoding">g_mime_part_set_encoding</link>        (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             <link linkend="GMimePartEncodingType">GMimePartEncodingType</link> encoding);
+<link linkend="GMimePartEncodingType">GMimePartEncodingType</link> <link linkend="g-mime-part-get-encoding">g_mime_part_get_encoding</link>
+                                            (<link linkend="GMimePart">GMimePart</link> *mime_part);
+const char* <link linkend="g-mime-part-encoding-to-string">g_mime_part_encoding_to_string</link>  (<link linkend="GMimePartEncodingType">GMimePartEncodingType</link> encoding);
+<link linkend="GMimePartEncodingType">GMimePartEncodingType</link> <link linkend="g-mime-part-encoding-from-string">g_mime_part_encoding_from_string</link>
+                                            (const char *encoding);
+void        <link linkend="g-mime-part-set-content-disposition-object">g_mime_part_set_content_disposition_object</link>
+                                            (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             <link linkend="GMimeDisposition">GMimeDisposition</link> *disposition);
+void        <link linkend="g-mime-part-set-content-disposition">g_mime_part_set_content_disposition</link>
+                                            (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             const char *disposition);
+const char* <link linkend="g-mime-part-get-content-disposition">g_mime_part_get_content_disposition</link>
+                                            (<link linkend="GMimePart">GMimePart</link> *mime_part);
+void        <link linkend="g-mime-part-add-content-disposition-parameter">g_mime_part_add_content_disposition_parameter</link>
+                                            (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             const char *attribute,
+                                             const char *value);
+const char* <link linkend="g-mime-part-get-content-disposition-parameter">g_mime_part_get_content_disposition_parameter</link>
+                                            (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             const char *attribute);
+void        <link linkend="g-mime-part-set-filename">g_mime_part_set_filename</link>        (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             const char *filename);
+const char* <link linkend="g-mime-part-get-filename">g_mime_part_get_filename</link>        (const <link linkend="GMimePart">GMimePart</link> *mime_part);
+void        <link linkend="g-mime-part-set-content">g_mime_part_set_content</link>         (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             const char *content,
+                                             <link linkend="size-t">size_t</link> len);
+void        <link linkend="g-mime-part-set-pre-encoded-content">g_mime_part_set_pre_encoded_content</link>
+                                            (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             const char *content,
+                                             <link linkend="size-t">size_t</link> len,
+                                             <link linkend="GMimePartEncodingType">GMimePartEncodingType</link> encoding);
+void        <link linkend="g-mime-part-set-content-byte-array">g_mime_part_set_content_byte_array</link>
+                                            (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             <link linkend="GByteArray">GByteArray</link> *content);
+const char* <link linkend="g-mime-part-get-content">g_mime_part_get_content</link>         (const <link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             <link linkend="size-t">size_t</link> *len);
+const <link linkend="GMimeDataWrapper">GMimeDataWrapper</link>* <link linkend="g-mime-part-get-content-object">g_mime_part_get_content_object</link>
+                                            (const <link linkend="GMimePart">GMimePart</link> *mime_part);
+void        <link linkend="g-mime-part-set-content-object">g_mime_part_set_content_object</link>  (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             <link linkend="GMimeDataWrapper">GMimeDataWrapper</link> *content);
+<link linkend="ssize-t">ssize_t</link>     <link linkend="g-mime-part-write-to-stream">g_mime_part_write_to_stream</link>     (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             <link linkend="GMimeStream">GMimeStream</link> *stream);
+char*       <link linkend="g-mime-part-to-string">g_mime_part_to_string</link>           (<link linkend="GMimePart">GMimePart</link> *mime_part);
+
+
+</synopsis>
+</refsynopsisdiv>
+
+
+
+
+
+<refsect1>
+<title>Description</title>
+<para>
+
+</para>
+</refsect1>
+
+<refsect1>
+<title>Details</title>
+<refsect2>
+<title><anchor id="GMimePart">struct GMimePart</title>
+<programlisting>struct GMimePart {
+	GMimeObject parent_object;
+	
+	GMimePartEncodingType encoding;
+	GMimeDisposition *disposition;
+	char *content_description;
+	char *content_location;
+	char *content_md5;
+	
+	GMimeDataWrapper *content;
+};
+</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="g-mime-part-new">g_mime_part_new ()</title>
+<programlisting><link linkend="GMimePart">GMimePart</link>*  g_mime_part_new                 (void);</programlisting>
+<para>
+Creates a new MIME Part object with a default content-type of
+text/plain.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>an empty MIME Part object with a default content-type of
+text/plain.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-part-new-with-type">g_mime_part_new_with_type ()</title>
+<programlisting><link linkend="GMimePart">GMimePart</link>*  g_mime_part_new_with_type       (const char *type,
+                                             const char *subtype);</programlisting>
+<para>
+Creates a new MIME Part with a sepcified type.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>type</parameter>&nbsp;:</entry>
+<entry> content-type
+</entry></row>
+<row><entry align="right"><parameter>subtype</parameter>&nbsp;:</entry>
+<entry> content-subtype
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>an empty MIME Part object with the specified content-type.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-part-set-content-header">g_mime_part_set_content_header ()</title>
+<programlisting>void        g_mime_part_set_content_header  (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             const char *header,
+                                             const char *value);</programlisting>
+<para>
+Set an arbitrary MIME content header.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
+<entry> mime part
+</entry></row>
+<row><entry align="right"><parameter>header</parameter>&nbsp;:</entry>
+<entry> header name
+</entry></row>
+<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
+<entry> header value
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-part-get-content-header">g_mime_part_get_content_header ()</title>
+<programlisting>const char* g_mime_part_get_content_header  (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             const char *header);</programlisting>
+<para>
+Gets the value of the requested header if it exists, or <literal>NULL</literal>
+otherwise.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
+<entry> mime part
+</entry></row>
+<row><entry align="right"><parameter>header</parameter>&nbsp;:</entry>
+<entry> header name
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the value of the content header <parameter>header</parameter>.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-part-set-content-description">g_mime_part_set_content_description ()</title>
+<programlisting>void        g_mime_part_set_content_description
+                                            (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             const char *description);</programlisting>
+<para>
+Set the content description for the specified mime part.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
+<entry> Mime part
+</entry></row>
+<row><entry align="right"><parameter>description</parameter>&nbsp;:</entry>
+<entry> content description
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-part-get-content-description">g_mime_part_get_content_description ()</title>
+<programlisting>const char* g_mime_part_get_content_description
+                                            (const <link linkend="GMimePart">GMimePart</link> *mime_part);</programlisting>
+<para>
+Gets the value of the Content-Description for the specified mime
+part if it exists or <literal>NULL</literal> otherwise.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
+<entry> Mime part
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the content description for the specified mime part.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-part-set-content-id">g_mime_part_set_content_id ()</title>
+<programlisting>void        g_mime_part_set_content_id      (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             const char *content_id);</programlisting>
+<para>
+Set the content id for the specified mime part.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
+<entry> Mime part
+</entry></row>
+<row><entry align="right"><parameter>content_id</parameter>&nbsp;:</entry>
+<entry> content id
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-part-get-content-id">g_mime_part_get_content_id ()</title>
+<programlisting>const char* g_mime_part_get_content_id      (<link linkend="GMimePart">GMimePart</link> *mime_part);</programlisting>
+<para>
+Gets the content-id of the specified mime part if it exists, or
+<literal>NULL</literal> otherwise.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
+<entry> Mime part
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the content id for the specified mime part.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-part-set-content-md5">g_mime_part_set_content_md5 ()</title>
+<programlisting>void        g_mime_part_set_content_md5     (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             const char *content_md5);</programlisting>
+<para>
+Set the content md5 for the specified mime part.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
+<entry> Mime part
+</entry></row>
+<row><entry align="right"><parameter>content_md5</parameter>&nbsp;:</entry>
+<entry> content md5 or NULL to generate the md5 digest.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-part-get-content-md5">g_mime_part_get_content_md5 ()</title>
+<programlisting>const char* g_mime_part_get_content_md5     (<link linkend="GMimePart">GMimePart</link> *mime_part);</programlisting>
+<para>
+Gets the md5sum contained in the Content-Md5 header of the
+specified mime part if it exists, or <literal>NULL</literal> otherwise.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
+<entry> Mime part
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the content md5 for the specified mime part.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-part-verify-content-md5">g_mime_part_verify_content_md5 ()</title>
+<programlisting><link linkend="gboolean">gboolean</link>    g_mime_part_verify_content_md5  (<link linkend="GMimePart">GMimePart</link> *mime_part);</programlisting>
+<para>
+Verify the content md5 for the specified mime part.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
+<entry> Mime part
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>TRUE if the md5 is valid or FALSE otherwise. Note: will
+return FALSE if the mime part does not contain a Content-MD5.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-part-set-content-location">g_mime_part_set_content_location ()</title>
+<programlisting>void        g_mime_part_set_content_location
+                                            (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             const char *content_location);</programlisting>
+<para>
+Set the content location for the specified mime part.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
+<entry> Mime part
+</entry></row>
+<row><entry align="right"><parameter>content_location</parameter>&nbsp;:</entry>
+<entry> content location
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-part-get-content-location">g_mime_part_get_content_location ()</title>
+<programlisting>const char* g_mime_part_get_content_location
+                                            (<link linkend="GMimePart">GMimePart</link> *mime_part);</programlisting>
+<para>
+Gets the value of the Content-Location header if it exists, or
+<literal>NULL</literal> otherwise.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
+<entry> Mime part
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the content location for the specified mime part.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-part-set-content-type">g_mime_part_set_content_type ()</title>
+<programlisting>void        g_mime_part_set_content_type    (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             <link linkend="GMimeContentType">GMimeContentType</link> *mime_type);</programlisting>
+<para>
+Set the content type/subtype for the specified mime part.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
+<entry> Mime part
+</entry></row>
+<row><entry align="right"><parameter>mime_type</parameter>&nbsp;:</entry>
+<entry> Mime content-type
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-part-get-content-type">g_mime_part_get_content_type ()</title>
+<programlisting>const <link linkend="GMimeContentType">GMimeContentType</link>* g_mime_part_get_content_type
+                                            (<link linkend="GMimePart">GMimePart</link> *mime_part);</programlisting>
+<para>
+Gets the Content-Type object for the given mime part or <literal>NULL</literal> on
+error.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
+<entry> Mime part
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the content-type object for the specified mime part.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-part-set-encoding">g_mime_part_set_encoding ()</title>
+<programlisting>void        g_mime_part_set_encoding        (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             <link linkend="GMimePartEncodingType">GMimePartEncodingType</link> encoding);</programlisting>
+<para>
+Set the content encoding for the specified mime part. Available
+values for the encoding are: GMIME_PART_ENCODING_DEFAULT,
+GMIME_PART_ENCODING_7BIT, GMIME_PART_ENCODING_8BIT,
+GMIME_PART_ENCODING_BINARY, GMIME_PART_ENCODING_BASE64 and
+GMIME_PART_ENCODING_QUOTEDPRINTABLE.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
+<entry> Mime part
+</entry></row>
+<row><entry align="right"><parameter>encoding</parameter>&nbsp;:</entry>
+<entry> Mime encoding
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-part-get-encoding">g_mime_part_get_encoding ()</title>
+<programlisting><link linkend="GMimePartEncodingType">GMimePartEncodingType</link> g_mime_part_get_encoding
+                                            (<link linkend="GMimePart">GMimePart</link> *mime_part);</programlisting>
+<para>
+Gets the content encoding of the mime part.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
+<entry> Mime part
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the content encoding for the specified mime part. The
+return value will be one of the following:
+GMIME_PART_ENCODING_DEFAULT, GMIME_PART_ENCODING_7BIT,
+GMIME_PART_ENCODING_8BIT, GMIME_PART_ENCODING_BINARY,
+GMIME_PART_ENCODING_BASE64, GMIME_PART_ENCODING_QUOTEDPRINTABLE
+or GMIME_PART_ENCODING_UUENCODE.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-part-encoding-to-string">g_mime_part_encoding_to_string ()</title>
+<programlisting>const char* g_mime_part_encoding_to_string  (<link linkend="GMimePartEncodingType">GMimePartEncodingType</link> encoding);</programlisting>
+<para>
+Gets the string value of the content encoding.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>encoding</parameter>&nbsp;:</entry>
+<entry> Mime encoding
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the encoding type as a string. Available
+values for the encoding are: GMIME_PART_ENCODING_DEFAULT,
+GMIME_PART_ENCODING_7BIT, GMIME_PART_ENCODING_8BIT,
+GMIME_PART_ENCODING_BINARY, GMIME_PART_ENCODING_BASE64,
+GMIME_PART_ENCODING_QUOTEDPRINTABLE and
+GMIME_PART_ENCODING_UUENCODE.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-part-encoding-from-string">g_mime_part_encoding_from_string ()</title>
+<programlisting><link linkend="GMimePartEncodingType">GMimePartEncodingType</link> g_mime_part_encoding_from_string
+                                            (const char *encoding);</programlisting>
+<para>
+Gets the content encoding enumeration value based on the input
+string.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>encoding</parameter>&nbsp;:</entry>
+<entry> Mime encoding in string format
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the encoding string as a GMimePartEncodingType.  Available
+values for the encoding are: GMIME_PART_ENCODING_DEFAULT,
+GMIME_PART_ENCODING_7BIT, GMIME_PART_ENCODING_8BIT,
+GMIME_PART_ENCODING_BINARY, GMIME_PART_ENCODING_BASE64,
+GMIME_PART_ENCODING_QUOTEDPRINTABLE and
+GMIME_PART_ENCODING_UUENCODE.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-part-set-content-disposition-object">g_mime_part_set_content_disposition_object ()</title>
+<programlisting>void        g_mime_part_set_content_disposition_object
+                                            (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             <link linkend="GMimeDisposition">GMimeDisposition</link> *disposition);</programlisting>
+<para>
+Set the content disposition for the specified mime part</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
+<entry> Mime part
+</entry></row>
+<row><entry align="right"><parameter>disposition</parameter>&nbsp;:</entry>
+<entry> disposition object
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-part-set-content-disposition">g_mime_part_set_content_disposition ()</title>
+<programlisting>void        g_mime_part_set_content_disposition
+                                            (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             const char *disposition);</programlisting>
+<para>
+Set the content disposition for the specified mime part</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
+<entry> Mime part
+</entry></row>
+<row><entry align="right"><parameter>disposition</parameter>&nbsp;:</entry>
+<entry> disposition
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-part-get-content-disposition">g_mime_part_get_content_disposition ()</title>
+<programlisting>const char* g_mime_part_get_content_disposition
+                                            (<link linkend="GMimePart">GMimePart</link> *mime_part);</programlisting>
+<para>
+Gets the content disposition if set or <literal>NULL</literal> otherwise.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
+<entry> Mime part
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the content disposition for the specified mime part.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-part-add-content-disposition-parameter">g_mime_part_add_content_disposition_parameter ()</title>
+<programlisting>void        g_mime_part_add_content_disposition_parameter
+                                            (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             const char *attribute,
+                                             const char *value);</programlisting>
+<para>
+Add a content-disposition parameter to the specified mime part.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
+<entry> Mime part
+</entry></row>
+<row><entry align="right"><parameter>attribute</parameter>&nbsp;:</entry>
+<entry> parameter name
+</entry></row>
+<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
+<entry> parameter value
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-part-get-content-disposition-parameter">g_mime_part_get_content_disposition_parameter ()</title>
+<programlisting>const char* g_mime_part_get_content_disposition_parameter
+                                            (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             const char *attribute);</programlisting>
+<para>
+Gets the value of the Content-Disposition parameter specified by
+<parameter>attribute</parameter>, or <literal>NULL</literal> if the parameter does not exist.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
+<entry> Mime part
+</entry></row>
+<row><entry align="right"><parameter>attribute</parameter>&nbsp;:</entry>
+<entry> parameter name
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the value of a previously defined content-disposition
+parameter specified by <link linkend="name">name</link>.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-part-set-filename">g_mime_part_set_filename ()</title>
+<programlisting>void        g_mime_part_set_filename        (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             const char *filename);</programlisting>
+<para>
+Sets the "filename" parameter on the Content-Disposition and also sets the
+"name" parameter on the Content-Type.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
+<entry> Mime part
+</entry></row>
+<row><entry align="right"><parameter>filename</parameter>&nbsp;:</entry>
+<entry> the filename of the Mime Part's content
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-part-get-filename">g_mime_part_get_filename ()</title>
+<programlisting>const char* g_mime_part_get_filename        (const <link linkend="GMimePart">GMimePart</link> *mime_part);</programlisting>
+<para>
+Gets the filename of the specificed mime part, or <literal>NULL</literal> if the mime
+part does not have the filename or name parameter set.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
+<entry> Mime part
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the filename of the specified MIME Part. It first checks to
+see if the "filename" parameter was set on the Content-Disposition
+and if not then checks the "name" parameter in the Content-Type.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-part-set-content">g_mime_part_set_content ()</title>
+<programlisting>void        g_mime_part_set_content         (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             const char *content,
+                                             <link linkend="size-t">size_t</link> len);</programlisting>
+<para>
+Sets the content of the Mime Part (only non-multiparts)</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
+<entry> Mime part
+</entry></row>
+<row><entry align="right"><parameter>content</parameter>&nbsp;:</entry>
+<entry> raw mime part content
+</entry></row>
+<row><entry align="right"><parameter>len</parameter>&nbsp;:</entry>
+<entry> raw content length
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-part-set-pre-encoded-content">g_mime_part_set_pre_encoded_content ()</title>
+<programlisting>void        g_mime_part_set_pre_encoded_content
+                                            (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             const char *content,
+                                             <link linkend="size-t">size_t</link> len,
+                                             <link linkend="GMimePartEncodingType">GMimePartEncodingType</link> encoding);</programlisting>
+<para>
+Sets the encoding type and raw content on the mime part after decoding the content.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
+<entry> Mime part
+</entry></row>
+<row><entry align="right"><parameter>content</parameter>&nbsp;:</entry>
+<entry> encoded mime part content
+</entry></row>
+<row><entry align="right"><parameter>len</parameter>&nbsp;:</entry>
+<entry> length of the content
+</entry></row>
+<row><entry align="right"><parameter>encoding</parameter>&nbsp;:</entry>
+<entry> content encoding
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-part-set-content-byte-array">g_mime_part_set_content_byte_array ()</title>
+<programlisting>void        g_mime_part_set_content_byte_array
+                                            (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             <link linkend="GByteArray">GByteArray</link> *content);</programlisting>
+<para>
+Sets the content of the Mime Part (only non-multiparts)</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
+<entry> Mime part
+</entry></row>
+<row><entry align="right"><parameter>content</parameter>&nbsp;:</entry>
+<entry> raw mime part content.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-part-get-content">g_mime_part_get_content ()</title>
+<programlisting>const char* g_mime_part_get_content         (const <link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             <link linkend="size-t">size_t</link> *len);</programlisting>
+<para>
+Gets the raw contents of the mime part and sets <parameter>len</parameter> to the length
+of the raw data buffer.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
+<entry> MIME part object
+</entry></row>
+<row><entry align="right"><parameter>len</parameter>&nbsp;:</entry>
+<entry> pointer to the content length
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a const char * pointer to the raw contents of the MIME Part
+and sets <literal>len</literal> to the length of the buffer.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-part-get-content-object">g_mime_part_get_content_object ()</title>
+<programlisting>const <link linkend="GMimeDataWrapper">GMimeDataWrapper</link>* g_mime_part_get_content_object
+                                            (const <link linkend="GMimePart">GMimePart</link> *mime_part);</programlisting>
+<para>
+Gets the internal data-wrapper of the specified mime part, or <literal>NULL</literal>
+on error.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
+<entry> MIME part object
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the data-wrapper for the mime part's contents.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-part-set-content-object">g_mime_part_set_content_object ()</title>
+<programlisting>void        g_mime_part_set_content_object  (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             <link linkend="GMimeDataWrapper">GMimeDataWrapper</link> *content);</programlisting>
+<para>
+Sets the content object on the mime part.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
+<entry> MIME Part
+</entry></row>
+<row><entry align="right"><parameter>content</parameter>&nbsp;:</entry>
+<entry> content object
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-part-write-to-stream">g_mime_part_write_to_stream ()</title>
+<programlisting><link linkend="ssize-t">ssize_t</link>     g_mime_part_write_to_stream     (<link linkend="GMimePart">GMimePart</link> *mime_part,
+                                             <link linkend="GMimeStream">GMimeStream</link> *stream);</programlisting>
+<para>
+Writes the contents of the MIME Part to <parameter>stream</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
+<entry> MIME Part
+</entry></row>
+<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
+<entry> output stream
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes written or -1 on fail.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-part-to-string">g_mime_part_to_string ()</title>
+<programlisting>char*       g_mime_part_to_string           (<link linkend="GMimePart">GMimePart</link> *mime_part);</programlisting>
+<para>
+Allocates a string buffer containing the MIME Part.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
+<entry> MIME Part
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>an allocated string containing the MIME Part.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+
+</refsect1>
+
+
+
+
+</refentry>
diff -uNr gmime-1.90.0/doc/sgml/gmime-stream-buffer.sgml gmime/doc/sgml/gmime-stream-buffer.sgml
--- gmime-1.90.0/doc/sgml/gmime-stream-buffer.sgml	Thu Jan  1 01:00:00 1970
+++ gmime/doc/sgml/gmime-stream-buffer.sgml	Thu May 23 07:21:37 2002
@@ -0,0 +1,152 @@
+<refentry id="gmime-gmime-stream-buffer">
+<refmeta>
+<refentrytitle>gmime-stream-buffer</refentrytitle>
+<manvolnum>3</manvolnum>
+<refmiscinfo>GMIME Library</refmiscinfo>
+</refmeta>
+
+<refnamediv>
+<refname>gmime-stream-buffer</refname><refpurpose></refpurpose>
+</refnamediv>
+
+<refsynopsisdiv><title>Synopsis</title>
+<synopsis>
+
+
+
+enum        <link linkend="GMimeStreamBufferMode">GMimeStreamBufferMode</link>;
+struct      <link linkend="GMimeStreamBuffer">GMimeStreamBuffer</link>;
+<link linkend="GMimeStream">GMimeStream</link>* <link linkend="g-mime-stream-buffer-new">g_mime_stream_buffer_new</link>       (<link linkend="GMimeStream">GMimeStream</link> *source,
+                                             <link linkend="GMimeStreamBufferMode">GMimeStreamBufferMode</link> mode);
+<link linkend="ssize-t">ssize_t</link>     <link linkend="g-mime-stream-buffer-gets">g_mime_stream_buffer_gets</link>       (<link linkend="GMimeStream">GMimeStream</link> *stream,
+                                             char *buf,
+                                             <link linkend="size-t">size_t</link> max);
+void        <link linkend="g-mime-stream-buffer-readln">g_mime_stream_buffer_readln</link>     (<link linkend="GMimeStream">GMimeStream</link> *stream,
+                                             <link linkend="GByteArray">GByteArray</link> *buffer);
+
+
+</synopsis>
+</refsynopsisdiv>
+
+
+
+
+
+<refsect1>
+<title>Description</title>
+<para>
+
+</para>
+</refsect1>
+
+<refsect1>
+<title>Details</title>
+<refsect2>
+<title><anchor id="GMimeStreamBufferMode">enum GMimeStreamBufferMode</title>
+<programlisting>typedef enum {
+	GMIME_STREAM_BUFFER_CACHE_READ,
+	GMIME_STREAM_BUFFER_BLOCK_READ,
+	GMIME_STREAM_BUFFER_BLOCK_WRITE,
+} GMimeStreamBufferMode;
+</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="GMimeStreamBuffer">struct GMimeStreamBuffer</title>
+<programlisting>struct GMimeStreamBuffer {
+	GMimeStream parent_object;
+	
+	GMimeStream *source;
+	
+	unsigned char *buffer;
+	unsigned char *bufptr;
+	unsigned char *bufend;
+	ssize_t buflen;
+	
+	GMimeStreamBufferMode mode;
+};
+</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-buffer-new">g_mime_stream_buffer_new ()</title>
+<programlisting><link linkend="GMimeStream">GMimeStream</link>* g_mime_stream_buffer_new       (<link linkend="GMimeStream">GMimeStream</link> *source,
+                                             <link linkend="GMimeStreamBufferMode">GMimeStreamBufferMode</link> mode);</programlisting>
+<para>
+Creates a new GMimeStreamBuffer object.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>source</parameter>&nbsp;:</entry>
+<entry> source stream
+</entry></row>
+<row><entry align="right"><parameter>mode</parameter>&nbsp;:</entry>
+<entry> buffering mode
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a new buffer stream with source <parameter>source</parameter> and mode <parameter>mode</parameter>.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-buffer-gets">g_mime_stream_buffer_gets ()</title>
+<programlisting><link linkend="ssize-t">ssize_t</link>     g_mime_stream_buffer_gets       (<link linkend="GMimeStream">GMimeStream</link> *stream,
+                                             char *buf,
+                                             <link linkend="size-t">size_t</link> max);</programlisting>
+<para>
+Reads in at most one less than <parameter>max</parameter> characters from <parameter>stream</parameter> and
+stores them into the buffer pointed to by <parameter>buf</parameter>. Reading stops after
+an EOS or newline (#'\n'). If a newline is read, it is stored into
+the buffer. A #'\0' is stored after the last character in the
+buffer.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
+<entry> stream
+</entry></row>
+<row><entry align="right"><parameter>buf</parameter>&nbsp;:</entry>
+<entry> line buffer
+</entry></row>
+<row><entry align="right"><parameter>max</parameter>&nbsp;:</entry>
+<entry> max length of a line
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of characters read into <parameter>buf</parameter> on success and -1
+on fail.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-buffer-readln">g_mime_stream_buffer_readln ()</title>
+<programlisting>void        g_mime_stream_buffer_readln     (<link linkend="GMimeStream">GMimeStream</link> *stream,
+                                             <link linkend="GByteArray">GByteArray</link> *buffer);</programlisting>
+<para>
+Reads a single line into <parameter>buffer</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
+<entry> stream
+</entry></row>
+<row><entry align="right"><parameter>buffer</parameter>&nbsp;:</entry>
+<entry> output buffer
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+
+</refsect1>
+
+
+
+
+</refentry>
diff -uNr gmime-1.90.0/doc/sgml/gmime-stream-cat.sgml gmime/doc/sgml/gmime-stream-cat.sgml
--- gmime-1.90.0/doc/sgml/gmime-stream-cat.sgml	Thu Jan  1 01:00:00 1970
+++ gmime/doc/sgml/gmime-stream-cat.sgml	Thu May 23 07:21:37 2002
@@ -0,0 +1,94 @@
+<refentry id="gmime-gmime-stream-cat">
+<refmeta>
+<refentrytitle>gmime-stream-cat</refentrytitle>
+<manvolnum>3</manvolnum>
+<refmiscinfo>GMIME Library</refmiscinfo>
+</refmeta>
+
+<refnamediv>
+<refname>gmime-stream-cat</refname><refpurpose></refpurpose>
+</refnamediv>
+
+<refsynopsisdiv><title>Synopsis</title>
+<synopsis>
+
+
+
+struct      <link linkend="GMimeStreamCat">GMimeStreamCat</link>;
+<link linkend="GMimeStream">GMimeStream</link>* <link linkend="g-mime-stream-cat-new">g_mime_stream_cat_new</link>          (void);
+int         <link linkend="g-mime-stream-cat-add-source">g_mime_stream_cat_add_source</link>    (<link linkend="GMimeStreamCat">GMimeStreamCat</link> *cat,
+                                             <link linkend="GMimeStream">GMimeStream</link> *source);
+
+
+</synopsis>
+</refsynopsisdiv>
+
+
+
+
+
+<refsect1>
+<title>Description</title>
+<para>
+
+</para>
+</refsect1>
+
+<refsect1>
+<title>Details</title>
+<refsect2>
+<title><anchor id="GMimeStreamCat">struct GMimeStreamCat</title>
+<programlisting>struct GMimeStreamCat {
+	GMimeStream parent_object;
+	
+	struct _cat_node *sources;
+	struct _cat_node *current;
+};
+</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-cat-new">g_mime_stream_cat_new ()</title>
+<programlisting><link linkend="GMimeStream">GMimeStream</link>* g_mime_stream_cat_new          (void);</programlisting>
+<para>
+Creates a new GMimeStreamCat object.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a new cat stream.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-cat-add-source">g_mime_stream_cat_add_source ()</title>
+<programlisting>int         g_mime_stream_cat_add_source    (<link linkend="GMimeStreamCat">GMimeStreamCat</link> *cat,
+                                             <link linkend="GMimeStream">GMimeStream</link> *source);</programlisting>
+<para>
+Adds the <parameter>source</parameter> stream to the cat stream <parameter>cat</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>cat</parameter>&nbsp;:</entry>
+<entry> cat stream
+</entry></row>
+<row><entry align="right"><parameter>source</parameter>&nbsp;:</entry>
+<entry> a source stream
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or -1 on fail.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+
+</refsect1>
+
+
+
+
+</refentry>
diff -uNr gmime-1.90.0/doc/sgml/gmime-stream-file.sgml gmime/doc/sgml/gmime-stream-file.sgml
--- gmime-1.90.0/doc/sgml/gmime-stream-file.sgml	Thu Jan  1 01:00:00 1970
+++ gmime/doc/sgml/gmime-stream-file.sgml	Thu May 23 07:21:37 2002
@@ -0,0 +1,105 @@
+<refentry id="gmime-gmime-stream-file">
+<refmeta>
+<refentrytitle>gmime-stream-file</refentrytitle>
+<manvolnum>3</manvolnum>
+<refmiscinfo>GMIME Library</refmiscinfo>
+</refmeta>
+
+<refnamediv>
+<refname>gmime-stream-file</refname><refpurpose></refpurpose>
+</refnamediv>
+
+<refsynopsisdiv><title>Synopsis</title>
+<synopsis>
+
+
+
+struct      <link linkend="GMimeStreamFile">GMimeStreamFile</link>;
+<link linkend="GMimeStream">GMimeStream</link>* <link linkend="g-mime-stream-file-new">g_mime_stream_file_new</link>         (<link linkend="FILE-CAPS">FILE</link> *fp);
+<link linkend="GMimeStream">GMimeStream</link>* <link linkend="g-mime-stream-file-new-with-bounds">g_mime_stream_file_new_with_bounds</link>
+                                            (<link linkend="FILE-CAPS">FILE</link> *fp,
+                                             <link linkend="off-t">off_t</link> start,
+                                             <link linkend="off-t">off_t</link> end);
+
+
+</synopsis>
+</refsynopsisdiv>
+
+
+
+
+
+<refsect1>
+<title>Description</title>
+<para>
+
+</para>
+</refsect1>
+
+<refsect1>
+<title>Details</title>
+<refsect2>
+<title><anchor id="GMimeStreamFile">struct GMimeStreamFile</title>
+<programlisting>struct GMimeStreamFile {
+	GMimeStream parent_object;
+	
+	gboolean owner;
+	FILE *fp;
+};
+</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-file-new">g_mime_stream_file_new ()</title>
+<programlisting><link linkend="GMimeStream">GMimeStream</link>* g_mime_stream_file_new         (<link linkend="FILE-CAPS">FILE</link> *fp);</programlisting>
+<para>
+Creates a new GMimeStreamFile object around <parameter>fp</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>fp</parameter>&nbsp;:</entry>
+<entry> file pointer
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a stream using <parameter>fp</parameter>.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-file-new-with-bounds">g_mime_stream_file_new_with_bounds ()</title>
+<programlisting><link linkend="GMimeStream">GMimeStream</link>* g_mime_stream_file_new_with_bounds
+                                            (<link linkend="FILE-CAPS">FILE</link> *fp,
+                                             <link linkend="off-t">off_t</link> start,
+                                             <link linkend="off-t">off_t</link> end);</programlisting>
+<para>
+Creates a new GMimeStreamFile object around <parameter>fp</parameter> with bounds <parameter>start</parameter>
+and <parameter>end</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>fp</parameter>&nbsp;:</entry>
+<entry> file pointer
+</entry></row>
+<row><entry align="right"><parameter>start</parameter>&nbsp;:</entry>
+<entry> start boundary
+</entry></row>
+<row><entry align="right"><parameter>end</parameter>&nbsp;:</entry>
+<entry> end boundary
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a stream using <parameter>fp</parameter> with bounds <parameter>start</parameter> and <parameter>end</parameter>.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+
+</refsect1>
+
+
+
+
+</refentry>
diff -uNr gmime-1.90.0/doc/sgml/gmime-stream-filter.sgml gmime/doc/sgml/gmime-stream-filter.sgml
--- gmime-1.90.0/doc/sgml/gmime-stream-filter.sgml	Thu Jan  1 01:00:00 1970
+++ gmime/doc/sgml/gmime-stream-filter.sgml	Thu May 23 07:21:37 2002
@@ -0,0 +1,124 @@
+<refentry id="gmime-gmime-stream-filter">
+<refmeta>
+<refentrytitle>gmime-stream-filter</refentrytitle>
+<manvolnum>3</manvolnum>
+<refmiscinfo>GMIME Library</refmiscinfo>
+</refmeta>
+
+<refnamediv>
+<refname>gmime-stream-filter</refname><refpurpose></refpurpose>
+</refnamediv>
+
+<refsynopsisdiv><title>Synopsis</title>
+<synopsis>
+
+
+
+struct      <link linkend="GMimeStreamFilter">GMimeStreamFilter</link>;
+<link linkend="GMimeStream">GMimeStream</link>* <link linkend="g-mime-stream-filter-new-with-stream">g_mime_stream_filter_new_with_stream</link>
+                                            (<link linkend="GMimeStream">GMimeStream</link> *stream);
+int         <link linkend="g-mime-stream-filter-add">g_mime_stream_filter_add</link>        (<link linkend="GMimeStreamFilter">GMimeStreamFilter</link> *fstream,
+                                             <link linkend="GMimeFilter">GMimeFilter</link> *filter);
+void        <link linkend="g-mime-stream-filter-remove">g_mime_stream_filter_remove</link>     (<link linkend="GMimeStreamFilter">GMimeStreamFilter</link> *fstream,
+                                             int id);
+
+
+</synopsis>
+</refsynopsisdiv>
+
+
+
+
+
+<refsect1>
+<title>Description</title>
+<para>
+
+</para>
+</refsect1>
+
+<refsect1>
+<title>Details</title>
+<refsect2>
+<title><anchor id="GMimeStreamFilter">struct GMimeStreamFilter</title>
+<programlisting>struct GMimeStreamFilter {
+	GMimeStream parent_object;
+	
+	struct _GMimeStreamFilterPrivate *priv;
+	
+	GMimeStream *source;
+};
+</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-filter-new-with-stream">g_mime_stream_filter_new_with_stream ()</title>
+<programlisting><link linkend="GMimeStream">GMimeStream</link>* g_mime_stream_filter_new_with_stream
+                                            (<link linkend="GMimeStream">GMimeStream</link> *stream);</programlisting>
+<para>
+Creates a new GMimeStreamFilter object using <parameter>stream</parameter> as the source
+stream.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
+<entry> source stream
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a new filter stream with <parameter>stream</parameter> as its source.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-filter-add">g_mime_stream_filter_add ()</title>
+<programlisting>int         g_mime_stream_filter_add        (<link linkend="GMimeStreamFilter">GMimeStreamFilter</link> *fstream,
+                                             <link linkend="GMimeFilter">GMimeFilter</link> *filter);</programlisting>
+<para>
+Adds a <parameter>filter</parameter> to <parameter>fstream</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>fstream</parameter>&nbsp;:</entry>
+<entry> filter stream
+</entry></row>
+<row><entry align="right"><parameter>filter</parameter>&nbsp;:</entry>
+<entry> filter
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>an id for the filter.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-filter-remove">g_mime_stream_filter_remove ()</title>
+<programlisting>void        g_mime_stream_filter_remove     (<link linkend="GMimeStreamFilter">GMimeStreamFilter</link> *fstream,
+                                             int id);</programlisting>
+<para>
+Removed a filter from the stream based on the id (as returned from
+filter_add).</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>fstream</parameter>&nbsp;:</entry>
+<entry> filter stream
+</entry></row>
+<row><entry align="right"><parameter>id</parameter>&nbsp;:</entry>
+<entry> filter id
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+
+</refsect1>
+
+
+
+
+</refentry>
diff -uNr gmime-1.90.0/doc/sgml/gmime-stream-fs.sgml gmime/doc/sgml/gmime-stream-fs.sgml
--- gmime-1.90.0/doc/sgml/gmime-stream-fs.sgml	Thu Jan  1 01:00:00 1970
+++ gmime/doc/sgml/gmime-stream-fs.sgml	Thu May 23 07:21:37 2002
@@ -0,0 +1,106 @@
+<refentry id="gmime-gmime-stream-fs">
+<refmeta>
+<refentrytitle>gmime-stream-fs</refentrytitle>
+<manvolnum>3</manvolnum>
+<refmiscinfo>GMIME Library</refmiscinfo>
+</refmeta>
+
+<refnamediv>
+<refname>gmime-stream-fs</refname><refpurpose></refpurpose>
+</refnamediv>
+
+<refsynopsisdiv><title>Synopsis</title>
+<synopsis>
+
+
+
+struct      <link linkend="GMimeStreamFs">GMimeStreamFs</link>;
+<link linkend="GMimeStream">GMimeStream</link>* <link linkend="g-mime-stream-fs-new">g_mime_stream_fs_new</link>           (int fd);
+<link linkend="GMimeStream">GMimeStream</link>* <link linkend="g-mime-stream-fs-new-with-bounds">g_mime_stream_fs_new_with_bounds</link>
+                                            (int fd,
+                                             <link linkend="off-t">off_t</link> start,
+                                             <link linkend="off-t">off_t</link> end);
+
+
+</synopsis>
+</refsynopsisdiv>
+
+
+
+
+
+<refsect1>
+<title>Description</title>
+<para>
+
+</para>
+</refsect1>
+
+<refsect1>
+<title>Details</title>
+<refsect2>
+<title><anchor id="GMimeStreamFs">struct GMimeStreamFs</title>
+<programlisting>struct GMimeStreamFs {
+	GMimeStream parent_object;
+	
+	gboolean owner;
+	gboolean eos;
+	int fd;
+};
+</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-fs-new">g_mime_stream_fs_new ()</title>
+<programlisting><link linkend="GMimeStream">GMimeStream</link>* g_mime_stream_fs_new           (int fd);</programlisting>
+<para>
+Creates a new GMimeStreamFs object around <parameter>fd</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>fd</parameter>&nbsp;:</entry>
+<entry> file descriptor
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a stream using <parameter>fd</parameter>.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-fs-new-with-bounds">g_mime_stream_fs_new_with_bounds ()</title>
+<programlisting><link linkend="GMimeStream">GMimeStream</link>* g_mime_stream_fs_new_with_bounds
+                                            (int fd,
+                                             <link linkend="off-t">off_t</link> start,
+                                             <link linkend="off-t">off_t</link> end);</programlisting>
+<para>
+Creates a new GMimeStreamFs object around <parameter>fd</parameter> with bounds <parameter>start</parameter>
+and <parameter>end</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>fd</parameter>&nbsp;:</entry>
+<entry> file descriptor
+</entry></row>
+<row><entry align="right"><parameter>start</parameter>&nbsp;:</entry>
+<entry> start boundary
+</entry></row>
+<row><entry align="right"><parameter>end</parameter>&nbsp;:</entry>
+<entry> end boundary
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a stream using <parameter>fd</parameter> with bounds <parameter>start</parameter> and <parameter>end</parameter>.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+
+</refsect1>
+
+
+
+
+</refentry>
diff -uNr gmime-1.90.0/doc/sgml/gmime-stream-mem.sgml gmime/doc/sgml/gmime-stream-mem.sgml
--- gmime-1.90.0/doc/sgml/gmime-stream-mem.sgml	Thu Jan  1 01:00:00 1970
+++ gmime/doc/sgml/gmime-stream-mem.sgml	Thu May 23 07:21:37 2002
@@ -0,0 +1,143 @@
+<refentry id="gmime-gmime-stream-mem">
+<refmeta>
+<refentrytitle>gmime-stream-mem</refentrytitle>
+<manvolnum>3</manvolnum>
+<refmiscinfo>GMIME Library</refmiscinfo>
+</refmeta>
+
+<refnamediv>
+<refname>gmime-stream-mem</refname><refpurpose></refpurpose>
+</refnamediv>
+
+<refsynopsisdiv><title>Synopsis</title>
+<synopsis>
+
+
+
+struct      <link linkend="GMimeStreamMem">GMimeStreamMem</link>;
+<link linkend="GMimeStream">GMimeStream</link>* <link linkend="g-mime-stream-mem-new">g_mime_stream_mem_new</link>          (void);
+<link linkend="GMimeStream">GMimeStream</link>* <link linkend="g-mime-stream-mem-new-with-byte-array">g_mime_stream_mem_new_with_byte_array</link>
+                                            (<link linkend="GByteArray">GByteArray</link> *array);
+<link linkend="GMimeStream">GMimeStream</link>* <link linkend="g-mime-stream-mem-new-with-buffer">g_mime_stream_mem_new_with_buffer</link>
+                                            (const char *buffer,
+                                             <link linkend="size-t">size_t</link> len);
+void        <link linkend="g-mime-stream-mem-set-byte-array">g_mime_stream_mem_set_byte_array</link>
+                                            (<link linkend="GMimeStreamMem">GMimeStreamMem</link> *mem,
+                                             <link linkend="GByteArray">GByteArray</link> *array);
+
+
+</synopsis>
+</refsynopsisdiv>
+
+
+
+
+
+<refsect1>
+<title>Description</title>
+<para>
+
+</para>
+</refsect1>
+
+<refsect1>
+<title>Details</title>
+<refsect2>
+<title><anchor id="GMimeStreamMem">struct GMimeStreamMem</title>
+<programlisting>struct GMimeStreamMem {
+	GMimeStream parent_object;
+	
+	gboolean owner;
+	GByteArray *buffer;
+};
+</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-mem-new">g_mime_stream_mem_new ()</title>
+<programlisting><link linkend="GMimeStream">GMimeStream</link>* g_mime_stream_mem_new          (void);</programlisting>
+<para>
+Creates a new GMimeStreamMem object.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a new memory stream.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-mem-new-with-byte-array">g_mime_stream_mem_new_with_byte_array ()</title>
+<programlisting><link linkend="GMimeStream">GMimeStream</link>* g_mime_stream_mem_new_with_byte_array
+                                            (<link linkend="GByteArray">GByteArray</link> *array);</programlisting>
+<para>
+Creates a new GMimeStreamMem with data <parameter>array</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>array</parameter>&nbsp;:</entry>
+<entry> source data
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a new memory stream using <parameter>array</parameter>.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-mem-new-with-buffer">g_mime_stream_mem_new_with_buffer ()</title>
+<programlisting><link linkend="GMimeStream">GMimeStream</link>* g_mime_stream_mem_new_with_buffer
+                                            (const char *buffer,
+                                             <link linkend="size-t">size_t</link> len);</programlisting>
+<para>
+Creates a new GMimeStreamMem object and initializes the stream
+contents with the first <parameter>len</parameter> bytes of <parameter>buffer</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>buffer</parameter>&nbsp;:</entry>
+<entry> stream data
+</entry></row>
+<row><entry align="right"><parameter>len</parameter>&nbsp;:</entry>
+<entry> data length
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a new memory stream initialized with <parameter>buffer</parameter>.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-mem-set-byte-array">g_mime_stream_mem_set_byte_array ()</title>
+<programlisting>void        g_mime_stream_mem_set_byte_array
+                                            (<link linkend="GMimeStreamMem">GMimeStreamMem</link> *mem,
+                                             <link linkend="GByteArray">GByteArray</link> *array);</programlisting>
+<para>
+Sets the byte array on the memory stream. Note: The memory stream
+is not responsible for freeing the byte array.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>mem</parameter>&nbsp;:</entry>
+<entry> memory stream
+</entry></row>
+<row><entry align="right"><parameter>array</parameter>&nbsp;:</entry>
+<entry> stream data
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+
+</refsect1>
+
+
+
+
+</refentry>
diff -uNr gmime-1.90.0/doc/sgml/gmime-stream-mmap.sgml gmime/doc/sgml/gmime-stream-mmap.sgml
--- gmime-1.90.0/doc/sgml/gmime-stream-mmap.sgml	Thu Jan  1 01:00:00 1970
+++ gmime/doc/sgml/gmime-stream-mmap.sgml	Thu May 23 07:21:37 2002
@@ -0,0 +1,129 @@
+<refentry id="gmime-gmime-stream-mmap">
+<refmeta>
+<refentrytitle>gmime-stream-mmap</refentrytitle>
+<manvolnum>3</manvolnum>
+<refmiscinfo>GMIME Library</refmiscinfo>
+</refmeta>
+
+<refnamediv>
+<refname>gmime-stream-mmap</refname><refpurpose></refpurpose>
+</refnamediv>
+
+<refsynopsisdiv><title>Synopsis</title>
+<synopsis>
+
+
+
+struct      <link linkend="GMimeStreamMmap">GMimeStreamMmap</link>;
+<link linkend="GMimeStream">GMimeStream</link>* <link linkend="g-mime-stream-mmap-new">g_mime_stream_mmap_new</link>         (int fd,
+                                             int prot,
+                                             int flags);
+<link linkend="GMimeStream">GMimeStream</link>* <link linkend="g-mime-stream-mmap-new-with-bounds">g_mime_stream_mmap_new_with_bounds</link>
+                                            (int fd,
+                                             int prot,
+                                             int flags,
+                                             <link linkend="off-t">off_t</link> start,
+                                             <link linkend="off-t">off_t</link> end);
+
+
+</synopsis>
+</refsynopsisdiv>
+
+
+
+
+
+<refsect1>
+<title>Description</title>
+<para>
+
+</para>
+</refsect1>
+
+<refsect1>
+<title>Details</title>
+<refsect2>
+<title><anchor id="GMimeStreamMmap">struct GMimeStreamMmap</title>
+<programlisting>struct GMimeStreamMmap {
+	GMimeStream parent_object;
+	
+	gboolean owner;
+	gboolean eos;
+	int fd;
+	
+	char *map;
+	size_t maplen;
+};
+</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-mmap-new">g_mime_stream_mmap_new ()</title>
+<programlisting><link linkend="GMimeStream">GMimeStream</link>* g_mime_stream_mmap_new         (int fd,
+                                             int prot,
+                                             int flags);</programlisting>
+<para>
+Creates a new GMimeStreamMmap object around <parameter>fd</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>fd</parameter>&nbsp;:</entry>
+<entry> file descriptor
+</entry></row>
+<row><entry align="right"><parameter>prot</parameter>&nbsp;:</entry>
+<entry> protection flags
+</entry></row>
+<row><entry align="right"><parameter>flags</parameter>&nbsp;:</entry>
+<entry> map flags
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a stream using <parameter>fd</parameter>.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-mmap-new-with-bounds">g_mime_stream_mmap_new_with_bounds ()</title>
+<programlisting><link linkend="GMimeStream">GMimeStream</link>* g_mime_stream_mmap_new_with_bounds
+                                            (int fd,
+                                             int prot,
+                                             int flags,
+                                             <link linkend="off-t">off_t</link> start,
+                                             <link linkend="off-t">off_t</link> end);</programlisting>
+<para>
+Creates a new GMimeStreamMmap object around <parameter>fd</parameter> with bounds <parameter>start</parameter>
+and <parameter>end</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>fd</parameter>&nbsp;:</entry>
+<entry> file descriptor
+</entry></row>
+<row><entry align="right"><parameter>prot</parameter>&nbsp;:</entry>
+<entry> protection flags
+</entry></row>
+<row><entry align="right"><parameter>flags</parameter>&nbsp;:</entry>
+<entry> map flags
+</entry></row>
+<row><entry align="right"><parameter>start</parameter>&nbsp;:</entry>
+<entry> start boundary
+</entry></row>
+<row><entry align="right"><parameter>end</parameter>&nbsp;:</entry>
+<entry> end boundary
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a stream using <parameter>fd</parameter> with bounds <parameter>start</parameter> and <parameter>end</parameter>.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+
+</refsect1>
+
+
+
+
+</refentry>
diff -uNr gmime-1.90.0/doc/sgml/gmime-stream-null.sgml gmime/doc/sgml/gmime-stream-null.sgml
--- gmime-1.90.0/doc/sgml/gmime-stream-null.sgml	Thu Jan  1 01:00:00 1970
+++ gmime/doc/sgml/gmime-stream-null.sgml	Thu May 23 07:21:37 2002
@@ -0,0 +1,69 @@
+<refentry id="gmime-gmime-stream-null">
+<refmeta>
+<refentrytitle>gmime-stream-null</refentrytitle>
+<manvolnum>3</manvolnum>
+<refmiscinfo>GMIME Library</refmiscinfo>
+</refmeta>
+
+<refnamediv>
+<refname>gmime-stream-null</refname><refpurpose></refpurpose>
+</refnamediv>
+
+<refsynopsisdiv><title>Synopsis</title>
+<synopsis>
+
+
+
+struct      <link linkend="GMimeStreamNull">GMimeStreamNull</link>;
+<link linkend="GMimeStream">GMimeStream</link>* <link linkend="g-mime-stream-null-new">g_mime_stream_null_new</link>         (void);
+
+
+</synopsis>
+</refsynopsisdiv>
+
+
+
+
+
+<refsect1>
+<title>Description</title>
+<para>
+
+</para>
+</refsect1>
+
+<refsect1>
+<title>Details</title>
+<refsect2>
+<title><anchor id="GMimeStreamNull">struct GMimeStreamNull</title>
+<programlisting>struct GMimeStreamNull {
+	GMimeStream parent_object;
+	
+	size_t written;
+};
+</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-null-new">g_mime_stream_null_new ()</title>
+<programlisting><link linkend="GMimeStream">GMimeStream</link>* g_mime_stream_null_new         (void);</programlisting>
+<para>
+Creates a new GMimeStreamNull object.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a new null stream (similar to /dev/null on Unix).
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+
+</refsect1>
+
+
+
+
+</refentry>
diff -uNr gmime-1.90.0/doc/sgml/gmime-stream.sgml gmime/doc/sgml/gmime-stream.sgml
--- gmime-1.90.0/doc/sgml/gmime-stream.sgml	Thu Jan  1 01:00:00 1970
+++ gmime/doc/sgml/gmime-stream.sgml	Thu May 23 07:21:37 2002
@@ -0,0 +1,513 @@
+<refentry id="gmime-gmime-stream">
+<refmeta>
+<refentrytitle>gmime-stream</refentrytitle>
+<manvolnum>3</manvolnum>
+<refmiscinfo>GMIME Library</refmiscinfo>
+</refmeta>
+
+<refnamediv>
+<refname>gmime-stream</refname><refpurpose></refpurpose>
+</refnamediv>
+
+<refsynopsisdiv><title>Synopsis</title>
+<synopsis>
+
+
+
+enum        <link linkend="GMimeSeekWhence">GMimeSeekWhence</link>;
+typedef     <link linkend="GMimeStreamIOVector">GMimeStreamIOVector</link>;
+struct      <link linkend="GMimeStream">GMimeStream</link>;
+void        <link linkend="g-mime-stream-construct">g_mime_stream_construct</link>         (<link linkend="GMimeStream">GMimeStream</link> *stream,
+                                             <link linkend="off-t">off_t</link> start,
+                                             <link linkend="off-t">off_t</link> end);
+void        <link linkend="g-mime-stream-ref">g_mime_stream_ref</link>               (<link linkend="GMimeStream">GMimeStream</link> *stream);
+void        <link linkend="g-mime-stream-unref">g_mime_stream_unref</link>             (<link linkend="GMimeStream">GMimeStream</link> *stream);
+<link linkend="ssize-t">ssize_t</link>     <link linkend="g-mime-stream-read">g_mime_stream_read</link>              (<link linkend="GMimeStream">GMimeStream</link> *stream,
+                                             char *buf,
+                                             <link linkend="size-t">size_t</link> len);
+<link linkend="ssize-t">ssize_t</link>     <link linkend="g-mime-stream-write">g_mime_stream_write</link>             (<link linkend="GMimeStream">GMimeStream</link> *stream,
+                                             char *buf,
+                                             <link linkend="size-t">size_t</link> len);
+int         <link linkend="g-mime-stream-flush">g_mime_stream_flush</link>             (<link linkend="GMimeStream">GMimeStream</link> *stream);
+<link linkend="off-t">off_t</link>       <link linkend="g-mime-stream-seek">g_mime_stream_seek</link>              (<link linkend="GMimeStream">GMimeStream</link> *stream,
+                                             <link linkend="off-t">off_t</link> offset,
+                                             <link linkend="GMimeSeekWhence">GMimeSeekWhence</link> whence);
+<link linkend="off-t">off_t</link>       <link linkend="g-mime-stream-tell">g_mime_stream_tell</link>              (<link linkend="GMimeStream">GMimeStream</link> *stream);
+int         <link linkend="g-mime-stream-reset">g_mime_stream_reset</link>             (<link linkend="GMimeStream">GMimeStream</link> *stream);
+<link linkend="gboolean">gboolean</link>    <link linkend="g-mime-stream-eos">g_mime_stream_eos</link>               (<link linkend="GMimeStream">GMimeStream</link> *stream);
+int         <link linkend="g-mime-stream-close">g_mime_stream_close</link>             (<link linkend="GMimeStream">GMimeStream</link> *stream);
+<link linkend="ssize-t">ssize_t</link>     <link linkend="g-mime-stream-length">g_mime_stream_length</link>            (<link linkend="GMimeStream">GMimeStream</link> *stream);
+<link linkend="GMimeStream">GMimeStream</link>* <link linkend="g-mime-stream-substream">g_mime_stream_substream</link>        (<link linkend="GMimeStream">GMimeStream</link> *stream,
+                                             <link linkend="off-t">off_t</link> start,
+                                             <link linkend="off-t">off_t</link> end);
+void        <link linkend="g-mime-stream-set-bounds">g_mime_stream_set_bounds</link>        (<link linkend="GMimeStream">GMimeStream</link> *stream,
+                                             <link linkend="off-t">off_t</link> start,
+                                             <link linkend="off-t">off_t</link> end);
+<link linkend="ssize-t">ssize_t</link>     <link linkend="g-mime-stream-write-string">g_mime_stream_write_string</link>      (<link linkend="GMimeStream">GMimeStream</link> *stream,
+                                             const char *string);
+<link linkend="ssize-t">ssize_t</link>     <link linkend="g-mime-stream-printf">g_mime_stream_printf</link>            (<link linkend="GMimeStream">GMimeStream</link> *stream,
+                                             const char *fmt,
+                                             ...);
+<link linkend="ssize-t">ssize_t</link>     <link linkend="g-mime-stream-write-to-stream">g_mime_stream_write_to_stream</link>   (<link linkend="GMimeStream">GMimeStream</link> *src,
+                                             <link linkend="GMimeStream">GMimeStream</link> *dest);
+<link linkend="ssize-t">ssize_t</link>     <link linkend="g-mime-stream-writev">g_mime_stream_writev</link>            (<link linkend="GMimeStream">GMimeStream</link> *stream,
+                                             <link linkend="GMimeStreamIOVector">GMimeStreamIOVector</link> *vector,
+                                             <link linkend="size-t">size_t</link> count);
+
+
+</synopsis>
+</refsynopsisdiv>
+
+
+
+
+
+<refsect1>
+<title>Description</title>
+<para>
+
+</para>
+</refsect1>
+
+<refsect1>
+<title>Details</title>
+<refsect2>
+<title><anchor id="GMimeSeekWhence">enum GMimeSeekWhence</title>
+<programlisting>typedef enum {
+	GMIME_STREAM_SEEK_SET = SEEK_SET,
+	GMIME_STREAM_SEEK_CUR = SEEK_CUR,
+	GMIME_STREAM_SEEK_END = SEEK_END,
+} GMimeSeekWhence;
+</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="GMimeStreamIOVector">GMimeStreamIOVector</title>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="GMimeStream">struct GMimeStream</title>
+<programlisting>struct GMimeStream {
+	GObject parent_object;
+	
+	/* Note: these are private fields!! */
+	GMimeStream *super_stream;
+	
+	off_t position;
+	off_t bound_start;
+	off_t bound_end;
+};
+</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-construct">g_mime_stream_construct ()</title>
+<programlisting>void        g_mime_stream_construct         (<link linkend="GMimeStream">GMimeStream</link> *stream,
+                                             <link linkend="off-t">off_t</link> start,
+                                             <link linkend="off-t">off_t</link> end);</programlisting>
+<para>
+Initializes a new stream with bounds <parameter>start</parameter> and <parameter>end</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
+<entry> stream
+</entry></row>
+<row><entry align="right"><parameter>start</parameter>&nbsp;:</entry>
+<entry> start boundary
+</entry></row>
+<row><entry align="right"><parameter>end</parameter>&nbsp;:</entry>
+<entry> end boundary
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-ref">g_mime_stream_ref ()</title>
+<programlisting>void        g_mime_stream_ref               (<link linkend="GMimeStream">GMimeStream</link> *stream);</programlisting>
+<para>
+Ref's a stream.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
+<entry> stream
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-unref">g_mime_stream_unref ()</title>
+<programlisting>void        g_mime_stream_unref             (<link linkend="GMimeStream">GMimeStream</link> *stream);</programlisting>
+<para>
+Unref's a stream.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
+<entry> stream
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-read">g_mime_stream_read ()</title>
+<programlisting><link linkend="ssize-t">ssize_t</link>     g_mime_stream_read              (<link linkend="GMimeStream">GMimeStream</link> *stream,
+                                             char *buf,
+                                             <link linkend="size-t">size_t</link> len);</programlisting>
+<para>
+Attempts to read up to <parameter>len</parameter> bytes from <parameter>stream</parameter> into <parameter>buf</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
+<entry> stream
+</entry></row>
+<row><entry align="right"><parameter>buf</parameter>&nbsp;:</entry>
+<entry> buffer
+</entry></row>
+<row><entry align="right"><parameter>len</parameter>&nbsp;:</entry>
+<entry> buffer length
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes read or -1 on fail.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-write">g_mime_stream_write ()</title>
+<programlisting><link linkend="ssize-t">ssize_t</link>     g_mime_stream_write             (<link linkend="GMimeStream">GMimeStream</link> *stream,
+                                             char *buf,
+                                             <link linkend="size-t">size_t</link> len);</programlisting>
+<para>
+Attempts to write up to <parameter>len</parameter> bytes of <parameter>buf</parameter> to <parameter>stream</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
+<entry> stream
+</entry></row>
+<row><entry align="right"><parameter>buf</parameter>&nbsp;:</entry>
+<entry> buffer
+</entry></row>
+<row><entry align="right"><parameter>len</parameter>&nbsp;:</entry>
+<entry> buffer length
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes written or -1 on fail.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-flush">g_mime_stream_flush ()</title>
+<programlisting>int         g_mime_stream_flush             (<link linkend="GMimeStream">GMimeStream</link> *stream);</programlisting>
+<para>
+Sync's the stream to disk.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
+<entry> stream
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or -1 on fail.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-seek">g_mime_stream_seek ()</title>
+<programlisting><link linkend="off-t">off_t</link>       g_mime_stream_seek              (<link linkend="GMimeStream">GMimeStream</link> *stream,
+                                             <link linkend="off-t">off_t</link> offset,
+                                             <link linkend="GMimeSeekWhence">GMimeSeekWhence</link> whence);</programlisting>
+<para>
+Repositions the offset of the stream <parameter>stream</parameter> to
+the argument <parameter>offset</parameter> according to the
+directive <parameter>whence</parameter> as follows:
+</para>
+<para>
+    GMIME_STREAM_SEEK_SET: The offset is set to <parameter>offset</parameter> bytes.
+</para>
+<para>
+    GMIME_STREAM_SEEK_CUR: The offset is set to its current
+    location plus <parameter>offset</parameter> bytes.
+</para>
+<para>
+    GMIME_STREAM_SEEK_END: The offset is set to the size of the
+    stream plus <parameter>offset</parameter> bytes.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
+<entry> stream
+</entry></row>
+<row><entry align="right"><parameter>offset</parameter>&nbsp;:</entry>
+<entry> positional offset
+</entry></row>
+<row><entry align="right"><parameter>whence</parameter>&nbsp;:</entry>
+<entry> seek directive
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the resultant position on success or -1 on fail.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-tell">g_mime_stream_tell ()</title>
+<programlisting><link linkend="off-t">off_t</link>       g_mime_stream_tell              (<link linkend="GMimeStream">GMimeStream</link> *stream);</programlisting>
+<para>
+Gets the current offset within the stream.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
+<entry> stream
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the current position within the stream or -1 on fail.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-reset">g_mime_stream_reset ()</title>
+<programlisting>int         g_mime_stream_reset             (<link linkend="GMimeStream">GMimeStream</link> *stream);</programlisting>
+<para>
+Resets the stream.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
+<entry> stream
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or -1 on fail.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-eos">g_mime_stream_eos ()</title>
+<programlisting><link linkend="gboolean">gboolean</link>    g_mime_stream_eos               (<link linkend="GMimeStream">GMimeStream</link> *stream);</programlisting>
+<para>
+Tests the end-of-stream indicator for <parameter>stream</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
+<entry> stream
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry><literal>TRUE</literal> on EOS or <literal>FALSE</literal> otherwise.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-close">g_mime_stream_close ()</title>
+<programlisting>int         g_mime_stream_close             (<link linkend="GMimeStream">GMimeStream</link> *stream);</programlisting>
+<para>
+Closes the stream.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
+<entry> stream
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or -1 on fail.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-length">g_mime_stream_length ()</title>
+<programlisting><link linkend="ssize-t">ssize_t</link>     g_mime_stream_length            (<link linkend="GMimeStream">GMimeStream</link> *stream);</programlisting>
+<para>
+Gets the length of the stream.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
+<entry> stream
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the length of the stream or -1 on fail.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-substream">g_mime_stream_substream ()</title>
+<programlisting><link linkend="GMimeStream">GMimeStream</link>* g_mime_stream_substream        (<link linkend="GMimeStream">GMimeStream</link> *stream,
+                                             <link linkend="off-t">off_t</link> start,
+                                             <link linkend="off-t">off_t</link> end);</programlisting>
+<para>
+Creates a new substream of <parameter>stream</parameter> with bounds <parameter>start</parameter> and <parameter>end</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
+<entry> stream
+</entry></row>
+<row><entry align="right"><parameter>start</parameter>&nbsp;:</entry>
+<entry> start boundary
+</entry></row>
+<row><entry align="right"><parameter>end</parameter>&nbsp;:</entry>
+<entry> end boundary
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a substream of <parameter>stream</parameter> with bounds <parameter>start</parameter> and <parameter>end</parameter>.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-set-bounds">g_mime_stream_set_bounds ()</title>
+<programlisting>void        g_mime_stream_set_bounds        (<link linkend="GMimeStream">GMimeStream</link> *stream,
+                                             <link linkend="off-t">off_t</link> start,
+                                             <link linkend="off-t">off_t</link> end);</programlisting>
+<para>
+Set the bounds on a stream.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
+<entry> stream
+</entry></row>
+<row><entry align="right"><parameter>start</parameter>&nbsp;:</entry>
+<entry> start boundary
+</entry></row>
+<row><entry align="right"><parameter>end</parameter>&nbsp;:</entry>
+<entry> end boundary
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-write-string">g_mime_stream_write_string ()</title>
+<programlisting><link linkend="ssize-t">ssize_t</link>     g_mime_stream_write_string      (<link linkend="GMimeStream">GMimeStream</link> *stream,
+                                             const char *string);</programlisting>
+<para>
+Writes <parameter>string</parameter> to <parameter>stream</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
+<entry> stream
+</entry></row>
+<row><entry align="right"><parameter>string</parameter>&nbsp;:</entry>
+<entry> string to write
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes written or -1 on fail.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-printf">g_mime_stream_printf ()</title>
+<programlisting><link linkend="ssize-t">ssize_t</link>     g_mime_stream_printf            (<link linkend="GMimeStream">GMimeStream</link> *stream,
+                                             const char *fmt,
+                                             ...);</programlisting>
+<para>
+Write formatted output to a stream.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
+<entry> stream
+</entry></row>
+<row><entry align="right"><parameter>fmt</parameter>&nbsp;:</entry>
+<entry> format
+</entry></row>
+<row><entry align="right"><parameter>...</parameter>&nbsp;:</entry>
+<entry> arguments
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes written or -1 on fail.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-write-to-stream">g_mime_stream_write_to_stream ()</title>
+<programlisting><link linkend="ssize-t">ssize_t</link>     g_mime_stream_write_to_stream   (<link linkend="GMimeStream">GMimeStream</link> *src,
+                                             <link linkend="GMimeStream">GMimeStream</link> *dest);</programlisting>
+<para>
+Attempts to write stream <parameter>src</parameter> to stream <parameter>dest</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>src</parameter>&nbsp;:</entry>
+<entry> source stream
+</entry></row>
+<row><entry align="right"><parameter>dest</parameter>&nbsp;:</entry>
+<entry> destination stream
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes written or -1 on fail.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-stream-writev">g_mime_stream_writev ()</title>
+<programlisting><link linkend="ssize-t">ssize_t</link>     g_mime_stream_writev            (<link linkend="GMimeStream">GMimeStream</link> *stream,
+                                             <link linkend="GMimeStreamIOVector">GMimeStreamIOVector</link> *vector,
+                                             <link linkend="size-t">size_t</link> count);</programlisting>
+<para>
+Writes at most <parameter>count</parameter> blocks described by <parameter>vector</parameter> to <parameter>stream</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
+<entry> stream
+</entry></row>
+<row><entry align="right"><parameter>vector</parameter>&nbsp;:</entry>
+<entry> i/o vector
+</entry></row>
+<row><entry align="right"><parameter>count</parameter>&nbsp;:</entry>
+<entry> number of vector elements
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes written or -1 on fail.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+
+</refsect1>
+
+
+
+
+</refentry>
diff -uNr gmime-1.90.0/doc/sgml/gmime-utils.sgml gmime/doc/sgml/gmime-utils.sgml
--- gmime-1.90.0/doc/sgml/gmime-utils.sgml	Thu Jan  1 01:00:00 1970
+++ gmime/doc/sgml/gmime-utils.sgml	Thu May 23 07:21:37 2002
@@ -0,0 +1,751 @@
+<refentry id="gmime-gmime-utils">
+<refmeta>
+<refentrytitle>gmime-utils</refentrytitle>
+<manvolnum>3</manvolnum>
+<refmiscinfo>GMIME Library</refmiscinfo>
+</refmeta>
+
+<refnamediv>
+<refname>gmime-utils</refname><refpurpose></refpurpose>
+</refnamediv>
+
+<refsynopsisdiv><title>Synopsis</title>
+<synopsis>
+
+
+
+#define     <link linkend="BASE64-ENCODE-LEN-CAPS">BASE64_ENCODE_LEN</link>               (x)
+#define     <link linkend="QP-ENCODE-LEN-CAPS">QP_ENCODE_LEN</link>                   (x)
+enum        <link linkend="GMimePartEncodingType">GMimePartEncodingType</link>;
+<link linkend="time-t">time_t</link>      <link linkend="g-mime-utils-header-decode-date">g_mime_utils_header_decode_date</link> (const char *in,
+                                             int *saveoffset);
+char*       <link linkend="g-mime-utils-header-format-date">g_mime_utils_header_format_date</link> (<link linkend="time-t">time_t</link> time,
+                                             int offset);
+char*       <link linkend="g-mime-utils-header-fold">g_mime_utils_header_fold</link>        (const char *in);
+char*       <link linkend="g-mime-utils-header-printf">g_mime_utils_header_printf</link>      (const char *format,
+                                             ...);
+char*       <link linkend="g-mime-utils-quote-string">g_mime_utils_quote_string</link>       (const char *string);
+void        <link linkend="g-mime-utils-unquote-string">g_mime_utils_unquote_string</link>     (char *string);
+<link linkend="gboolean">gboolean</link>    <link linkend="g-mime-utils-text-is-8bit">g_mime_utils_text_is_8bit</link>       (unsigned char *text,
+                                             <link linkend="size-t">size_t</link> len);
+<link linkend="GMimePartEncodingType">GMimePartEncodingType</link> <link linkend="g-mime-utils-best-encoding">g_mime_utils_best_encoding</link>
+                                            (unsigned char *text,
+                                             <link linkend="size-t">size_t</link> len);
+char*       <link linkend="g-mime-utils-8bit-header-decode">g_mime_utils_8bit_header_decode</link> (unsigned char *in);
+char*       <link linkend="g-mime-utils-8bit-header-encode">g_mime_utils_8bit_header_encode</link> (unsigned char *in);
+char*       <link linkend="g-mime-utils-8bit-header-encode-phrase">g_mime_utils_8bit_header_encode_phrase</link>
+                                            (unsigned char *in);
+<link linkend="size-t">size_t</link>      <link linkend="g-mime-utils-base64-decode-step">g_mime_utils_base64_decode_step</link> (unsigned char *in,
+                                             <link linkend="size-t">size_t</link> inlen,
+                                             unsigned char *out,
+                                             int *state,
+                                             <link linkend="guint32">guint32</link> *save);
+<link linkend="size-t">size_t</link>      <link linkend="g-mime-utils-base64-encode-step">g_mime_utils_base64_encode_step</link> (unsigned char *in,
+                                             <link linkend="size-t">size_t</link> inlen,
+                                             unsigned char *out,
+                                             int *state,
+                                             <link linkend="guint32">guint32</link> *save);
+<link linkend="size-t">size_t</link>      <link linkend="g-mime-utils-base64-encode-close">g_mime_utils_base64_encode_close</link>
+                                            (unsigned char *in,
+                                             <link linkend="size-t">size_t</link> inlen,
+                                             unsigned char *out,
+                                             int *state,
+                                             <link linkend="guint32">guint32</link> *save);
+#define     <link linkend="GMIME-UUDECODE-STATE-INIT-CAPS">GMIME_UUDECODE_STATE_INIT</link>
+#define     <link linkend="GMIME-UUDECODE-STATE-BEGIN-CAPS">GMIME_UUDECODE_STATE_BEGIN</link>
+#define     <link linkend="GMIME-UUDECODE-STATE-END-CAPS">GMIME_UUDECODE_STATE_END</link>
+#define     <link linkend="GMIME-UUDECODE-STATE-MASK-CAPS">GMIME_UUDECODE_STATE_MASK</link>
+<link linkend="size-t">size_t</link>      <link linkend="g-mime-utils-uudecode-step">g_mime_utils_uudecode_step</link>      (unsigned char *in,
+                                             <link linkend="size-t">size_t</link> inlen,
+                                             unsigned char *out,
+                                             int *state,
+                                             <link linkend="guint32">guint32</link> *save);
+<link linkend="size-t">size_t</link>      <link linkend="g-mime-utils-uuencode-step">g_mime_utils_uuencode_step</link>      (unsigned char *in,
+                                             <link linkend="size-t">size_t</link> inlen,
+                                             unsigned char *out,
+                                             unsigned char *uubuf,
+                                             int *state,
+                                             <link linkend="guint32">guint32</link> *save);
+<link linkend="size-t">size_t</link>      <link linkend="g-mime-utils-uuencode-close">g_mime_utils_uuencode_close</link>     (unsigned char *in,
+                                             <link linkend="size-t">size_t</link> inlen,
+                                             unsigned char *out,
+                                             unsigned char *uubuf,
+                                             int *state,
+                                             <link linkend="guint32">guint32</link> *save);
+<link linkend="size-t">size_t</link>      <link linkend="g-mime-utils-quoted-decode-step">g_mime_utils_quoted_decode_step</link> (unsigned char *in,
+                                             <link linkend="size-t">size_t</link> inlen,
+                                             unsigned char *out,
+                                             int *savestate,
+                                             int *saved);
+<link linkend="size-t">size_t</link>      <link linkend="g-mime-utils-quoted-encode-step">g_mime_utils_quoted_encode_step</link> (unsigned char *in,
+                                             <link linkend="size-t">size_t</link> inlen,
+                                             unsigned char *out,
+                                             int *state,
+                                             int *save);
+<link linkend="size-t">size_t</link>      <link linkend="g-mime-utils-quoted-encode-close">g_mime_utils_quoted_encode_close</link>
+                                            (unsigned char *in,
+                                             <link linkend="size-t">size_t</link> inlen,
+                                             unsigned char *out,
+                                             int *state,
+                                             int *save);
+</synopsis>
+</refsynopsisdiv>
+
+
+
+
+
+<refsect1>
+<title>Description</title>
+<para>
+
+</para>
+</refsect1>
+
+<refsect1>
+<title>Details</title>
+<refsect2>
+<title><anchor id="BASE64-ENCODE-LEN-CAPS">BASE64_ENCODE_LEN()</title>
+<programlisting>#define     BASE64_ENCODE_LEN(x)</programlisting>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>x</parameter>&nbsp;:</entry>
+<entry>
+
+
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="QP-ENCODE-LEN-CAPS">QP_ENCODE_LEN()</title>
+<programlisting>#define     QP_ENCODE_LEN(x)</programlisting>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>x</parameter>&nbsp;:</entry>
+<entry>
+
+
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="GMimePartEncodingType">enum GMimePartEncodingType</title>
+<programlisting>typedef enum {
+	GMIME_PART_ENCODING_DEFAULT,
+	GMIME_PART_ENCODING_7BIT,
+	GMIME_PART_ENCODING_8BIT,
+	GMIME_PART_ENCODING_BINARY,
+	GMIME_PART_ENCODING_BASE64,
+	GMIME_PART_ENCODING_QUOTEDPRINTABLE,
+	GMIME_PART_ENCODING_UUENCODE,
+	GMIME_PART_NUM_ENCODINGS
+} GMimePartEncodingType;
+</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="g-mime-utils-header-decode-date">g_mime_utils_header_decode_date ()</title>
+<programlisting><link linkend="time-t">time_t</link>      g_mime_utils_header_decode_date (const char *in,
+                                             int *saveoffset);</programlisting>
+<para>
+Decodes the rfc822 date string and saves the GMT offset into
+<parameter>saveoffset</parameter> if non-NULL.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
+<entry> input date string
+</entry></row>
+<row><entry align="right"><parameter>saveoffset</parameter>&nbsp;:</entry>
+<entry>
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the time_t representation of the date string specified by
+<parameter>in</parameter>. If 'saveoffset' is non-NULL, the value of the timezone offset
+will be stored.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-utils-header-format-date">g_mime_utils_header_format_date ()</title>
+<programlisting>char*       g_mime_utils_header_format_date (<link linkend="time-t">time_t</link> time,
+                                             int offset);</programlisting>
+<para>
+Allocates a string buffer containing the rfc822 formatted date
+string represented by <parameter>time</parameter> and <parameter>offset</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>time</parameter>&nbsp;:</entry>
+<entry> time_t date representation
+</entry></row>
+<row><entry align="right"><parameter>offset</parameter>&nbsp;:</entry>
+<entry> Timezone offset
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a valid string representation of the date.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-utils-header-fold">g_mime_utils_header_fold ()</title>
+<programlisting>char*       g_mime_utils_header_fold        (const char *in);</programlisting>
+<para>
+Folds a header according to the rules in rfc822.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
+<entry> input header string
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>an allocated string containing the folded header.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-utils-header-printf">g_mime_utils_header_printf ()</title>
+<programlisting>char*       g_mime_utils_header_printf      (const char *format,
+                                             ...);</programlisting>
+<para>
+Allocates a buffer containing a formatted header specified by the
+<parameter>Varargs</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>format</parameter>&nbsp;:</entry>
+<entry> string format
+</entry></row>
+<row><entry align="right"><parameter>...</parameter>&nbsp;:</entry>
+<entry> arguments
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>an allocated string containing the folded header specified
+by <parameter>format</parameter> and the following arguments.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-utils-quote-string">g_mime_utils_quote_string ()</title>
+<programlisting>char*       g_mime_utils_quote_string       (const char *string);</programlisting>
+<para>
+Quotes <parameter>string</parameter> as needed according to the rules in rfc2045.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>string</parameter>&nbsp;:</entry>
+<entry> input string
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>an allocated string containing the escaped and quoted (if
+needed to be) input string. The decision to quote the string is
+based on whether or not the input string contains any 'tspecials'
+as defined by rfc2045.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-utils-unquote-string">g_mime_utils_unquote_string ()</title>
+<programlisting>void        g_mime_utils_unquote_string     (char *string);</programlisting>
+<para>
+Unquotes and unescapes a string.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>string</parameter>&nbsp;:</entry>
+<entry> string
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-utils-text-is-8bit">g_mime_utils_text_is_8bit ()</title>
+<programlisting><link linkend="gboolean">gboolean</link>    g_mime_utils_text_is_8bit       (unsigned char *text,
+                                             <link linkend="size-t">size_t</link> len);</programlisting>
+<para>
+Determines if <parameter>text</parameter> contains 8bit characters within the first <parameter>len</parameter>
+bytes.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>text</parameter>&nbsp;:</entry>
+<entry> text to check for 8bit chars
+</entry></row>
+<row><entry align="right"><parameter>len</parameter>&nbsp;:</entry>
+<entry> text length
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry><literal>TRUE</literal> if the text contains 8bit characters or <literal>FALSE</literal>
+otherwise.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-utils-best-encoding">g_mime_utils_best_encoding ()</title>
+<programlisting><link linkend="GMimePartEncodingType">GMimePartEncodingType</link> g_mime_utils_best_encoding
+                                            (unsigned char *text,
+                                             <link linkend="size-t">size_t</link> len);</programlisting>
+<para>
+Determines the best content encoding for the first <parameter>len</parameter> bytes of
+<parameter>text</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>text</parameter>&nbsp;:</entry>
+<entry> text to encode
+</entry></row>
+<row><entry align="right"><parameter>len</parameter>&nbsp;:</entry>
+<entry> text length
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a <link linkend="GMimePartEncodingType">GMimePartEncodingType</link> that is determined to be the best
+encoding type for the specified block of text. ("best" in this
+particular case means best compression)
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-utils-8bit-header-decode">g_mime_utils_8bit_header_decode ()</title>
+<programlisting>char*       g_mime_utils_8bit_header_decode (unsigned char *in);</programlisting>
+<para>
+Decodes and rfc2047 encoded header.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
+<entry> header to decode
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the mime encoded header as 8bit text.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-utils-8bit-header-encode">g_mime_utils_8bit_header_encode ()</title>
+<programlisting>char*       g_mime_utils_8bit_header_encode (unsigned char *in);</programlisting>
+<para>
+Encodes a header according to the rules in rfc2047.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
+<entry> header to encode
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the header as several encoded atoms. Useful for encoding
+headers like "Subject".
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-utils-8bit-header-encode-phrase">g_mime_utils_8bit_header_encode_phrase ()</title>
+<programlisting>char*       g_mime_utils_8bit_header_encode_phrase
+                                            (unsigned char *in);</programlisting>
+<para>
+Encodes a header phrase according to the rules in rfc2047.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
+<entry> header to encode
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the header phrase as 1 encoded atom. Useful for encoding
+internet addresses.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-utils-base64-decode-step">g_mime_utils_base64_decode_step ()</title>
+<programlisting><link linkend="size-t">size_t</link>      g_mime_utils_base64_decode_step (unsigned char *in,
+                                             <link linkend="size-t">size_t</link> inlen,
+                                             unsigned char *out,
+                                             int *state,
+                                             <link linkend="guint32">guint32</link> *save);</programlisting>
+<para>
+Decodes a chunk of base64 encoded data.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
+<entry> input stream
+</entry></row>
+<row><entry align="right"><parameter>inlen</parameter>&nbsp;:</entry>
+<entry> max length of data to decode
+</entry></row>
+<row><entry align="right"><parameter>out</parameter>&nbsp;:</entry>
+<entry> output stream
+</entry></row>
+<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
+<entry> holds the number of bits that are stored in <parameter>save</parameter>
+</entry></row>
+<row><entry align="right"><parameter>save</parameter>&nbsp;:</entry>
+<entry> leftover bits that have not yet been decoded
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes decoded (which have been dumped in <parameter>out</parameter>).
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-utils-base64-encode-step">g_mime_utils_base64_encode_step ()</title>
+<programlisting><link linkend="size-t">size_t</link>      g_mime_utils_base64_encode_step (unsigned char *in,
+                                             <link linkend="size-t">size_t</link> inlen,
+                                             unsigned char *out,
+                                             int *state,
+                                             <link linkend="guint32">guint32</link> *save);</programlisting>
+<para>
+Base64 encodes a chunk of data. Performs an 'encode step', only
+encodes blocks of 3 characters to the output at a time, saves
+left-over state in state and save (initialise to 0 on first
+invocation).</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
+<entry> input stream
+</entry></row>
+<row><entry align="right"><parameter>inlen</parameter>&nbsp;:</entry>
+<entry> length of the input
+</entry></row>
+<row><entry align="right"><parameter>out</parameter>&nbsp;:</entry>
+<entry> output string
+</entry></row>
+<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
+<entry> holds the number of bits that are stored in <parameter>save</parameter>
+</entry></row>
+<row><entry align="right"><parameter>save</parameter>&nbsp;:</entry>
+<entry> leftover bits that have not yet been encoded
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes encoded.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-utils-base64-encode-close">g_mime_utils_base64_encode_close ()</title>
+<programlisting><link linkend="size-t">size_t</link>      g_mime_utils_base64_encode_close
+                                            (unsigned char *in,
+                                             <link linkend="size-t">size_t</link> inlen,
+                                             unsigned char *out,
+                                             int *state,
+                                             <link linkend="guint32">guint32</link> *save);</programlisting>
+<para>
+Base64 encodes the input stream to the output stream. Call this
+when finished encoding data with <link linkend="g-mime-utils-base64-encode-step">g_mime_utils_base64_encode_step</link>
+to flush off the last little bit.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
+<entry> input stream
+</entry></row>
+<row><entry align="right"><parameter>inlen</parameter>&nbsp;:</entry>
+<entry> length of the input
+</entry></row>
+<row><entry align="right"><parameter>out</parameter>&nbsp;:</entry>
+<entry> output string
+</entry></row>
+<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
+<entry> holds the number of bits that are stored in <parameter>save</parameter>
+</entry></row>
+<row><entry align="right"><parameter>save</parameter>&nbsp;:</entry>
+<entry> leftover bits that have not yet been encoded
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes encoded.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="GMIME-UUDECODE-STATE-INIT-CAPS">GMIME_UUDECODE_STATE_INIT</title>
+<programlisting>#define     GMIME_UUDECODE_STATE_INIT</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="GMIME-UUDECODE-STATE-BEGIN-CAPS">GMIME_UUDECODE_STATE_BEGIN</title>
+<programlisting>#define     GMIME_UUDECODE_STATE_BEGIN</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="GMIME-UUDECODE-STATE-END-CAPS">GMIME_UUDECODE_STATE_END</title>
+<programlisting>#define     GMIME_UUDECODE_STATE_END</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="GMIME-UUDECODE-STATE-MASK-CAPS">GMIME_UUDECODE_STATE_MASK</title>
+<programlisting>#define     GMIME_UUDECODE_STATE_MASK</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="g-mime-utils-uudecode-step">g_mime_utils_uudecode_step ()</title>
+<programlisting><link linkend="size-t">size_t</link>      g_mime_utils_uudecode_step      (unsigned char *in,
+                                             <link linkend="size-t">size_t</link> inlen,
+                                             unsigned char *out,
+                                             int *state,
+                                             <link linkend="guint32">guint32</link> *save);</programlisting>
+<para>
+Uudecodes a chunk of data. Performs a 'decode step' on a chunk of
+uuencoded data. Assumes the "begin &lt;mode&gt; &lt;file name&gt;" line has
+been stripped off.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
+<entry> input stream
+</entry></row>
+<row><entry align="right"><parameter>inlen</parameter>&nbsp;:</entry>
+<entry> max length of data to decode
+</entry></row>
+<row><entry align="right"><parameter>out</parameter>&nbsp;:</entry>
+<entry> output stream
+</entry></row>
+<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
+<entry> holds the number of bits that are stored in <parameter>save</parameter>
+</entry></row>
+<row><entry align="right"><parameter>save</parameter>&nbsp;:</entry>
+<entry> leftover bits that have not yet been decoded
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes decoded.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-utils-uuencode-step">g_mime_utils_uuencode_step ()</title>
+<programlisting><link linkend="size-t">size_t</link>      g_mime_utils_uuencode_step      (unsigned char *in,
+                                             <link linkend="size-t">size_t</link> inlen,
+                                             unsigned char *out,
+                                             unsigned char *uubuf,
+                                             int *state,
+                                             <link linkend="guint32">guint32</link> *save);</programlisting>
+<para>
+Uuencodes a chunk of data. Performs an 'encode step', only encodes
+blocks of 45 characters to the output at a time, saves left-over
+state in <parameter>uubuf</parameter>, <parameter>state</parameter> and <parameter>save</parameter> (initialize to 0 on first
+invocation).</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
+<entry> input stream
+</entry></row>
+<row><entry align="right"><parameter>inlen</parameter>&nbsp;:</entry>
+<entry> input stream length
+</entry></row>
+<row><entry align="right"><parameter>out</parameter>&nbsp;:</entry>
+<entry> output stream
+</entry></row>
+<row><entry align="right"><parameter>uubuf</parameter>&nbsp;:</entry>
+<entry> temporary buffer of 60 bytes
+</entry></row>
+<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
+<entry> holds the number of bits that are stored in <parameter>save</parameter>
+</entry></row>
+<row><entry align="right"><parameter>save</parameter>&nbsp;:</entry>
+<entry> leftover bits that have not yet been encoded
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes encoded.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-utils-uuencode-close">g_mime_utils_uuencode_close ()</title>
+<programlisting><link linkend="size-t">size_t</link>      g_mime_utils_uuencode_close     (unsigned char *in,
+                                             <link linkend="size-t">size_t</link> inlen,
+                                             unsigned char *out,
+                                             unsigned char *uubuf,
+                                             int *state,
+                                             <link linkend="guint32">guint32</link> *save);</programlisting>
+<para>
+Uuencodes a chunk of data. Call this when finished encoding data
+with <link linkend="g-mime-utils-uuencode-step">g_mime_utils_uuencode_step</link> to flush off the last little bit.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
+<entry> input stream
+</entry></row>
+<row><entry align="right"><parameter>inlen</parameter>&nbsp;:</entry>
+<entry> input stream length
+</entry></row>
+<row><entry align="right"><parameter>out</parameter>&nbsp;:</entry>
+<entry> output stream
+</entry></row>
+<row><entry align="right"><parameter>uubuf</parameter>&nbsp;:</entry>
+<entry> temporary buffer of 60 bytes
+</entry></row>
+<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
+<entry> holds the number of bits that are stored in <parameter>save</parameter>
+</entry></row>
+<row><entry align="right"><parameter>save</parameter>&nbsp;:</entry>
+<entry> leftover bits that have not yet been encoded
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes encoded.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-utils-quoted-decode-step">g_mime_utils_quoted_decode_step ()</title>
+<programlisting><link linkend="size-t">size_t</link>      g_mime_utils_quoted_decode_step (unsigned char *in,
+                                             <link linkend="size-t">size_t</link> inlen,
+                                             unsigned char *out,
+                                             int *savestate,
+                                             int *saved);</programlisting>
+<para>
+Decodes a block of quoted-printable encoded data. Performs a
+'decode step' on a chunk of QP encoded data.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
+<entry> input stream
+</entry></row>
+<row><entry align="right"><parameter>inlen</parameter>&nbsp;:</entry>
+<entry> max length of data to decode
+</entry></row>
+<row><entry align="right"><parameter>out</parameter>&nbsp;:</entry>
+<entry> output stream
+</entry></row>
+<row><entry align="right"><parameter>savestate</parameter>&nbsp;:</entry>
+<entry> holds the number of bits that are stored in <parameter>save</parameter>
+</entry></row>
+<row><entry align="right"><parameter>saved</parameter>&nbsp;:</entry>
+<entry> leftover bits that have not yet been decoded
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes decoded.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-utils-quoted-encode-step">g_mime_utils_quoted_encode_step ()</title>
+<programlisting><link linkend="size-t">size_t</link>      g_mime_utils_quoted_encode_step (unsigned char *in,
+                                             <link linkend="size-t">size_t</link> inlen,
+                                             unsigned char *out,
+                                             int *state,
+                                             int *save);</programlisting>
+<para>
+Quoted-printable encodes a block of text. Performs an 'encode
+step', saves left-over state in state and save (initialise to -1 on
+first invocation).</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
+<entry> input stream
+</entry></row>
+<row><entry align="right"><parameter>inlen</parameter>&nbsp;:</entry>
+<entry> length of the input
+</entry></row>
+<row><entry align="right"><parameter>out</parameter>&nbsp;:</entry>
+<entry> output string
+</entry></row>
+<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
+<entry> holds the number of bits that are stored in <parameter>save</parameter>
+</entry></row>
+<row><entry align="right"><parameter>save</parameter>&nbsp;:</entry>
+<entry> leftover bits that have not yet been encoded
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes encoded.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="g-mime-utils-quoted-encode-close">g_mime_utils_quoted_encode_close ()</title>
+<programlisting><link linkend="size-t">size_t</link>      g_mime_utils_quoted_encode_close
+                                            (unsigned char *in,
+                                             <link linkend="size-t">size_t</link> inlen,
+                                             unsigned char *out,
+                                             int *state,
+                                             int *save);</programlisting>
+<para>
+Quoted-printable encodes a block of text. Call this when finished
+encoding data with <link linkend="g-mime-utils-quoted-encode-step">g_mime_utils_quoted_encode_step</link> to flush off
+the last little bit.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
+<entry> input stream
+</entry></row>
+<row><entry align="right"><parameter>inlen</parameter>&nbsp;:</entry>
+<entry> length of the input
+</entry></row>
+<row><entry align="right"><parameter>out</parameter>&nbsp;:</entry>
+<entry> output string
+</entry></row>
+<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
+<entry> holds the number of bits that are stored in <parameter>save</parameter>
+</entry></row>
+<row><entry align="right"><parameter>save</parameter>&nbsp;:</entry>
+<entry> leftover bits that have not yet been encoded
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes encoded.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+
+</refsect1>
+
+
+
+
+</refentry>
diff -uNr gmime-1.90.0/doc/sgml/gmime.sgml gmime/doc/sgml/gmime.sgml
--- gmime-1.90.0/doc/sgml/gmime.sgml	Thu Jan  1 01:00:00 1970
+++ gmime/doc/sgml/gmime.sgml	Thu May 23 07:21:37 2002
@@ -0,0 +1,86 @@
+<refentry id="gmime-gmime">
+<refmeta>
+<refentrytitle>gmime</refentrytitle>
+<manvolnum>3</manvolnum>
+<refmiscinfo>GMIME Library</refmiscinfo>
+</refmeta>
+
+<refnamediv>
+<refname>gmime</refname><refpurpose></refpurpose>
+</refnamediv>
+
+<refsynopsisdiv><title>Synopsis</title>
+<synopsis>
+
+
+
+#define     <link linkend="GMIME-CHECK-VERSION-CAPS">GMIME_CHECK_VERSION</link>             (major,minor,micro)
+#define     <link linkend="GMIME-INIT-FLAG-UTF8-CAPS">GMIME_INIT_FLAG_UTF8</link>
+void        <link linkend="g-mime-init">g_mime_init</link>                     (<link linkend="guint32">guint32</link> flags);
+</synopsis>
+</refsynopsisdiv>
+
+
+
+
+
+<refsect1>
+<title>Description</title>
+<para>
+
+</para>
+</refsect1>
+
+<refsect1>
+<title>Details</title>
+<refsect2>
+<title><anchor id="GMIME-CHECK-VERSION-CAPS">GMIME_CHECK_VERSION()</title>
+<programlisting>#define     GMIME_CHECK_VERSION(major,minor,micro)</programlisting>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>major</parameter>&nbsp;:</entry>
+<entry>
+</entry></row>
+<row><entry align="right"><parameter>minor</parameter>&nbsp;:</entry>
+<entry>
+</entry></row>
+<row><entry align="right"><parameter>micro</parameter>&nbsp;:</entry>
+<entry>
+
+
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="GMIME-INIT-FLAG-UTF8-CAPS">GMIME_INIT_FLAG_UTF8</title>
+<programlisting>#define     GMIME_INIT_FLAG_UTF8</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="g-mime-init">g_mime_init ()</title>
+<programlisting>void        g_mime_init                     (<link linkend="guint32">guint32</link> flags);</programlisting>
+<para>
+Initializes GMime.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>flags</parameter>&nbsp;:</entry>
+<entry> initialization flags
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+
+</refsect1>
+
+
+
+
+</refentry>
diff -uNr gmime-1.90.0/doc/sgml/internet-address.sgml gmime/doc/sgml/internet-address.sgml
--- gmime-1.90.0/doc/sgml/internet-address.sgml	Thu Jan  1 01:00:00 1970
+++ gmime/doc/sgml/internet-address.sgml	Thu May 23 07:21:37 2002
@@ -0,0 +1,449 @@
+<refentry id="gmime-internet-address">
+<refmeta>
+<refentrytitle>internet-address</refentrytitle>
+<manvolnum>3</manvolnum>
+<refmiscinfo>GMIME Library</refmiscinfo>
+</refmeta>
+
+<refnamediv>
+<refname>internet-address</refname><refpurpose></refpurpose>
+</refnamediv>
+
+<refsynopsisdiv><title>Synopsis</title>
+<synopsis>
+
+
+
+enum        <link linkend="InternetAddressType">InternetAddressType</link>;
+struct      <link linkend="InternetAddressList">InternetAddressList</link>;
+struct      <link linkend="InternetAddress">InternetAddress</link>;
+<link linkend="InternetAddress">InternetAddress</link>* <link linkend="internet-address-new">internet_address_new</link>       (void);
+<link linkend="InternetAddress">InternetAddress</link>* <link linkend="internet-address-new-name">internet_address_new_name</link>  (const char *name,
+                                             const char *addr);
+<link linkend="InternetAddress">InternetAddress</link>* <link linkend="internet-address-new-group">internet_address_new_group</link> (const char *name);
+void        <link linkend="internet-address-ref">internet_address_ref</link>            (<link linkend="InternetAddress">InternetAddress</link> *ia);
+void        <link linkend="internet-address-unref">internet_address_unref</link>          (<link linkend="InternetAddress">InternetAddress</link> *ia);
+void        <link linkend="internet-address-set-name">internet_address_set_name</link>       (<link linkend="InternetAddress">InternetAddress</link> *ia,
+                                             const char *name);
+void        <link linkend="internet-address-set-addr">internet_address_set_addr</link>       (<link linkend="InternetAddress">InternetAddress</link> *ia,
+                                             const char *addr);
+void        <link linkend="internet-address-set-group">internet_address_set_group</link>      (<link linkend="InternetAddress">InternetAddress</link> *ia,
+                                             <link linkend="InternetAddressList">InternetAddressList</link> *group);
+void        <link linkend="internet-address-add-member">internet_address_add_member</link>     (<link linkend="InternetAddress">InternetAddress</link> *ia,
+                                             <link linkend="InternetAddress">InternetAddress</link> *member);
+<link linkend="InternetAddressList">InternetAddressList</link>* <link linkend="internet-address-list-prepend">internet_address_list_prepend</link>
+                                            (<link linkend="InternetAddressList">InternetAddressList</link> *list,
+                                             <link linkend="InternetAddress">InternetAddress</link> *ia);
+<link linkend="InternetAddressList">InternetAddressList</link>* <link linkend="internet-address-list-append">internet_address_list_append</link>
+                                            (<link linkend="InternetAddressList">InternetAddressList</link> *list,
+                                             <link linkend="InternetAddress">InternetAddress</link> *ia);
+<link linkend="InternetAddressList">InternetAddressList</link>* <link linkend="internet-address-list-concat">internet_address_list_concat</link>
+                                            (<link linkend="InternetAddressList">InternetAddressList</link> *a,
+                                             <link linkend="InternetAddressList">InternetAddressList</link> *b);
+int         <link linkend="internet-address-list-length">internet_address_list_length</link>    (<link linkend="InternetAddressList">InternetAddressList</link> *list);
+void        <link linkend="internet-address-list-destroy">internet_address_list_destroy</link>   (<link linkend="InternetAddressList">InternetAddressList</link> *list);
+<link linkend="InternetAddressList">InternetAddressList</link>* <link linkend="internet-address-parse-string">internet_address_parse_string</link>
+                                            (const char *string);
+char*       <link linkend="internet-address-to-string">internet_address_to_string</link>      (<link linkend="InternetAddress">InternetAddress</link> *ia,
+                                             <link linkend="gboolean">gboolean</link> encode);
+char*       <link linkend="internet-address-list-to-string">internet_address_list_to_string</link> (<link linkend="InternetAddressList">InternetAddressList</link> *list,
+                                             <link linkend="gboolean">gboolean</link> encode);
+</synopsis>
+</refsynopsisdiv>
+
+
+
+
+
+<refsect1>
+<title>Description</title>
+<para>
+
+</para>
+</refsect1>
+
+<refsect1>
+<title>Details</title>
+<refsect2>
+<title><anchor id="InternetAddressType">enum InternetAddressType</title>
+<programlisting>typedef enum {
+	INTERNET_ADDRESS_NONE,
+	INTERNET_ADDRESS_NAME,
+	INTERNET_ADDRESS_GROUP
+} InternetAddressType;
+</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="InternetAddressList">struct InternetAddressList</title>
+<programlisting>struct InternetAddressList {
+	struct _InternetAddressList *next;
+	InternetAddress *address;
+};
+</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="InternetAddress">struct InternetAddress</title>
+<programlisting>struct InternetAddress {
+	InternetAddressType type;
+	unsigned int refcount;
+	char *name;
+	union {
+		char *addr;
+		InternetAddressList *members;
+	} value;
+};
+</programlisting>
+<para>
+
+</para></refsect2>
+<refsect2>
+<title><anchor id="internet-address-new">internet_address_new ()</title>
+<programlisting><link linkend="InternetAddress">InternetAddress</link>* internet_address_new       (void);</programlisting>
+<para>
+Creates a new <link linkend="InternetAddress">InternetAddress</link> object</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a new <link linkend="InternetAddress">InternetAddress</link> object.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="internet-address-new-name">internet_address_new_name ()</title>
+<programlisting><link linkend="InternetAddress">InternetAddress</link>* internet_address_new_name  (const char *name,
+                                             const char *addr);</programlisting>
+<para>
+Creates a new <link linkend="InternetAddress">InternetAddress</link> object with name <parameter>name</parameter> and address
+<parameter>addr</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
+<entry> person's name
+</entry></row>
+<row><entry align="right"><parameter>addr</parameter>&nbsp;:</entry>
+<entry> person's address
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a new <link linkend="InternetAddress">InternetAddress</link> object.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="internet-address-new-group">internet_address_new_group ()</title>
+<programlisting><link linkend="InternetAddress">InternetAddress</link>* internet_address_new_group (const char *name);</programlisting>
+<para>
+Creates a new <link linkend="InternetAddress">InternetAddress</link> object with group name <parameter>name</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
+<entry> group name
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a new <link linkend="InternetAddress">InternetAddress</link> object.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="internet-address-ref">internet_address_ref ()</title>
+<programlisting>void        internet_address_ref            (<link linkend="InternetAddress">InternetAddress</link> *ia);</programlisting>
+<para>
+Ref's the internet address.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>ia</parameter>&nbsp;:</entry>
+<entry> internet address
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="internet-address-unref">internet_address_unref ()</title>
+<programlisting>void        internet_address_unref          (<link linkend="InternetAddress">InternetAddress</link> *ia);</programlisting>
+<para>
+Unref's the internet address.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>ia</parameter>&nbsp;:</entry>
+<entry> internet address
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="internet-address-set-name">internet_address_set_name ()</title>
+<programlisting>void        internet_address_set_name       (<link linkend="InternetAddress">InternetAddress</link> *ia,
+                                             const char *name);</programlisting>
+<para>
+Set the name of the internet address.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>ia</parameter>&nbsp;:</entry>
+<entry> internet address
+</entry></row>
+<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
+<entry> group or contact's name
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="internet-address-set-addr">internet_address_set_addr ()</title>
+<programlisting>void        internet_address_set_addr       (<link linkend="InternetAddress">InternetAddress</link> *ia,
+                                             const char *addr);</programlisting>
+<para>
+Set the internet address's address.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>ia</parameter>&nbsp;:</entry>
+<entry> internet address
+</entry></row>
+<row><entry align="right"><parameter>addr</parameter>&nbsp;:</entry>
+<entry> contact's email address
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="internet-address-set-group">internet_address_set_group ()</title>
+<programlisting>void        internet_address_set_group      (<link linkend="InternetAddress">InternetAddress</link> *ia,
+                                             <link linkend="InternetAddressList">InternetAddressList</link> *group);</programlisting>
+<para>
+Set the members of the internet address group.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>ia</parameter>&nbsp;:</entry>
+<entry> internet address
+</entry></row>
+<row><entry align="right"><parameter>group</parameter>&nbsp;:</entry>
+<entry> a list of internet addresses
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="internet-address-add-member">internet_address_add_member ()</title>
+<programlisting>void        internet_address_add_member     (<link linkend="InternetAddress">InternetAddress</link> *ia,
+                                             <link linkend="InternetAddress">InternetAddress</link> *member);</programlisting>
+<para>
+Add a contact to the internet address group.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>ia</parameter>&nbsp;:</entry>
+<entry> internet address
+</entry></row>
+<row><entry align="right"><parameter>member</parameter>&nbsp;:</entry>
+<entry> group member's internet address
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="internet-address-list-prepend">internet_address_list_prepend ()</title>
+<programlisting><link linkend="InternetAddressList">InternetAddressList</link>* internet_address_list_prepend
+                                            (<link linkend="InternetAddressList">InternetAddressList</link> *list,
+                                             <link linkend="InternetAddress">InternetAddress</link> *ia);</programlisting>
+<para>
+Prepends the internet address to the list of internet addresses
+pointed to by <parameter>list</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>list</parameter>&nbsp;:</entry>
+<entry> a list of internet addresses
+</entry></row>
+<row><entry align="right"><parameter>ia</parameter>&nbsp;:</entry>
+<entry> internet address to prepend
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the resultant list.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="internet-address-list-append">internet_address_list_append ()</title>
+<programlisting><link linkend="InternetAddressList">InternetAddressList</link>* internet_address_list_append
+                                            (<link linkend="InternetAddressList">InternetAddressList</link> *list,
+                                             <link linkend="InternetAddress">InternetAddress</link> *ia);</programlisting>
+<para>
+Appends the internet address to the list of internet addresses
+pointed to by <parameter>list</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>list</parameter>&nbsp;:</entry>
+<entry> a list of internet addresses
+</entry></row>
+<row><entry align="right"><parameter>ia</parameter>&nbsp;:</entry>
+<entry> internet address to append
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the resultant list.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="internet-address-list-concat">internet_address_list_concat ()</title>
+<programlisting><link linkend="InternetAddressList">InternetAddressList</link>* internet_address_list_concat
+                                            (<link linkend="InternetAddressList">InternetAddressList</link> *a,
+                                             <link linkend="InternetAddressList">InternetAddressList</link> *b);</programlisting>
+<para>
+Concatenates a copy of list <parameter>b</parameter> onto the end of list <parameter>a</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>a</parameter>&nbsp;:</entry>
+<entry> first list
+</entry></row>
+<row><entry align="right"><parameter>b</parameter>&nbsp;:</entry>
+<entry> second list
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the resulting list.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="internet-address-list-length">internet_address_list_length ()</title>
+<programlisting>int         internet_address_list_length    (<link linkend="InternetAddressList">InternetAddressList</link> *list);</programlisting>
+<para>
+Calculates the length of the list of addresses.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>list</parameter>&nbsp;:</entry>
+<entry> list of internet addresses
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of internet addresses in <parameter>list</parameter>.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="internet-address-list-destroy">internet_address_list_destroy ()</title>
+<programlisting>void        internet_address_list_destroy   (<link linkend="InternetAddressList">InternetAddressList</link> *list);</programlisting>
+<para>
+Destroys the list of internet addresses.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>list</parameter>&nbsp;:</entry>
+<entry> address list
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="internet-address-parse-string">internet_address_parse_string ()</title>
+<programlisting><link linkend="InternetAddressList">InternetAddressList</link>* internet_address_parse_string
+                                            (const char *string);</programlisting>
+<para>
+Construct a list of internet addresses from the given string.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>string</parameter>&nbsp;:</entry>
+<entry> a string containing internet addresses
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a linked list of internet addresses. *Must* be free'd by
+the caller.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="internet-address-to-string">internet_address_to_string ()</title>
+<programlisting>char*       internet_address_to_string      (<link linkend="InternetAddress">InternetAddress</link> *ia,
+                                             <link linkend="gboolean">gboolean</link> encode);</programlisting>
+<para>
+Allocates a string containing the contents of the <link linkend="InternetAddress">InternetAddress</link>
+object.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>ia</parameter>&nbsp;:</entry>
+<entry> Internet Address object
+</entry></row>
+<row><entry align="right"><parameter>encode</parameter>&nbsp;:</entry>
+<entry> TRUE if the address should be rfc2047 encoded
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the <link linkend="InternetAddress">InternetAddress</link> object as an allocated string in
+rfc822 format.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+<refsect2>
+<title><anchor id="internet-address-list-to-string">internet_address_list_to_string ()</title>
+<programlisting>char*       internet_address_list_to_string (<link linkend="InternetAddressList">InternetAddressList</link> *list,
+                                             <link linkend="gboolean">gboolean</link> encode);</programlisting>
+<para>
+Allocates a string buffer containing the rfc822 formatted addresses
+in <parameter>list</parameter>.</para>
+<para>
+
+</para><informaltable pgwide="1" frame="none" role="params">
+<tgroup cols="2">
+<colspec colwidth="2*">
+<colspec colwidth="8*">
+<tbody>
+<row><entry align="right"><parameter>list</parameter>&nbsp;:</entry>
+<entry> list of internet addresses
+</entry></row>
+<row><entry align="right"><parameter>encode</parameter>&nbsp;:</entry>
+<entry> <literal>TRUE</literal> if the address should be rfc2047 encoded
+</entry></row>
+<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a string containing the list of addresses in rfc822 format.
+</entry></row>
+</tbody></tgroup></informaltable></refsect2>
+
+</refsect1>
+
+
+
+
+</refentry>
diff -uNr gmime-1.90.0/gmime-iconv-utils.c gmime/gmime-iconv-utils.c
--- gmime-1.90.0/gmime-iconv-utils.c	Wed Jun  5 05:03:59 2002
+++ gmime/gmime-iconv-utils.c	Thu Jul  4 06:26:00 2002
@@ -20,13 +20,16 @@
  *
  */
 
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <glib.h>
-#include <errno.h>
+#include <stdio.h>
 #include <string.h>
+#include <errno.h>
+
 #include "gmime-iconv-utils.h"
 #include "gmime-charset.h"
 
@@ -72,24 +75,24 @@
 g_mime_iconv_strndup (iconv_t cd, const char *string, size_t n)
 {
 	size_t inleft, outleft, converted = 0;
-	ICONV_CONST char *inbuf;
 	char *out, *outbuf;
+	const char *inbuf;
 	size_t outlen;
 	
 	if (cd == (iconv_t) -1)
 		return g_strndup (string, n);
 	
 	outlen = n * 2 + 16;
-	out = g_malloc (outlen + 1);
+	out = g_malloc (outlen + 4);
 	
-	inbuf = (ICONV_CONST char *) string;
+	inbuf = string;
 	inleft = n;
 	
 	do {
 		outbuf = out + converted;
 		outleft = outlen - converted;
 		
-		converted = iconv (cd, &inbuf, &inleft, &outbuf, &outleft);
+		converted = iconv (cd, (char **) &inbuf, &inleft, &outbuf, &outleft);
 		if (converted == (size_t) -1) {
 			if (errno != E2BIG && errno != EINVAL)
 				goto fail;
@@ -104,7 +107,7 @@
 		converted = outlen - outleft;
 		if (errno == E2BIG) {
 			outlen += inleft * 2 + 16;
-			out = g_realloc (out, outlen + 1);
+			out = g_realloc (out, outlen + 4);
 			outbuf = out + converted;
 		}
 		
@@ -119,7 +122,14 @@
 	
 	/* flush the iconv conversion */
 	iconv (cd, NULL, NULL, &outbuf, &outleft);
-	*outbuf = '\0';
+	
+	/* Note: not all charsets can be nul-terminated with a single
+           nul byte. UCS2, for example, needs 2 nul bytes and UCS4
+           needs 4. I hope that 4 nul bytes is enough to terminate all
+           multibyte charsets? */
+	
+	/* nul-terminate the string */
+	memset (outbuf, 0, 4);
 	
 	/* reset the cd */
 	iconv (cd, NULL, NULL, NULL, NULL);
diff -uNr gmime-1.90.0/gmime-parser.c gmime/gmime-parser.c
--- gmime-1.90.0/gmime-parser.c	Sat Jun 15 09:55:24 2002
+++ gmime/gmime-parser.c	Sun Jul 14 08:08:02 2002
@@ -82,6 +82,7 @@
 	unsigned char *inptr;
 	unsigned char *inend;
 	
+	off_t from_offset;
 	GByteArray *from_line;
 	
 	regex_t header_regex;
@@ -282,6 +283,7 @@
 	priv->inptr = priv->inbuf;
 	priv->inend = priv->inbuf;
 	
+	priv->from_offset = -1;
 	priv->from_line = g_byte_array_new ();
 	
 	priv->headerbuf = g_malloc (SCAN_HEAD + 1);
@@ -591,6 +593,7 @@
 			inptr++;
 			
 			if (len >= 5 && !strncmp (start, "From ", 5)) {
+				priv->from_offset = parser_offset (parser, start);
 				g_byte_array_append (priv->from_line, start, len);
 				goto got_from;
 			}
@@ -1309,3 +1312,28 @@
 	
 	return NULL;
 }
+
+
+/**
+ * g_mime_parser_get_from_offset:
+ * @parser: MIME parser object
+ *
+ * Gets the offset of the most recently parsed mbox-style From-line
+ * (gotten from #g_mime_parser_construct_message).
+ *
+ * Returns the offset of the most recently parsed mbox-style From-line
+ * or -1 on error.
+ **/
+off_t
+g_mime_parser_get_from_offset (GMimeParser *parser)
+{
+	struct _GMimeParserPrivate *priv;
+	
+	g_return_val_if_fail (GMIME_IS_PARSER (parser), -1);
+	
+	priv = parser->priv;
+	if (!priv->scan_from)
+		return -1;
+	
+	return priv->from_offset;
+}
diff -uNr gmime-1.90.0/gmime-parser.h gmime/gmime-parser.h
--- gmime-1.90.0/gmime-parser.h	Thu Jun  6 05:54:56 2002
+++ gmime/gmime-parser.h	Sun Jul 14 08:08:02 2002
@@ -87,6 +87,8 @@
 
 char *g_mime_parser_get_from (GMimeParser *parser);
 
+off_t g_mime_parser_get_from_offset (GMimeParser *parser);
+
 #ifdef __cplusplus
 }
 #endif /* __cplusplus */
diff -uNr gmime-1.90.0/gmime-part.c gmime/gmime-part.c
--- gmime-1.90.0/gmime-part.c	Wed Jun 26 07:06:31 2002
+++ gmime/gmime-part.c	Fri Jul 19 01:16:12 2002
@@ -168,10 +168,10 @@
 static void
 set_disposition (GMimePart *mime_part, const char *disposition)
 {
-	if (!mime_part->disposition)
-		mime_part->disposition = g_mime_disposition_new (NULL);
+	if (mime_part->disposition)
+		g_mime_disposition_destroy (mime_part->disposition);
 	
-	g_mime_disposition_set (mime_part->disposition, disposition);
+	mime_part->disposition = g_mime_disposition_new (disposition);
 }
 
 static gboolean
diff -uNr gmime-1.90.0/gmime-utils.c gmime/gmime-utils.c
--- gmime-1.90.0/gmime-utils.c	Thu Jun 13 03:22:07 2002
+++ gmime/gmime-utils.c	Sun Jul 14 08:08:02 2002
@@ -187,7 +187,11 @@
 	
 	time += ((offset / 100) * (60 * 60)) + (offset % 100) * 60;
 	
+#ifdef HAVE_GMTIME_R
+	gmtime_r (&time, &tm);
+#else
 	memcpy (&tm, gmtime (&time), sizeof (tm));
+#endif
 	
 	return g_strdup_printf ("%s, %02d %s %04d %02d:%02d:%02d %+05d",
 				tm_days[tm.tm_wday], tm.tm_mday,
diff -uNr gmime-1.90.0/gmime.h gmime/gmime.h
--- gmime-1.90.0/gmime.h	Fri Jun 28 08:00:53 2002
+++ gmime/gmime.h	Thu Jan  1 01:00:00 1970
@@ -1,94 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*- */
-/*
- *  Authors: Jeffrey Stedfast <fejj@helixcode.com>
- *
- *  Copyright 2000 Helix Code, Inc. (www.helixcode.com)
- *
- *  This program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2 of the License, or
- *  (at your option) any later version.
- *
- *  This program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *  GNU General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License
- *  along with this program; if not, write to the Free Software
- *  Foundation, Inc., 59 Temple Street #330, Boston, MA 02111-1307, USA.
- *
- */
-
-#ifndef __GMIME_H__
-#define __GMIME_H__
-
-#include <glib.h>
-#include "gmime-charset.h"
-#include "gmime-iconv.h"
-#include "gmime-iconv-utils.h"
-#include "gmime-param.h"
-#include "gmime-content-type.h"
-#include "gmime-disposition.h"
-#include "gmime-data-wrapper.h"
-#include "gmime-object.h"
-#include "gmime-part.h"
-#include "gmime-multipart.h"
-#include "gmime-multipart-encrypted.h"
-#include "gmime-multipart-signed.h"
-#include "gmime-message.h"
-#include "gmime-message-part.h"
-#include "gmime-message-partial.h"
-#include "internet-address.h"
-#include "gmime-parser.h"
-#include "gmime-utils.h"
-#include "gmime-stream.h"
-#include "gmime-stream-buffer.h"
-#include "gmime-stream-cat.h"
-#include "gmime-stream-file.h"
-#include "gmime-stream-filter.h"
-#include "gmime-stream-fs.h"
-#include "gmime-stream-mem.h"
-#include "gmime-stream-mmap.h"
-#include "gmime-stream-null.h"
-#include "gmime-filter.h"
-#include "gmime-filter-basic.h"
-#include "gmime-filter-charset.h"
-#include "gmime-filter-crlf.h"
-#include "gmime-filter-from.h"
-#include "gmime-filter-html.h"
-#include "gmime-filter-strip.h"
-#include "gmime-filter-yenc.h"
-#include "gmime-exception.h"
-#include "gmime-session.h"
-#include "gmime-cipher-context.h"
-#include "gmime-gpg-context.h"
-
-/* GMIME version */
-static const guint gmime_major_version = 1;
-static const guint gmime_minor_version = 90;
-static const guint gmime_micro_version = 0;
-static const guint gmime_interface_age = 0;
-static const guint gmime_binary_age    = 0;
-
-#define GMIME_CHECK_VERSION(major,minor,micro)    \
-    (gmime_major_version > (major) || \
-     (gmime_major_version == (major) && gmime_minor_version > (minor)) || \
-     (gmime_major_version == (major) && gmime_minor_version == (minor) && \
-      gmime_micro_version >= (micro)))
-
-
-/**
- * GMIME_INIT_FLAG_UTF8:
- *
- * Initialization flag to enable UTF-8 interfaces throughout GMime.
- *
- * Note: this flag is really a no-op and remains only for backward
- * compatablity. Interfaces will be UTF-8 whether this flag is used or
- * not.
- **/
-#define GMIME_INIT_FLAG_UTF8  (1 << 0)
-
-void g_mime_init (guint32 flags);
-
-#endif /* __GMIME_H__ */
diff -uNr gmime-1.90.0/gmime.spec gmime/gmime.spec
--- gmime-1.90.0/gmime.spec	Fri Jun 28 08:01:03 2002
+++ gmime/gmime.spec	Thu Jan  1 01:00:00 1970
@@ -1,53 +0,0 @@
-# Note that this is NOT a relocatable package
-%define ver      1.90.0
-%define prefix   /usr
-
-Summary: MIME library
-Name: gmime
-Version: %ver
-Release: 1
-Copyright: GPL
-Group: Development/Libraries
-URL: http://www.xtorshun.org/gmime/
-
-Source: http://www.xtorshun.org/gmime/sources/gmime-%{version}.tar.gz
-BuildRoot: /var/tmp/%{name}-%{version}-%{release}-root
-
-Requires: glib >= 1.2.0
-
-%description
-GMime is a set of utilities for parsing and creating messages using
-the Multipurpose Internet Mail Extension (MIME)
-
-%prep
-%setup
-
-%build
-if [ ! -f configure ]; then
-  CFLAGS="$RPM_OPT_FLAGS" ./autogen.sh $ARCHFLAG %{config_opts}
-fi
-CFLAGS="$RPM_OPT_FLAGS" ./configure --prefix=%prefix
-make
-
-%install
-rm -rf $RPM_BUILD_ROOT
-make prefix=$RPM_BUILD_ROOT%{prefix} install
-
-%clean
-rm -rf $RPM_BUILD_ROOT
-
-%files
-%defattr(-, root, root)
-
-%doc doc/html/* AUTHORS ChangeLog NEWS README COPYING TODO
-%{prefix}/lib/lib*.so.*
-
-%{prefix}/bin/gmime-config
-%{prefix}/lib/*.sh
-%{prefix}/lib/libgmime*
-%{prefix}/share/aclocal/gmime.m4
-%{prefix}/include/gmime/*.h
-
-%changelog
-* Sat Mar 24 2001 Leland Elie <lelie@airmail.net>
-- created spec file.
diff -uNr gmime-1.90.0/install-sh gmime/install-sh
--- gmime-1.90.0/install-sh	Tue Oct 30 18:46:21 2001
+++ gmime/install-sh	Thu Jan  1 01:00:00 1970
@@ -1,251 +0,0 @@
-#!/bin/sh
-#
-# install - install a program, script, or datafile
-# This comes from X11R5 (mit/util/scripts/install.sh).
-#
-# Copyright 1991 by the Massachusetts Institute of Technology
-#
-# Permission to use, copy, modify, distribute, and sell this software and its
-# documentation for any purpose is hereby granted without fee, provided that
-# the above copyright notice appear in all copies and that both that
-# copyright notice and this permission notice appear in supporting
-# documentation, and that the name of M.I.T. not be used in advertising or
-# publicity pertaining to distribution of the software without specific,
-# written prior permission.  M.I.T. makes no representations about the
-# suitability of this software for any purpose.  It is provided "as is"
-# without express or implied warranty.
-#
-# Calling this script install-sh is preferred over install.sh, to prevent
-# `make' implicit rules from creating a file called install from it
-# when there is no Makefile.
-#
-# This script is compatible with the BSD install script, but was written
-# from scratch.  It can only install one file at a time, a restriction
-# shared with many OS's install programs.
-
-
-# set DOITPROG to echo to test this script
-
-# Don't use :- since 4.3BSD and earlier shells don't like it.
-doit="${DOITPROG-}"
-
-
-# put in absolute paths if you don't have them in your path; or use env. vars.
-
-mvprog="${MVPROG-mv}"
-cpprog="${CPPROG-cp}"
-chmodprog="${CHMODPROG-chmod}"
-chownprog="${CHOWNPROG-chown}"
-chgrpprog="${CHGRPPROG-chgrp}"
-stripprog="${STRIPPROG-strip}"
-rmprog="${RMPROG-rm}"
-mkdirprog="${MKDIRPROG-mkdir}"
-
-transformbasename=""
-transform_arg=""
-instcmd="$mvprog"
-chmodcmd="$chmodprog 0755"
-chowncmd=""
-chgrpcmd=""
-stripcmd=""
-rmcmd="$rmprog -f"
-mvcmd="$mvprog"
-src=""
-dst=""
-dir_arg=""
-
-while [ x"$1" != x ]; do
-    case $1 in
-	-c) instcmd="$cpprog"
-	    shift
-	    continue;;
-
-	-d) dir_arg=true
-	    shift
-	    continue;;
-
-	-m) chmodcmd="$chmodprog $2"
-	    shift
-	    shift
-	    continue;;
-
-	-o) chowncmd="$chownprog $2"
-	    shift
-	    shift
-	    continue;;
-
-	-g) chgrpcmd="$chgrpprog $2"
-	    shift
-	    shift
-	    continue;;
-
-	-s) stripcmd="$stripprog"
-	    shift
-	    continue;;
-
-	-t=*) transformarg=`echo $1 | sed 's/-t=//'`
-	    shift
-	    continue;;
-
-	-b=*) transformbasename=`echo $1 | sed 's/-b=//'`
-	    shift
-	    continue;;
-
-	*)  if [ x"$src" = x ]
-	    then
-		src=$1
-	    else
-		# this colon is to work around a 386BSD /bin/sh bug
-		:
-		dst=$1
-	    fi
-	    shift
-	    continue;;
-    esac
-done
-
-if [ x"$src" = x ]
-then
-	echo "install:	no input file specified"
-	exit 1
-else
-	true
-fi
-
-if [ x"$dir_arg" != x ]; then
-	dst=$src
-	src=""
-	
-	if [ -d $dst ]; then
-		instcmd=:
-		chmodcmd=""
-	else
-		instcmd=mkdir
-	fi
-else
-
-# Waiting for this to be detected by the "$instcmd $src $dsttmp" command
-# might cause directories to be created, which would be especially bad 
-# if $src (and thus $dsttmp) contains '*'.
-
-	if [ -f $src -o -d $src ]
-	then
-		true
-	else
-		echo "install:  $src does not exist"
-		exit 1
-	fi
-	
-	if [ x"$dst" = x ]
-	then
-		echo "install:	no destination specified"
-		exit 1
-	else
-		true
-	fi
-
-# If destination is a directory, append the input filename; if your system
-# does not like double slashes in filenames, you may need to add some logic
-
-	if [ -d $dst ]
-	then
-		dst="$dst"/`basename $src`
-	else
-		true
-	fi
-fi
-
-## this sed command emulates the dirname command
-dstdir=`echo $dst | sed -e 's,[^/]*$,,;s,/$,,;s,^$,.,'`
-
-# Make sure that the destination directory exists.
-#  this part is taken from Noah Friedman's mkinstalldirs script
-
-# Skip lots of stat calls in the usual case.
-if [ ! -d "$dstdir" ]; then
-defaultIFS='	
-'
-IFS="${IFS-${defaultIFS}}"
-
-oIFS="${IFS}"
-# Some sh's can't handle IFS=/ for some reason.
-IFS='%'
-set - `echo ${dstdir} | sed -e 's@/@%@g' -e 's@^%@/@'`
-IFS="${oIFS}"
-
-pathcomp=''
-
-while [ $# -ne 0 ] ; do
-	pathcomp="${pathcomp}${1}"
-	shift
-
-	if [ ! -d "${pathcomp}" ] ;
-        then
-		$mkdirprog "${pathcomp}"
-	else
-		true
-	fi
-
-	pathcomp="${pathcomp}/"
-done
-fi
-
-if [ x"$dir_arg" != x ]
-then
-	$doit $instcmd $dst &&
-
-	if [ x"$chowncmd" != x ]; then $doit $chowncmd $dst; else true ; fi &&
-	if [ x"$chgrpcmd" != x ]; then $doit $chgrpcmd $dst; else true ; fi &&
-	if [ x"$stripcmd" != x ]; then $doit $stripcmd $dst; else true ; fi &&
-	if [ x"$chmodcmd" != x ]; then $doit $chmodcmd $dst; else true ; fi
-else
-
-# If we're going to rename the final executable, determine the name now.
-
-	if [ x"$transformarg" = x ] 
-	then
-		dstfile=`basename $dst`
-	else
-		dstfile=`basename $dst $transformbasename | 
-			sed $transformarg`$transformbasename
-	fi
-
-# don't allow the sed command to completely eliminate the filename
-
-	if [ x"$dstfile" = x ] 
-	then
-		dstfile=`basename $dst`
-	else
-		true
-	fi
-
-# Make a temp file name in the proper directory.
-
-	dsttmp=$dstdir/#inst.$$#
-
-# Move or copy the file name to the temp name
-
-	$doit $instcmd $src $dsttmp &&
-
-	trap "rm -f ${dsttmp}" 0 &&
-
-# and set any options; do chmod last to preserve setuid bits
-
-# If any of these fail, we abort the whole thing.  If we want to
-# ignore errors from any of these, just make sure not to ignore
-# errors from the above "$doit $instcmd $src $dsttmp" command.
-
-	if [ x"$chowncmd" != x ]; then $doit $chowncmd $dsttmp; else true;fi &&
-	if [ x"$chgrpcmd" != x ]; then $doit $chgrpcmd $dsttmp; else true;fi &&
-	if [ x"$stripcmd" != x ]; then $doit $stripcmd $dsttmp; else true;fi &&
-	if [ x"$chmodcmd" != x ]; then $doit $chmodcmd $dsttmp; else true;fi &&
-
-# Now rename the file to the real destination.
-
-	$doit $rmcmd -f $dstdir/$dstfile &&
-	$doit $mvcmd $dsttmp $dstdir/$dstfile 
-
-fi &&
-
-
-exit 0
diff -uNr gmime-1.90.0/internet-address.h gmime/internet-address.h
--- gmime-1.90.0/internet-address.h	Mon Dec 31 17:46:42 2001
+++ gmime/internet-address.h	Sun Jul 14 08:08:02 2002
@@ -26,7 +26,7 @@
 #ifdef __cplusplus
 extern "C" {
 #pragma }
-#endif /* __cplusplus }*/
+#endif /* __cplusplus */
 
 #include <glib.h>
 
diff -uNr gmime-1.90.0/ltmain.sh gmime/ltmain.sh
--- gmime-1.90.0/ltmain.sh	Fri Jun 28 08:00:23 2002
+++ gmime/ltmain.sh	Thu Jan  1 01:00:00 1970
@@ -1,5002 +0,0 @@
-# ltmain.sh - Provide generalized library-building support services.
-# NOTE: Changing this file will not affect anything until you rerun configure.
-#
-# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001
-# Free Software Foundation, Inc.
-# Originally by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful, but
-# WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-# General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, write to the Free Software
-# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
-#
-# As a special exception to the GNU General Public License, if you
-# distribute this file as part of a program that contains a
-# configuration script generated by Autoconf, you may include it under
-# the same distribution terms that you use for the rest of that program.
-
-# Check that we have a working $echo.
-if test "X$1" = X--no-reexec; then
-  # Discard the --no-reexec flag, and continue.
-  shift
-elif test "X$1" = X--fallback-echo; then
-  # Avoid inline document here, it may be left over
-  :
-elif test "X`($echo '\t') 2>/dev/null`" = 'X\t'; then
-  # Yippee, $echo works!
-  :
-else
-  # Restart under the correct shell, and then maybe $echo will work.
-  exec $SHELL "$0" --no-reexec ${1+"$@"}
-fi
-
-if test "X$1" = X--fallback-echo; then
-  # used as fallback echo
-  shift
-  cat <<EOF
-$*
-EOF
-  exit 0
-fi
-
-# The name of this program.
-progname=`$echo "$0" | sed 's%^.*/%%'`
-modename="$progname"
-
-# Constants.
-PROGRAM=ltmain.sh
-PACKAGE=libtool
-VERSION=1.4
-TIMESTAMP=" (1.922 2001/04/25 00:05:37)"
-
-default_mode=
-help="Try \`$progname --help' for more information."
-magic="%%%MAGIC variable%%%"
-mkdir="mkdir"
-mv="mv -f"
-rm="rm -f"
-
-# Sed substitution that helps us do robust quoting.  It backslashifies
-# metacharacters that are still active within double-quoted strings.
-Xsed='sed -e 1s/^X//'
-sed_quote_subst='s/\([\\`\\"$\\\\]\)/\\\1/g'
-SP2NL='tr \040 \012'
-NL2SP='tr \015\012 \040\040'
-
-# NLS nuisances.
-# Only set LANG and LC_ALL to C if already set.
-# These must not be set unconditionally because not all systems understand
-# e.g. LANG=C (notably SCO).
-# We save the old values to restore during execute mode.
-if test "${LC_ALL+set}" = set; then
-  save_LC_ALL="$LC_ALL"; LC_ALL=C; export LC_ALL
-fi
-if test "${LANG+set}" = set; then
-  save_LANG="$LANG"; LANG=C; export LANG
-fi
-
-if test "$build_libtool_libs" != yes && test "$build_old_libs" != yes; then
-  echo "$modename: not configured to build any kind of library" 1>&2
-  echo "Fatal configuration error.  See the $PACKAGE docs for more information." 1>&2
-  exit 1
-fi
-
-# Global variables.
-mode=$default_mode
-nonopt=
-prev=
-prevopt=
-run=
-show="$echo"
-show_help=
-execute_dlfiles=
-lo2o="s/\\.lo\$/.${objext}/"
-o2lo="s/\\.${objext}\$/.lo/"
-
-# Parse our command line options once, thoroughly.
-while test $# -gt 0
-do
-  arg="$1"
-  shift
-
-  case $arg in
-  -*=*) optarg=`$echo "X$arg" | $Xsed -e 's/[-_a-zA-Z0-9]*=//'` ;;
-  *) optarg= ;;
-  esac
-
-  # If the previous option needs an argument, assign it.
-  if test -n "$prev"; then
-    case $prev in
-    execute_dlfiles)
-      execute_dlfiles="$execute_dlfiles $arg"
-      ;;
-    *)
-      eval "$prev=\$arg"
-      ;;
-    esac
-
-    prev=
-    prevopt=
-    continue
-  fi
-
-  # Have we seen a non-optional argument yet?
-  case $arg in
-  --help)
-    show_help=yes
-    ;;
-
-  --version)
-    echo "$PROGRAM (GNU $PACKAGE) $VERSION$TIMESTAMP"
-    exit 0
-    ;;
-
-  --config)
-    sed -e '1,/^# ### BEGIN LIBTOOL CONFIG/d' -e '/^# ### END LIBTOOL CONFIG/,$d' $0
-    exit 0
-    ;;
-
-  --debug)
-    echo "$progname: enabling shell trace mode"
-    set -x
-    ;;
-
-  --dry-run | -n)
-    run=:
-    ;;
-
-  --features)
-    echo "host: $host"
-    if test "$build_libtool_libs" = yes; then
-      echo "enable shared libraries"
-    else
-      echo "disable shared libraries"
-    fi
-    if test "$build_old_libs" = yes; then
-      echo "enable static libraries"
-    else
-      echo "disable static libraries"
-    fi
-    exit 0
-    ;;
-
-  --finish) mode="finish" ;;
-
-  --mode) prevopt="--mode" prev=mode ;;
-  --mode=*) mode="$optarg" ;;
-
-  --quiet | --silent)
-    show=:
-    ;;
-
-  -dlopen)
-    prevopt="-dlopen"
-    prev=execute_dlfiles
-    ;;
-
-  -*)
-    $echo "$modename: unrecognized option \`$arg'" 1>&2
-    $echo "$help" 1>&2
-    exit 1
-    ;;
-
-  *)
-    nonopt="$arg"
-    break
-    ;;
-  esac
-done
-
-if test -n "$prevopt"; then
-  $echo "$modename: option \`$prevopt' requires an argument" 1>&2
-  $echo "$help" 1>&2
-  exit 1
-fi
-
-if test -z "$show_help"; then
-
-  # Infer the operation mode.
-  if test -z "$mode"; then
-    case $nonopt in
-    *cc | *++ | gcc* | *-gcc*)
-      mode=link
-      for arg
-      do
-	case $arg in
-	-c)
-	   mode=compile
-	   break
-	   ;;
-	esac
-      done
-      ;;
-    *db | *dbx | *strace | *truss)
-      mode=execute
-      ;;
-    *install*|cp|mv)
-      mode=install
-      ;;
-    *rm)
-      mode=uninstall
-      ;;
-    *)
-      # If we have no mode, but dlfiles were specified, then do execute mode.
-      test -n "$execute_dlfiles" && mode=execute
-
-      # Just use the default operation mode.
-      if test -z "$mode"; then
-	if test -n "$nonopt"; then
-	  $echo "$modename: warning: cannot infer operation mode from \`$nonopt'" 1>&2
-	else
-	  $echo "$modename: warning: cannot infer operation mode without MODE-ARGS" 1>&2
-	fi
-      fi
-      ;;
-    esac
-  fi
-
-  # Only execute mode is allowed to have -dlopen flags.
-  if test -n "$execute_dlfiles" && test "$mode" != execute; then
-    $echo "$modename: unrecognized option \`-dlopen'" 1>&2
-    $echo "$help" 1>&2
-    exit 1
-  fi
-
-  # Change the help message to a mode-specific one.
-  generic_help="$help"
-  help="Try \`$modename --help --mode=$mode' for more information."
-
-  # These modes are in order of execution frequency so that they run quickly.
-  case $mode in
-  # libtool compile mode
-  compile)
-    modename="$modename: compile"
-    # Get the compilation command and the source file.
-    base_compile=
-    prev=
-    lastarg=
-    srcfile="$nonopt"
-    suppress_output=
-
-    user_target=no
-    for arg
-    do
-      case $prev in
-      "") ;;
-      xcompiler)
-	# Aesthetically quote the previous argument.
-	prev=
-	lastarg=`$echo "X$arg" | $Xsed -e "$sed_quote_subst"`
-
-	case $arg in
-	# Double-quote args containing other shell metacharacters.
-	# Many Bourne shells cannot handle close brackets correctly
-	# in scan sets, so we specify it separately.
-	*[\[\~\#\^\&\*\(\)\{\}\|\;\<\>\?\'\ \	]*|*]*|"")
-	  arg="\"$arg\""
-	  ;;
-	esac
-
-	# Add the previous argument to base_compile.
-	if test -z "$base_compile"; then
-	  base_compile="$lastarg"
-	else
-	  base_compile="$base_compile $lastarg"
-	fi
-	continue
-	;;
-      esac
-
-      # Accept any command-line options.
-      case $arg in
-      -o)
-	if test "$user_target" != "no"; then
-	  $echo "$modename: you cannot specify \`-o' more than once" 1>&2
-	  exit 1
-	fi
-	user_target=next
-	;;
-
-      -static)
-	build_old_libs=yes
-	continue
-	;;
-
-      -prefer-pic)
-	pic_mode=yes
-	continue
-	;;
-
-      -prefer-non-pic)
-	pic_mode=no
-	continue
-	;;
-
-      -Xcompiler)
-	prev=xcompiler
-	continue
-	;;
-
-      -Wc,*)
-	args=`$echo "X$arg" | $Xsed -e "s/^-Wc,//"`
-	lastarg=
-	IFS="${IFS= 	}"; save_ifs="$IFS"; IFS=','
-	for arg in $args; do
-	  IFS="$save_ifs"
-
-	  # Double-quote args containing other shell metacharacters.
-	  # Many Bourne shells cannot handle close brackets correctly
-	  # in scan sets, so we specify it separately.
-	  case $arg in
-	    *[\[\~\#\^\&\*\(\)\{\}\|\;\<\>\?\'\ \	]*|*]*|"")
-	    arg="\"$arg\""
-	    ;;
-	  esac
-	  lastarg="$lastarg $arg"
-	done
-	IFS="$save_ifs"
-	lastarg=`$echo "X$lastarg" | $Xsed -e "s/^ //"`
-
-	# Add the arguments to base_compile.
-	if test -z "$base_compile"; then
-	  base_compile="$lastarg"
-	else
-	  base_compile="$base_compile $lastarg"
-	fi
-	continue
-	;;
-      esac
-
-      case $user_target in
-      next)
-	# The next one is the -o target name
-	user_target=yes
-	continue
-	;;
-      yes)
-	# We got the output file
-	user_target=set
-	libobj="$arg"
-	continue
-	;;
-      esac
-
-      # Accept the current argument as the source file.
-      lastarg="$srcfile"
-      srcfile="$arg"
-
-      # Aesthetically quote the previous argument.
-
-      # Backslashify any backslashes, double quotes, and dollar signs.
-      # These are the only characters that are still specially
-      # interpreted inside of double-quoted scrings.
-      lastarg=`$echo "X$lastarg" | $Xsed -e "$sed_quote_subst"`
-
-      # Double-quote args containing other shell metacharacters.
-      # Many Bourne shells cannot handle close brackets correctly
-      # in scan sets, so we specify it separately.
-      case $lastarg in
-      *[\[\~\#\^\&\*\(\)\{\}\|\;\<\>\?\'\ \	]*|*]*|"")
-	lastarg="\"$lastarg\""
-	;;
-      esac
-
-      # Add the previous argument to base_compile.
-      if test -z "$base_compile"; then
-	base_compile="$lastarg"
-      else
-	base_compile="$base_compile $lastarg"
-      fi
-    done
-
-    case $user_target in
-    set)
-      ;;
-    no)
-      # Get the name of the library object.
-      libobj=`$echo "X$srcfile" | $Xsed -e 's%^.*/%%'`
-      ;;
-    *)
-      $echo "$modename: you must specify a target with \`-o'" 1>&2
-      exit 1
-      ;;
-    esac
-
-    # Recognize several different file suffixes.
-    # If the user specifies -o file.o, it is replaced with file.lo
-    xform='[cCFSfmso]'
-    case $libobj in
-    *.ada) xform=ada ;;
-    *.adb) xform=adb ;;
-    *.ads) xform=ads ;;
-    *.asm) xform=asm ;;
-    *.c++) xform=c++ ;;
-    *.cc) xform=cc ;;
-    *.cpp) xform=cpp ;;
-    *.cxx) xform=cxx ;;
-    *.f90) xform=f90 ;;
-    *.for) xform=for ;;
-    esac
-
-    libobj=`$echo "X$libobj" | $Xsed -e "s/\.$xform$/.lo/"`
-
-    case $libobj in
-    *.lo) obj=`$echo "X$libobj" | $Xsed -e "$lo2o"` ;;
-    *)
-      $echo "$modename: cannot determine name of library object from \`$libobj'" 1>&2
-      exit 1
-      ;;
-    esac
-
-    if test -z "$base_compile"; then
-      $echo "$modename: you must specify a compilation command" 1>&2
-      $echo "$help" 1>&2
-      exit 1
-    fi
-
-    # Delete any leftover library objects.
-    if test "$build_old_libs" = yes; then
-      removelist="$obj $libobj"
-    else
-      removelist="$libobj"
-    fi
-
-    $run $rm $removelist
-    trap "$run $rm $removelist; exit 1" 1 2 15
-
-    # On Cygwin there's no "real" PIC flag so we must build both object types
-    case $host_os in
-    cygwin* | mingw* | pw32* | os2*)
-      pic_mode=default
-      ;;
-    esac
-    if test $pic_mode = no && test "$deplibs_check_method" != pass_all; then
-      # non-PIC code in shared libraries is not supported
-      pic_mode=default
-    fi
-
-    # Calculate the filename of the output object if compiler does
-    # not support -o with -c
-    if test "$compiler_c_o" = no; then
-      output_obj=`$echo "X$srcfile" | $Xsed -e 's%^.*/%%' -e 's%\.[^.]*$%%'`.${objext}
-      lockfile="$output_obj.lock"
-      removelist="$removelist $output_obj $lockfile"
-      trap "$run $rm $removelist; exit 1" 1 2 15
-    else
-      need_locks=no
-      lockfile=
-    fi
-
-    # Lock this critical section if it is needed
-    # We use this script file to make the link, it avoids creating a new file
-    if test "$need_locks" = yes; then
-      until $run ln "$0" "$lockfile" 2>/dev/null; do
-	$show "Waiting for $lockfile to be removed"
-	sleep 2
-      done
-    elif test "$need_locks" = warn; then
-      if test -f "$lockfile"; then
-	echo "\
-*** ERROR, $lockfile exists and contains:
-`cat $lockfile 2>/dev/null`
-
-This indicates that another process is trying to use the same
-temporary object file, and libtool could not work around it because
-your compiler does not support \`-c' and \`-o' together.  If you
-repeat this compilation, it may succeed, by chance, but you had better
-avoid parallel builds (make -j) in this platform, or get a better
-compiler."
-
-	$run $rm $removelist
-	exit 1
-      fi
-      echo $srcfile > "$lockfile"
-    fi
-
-    if test -n "$fix_srcfile_path"; then
-      eval srcfile=\"$fix_srcfile_path\"
-    fi
-
-    # Only build a PIC object if we are building libtool libraries.
-    if test "$build_libtool_libs" = yes; then
-      # Without this assignment, base_compile gets emptied.
-      fbsd_hideous_sh_bug=$base_compile
-
-      if test "$pic_mode" != no; then
-	# All platforms use -DPIC, to notify preprocessed assembler code.
-	command="$base_compile $srcfile $pic_flag -DPIC"
-      else
-	# Don't build PIC code
-	command="$base_compile $srcfile"
-      fi
-      if test "$build_old_libs" = yes; then
-	lo_libobj="$libobj"
-	dir=`$echo "X$libobj" | $Xsed -e 's%/[^/]*$%%'`
-	if test "X$dir" = "X$libobj"; then
-	  dir="$objdir"
-	else
-	  dir="$dir/$objdir"
-	fi
-	libobj="$dir/"`$echo "X$libobj" | $Xsed -e 's%^.*/%%'`
-
-	if test -d "$dir"; then
-	  $show "$rm $libobj"
-	  $run $rm $libobj
-	else
-	  $show "$mkdir $dir"
-	  $run $mkdir $dir
-	  status=$?
-	  if test $status -ne 0 && test ! -d $dir; then
-	    exit $status
-	  fi
-	fi
-      fi
-      if test "$compiler_o_lo" = yes; then
-	output_obj="$libobj"
-	command="$command -o $output_obj"
-      elif test "$compiler_c_o" = yes; then
-	output_obj="$obj"
-	command="$command -o $output_obj"
-      fi
-
-      $run $rm "$output_obj"
-      $show "$command"
-      if $run eval "$command"; then :
-      else
-	test -n "$output_obj" && $run $rm $removelist
-	exit 1
-      fi
-
-      if test "$need_locks" = warn &&
-	 test x"`cat $lockfile 2>/dev/null`" != x"$srcfile"; then
-	echo "\
-*** ERROR, $lockfile contains:
-`cat $lockfile 2>/dev/null`
-
-but it should contain:
-$srcfile
-
-This indicates that another process is trying to use the same
-temporary object file, and libtool could not work around it because
-your compiler does not support \`-c' and \`-o' together.  If you
-repeat this compilation, it may succeed, by chance, but you had better
-avoid parallel builds (make -j) in this platform, or get a better
-compiler."
-
-	$run $rm $removelist
-	exit 1
-      fi
-
-      # Just move the object if needed, then go on to compile the next one
-      if test x"$output_obj" != x"$libobj"; then
-	$show "$mv $output_obj $libobj"
-	if $run $mv $output_obj $libobj; then :
-	else
-	  error=$?
-	  $run $rm $removelist
-	  exit $error
-	fi
-      fi
-
-      # If we have no pic_flag, then copy the object into place and finish.
-      if (test -z "$pic_flag" || test "$pic_mode" != default) &&
-	 test "$build_old_libs" = yes; then
-	# Rename the .lo from within objdir to obj
-	if test -f $obj; then
-	  $show $rm $obj
-	  $run $rm $obj
-	fi
-
-	$show "$mv $libobj $obj"
-	if $run $mv $libobj $obj; then :
-	else
-	  error=$?
-	  $run $rm $removelist
-	  exit $error
-	fi
-
-	xdir=`$echo "X$obj" | $Xsed -e 's%/[^/]*$%%'`
-	if test "X$xdir" = "X$obj"; then
-	  xdir="."
-	else
-	  xdir="$xdir"
-	fi
-	baseobj=`$echo "X$obj" | $Xsed -e "s%.*/%%"`
-	libobj=`$echo "X$baseobj" | $Xsed -e "$o2lo"`
-	# Now arrange that obj and lo_libobj become the same file
-	$show "(cd $xdir && $LN_S $baseobj $libobj)"
-	if $run eval '(cd $xdir && $LN_S $baseobj $libobj)'; then
-	  exit 0
-	else
-	  error=$?
-	  $run $rm $removelist
-	  exit $error
-	fi
-      fi
-
-      # Allow error messages only from the first compilation.
-      suppress_output=' >/dev/null 2>&1'
-    fi
-
-    # Only build a position-dependent object if we build old libraries.
-    if test "$build_old_libs" = yes; then
-      if test "$pic_mode" != yes; then
-	# Don't build PIC code
-	command="$base_compile $srcfile"
-      else
-	# All platforms use -DPIC, to notify preprocessed assembler code.
-	command="$base_compile $srcfile $pic_flag -DPIC"
-      fi
-      if test "$compiler_c_o" = yes; then
-	command="$command -o $obj"
-	output_obj="$obj"
-      fi
-
-      # Suppress compiler output if we already did a PIC compilation.
-      command="$command$suppress_output"
-      $run $rm "$output_obj"
-      $show "$command"
-      if $run eval "$command"; then :
-      else
-	$run $rm $removelist
-	exit 1
-      fi
-
-      if test "$need_locks" = warn &&
-	 test x"`cat $lockfile 2>/dev/null`" != x"$srcfile"; then
-	echo "\
-*** ERROR, $lockfile contains:
-`cat $lockfile 2>/dev/null`
-
-but it should contain:
-$srcfile
-
-This indicates that another process is trying to use the same
-temporary object file, and libtool could not work around it because
-your compiler does not support \`-c' and \`-o' together.  If you
-repeat this compilation, it may succeed, by chance, but you had better
-avoid parallel builds (make -j) in this platform, or get a better
-compiler."
-
-	$run $rm $removelist
-	exit 1
-      fi
-
-      # Just move the object if needed
-      if test x"$output_obj" != x"$obj"; then
-	$show "$mv $output_obj $obj"
-	if $run $mv $output_obj $obj; then :
-	else
-	  error=$?
-	  $run $rm $removelist
-	  exit $error
-	fi
-      fi
-
-      # Create an invalid libtool object if no PIC, so that we do not
-      # accidentally link it into a program.
-      if test "$build_libtool_libs" != yes; then
-	$show "echo timestamp > $libobj"
-	$run eval "echo timestamp > \$libobj" || exit $?
-      else
-	# Move the .lo from within objdir
-	$show "$mv $libobj $lo_libobj"
-	if $run $mv $libobj $lo_libobj; then :
-	else
-	  error=$?
-	  $run $rm $removelist
-	  exit $error
-	fi
-      fi
-    fi
-
-    # Unlock the critical section if it was locked
-    if test "$need_locks" != no; then
-      $run $rm "$lockfile"
-    fi
-
-    exit 0
-    ;;
-
-  # libtool link mode
-  link | relink)
-    modename="$modename: link"
-    case $host in
-    *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2*)
-      # It is impossible to link a dll without this setting, and
-      # we shouldn't force the makefile maintainer to figure out
-      # which system we are compiling for in order to pass an extra
-      # flag for every libtool invokation.
-      # allow_undefined=no
-
-      # FIXME: Unfortunately, there are problems with the above when trying
-      # to make a dll which has undefined symbols, in which case not
-      # even a static library is built.  For now, we need to specify
-      # -no-undefined on the libtool link line when we can be certain
-      # that all symbols are satisfied, otherwise we get a static library.
-      allow_undefined=yes
-      ;;
-    *)
-      allow_undefined=yes
-      ;;
-    esac
-    libtool_args="$nonopt"
-    compile_command="$nonopt"
-    finalize_command="$nonopt"
-
-    compile_rpath=
-    finalize_rpath=
-    compile_shlibpath=
-    finalize_shlibpath=
-    convenience=
-    old_convenience=
-    deplibs=
-    old_deplibs=
-    compiler_flags=
-    linker_flags=
-    dllsearchpath=
-    lib_search_path=`pwd`
-    inst_prefix_dir=
-
-    avoid_version=no
-    dlfiles=
-    dlprefiles=
-    dlself=no
-    export_dynamic=no
-    export_symbols=
-    export_symbols_regex=
-    generated=
-    libobjs=
-    ltlibs=
-    module=no
-    no_install=no
-    objs=
-    prefer_static_libs=no
-    preload=no
-    prev=
-    prevarg=
-    release=
-    rpath=
-    xrpath=
-    perm_rpath=
-    temp_rpath=
-    thread_safe=no
-    vinfo=
-
-    # We need to know -static, to get the right output filenames.
-    for arg
-    do
-      case $arg in
-      -all-static | -static)
-	if test "X$arg" = "X-all-static"; then
-	  if test "$build_libtool_libs" = yes && test -z "$link_static_flag"; then
-	    $echo "$modename: warning: complete static linking is impossible in this configuration" 1>&2
-	  fi
-	  if test -n "$link_static_flag"; then
-	    dlopen_self=$dlopen_self_static
-	  fi
-	else
-	  if test -z "$pic_flag" && test -n "$link_static_flag"; then
-	    dlopen_self=$dlopen_self_static
-	  fi
-	fi
-	build_libtool_libs=no
-	build_old_libs=yes
-	prefer_static_libs=yes
-	break
-	;;
-      esac
-    done
-
-    # See if our shared archives depend on static archives.
-    test -n "$old_archive_from_new_cmds" && build_old_libs=yes
-
-    # Go through the arguments, transforming them on the way.
-    while test $# -gt 0; do
-      arg="$1"
-      shift
-      case $arg in
-      *[\[\~\#\^\&\*\(\)\{\}\|\;\<\>\?\'\ \	]*|*]*|"")
-	qarg=\"`$echo "X$arg" | $Xsed -e "$sed_quote_subst"`\" ### testsuite: skip nested quoting test
-	;;
-      *) qarg=$arg ;;
-      esac
-      libtool_args="$libtool_args $qarg"
-
-      # If the previous option needs an argument, assign it.
-      if test -n "$prev"; then
-	case $prev in
-	output)
-	  compile_command="$compile_command @OUTPUT@"
-	  finalize_command="$finalize_command @OUTPUT@"
-	  ;;
-	esac
-
-	case $prev in
-	dlfiles|dlprefiles)
-	  if test "$preload" = no; then
-	    # Add the symbol object into the linking commands.
-	    compile_command="$compile_command @SYMFILE@"
-	    finalize_command="$finalize_command @SYMFILE@"
-	    preload=yes
-	  fi
-	  case $arg in
-	  *.la | *.lo) ;;  # We handle these cases below.
-	  force)
-	    if test "$dlself" = no; then
-	      dlself=needless
-	      export_dynamic=yes
-	    fi
-	    prev=
-	    continue
-	    ;;
-	  self)
-	    if test "$prev" = dlprefiles; then
-	      dlself=yes
-	    elif test "$prev" = dlfiles && test "$dlopen_self" != yes; then
-	      dlself=yes
-	    else
-	      dlself=needless
-	      export_dynamic=yes
-	    fi
-	    prev=
-	    continue
-	    ;;
-	  *)
-	    if test "$prev" = dlfiles; then
-	      dlfiles="$dlfiles $arg"
-	    else
-	      dlprefiles="$dlprefiles $arg"
-	    fi
-	    prev=
-	    continue
-	    ;;
-	  esac
-	  ;;
-	expsyms)
-	  export_symbols="$arg"
-	  if test ! -f "$arg"; then
-	    $echo "$modename: symbol file \`$arg' does not exist"
-	    exit 1
-	  fi
-	  prev=
-	  continue
-	  ;;
-	expsyms_regex)
-	  export_symbols_regex="$arg"
-	  prev=
-	  continue
-	  ;;
-        inst_prefix)
-	  inst_prefix_dir="$arg"
-	  prev=
-	  continue
-	  ;;
-	release)
-	  release="-$arg"
-	  prev=
-	  continue
-	  ;;
-	rpath | xrpath)
-	  # We need an absolute path.
-	  case $arg in
-	  [\\/]* | [A-Za-z]:[\\/]*) ;;
-	  *)
-	    $echo "$modename: only absolute run-paths are allowed" 1>&2
-	    exit 1
-	    ;;
-	  esac
-	  if test "$prev" = rpath; then
-	    case "$rpath " in
-	    *" $arg "*) ;;
-	    *) rpath="$rpath $arg" ;;
-	    esac
-	  else
-	    case "$xrpath " in
-	    *" $arg "*) ;;
-	    *) xrpath="$xrpath $arg" ;;
-	    esac
-	  fi
-	  prev=
-	  continue
-	  ;;
-	xcompiler)
-	  compiler_flags="$compiler_flags $qarg"
-	  prev=
-	  compile_command="$compile_command $qarg"
-	  finalize_command="$finalize_command $qarg"
-	  continue
-	  ;;
-	xlinker)
-	  linker_flags="$linker_flags $qarg"
-	  compiler_flags="$compiler_flags $wl$qarg"
-	  prev=
-	  compile_command="$compile_command $wl$qarg"
-	  finalize_command="$finalize_command $wl$qarg"
-	  continue
-	  ;;
-	*)
-	  eval "$prev=\"\$arg\""
-	  prev=
-	  continue
-	  ;;
-	esac
-      fi # test -n $prev
-
-      prevarg="$arg"
-
-      case $arg in
-      -all-static)
-	if test -n "$link_static_flag"; then
-	  compile_command="$compile_command $link_static_flag"
-	  finalize_command="$finalize_command $link_static_flag"
-	fi
-	continue
-	;;
-
-      -allow-undefined)
-	# FIXME: remove this flag sometime in the future.
-	$echo "$modename: \`-allow-undefined' is deprecated because it is the default" 1>&2
-	continue
-	;;
-
-      -avoid-version)
-	avoid_version=yes
-	continue
-	;;
-
-      -dlopen)
-	prev=dlfiles
-	continue
-	;;
-
-      -dlpreopen)
-	prev=dlprefiles
-	continue
-	;;
-
-      -export-dynamic)
-	export_dynamic=yes
-	continue
-	;;
-
-      -export-symbols | -export-symbols-regex)
-	if test -n "$export_symbols" || test -n "$export_symbols_regex"; then
-	  $echo "$modename: more than one -exported-symbols argument is not allowed"
-	  exit 1
-	fi
-	if test "X$arg" = "X-export-symbols"; then
-	  prev=expsyms
-	else
-	  prev=expsyms_regex
-	fi
-	continue
-	;;
-
-      -inst-prefix-dir)
-	prev=inst_prefix
-	continue
-	;;
-
-      # The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*
-      # so, if we see these flags be careful not to treat them like -L
-      -L[A-Z][A-Z]*:*)
-	case $with_gcc/$host in
-	no/*-*-irix*)
-	  compile_command="$compile_command $arg"
-	  finalize_command="$finalize_command $arg"
-	  ;;
-	esac
-	continue
-	;;
-
-      -L*)
-	dir=`$echo "X$arg" | $Xsed -e 's/^-L//'`
-	# We need an absolute path.
-	case $dir in
-	[\\/]* | [A-Za-z]:[\\/]*) ;;
-	*)
-	  absdir=`cd "$dir" && pwd`
-	  if test -z "$absdir"; then
-	    $echo "$modename: cannot determine absolute directory name of \`$dir'" 1>&2
-	    exit 1
-	  fi
-	  dir="$absdir"
-	  ;;
-	esac
-	case "$deplibs " in
-	*" -L$dir "*) ;;
-	*)
-	  deplibs="$deplibs -L$dir"
-	  lib_search_path="$lib_search_path $dir"
-	  ;;
-	esac
-	case $host in
-	*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2*)
-	  case :$dllsearchpath: in
-	  *":$dir:"*) ;;
-	  *) dllsearchpath="$dllsearchpath:$dir";;
-	  esac
-	  ;;
-	esac
-	continue
-	;;
-
-      -l*)
-	if test "X$arg" = "X-lc" || test "X$arg" = "X-lm"; then
-	  case $host in
-	  *-*-cygwin* | *-*-pw32* | *-*-beos*)
-	    # These systems don't actually have a C or math library (as such)
-	    continue
-	    ;;
-	  *-*-mingw* | *-*-os2*)
-	    # These systems don't actually have a C library (as such)
-	    test "X$arg" = "X-lc" && continue
-	    ;;
-	  esac
-	fi
-	deplibs="$deplibs $arg"
-	continue
-	;;
-
-      -module)
-	module=yes
-	continue
-	;;
-
-      -no-fast-install)
-	fast_install=no
-	continue
-	;;
-
-      -no-install)
-	case $host in
-	*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2*)
-	  # The PATH hackery in wrapper scripts is required on Windows
-	  # in order for the loader to find any dlls it needs.
-	  $echo "$modename: warning: \`-no-install' is ignored for $host" 1>&2
-	  $echo "$modename: warning: assuming \`-no-fast-install' instead" 1>&2
-	  fast_install=no
-	  ;;
-	*) no_install=yes ;;
-	esac
-	continue
-	;;
-
-      -no-undefined)
-	allow_undefined=no
-	continue
-	;;
-
-      -o) prev=output ;;
-
-      -release)
-	prev=release
-	continue
-	;;
-
-      -rpath)
-	prev=rpath
-	continue
-	;;
-
-      -R)
-	prev=xrpath
-	continue
-	;;
-
-      -R*)
-	dir=`$echo "X$arg" | $Xsed -e 's/^-R//'`
-	# We need an absolute path.
-	case $dir in
-	[\\/]* | [A-Za-z]:[\\/]*) ;;
-	*)
-	  $echo "$modename: only absolute run-paths are allowed" 1>&2
-	  exit 1
-	  ;;
-	esac
-	case "$xrpath " in
-	*" $dir "*) ;;
-	*) xrpath="$xrpath $dir" ;;
-	esac
-	continue
-	;;
-
-      -static)
-	# The effects of -static are defined in a previous loop.
-	# We used to do the same as -all-static on platforms that
-	# didn't have a PIC flag, but the assumption that the effects
-	# would be equivalent was wrong.  It would break on at least
-	# Digital Unix and AIX.
-	continue
-	;;
-
-      -thread-safe)
-	thread_safe=yes
-	continue
-	;;
-
-      -version-info)
-	prev=vinfo
-	continue
-	;;
-
-      -Wc,*)
-	args=`$echo "X$arg" | $Xsed -e "$sed_quote_subst" -e 's/^-Wc,//'`
-	arg=
-	IFS="${IFS= 	}"; save_ifs="$IFS"; IFS=','
-	for flag in $args; do
-	  IFS="$save_ifs"
-	  case $flag in
-	    *[\[\~\#\^\&\*\(\)\{\}\|\;\<\>\?\'\ \	]*|*]*|"")
-	    flag="\"$flag\""
-	    ;;
-	  esac
-	  arg="$arg $wl$flag"
-	  compiler_flags="$compiler_flags $flag"
-	done
-	IFS="$save_ifs"
-	arg=`$echo "X$arg" | $Xsed -e "s/^ //"`
-	;;
-
-      -Wl,*)
-	args=`$echo "X$arg" | $Xsed -e "$sed_quote_subst" -e 's/^-Wl,//'`
-	arg=
-	IFS="${IFS= 	}"; save_ifs="$IFS"; IFS=','
-	for flag in $args; do
-	  IFS="$save_ifs"
-	  case $flag in
-	    *[\[\~\#\^\&\*\(\)\{\}\|\;\<\>\?\'\ \	]*|*]*|"")
-	    flag="\"$flag\""
-	    ;;
-	  esac
-	  arg="$arg $wl$flag"
-	  compiler_flags="$compiler_flags $wl$flag"
-	  linker_flags="$linker_flags $flag"
-	done
-	IFS="$save_ifs"
-	arg=`$echo "X$arg" | $Xsed -e "s/^ //"`
-	;;
-
-      -Xcompiler)
-	prev=xcompiler
-	continue
-	;;
-
-      -Xlinker)
-	prev=xlinker
-	continue
-	;;
-
-      # Some other compiler flag.
-      -* | +*)
-	# Unknown arguments in both finalize_command and compile_command need
-	# to be aesthetically quoted because they are evaled later.
-	arg=`$echo "X$arg" | $Xsed -e "$sed_quote_subst"`
-	case $arg in
-	*[\[\~\#\^\&\*\(\)\{\}\|\;\<\>\?\'\ \	]*|*]*|"")
-	  arg="\"$arg\""
-	  ;;
-	esac
-	;;
-
-      *.lo | *.$objext)
-	# A library or standard object.
-	if test "$prev" = dlfiles; then
-	  # This file was specified with -dlopen.
-	  if test "$build_libtool_libs" = yes && test "$dlopen_support" = yes; then
-	    dlfiles="$dlfiles $arg"
-	    prev=
-	    continue
-	  else
-	    # If libtool objects are unsupported, then we need to preload.
-	    prev=dlprefiles
-	  fi
-	fi
-
-	if test "$prev" = dlprefiles; then
-	  # Preload the old-style object.
-	  dlprefiles="$dlprefiles "`$echo "X$arg" | $Xsed -e "$lo2o"`
-	  prev=
-	else
-	  case $arg in
-	  *.lo) libobjs="$libobjs $arg" ;;
-	  *) objs="$objs $arg" ;;
-	  esac
-	fi
-	;;
-
-      *.$libext)
-	# An archive.
-	deplibs="$deplibs $arg"
-	old_deplibs="$old_deplibs $arg"
-	continue
-	;;
-
-      *.la)
-	# A libtool-controlled library.
-
-	if test "$prev" = dlfiles; then
-	  # This library was specified with -dlopen.
-	  dlfiles="$dlfiles $arg"
-	  prev=
-	elif test "$prev" = dlprefiles; then
-	  # The library was specified with -dlpreopen.
-	  dlprefiles="$dlprefiles $arg"
-	  prev=
-	else
-	  deplibs="$deplibs $arg"
-	fi
-	continue
-	;;
-
-      # Some other compiler argument.
-      *)
-	# Unknown arguments in both finalize_command and compile_command need
-	# to be aesthetically quoted because they are evaled later.
-	arg=`$echo "X$arg" | $Xsed -e "$sed_quote_subst"`
-	case $arg in
-	*[\[\~\#\^\&\*\(\)\{\}\|\;\<\>\?\'\ \	]*|*]*|"")
-	  arg="\"$arg\""
-	  ;;
-	esac
-	;;
-      esac # arg
-
-      # Now actually substitute the argument into the commands.
-      if test -n "$arg"; then
-	compile_command="$compile_command $arg"
-	finalize_command="$finalize_command $arg"
-      fi
-    done # argument parsing loop
-
-    if test -n "$prev"; then
-      $echo "$modename: the \`$prevarg' option requires an argument" 1>&2
-      $echo "$help" 1>&2
-      exit 1
-    fi
-
-    if test "$export_dynamic" = yes && test -n "$export_dynamic_flag_spec"; then
-      eval arg=\"$export_dynamic_flag_spec\"
-      compile_command="$compile_command $arg"
-      finalize_command="$finalize_command $arg"
-    fi
-
-    # calculate the name of the file, without its directory
-    outputname=`$echo "X$output" | $Xsed -e 's%^.*/%%'`
-    libobjs_save="$libobjs"
-
-    if test -n "$shlibpath_var"; then
-      # get the directories listed in $shlibpath_var
-      eval shlib_search_path=\`\$echo \"X\${$shlibpath_var}\" \| \$Xsed -e \'s/:/ /g\'\`
-    else
-      shlib_search_path=
-    fi
-    eval sys_lib_search_path=\"$sys_lib_search_path_spec\"
-    eval sys_lib_dlsearch_path=\"$sys_lib_dlsearch_path_spec\"
-
-    output_objdir=`$echo "X$output" | $Xsed -e 's%/[^/]*$%%'`
-    if test "X$output_objdir" = "X$output"; then
-      output_objdir="$objdir"
-    else
-      output_objdir="$output_objdir/$objdir"
-    fi
-    # Create the object directory.
-    if test ! -d $output_objdir; then
-      $show "$mkdir $output_objdir"
-      $run $mkdir $output_objdir
-      status=$?
-      if test $status -ne 0 && test ! -d $output_objdir; then
-	exit $status
-      fi
-    fi
-
-    # Determine the type of output
-    case $output in
-    "")
-      $echo "$modename: you must specify an output file" 1>&2
-      $echo "$help" 1>&2
-      exit 1
-      ;;
-    *.$libext) linkmode=oldlib ;;
-    *.lo | *.$objext) linkmode=obj ;;
-    *.la) linkmode=lib ;;
-    *) linkmode=prog ;; # Anything else should be a program.
-    esac
-
-    specialdeplibs=
-    libs=
-    # Find all interdependent deplibs by searching for libraries
-    # that are linked more than once (e.g. -la -lb -la)
-    for deplib in $deplibs; do
-      case "$libs " in
-      *" $deplib "*) specialdeplibs="$specialdeplibs $deplib" ;;
-      esac
-      libs="$libs $deplib"
-    done
-    deplibs=
-    newdependency_libs=
-    newlib_search_path=
-    need_relink=no # whether we're linking any uninstalled libtool libraries
-    notinst_deplibs= # not-installed libtool libraries
-    notinst_path= # paths that contain not-installed libtool libraries
-    case $linkmode in
-    lib)
-	passes="conv link"
-	for file in $dlfiles $dlprefiles; do
-	  case $file in
-	  *.la) ;;
-	  *)
-	    $echo "$modename: libraries can \`-dlopen' only libtool libraries: $file" 1>&2
-	    exit 1
-	    ;;
-	  esac
-	done
-	;;
-    prog)
-	compile_deplibs=
-	finalize_deplibs=
-	alldeplibs=no
-	newdlfiles=
-	newdlprefiles=
-	passes="conv scan dlopen dlpreopen link"
-	;;
-    *)  passes="conv"
-	;;
-    esac
-    for pass in $passes; do
-      if test $linkmode = prog; then
-	# Determine which files to process
-	case $pass in
-	dlopen)
-	  libs="$dlfiles"
-	  save_deplibs="$deplibs" # Collect dlpreopened libraries
-	  deplibs=
-	  ;;
-	dlpreopen) libs="$dlprefiles" ;;
-	link) libs="$deplibs %DEPLIBS% $dependency_libs" ;;
-	esac
-      fi
-      for deplib in $libs; do
-	lib=
-	found=no
-	case $deplib in
-	-l*)
-	  if test $linkmode = oldlib && test $linkmode = obj; then
-	    $echo "$modename: warning: \`-l' is ignored for archives/objects: $deplib" 1>&2
-	    continue
-	  fi
-	  if test $pass = conv; then
-	    deplibs="$deplib $deplibs"
-	    continue
-	  fi
-	  name=`$echo "X$deplib" | $Xsed -e 's/^-l//'`
-	  for searchdir in $newlib_search_path $lib_search_path $sys_lib_search_path $shlib_search_path; do
-	    # Search the libtool library
-	    lib="$searchdir/lib${name}.la"
-	    if test -f "$lib"; then
-	      found=yes
-	      break
-	    fi
-	  done
-	  if test "$found" != yes; then
-	    # deplib doesn't seem to be a libtool library
-	    if test "$linkmode,$pass" = "prog,link"; then
-	      compile_deplibs="$deplib $compile_deplibs"
-	      finalize_deplibs="$deplib $finalize_deplibs"
-	    else
-	      deplibs="$deplib $deplibs"
-	      test $linkmode = lib && newdependency_libs="$deplib $newdependency_libs"
-	    fi
-	    continue
-	  fi
-	  ;; # -l
-	-L*)
-	  case $linkmode in
-	  lib)
-	    deplibs="$deplib $deplibs"
-	    test $pass = conv && continue
-	    newdependency_libs="$deplib $newdependency_libs"
-	    newlib_search_path="$newlib_search_path "`$echo "X$deplib" | $Xsed -e 's/^-L//'`
-	    ;;
-	  prog)
-	    if test $pass = conv; then
-	      deplibs="$deplib $deplibs"
-	      continue
-	    fi
-	    if test $pass = scan; then
-	      deplibs="$deplib $deplibs"
-	      newlib_search_path="$newlib_search_path "`$echo "X$deplib" | $Xsed -e 's/^-L//'`
-	    else
-	      compile_deplibs="$deplib $compile_deplibs"
-	      finalize_deplibs="$deplib $finalize_deplibs"
-	    fi
-	    ;;
-	  *)
-	    $echo "$modename: warning: \`-L' is ignored for archives/objects: $deplib" 1>&2
-	    ;;
-	  esac # linkmode
-	  continue
-	  ;; # -L
-	-R*)
-	  if test $pass = link; then
-	    dir=`$echo "X$deplib" | $Xsed -e 's/^-R//'`
-	    # Make sure the xrpath contains only unique directories.
-	    case "$xrpath " in
-	    *" $dir "*) ;;
-	    *) xrpath="$xrpath $dir" ;;
-	    esac
-	  fi
-	  deplibs="$deplib $deplibs"
-	  continue
-	  ;;
-	*.la) lib="$deplib" ;;
-	*.$libext)
-	  if test $pass = conv; then
-	    deplibs="$deplib $deplibs"
-	    continue
-	  fi
-	  case $linkmode in
-	  lib)
-	    if test "$deplibs_check_method" != pass_all; then
-	      echo
-	      echo "*** Warning: This library needs some functionality provided by $deplib."
-	      echo "*** I have the capability to make that library automatically link in when"
-	      echo "*** you link to this library.  But I can only do this if you have a"
-	      echo "*** shared version of the library, which you do not appear to have."
-	    else
-	      echo
-	      echo "*** Warning: Linking the shared library $output against the"
-	      echo "*** static library $deplib is not portable!"
-	      deplibs="$deplib $deplibs"
-	    fi
-	    continue
-	    ;;
-	  prog)
-	    if test $pass != link; then
-	      deplibs="$deplib $deplibs"
-	    else
-	      compile_deplibs="$deplib $compile_deplibs"
-	      finalize_deplibs="$deplib $finalize_deplibs"
-	    fi
-	    continue
-	    ;;
-	  esac # linkmode
-	  ;; # *.$libext
-	*.lo | *.$objext)
-	  if test $pass = dlpreopen || test "$dlopen_support" != yes || test "$build_libtool_libs" = no; then
-	    # If there is no dlopen support or we're linking statically,
-	    # we need to preload.
-	    newdlprefiles="$newdlprefiles $deplib"
-	    compile_deplibs="$deplib $compile_deplibs"
-	    finalize_deplibs="$deplib $finalize_deplibs"
-	  else
-	    newdlfiles="$newdlfiles $deplib"
-	  fi
-	  continue
-	  ;;
-	%DEPLIBS%)
-	  alldeplibs=yes
-	  continue
-	  ;;
-	esac # case $deplib
-	if test $found = yes || test -f "$lib"; then :
-	else
-	  $echo "$modename: cannot find the library \`$lib'" 1>&2
-	  exit 1
-	fi
-
-	# Check to see that this really is a libtool archive.
-	if (sed -e '2q' $lib | egrep "^# Generated by .*$PACKAGE") >/dev/null 2>&1; then :
-	else
-	  $echo "$modename: \`$lib' is not a valid libtool archive" 1>&2
-	  exit 1
-	fi
-
-	ladir=`$echo "X$lib" | $Xsed -e 's%/[^/]*$%%'`
-	test "X$ladir" = "X$lib" && ladir="."
-
-	dlname=
-	dlopen=
-	dlpreopen=
-	libdir=
-	library_names=
-	old_library=
-	# If the library was installed with an old release of libtool,
-	# it will not redefine variable installed.
-	installed=yes
-
-	# Read the .la file
-	case $lib in
-	*/* | *\\*) . $lib ;;
-	*) . ./$lib ;;
-	esac
-
-	if test "$linkmode,$pass" = "lib,link" ||
-	   test "$linkmode,$pass" = "prog,scan" ||
-	   { test $linkmode = oldlib && test $linkmode = obj; }; then
-	   # Add dl[pre]opened files of deplib
-	  test -n "$dlopen" && dlfiles="$dlfiles $dlopen"
-	  test -n "$dlpreopen" && dlprefiles="$dlprefiles $dlpreopen"
-	fi
-
-	if test $pass = conv; then
-	  # Only check for convenience libraries
-	  deplibs="$lib $deplibs"
-	  if test -z "$libdir"; then
-	    if test -z "$old_library"; then
-	      $echo "$modename: cannot find name of link library for \`$lib'" 1>&2
-	      exit 1
-	    fi
-	    # It is a libtool convenience library, so add in its objects.
-	    convenience="$convenience $ladir/$objdir/$old_library"
-	    old_convenience="$old_convenience $ladir/$objdir/$old_library"
-	    tmp_libs=
-	    # PKGW 
-	    dependency_libs=
-	    for deplib in $dependency_libs; do
-	      deplibs="$deplib $deplibs"
-	      case "$tmp_libs " in
-	      *" $deplib "*) specialdeplibs="$specialdeplibs $deplib" ;;
-	      esac
-	      tmp_libs="$tmp_libs $deplib"
-	    done
-	  elif test $linkmode != prog && test $linkmode != lib; then
-	    $echo "$modename: \`$lib' is not a convenience library" 1>&2
-	    exit 1
-	  fi
-	  continue
-	fi # $pass = conv
-
-	# Get the name of the library we link against.
-	linklib=
-	for l in $old_library $library_names; do
-	  linklib="$l"
-	done
-	if test -z "$linklib"; then
-	  $echo "$modename: cannot find name of link library for \`$lib'" 1>&2
-	  exit 1
-	fi
-
-	# This library was specified with -dlopen.
-	if test $pass = dlopen; then
-	  if test -z "$libdir"; then
-	    $echo "$modename: cannot -dlopen a convenience library: \`$lib'" 1>&2
-	    exit 1
-	  fi
-	  if test -z "$dlname" || test "$dlopen_support" != yes || test "$build_libtool_libs" = no; then
-	    # If there is no dlname, no dlopen support or we're linking
-	    # statically, we need to preload.
-	    dlprefiles="$dlprefiles $lib"
-	  else
-	    newdlfiles="$newdlfiles $lib"
-	  fi
-	  continue
-	fi # $pass = dlopen
-
-	# We need an absolute path.
-	case $ladir in
-	[\\/]* | [A-Za-z]:[\\/]*) abs_ladir="$ladir" ;;
-	*)
-	  abs_ladir=`cd "$ladir" && pwd`
-	  if test -z "$abs_ladir"; then
-	    $echo "$modename: warning: cannot determine absolute directory name of \`$ladir'" 1>&2
-	    $echo "$modename: passing it literally to the linker, although it might fail" 1>&2
-	    abs_ladir="$ladir"
-	  fi
-	  ;;
-	esac
-	laname=`$echo "X$lib" | $Xsed -e 's%^.*/%%'`
-
-	# Find the relevant object directory and library name.
-	if test "X$installed" = Xyes; then
-	  if test ! -f "$libdir/$linklib" && test -f "$abs_ladir/$linklib"; then
-	    $echo "$modename: warning: library \`$lib' was moved." 1>&2
-	    dir="$ladir"
-	    absdir="$abs_ladir"
-	    libdir="$abs_ladir"
-	  else
-	    dir="$libdir"
-	    absdir="$libdir"
-	  fi
-	else
-	  dir="$ladir/$objdir"
-	  absdir="$abs_ladir/$objdir"
-	  # Remove this search path later
-	  notinst_path="$notinst_path $abs_ladir"
-	fi # $installed = yes
-	name=`$echo "X$laname" | $Xsed -e 's/\.la$//' -e 's/^lib//'`
-
-	# This library was specified with -dlpreopen.
-	if test $pass = dlpreopen; then
-	  if test -z "$libdir"; then
-	    $echo "$modename: cannot -dlpreopen a convenience library: \`$lib'" 1>&2
-	    exit 1
-	  fi
-	  # Prefer using a static library (so that no silly _DYNAMIC symbols
-	  # are required to link).
-	  if test -n "$old_library"; then
-	    newdlprefiles="$newdlprefiles $dir/$old_library"
-	  # Otherwise, use the dlname, so that lt_dlopen finds it.
-	  elif test -n "$dlname"; then
-	    newdlprefiles="$newdlprefiles $dir/$dlname"
-	  else
-	    newdlprefiles="$newdlprefiles $dir/$linklib"
-	  fi
-	fi # $pass = dlpreopen
-
-	if test -z "$libdir"; then
-	  # Link the convenience library
-	  if test $linkmode = lib; then
-	    deplibs="$dir/$old_library $deplibs"
-	  elif test "$linkmode,$pass" = "prog,link"; then
-	    compile_deplibs="$dir/$old_library $compile_deplibs"
-	    finalize_deplibs="$dir/$old_library $finalize_deplibs"
-	  else
-	    deplibs="$lib $deplibs"
-	  fi
-	  continue
-	fi
-
-	if test $linkmode = prog && test $pass != link; then
-	  newlib_search_path="$newlib_search_path $ladir"
-	  deplibs="$lib $deplibs"
-
-	  linkalldeplibs=no
-	  if test "$link_all_deplibs" != no || test -z "$library_names" ||
-	     test "$build_libtool_libs" = no; then
-	    linkalldeplibs=yes
-	  fi
-
-	  tmp_libs=
-	  #PKGW
-	  dependency_libs=
-	  for deplib in $dependency_libs; do
-	    case $deplib in
-	    -L*) newlib_search_path="$newlib_search_path "`$echo "X$deplib" | $Xsed -e 's/^-L//'`;; ### testsuite: skip nested quoting test
-	    esac
-	    # Need to link against all dependency_libs?
-	    if test $linkalldeplibs = yes; then
-	      deplibs="$deplib $deplibs"
-	    else
-	      # Need to hardcode shared library paths
-	      # or/and link against static libraries
-	      newdependency_libs="$deplib $newdependency_libs"
-	    fi
-	    case "$tmp_libs " in
-	    *" $deplib "*) specialdeplibs="$specialdeplibs $deplib" ;;
-	    esac
-	    tmp_libs="$tmp_libs $deplib"
-	  done # for deplib
-	  continue
-	fi # $linkmode = prog...
-
-	link_static=no # Whether the deplib will be linked statically
-	if test -n "$library_names" &&
-	   { test "$prefer_static_libs" = no || test -z "$old_library"; }; then
-	  # Link against this shared library
-
-	  if test "$linkmode,$pass" = "prog,link" ||
-	   { test $linkmode = lib && test $hardcode_into_libs = yes; }; then
-	    # Hardcode the library path.
-	    # Skip directories that are in the system default run-time
-	    # search path.
-	    case " $sys_lib_dlsearch_path " in
-	    *" $absdir "*) ;;
-	    *)
-	      case "$compile_rpath " in
-	      *" $absdir "*) ;;
-	      *) compile_rpath="$compile_rpath $absdir"
-	      esac
-	      ;;
-	    esac
-	    case " $sys_lib_dlsearch_path " in
-	    *" $libdir "*) ;;
-	    *)
-	      case "$finalize_rpath " in
-	      *" $libdir "*) ;;
-	      *) finalize_rpath="$finalize_rpath $libdir"
-	      esac
-	      ;;
-	    esac
-	    if test $linkmode = prog; then
-	      # We need to hardcode the library path
-	      if test -n "$shlibpath_var"; then
-		# Make sure the rpath contains only unique directories.
-		case "$temp_rpath " in
-		*" $dir "*) ;;
-		*" $absdir "*) ;;
-		*) temp_rpath="$temp_rpath $dir" ;;
-		esac
-	      fi
-	    fi
-	  fi # $linkmode,$pass = prog,link...
-
-	  if test "$alldeplibs" = yes &&
-	     { test "$deplibs_check_method" = pass_all ||
-	       { test "$build_libtool_libs" = yes &&
-		 test -n "$library_names"; }; }; then
-	    # We only need to search for static libraries
-	    continue
-	  fi
-
-	  if test "$installed" = no; then
-	    notinst_deplibs="$notinst_deplibs $lib"
-	    need_relink=yes
-	  fi
-
-	  if test -n "$old_archive_from_expsyms_cmds"; then
-	    # figure out the soname
-	    set dummy $library_names
-	    realname="$2"
-	    shift; shift
-	    libname=`eval \\$echo \"$libname_spec\"`
-	    # use dlname if we got it. it's perfectly good, no?
-	    if test -n "$dlname"; then
-	      soname="$dlname"
-	    elif test -n "$soname_spec"; then
-	      # bleh windows
-	      case $host in
-	      *cygwin*)
-		major=`expr $current - $age`
-		versuffix="-$major"
-		;;
-	      esac
-	      eval soname=\"$soname_spec\"
-	    else
-	      soname="$realname"
-	    fi
-
-	    # Make a new name for the extract_expsyms_cmds to use
-	    soroot="$soname"
-	    soname=`echo $soroot | sed -e 's/^.*\///'`
-	    newlib="libimp-`echo $soname | sed 's/^lib//;s/\.dll$//'`.a"
-
-	    # If the library has no export list, then create one now
-	    if test -f "$output_objdir/$soname-def"; then :
-	    else
-	      $show "extracting exported symbol list from \`$soname'"
-	      IFS="${IFS= 	}"; save_ifs="$IFS"; IFS='~'
-	      eval cmds=\"$extract_expsyms_cmds\"
-	      for cmd in $cmds; do
-		IFS="$save_ifs"
-		$show "$cmd"
-		$run eval "$cmd" || exit $?
-	      done
-	      IFS="$save_ifs"
-	    fi
-
-	    # Create $newlib
-	    if test -f "$output_objdir/$newlib"; then :; else
-	      $show "generating import library for \`$soname'"
-	      IFS="${IFS= 	}"; save_ifs="$IFS"; IFS='~'
-	      eval cmds=\"$old_archive_from_expsyms_cmds\"
-	      for cmd in $cmds; do
-		IFS="$save_ifs"
-		$show "$cmd"
-		$run eval "$cmd" || exit $?
-	      done
-	      IFS="$save_ifs"
-	    fi
-	    # make sure the library variables are pointing to the new library
-	    dir=$output_objdir
-	    linklib=$newlib
-	  fi # test -n $old_archive_from_expsyms_cmds
-
-	  if test $linkmode = prog || test "$mode" != relink; then
-	    add_shlibpath=
-	    add_dir=
-	    add=
-	    lib_linked=yes
-	    case $hardcode_action in
-	    immediate | unsupported)
-	      if test "$hardcode_direct" = no; then
-		add="$dir/$linklib"
-	      elif test "$hardcode_minus_L" = no; then
-		case $host in
-		*-*-sunos*) add_shlibpath="$dir" ;;
-		esac
-		add_dir="-L$dir"
-		add="-l$name"
-	      elif test "$hardcode_shlibpath_var" = no; then
-		add_shlibpath="$dir"
-		add="-l$name"
-	      else
-		lib_linked=no
-	      fi
-	      ;;
-	    relink)
-	      if test "$hardcode_direct" = yes; then
-		add="$dir/$linklib"
-	      elif test "$hardcode_minus_L" = yes; then
-		add_dir="-L$dir"
-		add="-l$name"
-	      elif test "$hardcode_shlibpath_var" = yes; then
-		add_shlibpath="$dir"
-		add="-l$name"
-	      else
-		lib_linked=no
-	      fi
-	      ;;
-	    *) lib_linked=no ;;
-	    esac
-
-	    if test "$lib_linked" != yes; then
-	      $echo "$modename: configuration error: unsupported hardcode properties"
-	      exit 1
-	    fi
-
-	    if test -n "$add_shlibpath"; then
-	      case :$compile_shlibpath: in
-	      *":$add_shlibpath:"*) ;;
-	      *) compile_shlibpath="$compile_shlibpath$add_shlibpath:" ;;
-	      esac
-	    fi
-	    if test $linkmode = prog; then
-	      test -n "$add_dir" && compile_deplibs="$add_dir $compile_deplibs"
-	      test -n "$add" && compile_deplibs="$add $compile_deplibs"
-	    else
-	      test -n "$add_dir" && deplibs="$add_dir $deplibs"
-	      test -n "$add" && deplibs="$add $deplibs"
-	      if test "$hardcode_direct" != yes && \
-		 test "$hardcode_minus_L" != yes && \
-		 test "$hardcode_shlibpath_var" = yes; then
-		case :$finalize_shlibpath: in
-		*":$libdir:"*) ;;
-		*) finalize_shlibpath="$finalize_shlibpath$libdir:" ;;
-		esac
-	      fi
-	    fi
-	  fi
-
-	  if test $linkmode = prog || test "$mode" = relink; then
-	    add_shlibpath=
-	    add_dir=
-	    add=
-	    # Finalize command for both is simple: just hardcode it.
-	    if test "$hardcode_direct" = yes; then
-	      add="$libdir/$linklib"
-	    elif test "$hardcode_minus_L" = yes; then
-	      # Try looking first in the location we're being installed to.
-	      add_dir=
-	      if test -n "$inst_prefix_dir"; then
-		case "$libdir" in
-		[\\/]*)
-		  add_dir="-L$inst_prefix_dir$libdir"
-		  ;;
-		esac
-	      fi
-	      add_dir="$add_dir -L$libdir"
-	      add="-l$name"
-	    elif test "$hardcode_shlibpath_var" = yes; then
-	      case :$finalize_shlibpath: in
-	      *":$libdir:"*) ;;
-	      *) finalize_shlibpath="$finalize_shlibpath$libdir:" ;;
-	      esac
-	      add="-l$name"
-	    else
-	      # We cannot seem to hardcode it, guess we'll fake it.
- 	      # Try looking first in the location we're being installed to.
- 	      add_dir=
- 	      if test -n "$inst_prefix_dir"; then
- 		case "$libdir" in
- 		[\\/]*)
- 		  add_dir="-L$inst_prefix_dir$libdir"
- 		  ;;
- 		esac
- 	      fi
- 	      add_dir="$add_dir -L$libdir"
-
-	      add="-l$name"
-	    fi
-
-	    if test "$linkmode" = prog; then
-	      test -n "$add_dir" && finalize_deplibs="$add_dir $finalize_deplibs"
-	      test -n "$add" && finalize_deplibs="$add $finalize_deplibs"
-	    else
-	      test -n "$add_dir" && deplibs="$add_dir $deplibs"
-	      test -n "$add" && deplibs="$add $deplibs"
-	    fi
-	  fi
-	elif test $linkmode = prog; then
-	  if test "$alldeplibs" = yes &&
-	     { test "$deplibs_check_method" = pass_all ||
-	       { test "$build_libtool_libs" = yes &&
-		 test -n "$library_names"; }; }; then
-	    # We only need to search for static libraries
-	    continue
-	  fi
-
-	  # Try to link the static library
-	  # Here we assume that one of hardcode_direct or hardcode_minus_L
-	  # is not unsupported.  This is valid on all known static and
-	  # shared platforms.
-	  if test "$hardcode_direct" != unsupported; then
-	    test -n "$old_library" && linklib="$old_library"
-	    compile_deplibs="$dir/$linklib $compile_deplibs"
-	    finalize_deplibs="$dir/$linklib $finalize_deplibs"
-	  else
-	    compile_deplibs="-l$name -L$dir $compile_deplibs"
-	    finalize_deplibs="-l$name -L$dir $finalize_deplibs"
-	  fi
-	elif test "$build_libtool_libs" = yes; then
-	  # Not a shared library
-	  if test "$deplibs_check_method" != pass_all; then
-	    # We're trying link a shared library against a static one
-	    # but the system doesn't support it.
-
-	    # Just print a warning and add the library to dependency_libs so
-	    # that the program can be linked against the static library.
-	    echo
-	    echo "*** Warning: This library needs some functionality provided by $lib."
-	    echo "*** I have the capability to make that library automatically link in when"
-	    echo "*** you link to this library.  But I can only do this if you have a"
-	    echo "*** shared version of the library, which you do not appear to have."
-	    if test "$module" = yes; then
-	      echo "*** Therefore, libtool will create a static module, that should work "
-	      echo "*** as long as the dlopening application is linked with the -dlopen flag."
-	      if test -z "$global_symbol_pipe"; then
-	        echo
-	        echo "*** However, this would only work if libtool was able to extract symbol"
-	        echo "*** lists from a program, using \`nm' or equivalent, but libtool could"
-	        echo "*** not find such a program.  So, this module is probably useless."
-	        echo "*** \`nm' from GNU binutils and a full rebuild may help."
-	      fi
-	      if test "$build_old_libs" = no; then
-	        build_libtool_libs=module
-	        build_old_libs=yes
-	      else
-	        build_libtool_libs=no
-	      fi
-	    fi
-	  else
-	    convenience="$convenience $dir/$old_library"
-	    old_convenience="$old_convenience $dir/$old_library"
-	    deplibs="$dir/$old_library $deplibs"
-	    link_static=yes
-	  fi
-	fi # link shared/static library?
-
-	if test $linkmode = lib; then
-	  if test -n "$dependency_libs" &&
-	     { test $hardcode_into_libs != yes || test $build_old_libs = yes ||
-	       test $link_static = yes; }; then
-	    # Extract -R from dependency_libs
-	    temp_deplibs=
-	    for libdir in $dependency_libs; do
-	      case $libdir in
-	      -R*) temp_xrpath=`$echo "X$libdir" | $Xsed -e 's/^-R//'`
-		   case " $xrpath " in
-		   *" $temp_xrpath "*) ;;
-		   *) xrpath="$xrpath $temp_xrpath";;
-		   esac;;
-	      *) temp_deplibs="$temp_deplibs $libdir";;
-	      esac
-	    done
-	    dependency_libs="$temp_deplibs"
-	  fi
-
-	  newlib_search_path="$newlib_search_path $absdir"
-	  # Link against this library
-	  test "$link_static" = no && newdependency_libs="$abs_ladir/$laname $newdependency_libs"
-	  # ... and its dependency_libs
-	  tmp_libs=
-	  for deplib in $dependency_libs; do
-	    newdependency_libs="$deplib $newdependency_libs"
-	    case "$tmp_libs " in
-	    *" $deplib "*) specialdeplibs="$specialdeplibs $deplib" ;;
-	    esac
-	    tmp_libs="$tmp_libs $deplib"
-	  done
-
-	  if test $link_all_deplibs != no; then
-	    # Add the search paths of all dependency libraries
-	    for deplib in $dependency_libs; do
-	      case $deplib in
-	      -L*) path="$deplib" ;;
-	      *.la)
-		dir=`$echo "X$deplib" | $Xsed -e 's%/[^/]*$%%'`
-		test "X$dir" = "X$deplib" && dir="."
-		# We need an absolute path.
-		case $dir in
-		[\\/]* | [A-Za-z]:[\\/]*) absdir="$dir" ;;
-		*)
-		  absdir=`cd "$dir" && pwd`
-		  if test -z "$absdir"; then
-		    $echo "$modename: warning: cannot determine absolute directory name of \`$dir'" 1>&2
-		    absdir="$dir"
-		  fi
-		  ;;
-		esac
-		if grep "^installed=no" $deplib > /dev/null; then
-		  path="-L$absdir/$objdir"
-		else
-		  eval libdir=`sed -n -e 's/^libdir=\(.*\)$/\1/p' $deplib`
-		  if test -z "$libdir"; then
-		    $echo "$modename: \`$deplib' is not a valid libtool archive" 1>&2
-		    exit 1
-		  fi
-		  if test "$absdir" != "$libdir"; then
-		    $echo "$modename: warning: \`$deplib' seems to be moved" 1>&2
-		  fi
-		  path="-L$absdir"
-		fi
-		;;
-	      *) continue ;;
-	      esac
-	      case " $deplibs " in
-	      *" $path "*) ;;
-	      *) deplibs="$deplibs $path" ;;
-	      esac
-	    done
-	  fi # link_all_deplibs != no
-	fi # linkmode = lib
-      done # for deplib in $libs
-      if test $pass = dlpreopen; then
-	# Link the dlpreopened libraries before other libraries
-	for deplib in $save_deplibs; do
-	  deplibs="$deplib $deplibs"
-	done
-      fi
-      if test $pass != dlopen; then
-	test $pass != scan && dependency_libs="$newdependency_libs"
-	if test $pass != conv; then
-	  # Make sure lib_search_path contains only unique directories.
-	  lib_search_path=
-	  for dir in $newlib_search_path; do
-	    case "$lib_search_path " in
-	    *" $dir "*) ;;
-	    *) lib_search_path="$lib_search_path $dir" ;;
-	    esac
-	  done
-	  newlib_search_path=
-	fi
-
-	if test "$linkmode,$pass" != "prog,link"; then
-	  vars="deplibs"
-	else
-	  vars="compile_deplibs finalize_deplibs"
-	fi
-	for var in $vars dependency_libs; do
-	  # Add libraries to $var in reverse order
-	  eval tmp_libs=\"\$$var\"
-	  new_libs=
-	  for deplib in $tmp_libs; do
-	    case $deplib in
-	    -L*) new_libs="$deplib $new_libs" ;;
-	    *)
-	      case " $specialdeplibs " in
-	      *" $deplib "*) new_libs="$deplib $new_libs" ;;
-	      *)
-		case " $new_libs " in
-		*" $deplib "*) ;;
-		*) new_libs="$deplib $new_libs" ;;
-		esac
-		;;
-	      esac
-	      ;;
-	    esac
-	  done
-	  tmp_libs=
-	  for deplib in $new_libs; do
-	    case $deplib in
-	    -L*)
-	      case " $tmp_libs " in
-	      *" $deplib "*) ;;
-	      *) tmp_libs="$tmp_libs $deplib" ;;
-	      esac
-	      ;;
-	    *) tmp_libs="$tmp_libs $deplib" ;;
-	    esac
-	  done
-	  eval $var=\"$tmp_libs\"
-	done # for var
-      fi
-      if test "$pass" = "conv" &&
-       { test "$linkmode" = "lib" || test "$linkmode" = "prog"; }; then
-	libs="$deplibs" # reset libs
-	deplibs=
-      fi
-    done # for pass
-    if test $linkmode = prog; then
-      dlfiles="$newdlfiles"
-      dlprefiles="$newdlprefiles"
-    fi
-
-    case $linkmode in
-    oldlib)
-      if test -n "$dlfiles$dlprefiles" || test "$dlself" != no; then
-	$echo "$modename: warning: \`-dlopen' is ignored for archives" 1>&2
-      fi
-
-      if test -n "$rpath"; then
-	$echo "$modename: warning: \`-rpath' is ignored for archives" 1>&2
-      fi
-
-      if test -n "$xrpath"; then
-	$echo "$modename: warning: \`-R' is ignored for archives" 1>&2
-      fi
-
-      if test -n "$vinfo"; then
-	$echo "$modename: warning: \`-version-info' is ignored for archives" 1>&2
-      fi
-
-      if test -n "$release"; then
-	$echo "$modename: warning: \`-release' is ignored for archives" 1>&2
-      fi
-
-      if test -n "$export_symbols" || test -n "$export_symbols_regex"; then
-	$echo "$modename: warning: \`-export-symbols' is ignored for archives" 1>&2
-      fi
-
-      # Now set the variables for building old libraries.
-      build_libtool_libs=no
-      oldlibs="$output"
-      objs="$objs$old_deplibs"
-      ;;
-
-    lib)
-      # Make sure we only generate libraries of the form `libNAME.la'.
-      case $outputname in
-      lib*)
-	name=`$echo "X$outputname" | $Xsed -e 's/\.la$//' -e 's/^lib//'`
-	eval libname=\"$libname_spec\"
-	;;
-      *)
-	if test "$module" = no; then
-	  $echo "$modename: libtool library \`$output' must begin with \`lib'" 1>&2
-	  $echo "$help" 1>&2
-	  exit 1
-	fi
-	if test "$need_lib_prefix" != no; then
-	  # Add the "lib" prefix for modules if required
-	  name=`$echo "X$outputname" | $Xsed -e 's/\.la$//'`
-	  eval libname=\"$libname_spec\"
-	else
-	  libname=`$echo "X$outputname" | $Xsed -e 's/\.la$//'`
-	fi
-	;;
-      esac
-
-      if test -n "$objs"; then
-	if test "$deplibs_check_method" != pass_all; then
-	  $echo "$modename: cannot build libtool library \`$output' from non-libtool objects on this host:$objs" 2>&1
-	  exit 1
-	else
-	  echo
-	  echo "*** Warning: Linking the shared library $output against the non-libtool"
-	  echo "*** objects $objs is not portable!"
-	  libobjs="$libobjs $objs"
-	fi
-      fi
-
-      if test "$dlself" != no; then
-	$echo "$modename: warning: \`-dlopen self' is ignored for libtool libraries" 1>&2
-      fi
-
-      set dummy $rpath
-      if test $# -gt 2; then
-	$echo "$modename: warning: ignoring multiple \`-rpath's for a libtool library" 1>&2
-      fi
-      install_libdir="$2"
-
-      oldlibs=
-      if test -z "$rpath"; then
-	if test "$build_libtool_libs" = yes; then
-	  # Building a libtool convenience library.
-	  libext=al
-	  oldlibs="$output_objdir/$libname.$libext $oldlibs"
-	  build_libtool_libs=convenience
-	  build_old_libs=yes
-	fi
-
-	if test -n "$vinfo"; then
-	  $echo "$modename: warning: \`-version-info' is ignored for convenience libraries" 1>&2
-	fi
-
-	if test -n "$release"; then
-	  $echo "$modename: warning: \`-release' is ignored for convenience libraries" 1>&2
-	fi
-      else
-
-	# Parse the version information argument.
-	IFS="${IFS= 	}"; save_ifs="$IFS"; IFS=':'
-	set dummy $vinfo 0 0 0
-	IFS="$save_ifs"
-
-	if test -n "$8"; then
-	  $echo "$modename: too many parameters to \`-version-info'" 1>&2
-	  $echo "$help" 1>&2
-	  exit 1
-	fi
-
-	current="$2"
-	revision="$3"
-	age="$4"
-
-	# Check that each of the things are valid numbers.
-	case $current in
-	[0-9]*) ;;
-	*)
-	  $echo "$modename: CURRENT \`$current' is not a nonnegative integer" 1>&2
-	  $echo "$modename: \`$vinfo' is not valid version information" 1>&2
-	  exit 1
-	  ;;
-	esac
-
-	case $revision in
-	[0-9]*) ;;
-	*)
-	  $echo "$modename: REVISION \`$revision' is not a nonnegative integer" 1>&2
-	  $echo "$modename: \`$vinfo' is not valid version information" 1>&2
-	  exit 1
-	  ;;
-	esac
-
-	case $age in
-	[0-9]*) ;;
-	*)
-	  $echo "$modename: AGE \`$age' is not a nonnegative integer" 1>&2
-	  $echo "$modename: \`$vinfo' is not valid version information" 1>&2
-	  exit 1
-	  ;;
-	esac
-
-	if test $age -gt $current; then
-	  $echo "$modename: AGE \`$age' is greater than the current interface number \`$current'" 1>&2
-	  $echo "$modename: \`$vinfo' is not valid version information" 1>&2
-	  exit 1
-	fi
-
-	# Calculate the version variables.
-	major=
-	versuffix=
-	verstring=
-	case $version_type in
-	none) ;;
-
-	darwin)
-	  # Like Linux, but with the current version available in
-	  # verstring for coding it into the library header
-	  major=.`expr $current - $age`
-	  versuffix="$major.$age.$revision"
-	  # Darwin ld doesn't like 0 for these options...
-	  minor_current=`expr $current + 1`
-	  verstring="-compatibility_version $minor_current -current_version $minor_current.$revision"
-	  ;;
-
-	freebsd-aout)
-	  major=".$current"
-	  versuffix=".$current.$revision";
-	  ;;
-
-	freebsd-elf)
-	  major=".$current"
-	  versuffix=".$current";
-	  ;;
-
-	irix)
-	  major=`expr $current - $age + 1`
-	  verstring="sgi$major.$revision"
-
-	  # Add in all the interfaces that we are compatible with.
-	  loop=$revision
-	  while test $loop != 0; do
-	    iface=`expr $revision - $loop`
-	    loop=`expr $loop - 1`
-	    verstring="sgi$major.$iface:$verstring"
-	  done
-
-	  # Before this point, $major must not contain `.'.
-	  major=.$major
-	  versuffix="$major.$revision"
-	  ;;
-
-	linux)
-	  major=.`expr $current - $age`
-	  versuffix="$major.$age.$revision"
-	  ;;
-
-	osf)
-	  major=`expr $current - $age`
-	  versuffix=".$current.$age.$revision"
-	  verstring="$current.$age.$revision"
-
-	  # Add in all the interfaces that we are compatible with.
-	  loop=$age
-	  while test $loop != 0; do
-	    iface=`expr $current - $loop`
-	    loop=`expr $loop - 1`
-	    verstring="$verstring:${iface}.0"
-	  done
-
-	  # Make executables depend on our current version.
-	  verstring="$verstring:${current}.0"
-	  ;;
-
-	sunos)
-	  major=".$current"
-	  versuffix=".$current.$revision"
-	  ;;
-
-	windows)
-	  # Use '-' rather than '.', since we only want one
-	  # extension on DOS 8.3 filesystems.
-	  major=`expr $current - $age`
-	  versuffix="-$major"
-	  ;;
-
-	*)
-	  $echo "$modename: unknown library version type \`$version_type'" 1>&2
-	  echo "Fatal configuration error.  See the $PACKAGE docs for more information." 1>&2
-	  exit 1
-	  ;;
-	esac
-
-	# Clear the version info if we defaulted, and they specified a release.
-	if test -z "$vinfo" && test -n "$release"; then
-	  major=
-	  verstring="0.0"
-	  if test "$need_version" = no; then
-	    versuffix=
-	  else
-	    versuffix=".0.0"
-	  fi
-	fi
-
-	# Remove version info from name if versioning should be avoided
-	if test "$avoid_version" = yes && test "$need_version" = no; then
-	  major=
-	  versuffix=
-	  verstring=""
-	fi
-
-	# Check to see if the archive will have undefined symbols.
-	if test "$allow_undefined" = yes; then
-	  if test "$allow_undefined_flag" = unsupported; then
-	    $echo "$modename: warning: undefined symbols not allowed in $host shared libraries" 1>&2
-	    build_libtool_libs=no
-	    build_old_libs=yes
-	  fi
-	else
-	  # Don't allow undefined symbols.
-	  allow_undefined_flag="$no_undefined_flag"
-	fi
-      fi
-
-      if test "$mode" != relink; then
-	# Remove our outputs.
-	$show "${rm}r $output_objdir/$outputname $output_objdir/$libname.* $output_objdir/${libname}${release}.*"
-	$run ${rm}r $output_objdir/$outputname $output_objdir/$libname.* $output_objdir/${libname}${release}.*
-      fi
-
-      # Now set the variables for building old libraries.
-      if test "$build_old_libs" = yes && test "$build_libtool_libs" != convenience ; then
-	oldlibs="$oldlibs $output_objdir/$libname.$libext"
-
-	# Transform .lo files to .o files.
-	oldobjs="$objs "`$echo "X$libobjs" | $SP2NL | $Xsed -e '/\.'${libext}'$/d' -e "$lo2o" | $NL2SP`
-      fi
-
-      # Eliminate all temporary directories.
-      for path in $notinst_path; do
-	lib_search_path=`echo "$lib_search_path " | sed -e 's% $path % %g'`
-	deplibs=`echo "$deplibs " | sed -e 's% -L$path % %g'`
-	dependency_libs=`echo "$dependency_libs " | sed -e 's% -L$path % %g'`
-      done
-
-      if test -n "$xrpath"; then
-	# If the user specified any rpath flags, then add them.
-	temp_xrpath=
-	for libdir in $xrpath; do
-	  temp_xrpath="$temp_xrpath -R$libdir"
-	  case "$finalize_rpath " in
-	  *" $libdir "*) ;;
-	  *) finalize_rpath="$finalize_rpath $libdir" ;;
-	  esac
-	done
-	if test $hardcode_into_libs != yes || test $build_old_libs = yes; then
-	  dependency_libs="$temp_xrpath $dependency_libs"
-	fi
-      fi
-
-      # Make sure dlfiles contains only unique files that won't be dlpreopened
-      old_dlfiles="$dlfiles"
-      dlfiles=
-      for lib in $old_dlfiles; do
-	case " $dlprefiles $dlfiles " in
-	*" $lib "*) ;;
-	*) dlfiles="$dlfiles $lib" ;;
-	esac
-      done
-
-      # Make sure dlprefiles contains only unique files
-      old_dlprefiles="$dlprefiles"
-      dlprefiles=
-      for lib in $old_dlprefiles; do
-	case "$dlprefiles " in
-	*" $lib "*) ;;
-	*) dlprefiles="$dlprefiles $lib" ;;
-	esac
-      done
-
-      if test "$build_libtool_libs" = yes; then
-	if test -n "$rpath"; then
-	  case $host in
-	  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-beos*)
-	    # these systems don't actually have a c library (as such)!
-	    ;;
-	  *-*-rhapsody* | *-*-darwin1.[012])
-	    # Rhapsody C library is in the System framework
-	    deplibs="$deplibs -framework System"
-	    ;;
-	  *-*-netbsd*)
-	    # Don't link with libc until the a.out ld.so is fixed.
-	    ;;
-	  *)
-	    # Add libc to deplibs on all other systems if necessary.
-	    if test $build_libtool_need_lc = "yes"; then
-	      deplibs="$deplibs -lc"
-	    fi
-	    ;;
-	  esac
-	fi
-
-	# Transform deplibs into only deplibs that can be linked in shared.
-	name_save=$name
-	libname_save=$libname
-	release_save=$release
-	versuffix_save=$versuffix
-	major_save=$major
-	# I'm not sure if I'm treating the release correctly.  I think
-	# release should show up in the -l (ie -lgmp5) so we don't want to
-	# add it in twice.  Is that correct?
-	release=""
-	versuffix=""
-	major=""
-	newdeplibs=
-	droppeddeps=no
-	case $deplibs_check_method in
-	pass_all)
-	  # Don't check for shared/static.  Everything works.
-	  # This might be a little naive.  We might want to check
-	  # whether the library exists or not.  But this is on
-	  # osf3 & osf4 and I'm not really sure... Just
-	  # implementing what was already the behaviour.
-	  newdeplibs=$deplibs
-	  ;;
-	test_compile)
-	  # This code stresses the "libraries are programs" paradigm to its
-	  # limits. Maybe even breaks it.  We compile a program, linking it
-	  # against the deplibs as a proxy for the library.  Then we can check
-	  # whether they linked in statically or dynamically with ldd.
-	  $rm conftest.c
-	  cat > conftest.c <<EOF
-	  int main() { return 0; }
-EOF
-	  $rm conftest
-	  $CC -o conftest conftest.c $deplibs
-	  if test $? -eq 0 ; then
-	    ldd_output=`ldd conftest`
-	    for i in $deplibs; do
-	      name="`expr $i : '-l\(.*\)'`"
-	      # If $name is empty we are operating on a -L argument.
-	      if test -n "$name" && test "$name" != "0"; then
-		libname=`eval \\$echo \"$libname_spec\"`
-		deplib_matches=`eval \\$echo \"$library_names_spec\"`
-		set dummy $deplib_matches
-		deplib_match=$2
-		if test `expr "$ldd_output" : ".*$deplib_match"` -ne 0 ; then
-		  newdeplibs="$newdeplibs $i"
-		else
-		  droppeddeps=yes
-		  echo
-		  echo "*** Warning: This library needs some functionality provided by $i."
-		  echo "*** I have the capability to make that library automatically link in when"
-		  echo "*** you link to this library.  But I can only do this if you have a"
-		  echo "*** shared version of the library, which you do not appear to have."
-		fi
-	      else
-		newdeplibs="$newdeplibs $i"
-	      fi
-	    done
-	  else
-	    # Error occured in the first compile.  Let's try to salvage the situation:
-	    # Compile a seperate program for each library.
-	    for i in $deplibs; do
-	      name="`expr $i : '-l\(.*\)'`"
-	     # If $name is empty we are operating on a -L argument.
-	      if test -n "$name" && test "$name" != "0"; then
-		$rm conftest
-		$CC -o conftest conftest.c $i
-		# Did it work?
-		if test $? -eq 0 ; then
-		  ldd_output=`ldd conftest`
-		  libname=`eval \\$echo \"$libname_spec\"`
-		  deplib_matches=`eval \\$echo \"$library_names_spec\"`
-		  set dummy $deplib_matches
-		  deplib_match=$2
-		  if test `expr "$ldd_output" : ".*$deplib_match"` -ne 0 ; then
-		    newdeplibs="$newdeplibs $i"
-		  else
-		    droppeddeps=yes
-		    echo
-		    echo "*** Warning: This library needs some functionality provided by $i."
-		    echo "*** I have the capability to make that library automatically link in when"
-		    echo "*** you link to this library.  But I can only do this if you have a"
-		    echo "*** shared version of the library, which you do not appear to have."
-		  fi
-		else
-		  droppeddeps=yes
-		  echo
-		  echo "*** Warning!  Library $i is needed by this library but I was not able to"
-		  echo "***  make it link in!  You will probably need to install it or some"
-		  echo "*** library that it depends on before this library will be fully"
-		  echo "*** functional.  Installing it before continuing would be even better."
-		fi
-	      else
-		newdeplibs="$newdeplibs $i"
-	      fi
-	    done
-	  fi
-	  ;;
-	file_magic*)
-	  set dummy $deplibs_check_method
-	  file_magic_regex=`expr "$deplibs_check_method" : "$2 \(.*\)"`
-	  for a_deplib in $deplibs; do
-	    name="`expr $a_deplib : '-l\(.*\)'`"
-	    # If $name is empty we are operating on a -L argument.
-	    if test -n "$name" && test "$name" != "0"; then
-	      libname=`eval \\$echo \"$libname_spec\"`
-	      for i in $lib_search_path $sys_lib_search_path $shlib_search_path; do
-		    potential_libs=`ls $i/$libname[.-]* 2>/dev/null`
-		    for potent_lib in $potential_libs; do
-		      # Follow soft links.
-		      if ls -lLd "$potent_lib" 2>/dev/null \
-			 | grep " -> " >/dev/null; then
-			continue
-		      fi
-		      # The statement above tries to avoid entering an
-		      # endless loop below, in case of cyclic links.
-		      # We might still enter an endless loop, since a link
-		      # loop can be closed while we follow links,
-		      # but so what?
-		      potlib="$potent_lib"
-		      while test -h "$potlib" 2>/dev/null; do
-			potliblink=`ls -ld $potlib | sed 's/.* -> //'`
-			case $potliblink in
-			[\\/]* | [A-Za-z]:[\\/]*) potlib="$potliblink";;
-			*) potlib=`$echo "X$potlib" | $Xsed -e 's,[^/]*$,,'`"$potliblink";;
-			esac
-		      done
-		      if eval $file_magic_cmd \"\$potlib\" 2>/dev/null \
-			 | sed 10q \
-			 | egrep "$file_magic_regex" > /dev/null; then
-			newdeplibs="$newdeplibs $a_deplib"
-			a_deplib=""
-			break 2
-		      fi
-		    done
-	      done
-	      if test -n "$a_deplib" ; then
-		droppeddeps=yes
-		echo
-		echo "*** Warning: This library needs some functionality provided by $a_deplib."
-		echo "*** I have the capability to make that library automatically link in when"
-		echo "*** you link to this library.  But I can only do this if you have a"
-		echo "*** shared version of the library, which you do not appear to have."
-	      fi
-	    else
-	      # Add a -L argument.
-	      newdeplibs="$newdeplibs $a_deplib"
-	    fi
-	  done # Gone through all deplibs.
-	  ;;
-	match_pattern*)
-	  set dummy $deplibs_check_method
-	  match_pattern_regex=`expr "$deplibs_check_method" : "$2 \(.*\)"`
-	  for a_deplib in $deplibs; do
-	    name="`expr $a_deplib : '-l\(.*\)'`"
-	    # If $name is empty we are operating on a -L argument.
-	    if test -n "$name" && test "$name" != "0"; then
-	      libname=`eval \\$echo \"$libname_spec\"`
-	      for i in $lib_search_path $sys_lib_search_path $shlib_search_path; do
-		potential_libs=`ls $i/$libname[.-]* 2>/dev/null`
-		for potent_lib in $potential_libs; do
-		  if eval echo \"$potent_lib\" 2>/dev/null \
-		      | sed 10q \
-		      | egrep "$match_pattern_regex" > /dev/null; then
-		    newdeplibs="$newdeplibs $a_deplib"
-		    a_deplib=""
-		    break 2
-		  fi
-		done
-	      done
-	      if test -n "$a_deplib" ; then
-		droppeddeps=yes
-		echo
-		echo "*** Warning: This library needs some functionality provided by $a_deplib."
-		echo "*** I have the capability to make that library automatically link in when"
-		echo "*** you link to this library.  But I can only do this if you have a"
-		echo "*** shared version of the library, which you do not appear to have."
-	      fi
-	    else
-	      # Add a -L argument.
-	      newdeplibs="$newdeplibs $a_deplib"
-	    fi
-	  done # Gone through all deplibs.
-	  ;;
-	none | unknown | *)
-	  newdeplibs=""
-	  if $echo "X $deplibs" | $Xsed -e 's/ -lc$//' \
-	       -e 's/ -[LR][^ ]*//g' -e 's/[ 	]//g' |
-	     grep . >/dev/null; then
-	    echo
-	    if test "X$deplibs_check_method" = "Xnone"; then
-	      echo "*** Warning: inter-library dependencies are not supported in this platform."
-	    else
-	      echo "*** Warning: inter-library dependencies are not known to be supported."
-	    fi
-	    echo "*** All declared inter-library dependencies are being dropped."
-	    droppeddeps=yes
-	  fi
-	  ;;
-	esac
-	versuffix=$versuffix_save
-	major=$major_save
-	release=$release_save
-	libname=$libname_save
-	name=$name_save
-
-	case $host in
-	*-*-rhapsody* | *-*-darwin1.[012])
-	  # On Rhapsody replace the C library is the System framework
-	  newdeplibs=`$echo "X $newdeplibs" | $Xsed -e 's/ -lc / -framework System /'`
-	  ;;
-	esac
-
-	if test "$droppeddeps" = yes; then
-	  if test "$module" = yes; then
-	    echo
-	    echo "*** Warning: libtool could not satisfy all declared inter-library"
-	    echo "*** dependencies of module $libname.  Therefore, libtool will create"
-	    echo "*** a static module, that should work as long as the dlopening"
-	    echo "*** application is linked with the -dlopen flag."
-	    if test -z "$global_symbol_pipe"; then
-	      echo
-	      echo "*** However, this would only work if libtool was able to extract symbol"
-	      echo "*** lists from a program, using \`nm' or equivalent, but libtool could"
-	      echo "*** not find such a program.  So, this module is probably useless."
-	      echo "*** \`nm' from GNU binutils and a full rebuild may help."
-	    fi
-	    if test "$build_old_libs" = no; then
-	      oldlibs="$output_objdir/$libname.$libext"
-	      build_libtool_libs=module
-	      build_old_libs=yes
-	    else
-	      build_libtool_libs=no
-	    fi
-	  else
-	    echo "*** The inter-library dependencies that have been dropped here will be"
-	    echo "*** automatically added whenever a program is linked with this library"
-	    echo "*** or is declared to -dlopen it."
-
-	    if test $allow_undefined = no; then
-	      echo
-	      echo "*** Since this library must not contain undefined symbols,"
-	      echo "*** because either the platform does not support them or"
-	      echo "*** it was explicitly requested with -no-undefined,"
-	      echo "*** libtool will only create a static version of it."
-	      if test "$build_old_libs" = no; then
-		oldlibs="$output_objdir/$libname.$libext"
-		build_libtool_libs=module
-		build_old_libs=yes
-	      else
-		build_libtool_libs=no
-	      fi
-	    fi
-	  fi
-	fi
-	# Done checking deplibs!
-	deplibs=$newdeplibs
-      fi
-
-      # All the library-specific variables (install_libdir is set above).
-      library_names=
-      old_library=
-      dlname=
-
-      # Test again, we may have decided not to build it any more
-      if test "$build_libtool_libs" = yes; then
-	if test $hardcode_into_libs = yes; then
-	  # Hardcode the library paths
-	  hardcode_libdirs=
-	  dep_rpath=
-	  rpath="$finalize_rpath"
-	  test "$mode" != relink && rpath="$compile_rpath$rpath"
-	  for libdir in $rpath; do
-	    if test -n "$hardcode_libdir_flag_spec"; then
-	      if test -n "$hardcode_libdir_separator"; then
-		if test -z "$hardcode_libdirs"; then
-		  hardcode_libdirs="$libdir"
-		else
-		  # Just accumulate the unique libdirs.
-		  case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in
-		  *"$hardcode_libdir_separator$libdir$hardcode_libdir_separator"*)
-		    ;;
-		  *)
-		    hardcode_libdirs="$hardcode_libdirs$hardcode_libdir_separator$libdir"
-		    ;;
-		  esac
-		fi
-	      else
-		eval flag=\"$hardcode_libdir_flag_spec\"
-		dep_rpath="$dep_rpath $flag"
-	      fi
-	    elif test -n "$runpath_var"; then
-	      case "$perm_rpath " in
-	      *" $libdir "*) ;;
-	      *) perm_rpath="$perm_rpath $libdir" ;;
-	      esac
-	    fi
-	  done
-	  # Substitute the hardcoded libdirs into the rpath.
-	  if test -n "$hardcode_libdir_separator" &&
-	     test -n "$hardcode_libdirs"; then
-	    libdir="$hardcode_libdirs"
-	    eval dep_rpath=\"$hardcode_libdir_flag_spec\"
-	  fi
-	  if test -n "$runpath_var" && test -n "$perm_rpath"; then
-	    # We should set the runpath_var.
-	    rpath=
-	    for dir in $perm_rpath; do
-	      rpath="$rpath$dir:"
-	    done
-	    eval "$runpath_var='$rpath\$$runpath_var'; export $runpath_var"
-	  fi
-	  test -n "$dep_rpath" && deplibs="$dep_rpath $deplibs"
-	fi
-
-	shlibpath="$finalize_shlibpath"
-	test "$mode" != relink && shlibpath="$compile_shlibpath$shlibpath"
-	if test -n "$shlibpath"; then
-	  eval "$shlibpath_var='$shlibpath\$$shlibpath_var'; export $shlibpath_var"
-	fi
-
-	# Get the real and link names of the library.
-	eval library_names=\"$library_names_spec\"
-	set dummy $library_names
-	realname="$2"
-	shift; shift
-
-	if test -n "$soname_spec"; then
-	  eval soname=\"$soname_spec\"
-	else
-	  soname="$realname"
-	fi
-	test -z "$dlname" && dlname=$soname
-
-	lib="$output_objdir/$realname"
-	for link
-	do
-	  linknames="$linknames $link"
-	done
-
-	# Ensure that we have .o objects for linkers which dislike .lo
-	# (e.g. aix) in case we are running --disable-static
-	for obj in $libobjs; do
-	  xdir=`$echo "X$obj" | $Xsed -e 's%/[^/]*$%%'`
-	  if test "X$xdir" = "X$obj"; then
-	    xdir="."
-	  else
-	    xdir="$xdir"
-	  fi
-	  baseobj=`$echo "X$obj" | $Xsed -e 's%^.*/%%'`
-	  oldobj=`$echo "X$baseobj" | $Xsed -e "$lo2o"`
-	  if test ! -f $xdir/$oldobj; then
-	    $show "(cd $xdir && ${LN_S} $baseobj $oldobj)"
-	    $run eval '(cd $xdir && ${LN_S} $baseobj $oldobj)' || exit $?
-	  fi
-	done
-
-	# Use standard objects if they are pic
-	test -z "$pic_flag" && libobjs=`$echo "X$libobjs" | $SP2NL | $Xsed -e "$lo2o" | $NL2SP`
-
-	# Prepare the list of exported symbols
-	if test -z "$export_symbols"; then
-	  if test "$always_export_symbols" = yes || test -n "$export_symbols_regex"; then
-	    $show "generating symbol list for \`$libname.la'"
-	    export_symbols="$output_objdir/$libname.exp"
-	    $run $rm $export_symbols
-	    eval cmds=\"$export_symbols_cmds\"
-	    IFS="${IFS= 	}"; save_ifs="$IFS"; IFS='~'
-	    for cmd in $cmds; do
-	      IFS="$save_ifs"
-	      $show "$cmd"
-	      $run eval "$cmd" || exit $?
-	    done
-	    IFS="$save_ifs"
-	    if test -n "$export_symbols_regex"; then
-	      $show "egrep -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\""
-	      $run eval 'egrep -e "$export_symbols_regex" "$export_symbols" > "${export_symbols}T"'
-	      $show "$mv \"${export_symbols}T\" \"$export_symbols\""
-	      $run eval '$mv "${export_symbols}T" "$export_symbols"'
-	    fi
-	  fi
-	fi
-
-	if test -n "$export_symbols" && test -n "$include_expsyms"; then
-	  $run eval '$echo "X$include_expsyms" | $SP2NL >> "$export_symbols"'
-	fi
-
-	if test -n "$convenience"; then
-	  if test -n "$whole_archive_flag_spec"; then
-	    eval libobjs=\"\$libobjs $whole_archive_flag_spec\"
-	  else
-	    gentop="$output_objdir/${outputname}x"
-	    $show "${rm}r $gentop"
-	    $run ${rm}r "$gentop"
-	    $show "mkdir $gentop"
-	    $run mkdir "$gentop"
-	    status=$?
-	    if test $status -ne 0 && test ! -d "$gentop"; then
-	      exit $status
-	    fi
-	    generated="$generated $gentop"
-
-	    for xlib in $convenience; do
-	      # Extract the objects.
-	      case $xlib in
-	      [\\/]* | [A-Za-z]:[\\/]*) xabs="$xlib" ;;
-	      *) xabs=`pwd`"/$xlib" ;;
-	      esac
-	      xlib=`$echo "X$xlib" | $Xsed -e 's%^.*/%%'`
-	      xdir="$gentop/$xlib"
-
-	      $show "${rm}r $xdir"
-	      $run ${rm}r "$xdir"
-	      $show "mkdir $xdir"
-	      $run mkdir "$xdir"
-	      status=$?
-	      if test $status -ne 0 && test ! -d "$xdir"; then
-		exit $status
-	      fi
-	      $show "(cd $xdir && $AR x $xabs)"
-	      $run eval "(cd \$xdir && $AR x \$xabs)" || exit $?
-
-	      libobjs="$libobjs "`find $xdir -name \*.o -print -o -name \*.lo -print | $NL2SP`
-	    done
-	  fi
-	fi
-
-	if test "$thread_safe" = yes && test -n "$thread_safe_flag_spec"; then
-	  eval flag=\"$thread_safe_flag_spec\"
-	  linker_flags="$linker_flags $flag"
-	fi
-
-	# Make a backup of the uninstalled library when relinking
-	if test "$mode" = relink; then
-	  $run eval '(cd $output_objdir && $rm ${realname}U && $mv $realname ${realname}U)' || exit $?
-	fi
-
-	# Do each of the archive commands.
-	if test -n "$export_symbols" && test -n "$archive_expsym_cmds"; then
-	  eval cmds=\"$archive_expsym_cmds\"
-	else
-	  eval cmds=\"$archive_cmds\"
-	fi
-	IFS="${IFS= 	}"; save_ifs="$IFS"; IFS='~'
-	for cmd in $cmds; do
-	  IFS="$save_ifs"
-	  $show "$cmd"
-	  $run eval "$cmd" || exit $?
-	done
-	IFS="$save_ifs"
-
-	# Restore the uninstalled library and exit
-	if test "$mode" = relink; then
-	  $run eval '(cd $output_objdir && $rm ${realname}T && $mv $realname ${realname}T && $mv "$realname"U $realname)' || exit $?
-	  exit 0
-	fi
-
-	# Create links to the real library.
-	for linkname in $linknames; do
-	  if test "$realname" != "$linkname"; then
-	    $show "(cd $output_objdir && $rm $linkname && $LN_S $realname $linkname)"
-	    $run eval '(cd $output_objdir && $rm $linkname && $LN_S $realname $linkname)' || exit $?
-	  fi
-	done
-
-	# If -module or -export-dynamic was specified, set the dlname.
-	if test "$module" = yes || test "$export_dynamic" = yes; then
-	  # On all known operating systems, these are identical.
-	  dlname="$soname"
-	fi
-      fi
-      ;;
-
-    obj)
-      if test -n "$deplibs"; then
-	$echo "$modename: warning: \`-l' and \`-L' are ignored for objects" 1>&2
-      fi
-
-      if test -n "$dlfiles$dlprefiles" || test "$dlself" != no; then
-	$echo "$modename: warning: \`-dlopen' is ignored for objects" 1>&2
-      fi
-
-      if test -n "$rpath"; then
-	$echo "$modename: warning: \`-rpath' is ignored for objects" 1>&2
-      fi
-
-      if test -n "$xrpath"; then
-	$echo "$modename: warning: \`-R' is ignored for objects" 1>&2
-      fi
-
-      if test -n "$vinfo"; then
-	$echo "$modename: warning: \`-version-info' is ignored for objects" 1>&2
-      fi
-
-      if test -n "$release"; then
-	$echo "$modename: warning: \`-release' is ignored for objects" 1>&2
-      fi
-
-      case $output in
-      *.lo)
-	if test -n "$objs$old_deplibs"; then
-	  $echo "$modename: cannot build library object \`$output' from non-libtool objects" 1>&2
-	  exit 1
-	fi
-	libobj="$output"
-	obj=`$echo "X$output" | $Xsed -e "$lo2o"`
-	;;
-      *)
-	libobj=
-	obj="$output"
-	;;
-      esac
-
-      # Delete the old objects.
-      $run $rm $obj $libobj
-
-      # Objects from convenience libraries.  This assumes
-      # single-version convenience libraries.  Whenever we create
-      # different ones for PIC/non-PIC, this we'll have to duplicate
-      # the extraction.
-      reload_conv_objs=
-      gentop=
-      # reload_cmds runs $LD directly, so let us get rid of
-      # -Wl from whole_archive_flag_spec
-      wl=
-
-      if test -n "$convenience"; then
-	if test -n "$whole_archive_flag_spec"; then
-	  eval reload_conv_objs=\"\$reload_objs $whole_archive_flag_spec\"
-	else
-	  gentop="$output_objdir/${obj}x"
-	  $show "${rm}r $gentop"
-	  $run ${rm}r "$gentop"
-	  $show "mkdir $gentop"
-	  $run mkdir "$gentop"
-	  status=$?
-	  if test $status -ne 0 && test ! -d "$gentop"; then
-	    exit $status
-	  fi
-	  generated="$generated $gentop"
-
-	  for xlib in $convenience; do
-	    # Extract the objects.
-	    case $xlib in
-	    [\\/]* | [A-Za-z]:[\\/]*) xabs="$xlib" ;;
-	    *) xabs=`pwd`"/$xlib" ;;
-	    esac
-	    xlib=`$echo "X$xlib" | $Xsed -e 's%^.*/%%'`
-	    xdir="$gentop/$xlib"
-
-	    $show "${rm}r $xdir"
-	    $run ${rm}r "$xdir"
-	    $show "mkdir $xdir"
-	    $run mkdir "$xdir"
-	    status=$?
-	    if test $status -ne 0 && test ! -d "$xdir"; then
-	      exit $status
-	    fi
-	    $show "(cd $xdir && $AR x $xabs)"
-	    $run eval "(cd \$xdir && $AR x \$xabs)" || exit $?
-
-	    reload_conv_objs="$reload_objs "`find $xdir -name \*.o -print -o -name \*.lo -print | $NL2SP`
-	  done
-	fi
-      fi
-
-      # Create the old-style object.
-      reload_objs="$objs$old_deplibs "`$echo "X$libobjs" | $SP2NL | $Xsed -e '/\.'${libext}$'/d' -e '/\.lib$/d' -e "$lo2o" | $NL2SP`" $reload_conv_objs" ### testsuite: skip nested quoting test
-
-      output="$obj"
-      eval cmds=\"$reload_cmds\"
-      IFS="${IFS= 	}"; save_ifs="$IFS"; IFS='~'
-      for cmd in $cmds; do
-	IFS="$save_ifs"
-	$show "$cmd"
-	$run eval "$cmd" || exit $?
-      done
-      IFS="$save_ifs"
-
-      # Exit if we aren't doing a library object file.
-      if test -z "$libobj"; then
-	if test -n "$gentop"; then
-	  $show "${rm}r $gentop"
-	  $run ${rm}r $gentop
-	fi
-
-	exit 0
-      fi
-
-      if test "$build_libtool_libs" != yes; then
-	if test -n "$gentop"; then
-	  $show "${rm}r $gentop"
-	  $run ${rm}r $gentop
-	fi
-
-	# Create an invalid libtool object if no PIC, so that we don't
-	# accidentally link it into a program.
-	$show "echo timestamp > $libobj"
-	$run eval "echo timestamp > $libobj" || exit $?
-	exit 0
-      fi
-
-      if test -n "$pic_flag" || test "$pic_mode" != default; then
-	# Only do commands if we really have different PIC objects.
-	reload_objs="$libobjs $reload_conv_objs"
-	output="$libobj"
-	eval cmds=\"$reload_cmds\"
-	IFS="${IFS= 	}"; save_ifs="$IFS"; IFS='~'
-	for cmd in $cmds; do
-	  IFS="$save_ifs"
-	  $show "$cmd"
-	  $run eval "$cmd" || exit $?
-	done
-	IFS="$save_ifs"
-      else
-	# Just create a symlink.
-	$show $rm $libobj
-	$run $rm $libobj
-	xdir=`$echo "X$libobj" | $Xsed -e 's%/[^/]*$%%'`
-	if test "X$xdir" = "X$libobj"; then
-	  xdir="."
-	else
-	  xdir="$xdir"
-	fi
-	baseobj=`$echo "X$libobj" | $Xsed -e 's%^.*/%%'`
-	oldobj=`$echo "X$baseobj" | $Xsed -e "$lo2o"`
-	$show "(cd $xdir && $LN_S $oldobj $baseobj)"
-	$run eval '(cd $xdir && $LN_S $oldobj $baseobj)' || exit $?
-      fi
-
-      if test -n "$gentop"; then
-	$show "${rm}r $gentop"
-	$run ${rm}r $gentop
-      fi
-
-      exit 0
-      ;;
-
-    prog)
-      case $host in
-	*cygwin*) output=`echo $output | sed -e 's,.exe$,,;s,$,.exe,'` ;;
-      esac
-      if test -n "$vinfo"; then
-	$echo "$modename: warning: \`-version-info' is ignored for programs" 1>&2
-      fi
-
-      if test -n "$release"; then
-	$echo "$modename: warning: \`-release' is ignored for programs" 1>&2
-      fi
-
-      if test "$preload" = yes; then
-	if test "$dlopen_support" = unknown && test "$dlopen_self" = unknown &&
-	   test "$dlopen_self_static" = unknown; then
-	  $echo "$modename: warning: \`AC_LIBTOOL_DLOPEN' not used. Assuming no dlopen support."
-	fi
-      fi
-
-      case $host in
-      *-*-rhapsody* | *-*-darwin1.[012])
-	# On Rhapsody replace the C library is the System framework
-	compile_deplibs=`$echo "X $compile_deplibs" | $Xsed -e 's/ -lc / -framework System /'`
-	finalize_deplibs=`$echo "X $finalize_deplibs" | $Xsed -e 's/ -lc / -framework System /'`
-	;;
-      esac
-
-      compile_command="$compile_command $compile_deplibs"
-      finalize_command="$finalize_command $finalize_deplibs"
-
-      if test -n "$rpath$xrpath"; then
-	# If the user specified any rpath flags, then add them.
-	for libdir in $rpath $xrpath; do
-	  # This is the magic to use -rpath.
-	  case "$finalize_rpath " in
-	  *" $libdir "*) ;;
-	  *) finalize_rpath="$finalize_rpath $libdir" ;;
-	  esac
-	done
-      fi
-
-      # Now hardcode the library paths
-      rpath=
-      hardcode_libdirs=
-      for libdir in $compile_rpath $finalize_rpath; do
-	if test -n "$hardcode_libdir_flag_spec"; then
-	  if test -n "$hardcode_libdir_separator"; then
-	    if test -z "$hardcode_libdirs"; then
-	      hardcode_libdirs="$libdir"
-	    else
-	      # Just accumulate the unique libdirs.
-	      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in
-	      *"$hardcode_libdir_separator$libdir$hardcode_libdir_separator"*)
-		;;
-	      *)
-		hardcode_libdirs="$hardcode_libdirs$hardcode_libdir_separator$libdir"
-		;;
-	      esac
-	    fi
-	  else
-	    eval flag=\"$hardcode_libdir_flag_spec\"
-	    rpath="$rpath $flag"
-	  fi
-	elif test -n "$runpath_var"; then
-	  case "$perm_rpath " in
-	  *" $libdir "*) ;;
-	  *) perm_rpath="$perm_rpath $libdir" ;;
-	  esac
-	fi
-	case $host in
-	*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2*)
-	  case :$dllsearchpath: in
-	  *":$libdir:"*) ;;
-	  *) dllsearchpath="$dllsearchpath:$libdir";;
-	  esac
-	  ;;
-	esac
-      done
-      # Substitute the hardcoded libdirs into the rpath.
-      if test -n "$hardcode_libdir_separator" &&
-	 test -n "$hardcode_libdirs"; then
-	libdir="$hardcode_libdirs"
-	eval rpath=\" $hardcode_libdir_flag_spec\"
-      fi
-      compile_rpath="$rpath"
-
-      rpath=
-      hardcode_libdirs=
-      for libdir in $finalize_rpath; do
-	if test -n "$hardcode_libdir_flag_spec"; then
-	  if test -n "$hardcode_libdir_separator"; then
-	    if test -z "$hardcode_libdirs"; then
-	      hardcode_libdirs="$libdir"
-	    else
-	      # Just accumulate the unique libdirs.
-	      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in
-	      *"$hardcode_libdir_separator$libdir$hardcode_libdir_separator"*)
-		;;
-	      *)
-		hardcode_libdirs="$hardcode_libdirs$hardcode_libdir_separator$libdir"
-		;;
-	      esac
-	    fi
-	  else
-	    eval flag=\"$hardcode_libdir_flag_spec\"
-	    rpath="$rpath $flag"
-	  fi
-	elif test -n "$runpath_var"; then
-	  case "$finalize_perm_rpath " in
-	  *" $libdir "*) ;;
-	  *) finalize_perm_rpath="$finalize_perm_rpath $libdir" ;;
-	  esac
-	fi
-      done
-      # Substitute the hardcoded libdirs into the rpath.
-      if test -n "$hardcode_libdir_separator" &&
-	 test -n "$hardcode_libdirs"; then
-	libdir="$hardcode_libdirs"
-	eval rpath=\" $hardcode_libdir_flag_spec\"
-      fi
-      finalize_rpath="$rpath"
-
-      if test -n "$libobjs" && test "$build_old_libs" = yes; then
-	# Transform all the library objects into standard objects.
-	compile_command=`$echo "X$compile_command" | $SP2NL | $Xsed -e "$lo2o" | $NL2SP`
-	finalize_command=`$echo "X$finalize_command" | $SP2NL | $Xsed -e "$lo2o" | $NL2SP`
-      fi
-
-      dlsyms=
-      if test -n "$dlfiles$dlprefiles" || test "$dlself" != no; then
-	if test -n "$NM" && test -n "$global_symbol_pipe"; then
-	  dlsyms="${outputname}S.c"
-	else
-	  $echo "$modename: not configured to extract global symbols from dlpreopened files" 1>&2
-	fi
-      fi
-
-      if test -n "$dlsyms"; then
-	case $dlsyms in
-	"") ;;
-	*.c)
-	  # Discover the nlist of each of the dlfiles.
-	  nlist="$output_objdir/${outputname}.nm"
-
-	  $show "$rm $nlist ${nlist}S ${nlist}T"
-	  $run $rm "$nlist" "${nlist}S" "${nlist}T"
-
-	  # Parse the name list into a source file.
-	  $show "creating $output_objdir/$dlsyms"
-
-	  test -z "$run" && $echo > "$output_objdir/$dlsyms" "\
-/* $dlsyms - symbol resolution table for \`$outputname' dlsym emulation. */
-/* Generated by $PROGRAM - GNU $PACKAGE $VERSION$TIMESTAMP */
-
-#ifdef __cplusplus
-extern \"C\" {
-#endif
-
-/* Prevent the only kind of declaration conflicts we can make. */
-#define lt_preloaded_symbols some_other_symbol
-
-/* External symbol declarations for the compiler. */\
-"
-
-	  if test "$dlself" = yes; then
-	    $show "generating symbol list for \`$output'"
-
-	    test -z "$run" && $echo ': @PROGRAM@ ' > "$nlist"
-
-	    # Add our own program objects to the symbol list.
-	    progfiles=`$echo "X$objs$old_deplibs" | $SP2NL | $Xsed -e "$lo2o" | $NL2SP`
-	    for arg in $progfiles; do
-	      $show "extracting global C symbols from \`$arg'"
-	      $run eval "$NM $arg | $global_symbol_pipe >> '$nlist'"
-	    done
-
-	    if test -n "$exclude_expsyms"; then
-	      $run eval 'egrep -v " ($exclude_expsyms)$" "$nlist" > "$nlist"T'
-	      $run eval '$mv "$nlist"T "$nlist"'
-	    fi
-
-	    if test -n "$export_symbols_regex"; then
-	      $run eval 'egrep -e "$export_symbols_regex" "$nlist" > "$nlist"T'
-	      $run eval '$mv "$nlist"T "$nlist"'
-	    fi
-
-	    # Prepare the list of exported symbols
-	    if test -z "$export_symbols"; then
-	      export_symbols="$output_objdir/$output.exp"
-	      $run $rm $export_symbols
-	      $run eval "sed -n -e '/^: @PROGRAM@$/d' -e 's/^.* \(.*\)$/\1/p' "'< "$nlist" > "$export_symbols"'
-	    else
-	      $run eval "sed -e 's/\([][.*^$]\)/\\\1/g' -e 's/^/ /' -e 's/$/$/'"' < "$export_symbols" > "$output_objdir/$output.exp"'
-	      $run eval 'grep -f "$output_objdir/$output.exp" < "$nlist" > "$nlist"T'
-	      $run eval 'mv "$nlist"T "$nlist"'
-	    fi
-	  fi
-
-	  for arg in $dlprefiles; do
-	    $show "extracting global C symbols from \`$arg'"
-	    name=`echo "$arg" | sed -e 's%^.*/%%'`
-	    $run eval 'echo ": $name " >> "$nlist"'
-	    $run eval "$NM $arg | $global_symbol_pipe >> '$nlist'"
-	  done
-
-	  if test -z "$run"; then
-	    # Make sure we have at least an empty file.
-	    test -f "$nlist" || : > "$nlist"
-
-	    if test -n "$exclude_expsyms"; then
-	      egrep -v " ($exclude_expsyms)$" "$nlist" > "$nlist"T
-	      $mv "$nlist"T "$nlist"
-	    fi
-
-	    # Try sorting and uniquifying the output.
-	    if grep -v "^: " < "$nlist" | sort +2 | uniq > "$nlist"S; then
-	      :
-	    else
-	      grep -v "^: " < "$nlist" > "$nlist"S
-	    fi
-
-	    if test -f "$nlist"S; then
-	      eval "$global_symbol_to_cdecl"' < "$nlist"S >> "$output_objdir/$dlsyms"'
-	    else
-	      echo '/* NONE */' >> "$output_objdir/$dlsyms"
-	    fi
-
-	    $echo >> "$output_objdir/$dlsyms" "\
-
-#undef lt_preloaded_symbols
-
-#if defined (__STDC__) && __STDC__
-# define lt_ptr_t void *
-#else
-# define lt_ptr_t char *
-# define const
-#endif
-
-/* The mapping between symbol names and symbols. */
-const struct {
-  const char *name;
-  lt_ptr_t address;
-}
-lt_preloaded_symbols[] =
-{\
-"
-
-	    sed -n -e 's/^: \([^ ]*\) $/  {\"\1\", (lt_ptr_t) 0},/p' \
-		-e 's/^. \([^ ]*\) \([^ ]*\)$/  {"\2", (lt_ptr_t) \&\2},/p' \
-		  < "$nlist" >> "$output_objdir/$dlsyms"
-
-	    $echo >> "$output_objdir/$dlsyms" "\
-  {0, (lt_ptr_t) 0}
-};
-
-/* This works around a problem in FreeBSD linker */
-#ifdef FREEBSD_WORKAROUND
-static const void *lt_preloaded_setup() {
-  return lt_preloaded_symbols;
-}
-#endif
-
-#ifdef __cplusplus
-}
-#endif\
-"
-	  fi
-
-	  pic_flag_for_symtable=
-	  case $host in
-	  # compiling the symbol table file with pic_flag works around
-	  # a FreeBSD bug that causes programs to crash when -lm is
-	  # linked before any other PIC object.  But we must not use
-	  # pic_flag when linking with -static.  The problem exists in
-	  # FreeBSD 2.2.6 and is fixed in FreeBSD 3.1.
-	  *-*-freebsd2*|*-*-freebsd3.0*|*-*-freebsdelf3.0*)
-	    case "$compile_command " in
-	    *" -static "*) ;;
-	    *) pic_flag_for_symtable=" $pic_flag -DPIC -DFREEBSD_WORKAROUND";;
-	    esac;;
-	  *-*-hpux*)
-	    case "$compile_command " in
-	    *" -static "*) ;;
-	    *) pic_flag_for_symtable=" $pic_flag -DPIC";;
-	    esac
-	  esac
-
-	  # Now compile the dynamic symbol file.
-	  $show "(cd $output_objdir && $CC -c$no_builtin_flag$pic_flag_for_symtable \"$dlsyms\")"
-	  $run eval '(cd $output_objdir && $CC -c$no_builtin_flag$pic_flag_for_symtable "$dlsyms")' || exit $?
-
-	  # Clean up the generated files.
-	  $show "$rm $output_objdir/$dlsyms $nlist ${nlist}S ${nlist}T"
-	  $run $rm "$output_objdir/$dlsyms" "$nlist" "${nlist}S" "${nlist}T"
-
-	  # Transform the symbol file into the correct name.
-	  compile_command=`$echo "X$compile_command" | $Xsed -e "s%@SYMFILE@%$output_objdir/${outputname}S.${objext}%"`
-	  finalize_command=`$echo "X$finalize_command" | $Xsed -e "s%@SYMFILE@%$output_objdir/${outputname}S.${objext}%"`
-	  ;;
-	*)
-	  $echo "$modename: unknown suffix for \`$dlsyms'" 1>&2
-	  exit 1
-	  ;;
-	esac
-      else
-	# We keep going just in case the user didn't refer to
-	# lt_preloaded_symbols.  The linker will fail if global_symbol_pipe
-	# really was required.
-
-	# Nullify the symbol file.
-	compile_command=`$echo "X$compile_command" | $Xsed -e "s% @SYMFILE@%%"`
-	finalize_command=`$echo "X$finalize_command" | $Xsed -e "s% @SYMFILE@%%"`
-      fi
-
-      if test $need_relink = no || test "$build_libtool_libs" != yes; then
-	# Replace the output file specification.
-	compile_command=`$echo "X$compile_command" | $Xsed -e 's%@OUTPUT@%'"$output"'%g'`
-	link_command="$compile_command$compile_rpath"
-
-	# We have no uninstalled library dependencies, so finalize right now.
-	$show "$link_command"
-	$run eval "$link_command"
-	status=$?
-
-	# Delete the generated files.
-	if test -n "$dlsyms"; then
-	  $show "$rm $output_objdir/${outputname}S.${objext}"
-	  $run $rm "$output_objdir/${outputname}S.${objext}"
-	fi
-
-	exit $status
-      fi
-
-      if test -n "$shlibpath_var"; then
-	# We should set the shlibpath_var
-	rpath=
-	for dir in $temp_rpath; do
-	  case $dir in
-	  [\\/]* | [A-Za-z]:[\\/]*)
-	    # Absolute path.
-	    rpath="$rpath$dir:"
-	    ;;
-	  *)
-	    # Relative path: add a thisdir entry.
-	    rpath="$rpath\$thisdir/$dir:"
-	    ;;
-	  esac
-	done
-	temp_rpath="$rpath"
-      fi
-
-      if test -n "$compile_shlibpath$finalize_shlibpath"; then
-	compile_command="$shlibpath_var=\"$compile_shlibpath$finalize_shlibpath\$$shlibpath_var\" $compile_command"
-      fi
-      if test -n "$finalize_shlibpath"; then
-	finalize_command="$shlibpath_var=\"$finalize_shlibpath\$$shlibpath_var\" $finalize_command"
-      fi
-
-      compile_var=
-      finalize_var=
-      if test -n "$runpath_var"; then
-	if test -n "$perm_rpath"; then
-	  # We should set the runpath_var.
-	  rpath=
-	  for dir in $perm_rpath; do
-	    rpath="$rpath$dir:"
-	  done
-	  compile_var="$runpath_var=\"$rpath\$$runpath_var\" "
-	fi
-	if test -n "$finalize_perm_rpath"; then
-	  # We should set the runpath_var.
-	  rpath=
-	  for dir in $finalize_perm_rpath; do
-	    rpath="$rpath$dir:"
-	  done
-	  finalize_var="$runpath_var=\"$rpath\$$runpath_var\" "
-	fi
-      fi
-
-      if test "$no_install" = yes; then
-	# We don't need to create a wrapper script.
-	link_command="$compile_var$compile_command$compile_rpath"
-	# Replace the output file specification.
-	link_command=`$echo "X$link_command" | $Xsed -e 's%@OUTPUT@%'"$output"'%g'`
-	# Delete the old output file.
-	$run $rm $output
-	# Link the executable and exit
-	$show "$link_command"
-	$run eval "$link_command" || exit $?
-	exit 0
-      fi
-
-      if test "$hardcode_action" = relink; then
-	# Fast installation is not supported
-	link_command="$compile_var$compile_command$compile_rpath"
-	relink_command="$finalize_var$finalize_command$finalize_rpath"
-
-	$echo "$modename: warning: this platform does not like uninstalled shared libraries" 1>&2
-	$echo "$modename: \`$output' will be relinked during installation" 1>&2
-      else
-	if test "$fast_install" != no; then
-	  link_command="$finalize_var$compile_command$finalize_rpath"
-	  if test "$fast_install" = yes; then
-	    relink_command=`$echo "X$compile_var$compile_command$compile_rpath" | $Xsed -e 's%@OUTPUT@%\$progdir/\$file%g'`
-	  else
-	    # fast_install is set to needless
-	    relink_command=
-	  fi
-	else
-	  link_command="$compile_var$compile_command$compile_rpath"
-	  relink_command="$finalize_var$finalize_command$finalize_rpath"
-	fi
-      fi
-
-      # Replace the output file specification.
-      link_command=`$echo "X$link_command" | $Xsed -e 's%@OUTPUT@%'"$output_objdir/$outputname"'%g'`
-
-      # Delete the old output files.
-      $run $rm $output $output_objdir/$outputname $output_objdir/lt-$outputname
-
-      $show "$link_command"
-      $run eval "$link_command" || exit $?
-
-      # Now create the wrapper script.
-      $show "creating $output"
-
-      # Quote the relink command for shipping.
-      if test -n "$relink_command"; then
-	# Preserve any variables that may affect compiler behavior
-	for var in $variables_saved_for_relink; do
-	  if eval test -z \"\${$var+set}\"; then
-	    relink_command="{ test -z \"\${$var+set}\" || unset $var || { $var=; export $var; }; }; $relink_command"
-	  elif eval var_value=\$$var; test -z "$var_value"; then
-	    relink_command="$var=; export $var; $relink_command"
-	  else
-	    var_value=`$echo "X$var_value" | $Xsed -e "$sed_quote_subst"`
-	    relink_command="$var=\"$var_value\"; export $var; $relink_command"
-	  fi
-	done
-	relink_command="cd `pwd`; $relink_command"
-	relink_command=`$echo "X$relink_command" | $Xsed -e "$sed_quote_subst"`
-      fi
-
-      # Quote $echo for shipping.
-      if test "X$echo" = "X$SHELL $0 --fallback-echo"; then
-	case $0 in
-	[\\/]* | [A-Za-z]:[\\/]*) qecho="$SHELL $0 --fallback-echo";;
-	*) qecho="$SHELL `pwd`/$0 --fallback-echo";;
-	esac
-	qecho=`$echo "X$qecho" | $Xsed -e "$sed_quote_subst"`
-      else
-	qecho=`$echo "X$echo" | $Xsed -e "$sed_quote_subst"`
-      fi
-
-      # Only actually do things if our run command is non-null.
-      if test -z "$run"; then
-	# win32 will think the script is a binary if it has
-	# a .exe suffix, so we strip it off here.
-	case $output in
-	  *.exe) output=`echo $output|sed 's,.exe$,,'` ;;
-	esac
-	# test for cygwin because mv fails w/o .exe extensions
-	case $host in
-	  *cygwin*) exeext=.exe ;;
-	  *) exeext= ;;
-	esac
-	$rm $output
-	trap "$rm $output; exit 1" 1 2 15
-
-	$echo > $output "\
-#! $SHELL
-
-# $output - temporary wrapper script for $objdir/$outputname
-# Generated by $PROGRAM - GNU $PACKAGE $VERSION$TIMESTAMP
-#
-# The $output program cannot be directly executed until all the libtool
-# libraries that it depends on are installed.
-#
-# This wrapper script should never be moved out of the build directory.
-# If it is, it will not operate correctly.
-
-# Sed substitution that helps us do robust quoting.  It backslashifies
-# metacharacters that are still active within double-quoted strings.
-Xsed='sed -e 1s/^X//'
-sed_quote_subst='$sed_quote_subst'
-
-# The HP-UX ksh and POSIX shell print the target directory to stdout
-# if CDPATH is set.
-if test \"\${CDPATH+set}\" = set; then CDPATH=:; export CDPATH; fi
-
-relink_command=\"$relink_command\"
-
-# This environment variable determines our operation mode.
-if test \"\$libtool_install_magic\" = \"$magic\"; then
-  # install mode needs the following variable:
-  notinst_deplibs='$notinst_deplibs'
-else
-  # When we are sourced in execute mode, \$file and \$echo are already set.
-  if test \"\$libtool_execute_magic\" != \"$magic\"; then
-    echo=\"$qecho\"
-    file=\"\$0\"
-    # Make sure echo works.
-    if test \"X\$1\" = X--no-reexec; then
-      # Discard the --no-reexec flag, and continue.
-      shift
-    elif test \"X\`(\$echo '\t') 2>/dev/null\`\" = 'X\t'; then
-      # Yippee, \$echo works!
-      :
-    else
-      # Restart under the correct shell, and then maybe \$echo will work.
-      exec $SHELL \"\$0\" --no-reexec \${1+\"\$@\"}
-    fi
-  fi\
-"
-	$echo >> $output "\
-
-  # Find the directory that this script lives in.
-  thisdir=\`\$echo \"X\$file\" | \$Xsed -e 's%/[^/]*$%%'\`
-  test \"x\$thisdir\" = \"x\$file\" && thisdir=.
-
-  # Follow symbolic links until we get to the real thisdir.
-  file=\`ls -ld \"\$file\" | sed -n 's/.*-> //p'\`
-  while test -n \"\$file\"; do
-    destdir=\`\$echo \"X\$file\" | \$Xsed -e 's%/[^/]*\$%%'\`
-
-    # If there was a directory component, then change thisdir.
-    if test \"x\$destdir\" != \"x\$file\"; then
-      case \"\$destdir\" in
-      [\\\\/]* | [A-Za-z]:[\\\\/]*) thisdir=\"\$destdir\" ;;
-      *) thisdir=\"\$thisdir/\$destdir\" ;;
-      esac
-    fi
-
-    file=\`\$echo \"X\$file\" | \$Xsed -e 's%^.*/%%'\`
-    file=\`ls -ld \"\$thisdir/\$file\" | sed -n 's/.*-> //p'\`
-  done
-
-  # Try to get the absolute directory name.
-  absdir=\`cd \"\$thisdir\" && pwd\`
-  test -n \"\$absdir\" && thisdir=\"\$absdir\"
-"
-
-	if test "$fast_install" = yes; then
-	  echo >> $output "\
-  program=lt-'$outputname'$exeext
-  progdir=\"\$thisdir/$objdir\"
-
-  if test ! -f \"\$progdir/\$program\" || \\
-     { file=\`ls -1dt \"\$progdir/\$program\" \"\$progdir/../\$program\" 2>/dev/null | sed 1q\`; \\
-       test \"X\$file\" != \"X\$progdir/\$program\"; }; then
-
-    file=\"\$\$-\$program\"
-
-    if test ! -d \"\$progdir\"; then
-      $mkdir \"\$progdir\"
-    else
-      $rm \"\$progdir/\$file\"
-    fi"
-
-	  echo >> $output "\
-
-    # relink executable if necessary
-    if test -n \"\$relink_command\"; then
-      if (eval \$relink_command); then :
-      else
-	$rm \"\$progdir/\$file\"
-	exit 1
-      fi
-    fi
-
-    $mv \"\$progdir/\$file\" \"\$progdir/\$program\" 2>/dev/null ||
-    { $rm \"\$progdir/\$program\";
-      $mv \"\$progdir/\$file\" \"\$progdir/\$program\"; }
-    $rm \"\$progdir/\$file\"
-  fi"
-	else
-	  echo >> $output "\
-  program='$outputname'
-  progdir=\"\$thisdir/$objdir\"
-"
-	fi
-
-	echo >> $output "\
-
-  if test -f \"\$progdir/\$program\"; then"
-
-	# Export our shlibpath_var if we have one.
-	if test "$shlibpath_overrides_runpath" = yes && test -n "$shlibpath_var" && test -n "$temp_rpath"; then
-	  $echo >> $output "\
-    # Add our own library path to $shlibpath_var
-    $shlibpath_var=\"$temp_rpath\$$shlibpath_var\"
-
-    # Some systems cannot cope with colon-terminated $shlibpath_var
-    # The second colon is a workaround for a bug in BeOS R4 sed
-    $shlibpath_var=\`\$echo \"X\$$shlibpath_var\" | \$Xsed -e 's/::*\$//'\`
-
-    export $shlibpath_var
-"
-	fi
-
-	# fixup the dll searchpath if we need to.
-	if test -n "$dllsearchpath"; then
-	  $echo >> $output "\
-    # Add the dll search path components to the executable PATH
-    PATH=$dllsearchpath:\$PATH
-"
-	fi
-
-	$echo >> $output "\
-    if test \"\$libtool_execute_magic\" != \"$magic\"; then
-      # Run the actual program with our arguments.
-"
-	case $host in
-	# win32 systems need to use the prog path for dll
-	# lookup to work
-	*-*-cygwin* | *-*-pw32*)
-	  $echo >> $output "\
-      exec \$progdir/\$program \${1+\"\$@\"}
-"
-	  ;;
-
-	# Backslashes separate directories on plain windows
-	*-*-mingw | *-*-os2*)
-	  $echo >> $output "\
-      exec \$progdir\\\\\$program \${1+\"\$@\"}
-"
-	  ;;
-
-	*)
-	  $echo >> $output "\
-      # Export the path to the program.
-      PATH=\"\$progdir:\$PATH\"
-      export PATH
-
-      exec \$program \${1+\"\$@\"}
-"
-	  ;;
-	esac
-	$echo >> $output "\
-      \$echo \"\$0: cannot exec \$program \${1+\"\$@\"}\"
-      exit 1
-    fi
-  else
-    # The program doesn't exist.
-    \$echo \"\$0: error: \$progdir/\$program does not exist\" 1>&2
-    \$echo \"This script is just a wrapper for \$program.\" 1>&2
-    echo \"See the $PACKAGE documentation for more information.\" 1>&2
-    exit 1
-  fi
-fi\
-"
-	chmod +x $output
-      fi
-      exit 0
-      ;;
-    esac
-
-    # See if we need to build an old-fashioned archive.
-    for oldlib in $oldlibs; do
-
-      if test "$build_libtool_libs" = convenience; then
-	oldobjs="$libobjs_save"
-	addlibs="$convenience"
-	build_libtool_libs=no
-      else
-	if test "$build_libtool_libs" = module; then
-	  oldobjs="$libobjs_save"
-	  build_libtool_libs=no
-	else
-	  oldobjs="$objs$old_deplibs "`$echo "X$libobjs_save" | $SP2NL | $Xsed -e '/\.'${libext}'$/d' -e '/\.lib$/d' -e "$lo2o" | $NL2SP`
-	fi
-	addlibs="$old_convenience"
-      fi
-
-      if test -n "$addlibs"; then
-	gentop="$output_objdir/${outputname}x"
-	$show "${rm}r $gentop"
-	$run ${rm}r "$gentop"
-	$show "mkdir $gentop"
-	$run mkdir "$gentop"
-	status=$?
-	if test $status -ne 0 && test ! -d "$gentop"; then
-	  exit $status
-	fi
-	generated="$generated $gentop"
-
-	# Add in members from convenience archives.
-	for xlib in $addlibs; do
-	  # Extract the objects.
-	  case $xlib in
-	  [\\/]* | [A-Za-z]:[\\/]*) xabs="$xlib" ;;
-	  *) xabs=`pwd`"/$xlib" ;;
-	  esac
-	  xlib=`$echo "X$xlib" | $Xsed -e 's%^.*/%%'`
-	  xdir="$gentop/$xlib"
-
-	  $show "${rm}r $xdir"
-	  $run ${rm}r "$xdir"
-	  $show "mkdir $xdir"
-	  $run mkdir "$xdir"
-	  status=$?
-	  if test $status -ne 0 && test ! -d "$xdir"; then
-	    exit $status
-	  fi
-	  $show "(cd $xdir && $AR x $xabs)"
-	  $run eval "(cd \$xdir && $AR x \$xabs)" || exit $?
-
-	  oldobjs="$oldobjs "`find $xdir -name \*.${objext} -print -o -name \*.lo -print | $NL2SP`
-	done
-      fi
-
-      # Do each command in the archive commands.
-      if test -n "$old_archive_from_new_cmds" && test "$build_libtool_libs" = yes; then
-	eval cmds=\"$old_archive_from_new_cmds\"
-      else
-	# Ensure that we have .o objects in place in case we decided
-	# not to build a shared library, and have fallen back to building
-	# static libs even though --disable-static was passed!
-	for oldobj in $oldobjs; do
-	  if test ! -f $oldobj; then
-	    xdir=`$echo "X$oldobj" | $Xsed -e 's%/[^/]*$%%'`
-	    if test "X$xdir" = "X$oldobj"; then
-	      xdir="."
-	    else
-	      xdir="$xdir"
-	    fi
-	    baseobj=`$echo "X$oldobj" | $Xsed -e 's%^.*/%%'`
-	    obj=`$echo "X$baseobj" | $Xsed -e "$o2lo"`
-	    $show "(cd $xdir && ${LN_S} $obj $baseobj)"
-	    $run eval '(cd $xdir && ${LN_S} $obj $baseobj)' || exit $?
-	  fi
-	done
-
-	eval cmds=\"$old_archive_cmds\"
-      fi
-      IFS="${IFS= 	}"; save_ifs="$IFS"; IFS='~'
-      for cmd in $cmds; do
-	IFS="$save_ifs"
-	$show "$cmd"
-	$run eval "$cmd" || exit $?
-      done
-      IFS="$save_ifs"
-    done
-
-    if test -n "$generated"; then
-      $show "${rm}r$generated"
-      $run ${rm}r$generated
-    fi
-
-    # Now create the libtool archive.
-    case $output in
-    *.la)
-      old_library=
-      test "$build_old_libs" = yes && old_library="$libname.$libext"
-      $show "creating $output"
-
-      # Preserve any variables that may affect compiler behavior
-      for var in $variables_saved_for_relink; do
-	if eval test -z \"\${$var+set}\"; then
-	  relink_command="{ test -z \"\${$var+set}\" || unset $var || { $var=; export $var; }; }; $relink_command"
-	elif eval var_value=\$$var; test -z "$var_value"; then
-	  relink_command="$var=; export $var; $relink_command"
-	else
-	  var_value=`$echo "X$var_value" | $Xsed -e "$sed_quote_subst"`
-	  relink_command="$var=\"$var_value\"; export $var; $relink_command"
-	fi
-      done
-      # Quote the link command for shipping.
-      relink_command="cd `pwd`; $SHELL $0 --mode=relink $libtool_args @inst_prefix_dir@"
-      relink_command=`$echo "X$relink_command" | $Xsed -e "$sed_quote_subst"`
-
-      # Only create the output if not a dry run.
-      if test -z "$run"; then
-	for installed in no yes; do
-	  if test "$installed" = yes; then
-	    if test -z "$install_libdir"; then
-	      break
-	    fi
-	    output="$output_objdir/$outputname"i
-	    # Replace all uninstalled libtool libraries with the installed ones
-	    newdependency_libs=
-	    for deplib in $dependency_libs; do
-	      case $deplib in
-	      *.la)
-		name=`$echo "X$deplib" | $Xsed -e 's%^.*/%%'`
-		eval libdir=`sed -n -e 's/^libdir=\(.*\)$/\1/p' $deplib`
-		if test -z "$libdir"; then
-		  $echo "$modename: \`$deplib' is not a valid libtool archive" 1>&2
-		  exit 1
-		fi
-		newdependency_libs="$newdependency_libs $libdir/$name"
-		;;
-	      *) newdependency_libs="$newdependency_libs $deplib" ;;
-	      esac
-	    done
-	    dependency_libs="$newdependency_libs"
-	    newdlfiles=
-	    for lib in $dlfiles; do
-	      name=`$echo "X$lib" | $Xsed -e 's%^.*/%%'`
-	      eval libdir=`sed -n -e 's/^libdir=\(.*\)$/\1/p' $lib`
-	      if test -z "$libdir"; then
-		$echo "$modename: \`$lib' is not a valid libtool archive" 1>&2
-		exit 1
-	      fi
-	      newdlfiles="$newdlfiles $libdir/$name"
-	    done
-	    dlfiles="$newdlfiles"
-	    newdlprefiles=
-	    for lib in $dlprefiles; do
-	      name=`$echo "X$lib" | $Xsed -e 's%^.*/%%'`
-	      eval libdir=`sed -n -e 's/^libdir=\(.*\)$/\1/p' $lib`
-	      if test -z "$libdir"; then
-		$echo "$modename: \`$lib' is not a valid libtool archive" 1>&2
-		exit 1
-	      fi
-	      newdlprefiles="$newdlprefiles $libdir/$name"
-	    done
-	    dlprefiles="$newdlprefiles"
-	  fi
-	  $rm $output
-	  # place dlname in correct position for cygwin
-	  tdlname=$dlname
-	  case $host,$output,$installed,$module,$dlname in
-	    *cygwin*,*lai,yes,no,*.dll) tdlname=../bin/$dlname ;;
-	  esac
-	  $echo > $output "\
-# $outputname - a libtool library file
-# Generated by $PROGRAM - GNU $PACKAGE $VERSION$TIMESTAMP
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# The name that we can dlopen(3).
-dlname='$tdlname'
-
-# Names of this library.
-library_names='$library_names'
-
-# The name of the static archive.
-old_library='$old_library'
-
-# Libraries that this one depends upon.
-dependency_libs='$dependency_libs'
-
-# Version information for $libname.
-current=$current
-age=$age
-revision=$revision
-
-# Is this an already installed library?
-installed=$installed
-
-# Files to dlopen/dlpreopen
-dlopen='$dlfiles'
-dlpreopen='$dlprefiles'
-
-# Directory that this library needs to be installed in:
-libdir='$install_libdir'"
-	  if test "$installed" = no && test $need_relink = yes; then
-	    $echo >> $output "\
-relink_command=\"$relink_command\""
-	  fi
-	done
-      fi
-
-      # Do a symbolic link so that the libtool archive can be found in
-      # LD_LIBRARY_PATH before the program is installed.
-      $show "(cd $output_objdir && $rm $outputname && $LN_S ../$outputname $outputname)"
-      $run eval '(cd $output_objdir && $rm $outputname && $LN_S ../$outputname $outputname)' || exit $?
-      ;;
-    esac
-    exit 0
-    ;;
-
-  # libtool install mode
-  install)
-    modename="$modename: install"
-
-    # There may be an optional sh(1) argument at the beginning of
-    # install_prog (especially on Windows NT).
-    if test "$nonopt" = "$SHELL" || test "$nonopt" = /bin/sh ||
-       # Allow the use of GNU shtool's install command.
-       $echo "X$nonopt" | $Xsed | grep shtool > /dev/null; then
-      # Aesthetically quote it.
-      arg=`$echo "X$nonopt" | $Xsed -e "$sed_quote_subst"`
-      case $arg in
-      *[\[\~\#\^\&\*\(\)\{\}\|\;\<\>\?\'\ \	]*|*]*)
-	arg="\"$arg\""
-	;;
-      esac
-      install_prog="$arg "
-      arg="$1"
-      shift
-    else
-      install_prog=
-      arg="$nonopt"
-    fi
-
-    # The real first argument should be the name of the installation program.
-    # Aesthetically quote it.
-    arg=`$echo "X$arg" | $Xsed -e "$sed_quote_subst"`
-    case $arg in
-    *[\[\~\#\^\&\*\(\)\{\}\|\;\<\>\?\'\ \	]*|*]*)
-      arg="\"$arg\""
-      ;;
-    esac
-    install_prog="$install_prog$arg"
-
-    # We need to accept at least all the BSD install flags.
-    dest=
-    files=
-    opts=
-    prev=
-    install_type=
-    isdir=no
-    stripme=
-    for arg
-    do
-      if test -n "$dest"; then
-	files="$files $dest"
-	dest="$arg"
-	continue
-      fi
-
-      case $arg in
-      -d) isdir=yes ;;
-      -f) prev="-f" ;;
-      -g) prev="-g" ;;
-      -m) prev="-m" ;;
-      -o) prev="-o" ;;
-      -s)
-	stripme=" -s"
-	continue
-	;;
-      -*) ;;
-
-      *)
-	# If the previous option needed an argument, then skip it.
-	if test -n "$prev"; then
-	  prev=
-	else
-	  dest="$arg"
-	  continue
-	fi
-	;;
-      esac
-
-      # Aesthetically quote the argument.
-      arg=`$echo "X$arg" | $Xsed -e "$sed_quote_subst"`
-      case $arg in
-      *[\[\~\#\^\&\*\(\)\{\}\|\;\<\>\?\'\ \	]*|*]*)
-	arg="\"$arg\""
-	;;
-      esac
-      install_prog="$install_prog $arg"
-    done
-
-    if test -z "$install_prog"; then
-      $echo "$modename: you must specify an install program" 1>&2
-      $echo "$help" 1>&2
-      exit 1
-    fi
-
-    if test -n "$prev"; then
-      $echo "$modename: the \`$prev' option requires an argument" 1>&2
-      $echo "$help" 1>&2
-      exit 1
-    fi
-
-    if test -z "$files"; then
-      if test -z "$dest"; then
-	$echo "$modename: no file or destination specified" 1>&2
-      else
-	$echo "$modename: you must specify a destination" 1>&2
-      fi
-      $echo "$help" 1>&2
-      exit 1
-    fi
-
-    # Strip any trailing slash from the destination.
-    dest=`$echo "X$dest" | $Xsed -e 's%/$%%'`
-
-    # Check to see that the destination is a directory.
-    test -d "$dest" && isdir=yes
-    if test "$isdir" = yes; then
-      destdir="$dest"
-      destname=
-    else
-      destdir=`$echo "X$dest" | $Xsed -e 's%/[^/]*$%%'`
-      test "X$destdir" = "X$dest" && destdir=.
-      destname=`$echo "X$dest" | $Xsed -e 's%^.*/%%'`
-
-      # Not a directory, so check to see that there is only one file specified.
-      set dummy $files
-      if test $# -gt 2; then
-	$echo "$modename: \`$dest' is not a directory" 1>&2
-	$echo "$help" 1>&2
-	exit 1
-      fi
-    fi
-    case $destdir in
-    [\\/]* | [A-Za-z]:[\\/]*) ;;
-    *)
-      for file in $files; do
-	case $file in
-	*.lo) ;;
-	*)
-	  $echo "$modename: \`$destdir' must be an absolute directory name" 1>&2
-	  $echo "$help" 1>&2
-	  exit 1
-	  ;;
-	esac
-      done
-      ;;
-    esac
-
-    # This variable tells wrapper scripts just to set variables rather
-    # than running their programs.
-    libtool_install_magic="$magic"
-
-    staticlibs=
-    future_libdirs=
-    current_libdirs=
-    for file in $files; do
-
-      # Do each installation.
-      case $file in
-      *.$libext)
-	# Do the static libraries later.
-	staticlibs="$staticlibs $file"
-	;;
-
-      *.la)
-	# Check to see that this really is a libtool archive.
-	if (sed -e '2q' $file | egrep "^# Generated by .*$PACKAGE") >/dev/null 2>&1; then :
-	else
-	  $echo "$modename: \`$file' is not a valid libtool archive" 1>&2
-	  $echo "$help" 1>&2
-	  exit 1
-	fi
-
-	library_names=
-	old_library=
-	relink_command=
-	# If there is no directory component, then add one.
-	case $file in
-	*/* | *\\*) . $file ;;
-	*) . ./$file ;;
-	esac
-
-	# Add the libdir to current_libdirs if it is the destination.
-	if test "X$destdir" = "X$libdir"; then
-	  case "$current_libdirs " in
-	  *" $libdir "*) ;;
-	  *) current_libdirs="$current_libdirs $libdir" ;;
-	  esac
-	else
-	  # Note the libdir as a future libdir.
-	  case "$future_libdirs " in
-	  *" $libdir "*) ;;
-	  *) future_libdirs="$future_libdirs $libdir" ;;
-	  esac
-	fi
-
-	dir=`$echo "X$file" | $Xsed -e 's%/[^/]*$%%'`/
-	test "X$dir" = "X$file/" && dir=
-	dir="$dir$objdir"
-
-	if test -n "$relink_command"; then
-	  # Determine the prefix the user has applied to our future dir.
-	  inst_prefix_dir=`$echo "$destdir" | sed "s%$libdir\$%%"`
-
-	  # Don't allow the user to place us outside of our expected
-	  # location b/c this prevents finding dependent libraries that
-	  # are installed to the same prefix.
-	  if test "$inst_prefix_dir" = "$destdir"; then
-	    $echo "$modename: error: cannot install \`$file' to a directory not ending in $libdir" 1>&2
-	    exit 1
-	  fi
-
-	  if test -n "$inst_prefix_dir"; then
-	    # Stick the inst_prefix_dir data into the link command.
-	    relink_command=`$echo "$relink_command" | sed "s%@inst_prefix_dir@%-inst-prefix-dir $inst_prefix_dir%"`
-	  else
-	    relink_command=`$echo "$relink_command" | sed "s%@inst_prefix_dir@%%"`
-	  fi
-
-	  $echo "$modename: warning: relinking \`$file'" 1>&2
-	  $show "$relink_command"
-	  if $run eval "$relink_command"; then :
-	  else
-	    $echo "$modename: error: relink \`$file' with the above command before installing it" 1>&2
-	    exit 1
-	  fi
-	fi
-
-	# See the names of the shared library.
-	set dummy $library_names
-	if test -n "$2"; then
-	  realname="$2"
-	  shift
-	  shift
-
-	  srcname="$realname"
-	  test -n "$relink_command" && srcname="$realname"T
-
-	  # Install the shared library and build the symlinks.
-	  $show "$install_prog $dir/$srcname $destdir/$realname"
-	  $run eval "$install_prog $dir/$srcname $destdir/$realname" || exit $?
-	  if test -n "$stripme" && test -n "$striplib"; then
-	    $show "$striplib $destdir/$realname"
-	    $run eval "$striplib $destdir/$realname" || exit $?
-	  fi
-
-	  if test $# -gt 0; then
-	    # Delete the old symlinks, and create new ones.
-	    for linkname
-	    do
-	      if test "$linkname" != "$realname"; then
-		$show "(cd $destdir && $rm $linkname && $LN_S $realname $linkname)"
-		$run eval "(cd $destdir && $rm $linkname && $LN_S $realname $linkname)"
-	      fi
-	    done
-	  fi
-
-	  # Do each command in the postinstall commands.
-	  lib="$destdir/$realname"
-	  eval cmds=\"$postinstall_cmds\"
-	  IFS="${IFS= 	}"; save_ifs="$IFS"; IFS='~'
-	  for cmd in $cmds; do
-	    IFS="$save_ifs"
-	    $show "$cmd"
-	    $run eval "$cmd" || exit $?
-	  done
-	  IFS="$save_ifs"
-	fi
-
-	# Install the pseudo-library for information purposes.
-	name=`$echo "X$file" | $Xsed -e 's%^.*/%%'`
-	instname="$dir/$name"i
-	$show "$install_prog $instname $destdir/$name"
-	$run eval "$install_prog $instname $destdir/$name" || exit $?
-
-	# Maybe install the static library, too.
-	test -n "$old_library" && staticlibs="$staticlibs $dir/$old_library"
-	;;
-
-      *.lo)
-	# Install (i.e. copy) a libtool object.
-
-	# Figure out destination file name, if it wasn't already specified.
-	if test -n "$destname"; then
-	  destfile="$destdir/$destname"
-	else
-	  destfile=`$echo "X$file" | $Xsed -e 's%^.*/%%'`
-	  destfile="$destdir/$destfile"
-	fi
-
-	# Deduce the name of the destination old-style object file.
-	case $destfile in
-	*.lo)
-	  staticdest=`$echo "X$destfile" | $Xsed -e "$lo2o"`
-	  ;;
-	*.$objext)
-	  staticdest="$destfile"
-	  destfile=
-	  ;;
-	*)
-	  $echo "$modename: cannot copy a libtool object to \`$destfile'" 1>&2
-	  $echo "$help" 1>&2
-	  exit 1
-	  ;;
-	esac
-
-	# Install the libtool object if requested.
-	if test -n "$destfile"; then
-	  $show "$install_prog $file $destfile"
-	  $run eval "$install_prog $file $destfile" || exit $?
-	fi
-
-	# Install the old object if enabled.
-	if test "$build_old_libs" = yes; then
-	  # Deduce the name of the old-style object file.
-	  staticobj=`$echo "X$file" | $Xsed -e "$lo2o"`
-
-	  $show "$install_prog $staticobj $staticdest"
-	  $run eval "$install_prog \$staticobj \$staticdest" || exit $?
-	fi
-	exit 0
-	;;
-
-      *)
-	# Figure out destination file name, if it wasn't already specified.
-	if test -n "$destname"; then
-	  destfile="$destdir/$destname"
-	else
-	  destfile=`$echo "X$file" | $Xsed -e 's%^.*/%%'`
-	  destfile="$destdir/$destfile"
-	fi
-
-	# Do a test to see if this is really a libtool program.
-	if (sed -e '4q' $file | egrep "^# Generated by .*$PACKAGE") >/dev/null 2>&1; then
-	  notinst_deplibs=
-	  relink_command=
-
-	  # If there is no directory component, then add one.
-	  case $file in
-	  */* | *\\*) . $file ;;
-	  *) . ./$file ;;
-	  esac
-
-	  # Check the variables that should have been set.
-	  if test -z "$notinst_deplibs"; then
-	    $echo "$modename: invalid libtool wrapper script \`$file'" 1>&2
-	    exit 1
-	  fi
-
-	  finalize=yes
-	  for lib in $notinst_deplibs; do
-	    # Check to see that each library is installed.
-	    libdir=
-	    if test -f "$lib"; then
-	      # If there is no directory component, then add one.
-	      case $lib in
-	      */* | *\\*) . $lib ;;
-	      *) . ./$lib ;;
-	      esac
-	    fi
-	    libfile="$libdir/"`$echo "X$lib" | $Xsed -e 's%^.*/%%g'` ### testsuite: skip nested quoting test
-	    if test -n "$libdir" && test ! -f "$libfile"; then
-	      $echo "$modename: warning: \`$lib' has not been installed in \`$libdir'" 1>&2
-	      finalize=no
-	    fi
-	  done
-
-	  relink_command=
-	  # If there is no directory component, then add one.
-	  case $file in
-	  */* | *\\*) . $file ;;
-	  *) . ./$file ;;
-	  esac
-
-	  outputname=
-	  if test "$fast_install" = no && test -n "$relink_command"; then
-	    if test "$finalize" = yes && test -z "$run"; then
-	      tmpdir="/tmp"
-	      test -n "$TMPDIR" && tmpdir="$TMPDIR"
-              tmpdir=`mktemp -d $tmpdir/libtool-XXXXXX 2> /dev/null`
-              if test $? = 0 ; then :
-              else
-                tmpdir="$tmpdir/libtool-$$"
-              fi
-	      if $mkdir -p "$tmpdir" && chmod 700 "$tmpdir"; then :
-	      else
-		$echo "$modename: error: cannot create temporary directory \`$tmpdir'" 1>&2
-		continue
-	      fi
-	      file=`$echo "X$file" | $Xsed -e 's%^.*/%%'`
-	      outputname="$tmpdir/$file"
-	      # Replace the output file specification.
-	      relink_command=`$echo "X$relink_command" | $Xsed -e 's%@OUTPUT@%'"$outputname"'%g'`
-
-	      $show "$relink_command"
-	      if $run eval "$relink_command"; then :
-	      else
-		$echo "$modename: error: relink \`$file' with the above command before installing it" 1>&2
-		${rm}r "$tmpdir"
-		continue
-	      fi
-	      file="$outputname"
-	    else
-	      $echo "$modename: warning: cannot relink \`$file'" 1>&2
-	    fi
-	  else
-	    # Install the binary that we compiled earlier.
-	    file=`$echo "X$file" | $Xsed -e "s%\([^/]*\)$%$objdir/\1%"`
-	  fi
-	fi
-
-	# remove .exe since cygwin /usr/bin/install will append another
-	# one anyways
-	case $install_prog,$host in
-	/usr/bin/install*,*cygwin*)
-	  case $file:$destfile in
-	  *.exe:*.exe)
-	    # this is ok
-	    ;;
-	  *.exe:*)
-	    destfile=$destfile.exe
-	    ;;
-	  *:*.exe)
-	    destfile=`echo $destfile | sed -e 's,.exe$,,'`
-	    ;;
-	  esac
-	  ;;
-	esac
-	$show "$install_prog$stripme $file $destfile"
-	$run eval "$install_prog\$stripme \$file \$destfile" || exit $?
-	test -n "$outputname" && ${rm}r "$tmpdir"
-	;;
-      esac
-    done
-
-    for file in $staticlibs; do
-      name=`$echo "X$file" | $Xsed -e 's%^.*/%%'`
-
-      # Set up the ranlib parameters.
-      oldlib="$destdir/$name"
-
-      $show "$install_prog $file $oldlib"
-      $run eval "$install_prog \$file \$oldlib" || exit $?
-
-      if test -n "$stripme" && test -n "$striplib"; then
-	$show "$old_striplib $oldlib"
-	$run eval "$old_striplib $oldlib" || exit $?
-      fi
-
-      # Do each command in the postinstall commands.
-      eval cmds=\"$old_postinstall_cmds\"
-      IFS="${IFS= 	}"; save_ifs="$IFS"; IFS='~'
-      for cmd in $cmds; do
-	IFS="$save_ifs"
-	$show "$cmd"
-	$run eval "$cmd" || exit $?
-      done
-      IFS="$save_ifs"
-    done
-
-    if test -n "$future_libdirs"; then
-      $echo "$modename: warning: remember to run \`$progname --finish$future_libdirs'" 1>&2
-    fi
-
-    if test -n "$current_libdirs"; then
-      # Maybe just do a dry run.
-      test -n "$run" && current_libdirs=" -n$current_libdirs"
-      exec $SHELL $0 --finish$current_libdirs
-      exit 1
-    fi
-
-    exit 0
-    ;;
-
-  # libtool finish mode
-  finish)
-    modename="$modename: finish"
-    libdirs="$nonopt"
-    admincmds=
-
-    if test -n "$finish_cmds$finish_eval" && test -n "$libdirs"; then
-      for dir
-      do
-	libdirs="$libdirs $dir"
-      done
-
-      for libdir in $libdirs; do
-	if test -n "$finish_cmds"; then
-	  # Do each command in the finish commands.
-	  eval cmds=\"$finish_cmds\"
-	  IFS="${IFS= 	}"; save_ifs="$IFS"; IFS='~'
-	  for cmd in $cmds; do
-	    IFS="$save_ifs"
-	    $show "$cmd"
-	    $run eval "$cmd" || admincmds="$admincmds
-       $cmd"
-	  done
-	  IFS="$save_ifs"
-	fi
-	if test -n "$finish_eval"; then
-	  # Do the single finish_eval.
-	  eval cmds=\"$finish_eval\"
-	  $run eval "$cmds" || admincmds="$admincmds
-       $cmds"
-	fi
-      done
-    fi
-
-    # Exit here if they wanted silent mode.
-    test "$show" = ":" && exit 0
-
-    echo "----------------------------------------------------------------------"
-    echo "Libraries have been installed in:"
-    for libdir in $libdirs; do
-      echo "   $libdir"
-    done
-    echo
-    echo "If you ever happen to want to link against installed libraries"
-    echo "in a given directory, LIBDIR, you must either use libtool, and"
-    echo "specify the full pathname of the library, or use the \`-LLIBDIR'"
-    echo "flag during linking and do at least one of the following:"
-    if test -n "$shlibpath_var"; then
-      echo "   - add LIBDIR to the \`$shlibpath_var' environment variable"
-      echo "     during execution"
-    fi
-    if test -n "$runpath_var"; then
-      echo "   - add LIBDIR to the \`$runpath_var' environment variable"
-      echo "     during linking"
-    fi
-    if test -n "$hardcode_libdir_flag_spec"; then
-      libdir=LIBDIR
-      eval flag=\"$hardcode_libdir_flag_spec\"
-
-      echo "   - use the \`$flag' linker flag"
-    fi
-    if test -n "$admincmds"; then
-      echo "   - have your system administrator run these commands:$admincmds"
-    fi
-    if test -f /etc/ld.so.conf; then
-      echo "   - have your system administrator add LIBDIR to \`/etc/ld.so.conf'"
-    fi
-    echo
-    echo "See any operating system documentation about shared libraries for"
-    echo "more information, such as the ld(1) and ld.so(8) manual pages."
-    echo "----------------------------------------------------------------------"
-    exit 0
-    ;;
-
-  # libtool execute mode
-  execute)
-    modename="$modename: execute"
-
-    # The first argument is the command name.
-    cmd="$nonopt"
-    if test -z "$cmd"; then
-      $echo "$modename: you must specify a COMMAND" 1>&2
-      $echo "$help"
-      exit 1
-    fi
-
-    # Handle -dlopen flags immediately.
-    for file in $execute_dlfiles; do
-      if test ! -f "$file"; then
-	$echo "$modename: \`$file' is not a file" 1>&2
-	$echo "$help" 1>&2
-	exit 1
-      fi
-
-      dir=
-      case $file in
-      *.la)
-	# Check to see that this really is a libtool archive.
-	if (sed -e '2q' $file | egrep "^# Generated by .*$PACKAGE") >/dev/null 2>&1; then :
-	else
-	  $echo "$modename: \`$lib' is not a valid libtool archive" 1>&2
-	  $echo "$help" 1>&2
-	  exit 1
-	fi
-
-	# Read the libtool library.
-	dlname=
-	library_names=
-
-	# If there is no directory component, then add one.
-	case $file in
-	*/* | *\\*) . $file ;;
-	*) . ./$file ;;
-	esac
-
-	# Skip this library if it cannot be dlopened.
-	if test -z "$dlname"; then
-	  # Warn if it was a shared library.
-	  test -n "$library_names" && $echo "$modename: warning: \`$file' was not linked with \`-export-dynamic'"
-	  continue
-	fi
-
-	dir=`$echo "X$file" | $Xsed -e 's%/[^/]*$%%'`
-	test "X$dir" = "X$file" && dir=.
-
-	if test -f "$dir/$objdir/$dlname"; then
-	  dir="$dir/$objdir"
-	else
-	  $echo "$modename: cannot find \`$dlname' in \`$dir' or \`$dir/$objdir'" 1>&2
-	  exit 1
-	fi
-	;;
-
-      *.lo)
-	# Just add the directory containing the .lo file.
-	dir=`$echo "X$file" | $Xsed -e 's%/[^/]*$%%'`
-	test "X$dir" = "X$file" && dir=.
-	;;
-
-      *)
-	$echo "$modename: warning \`-dlopen' is ignored for non-libtool libraries and objects" 1>&2
-	continue
-	;;
-      esac
-
-      # Get the absolute pathname.
-      absdir=`cd "$dir" && pwd`
-      test -n "$absdir" && dir="$absdir"
-
-      # Now add the directory to shlibpath_var.
-      if eval "test -z \"\$$shlibpath_var\""; then
-	eval "$shlibpath_var=\"\$dir\""
-      else
-	eval "$shlibpath_var=\"\$dir:\$$shlibpath_var\""
-      fi
-    done
-
-    # This variable tells wrapper scripts just to set shlibpath_var
-    # rather than running their programs.
-    libtool_execute_magic="$magic"
-
-    # Check if any of the arguments is a wrapper script.
-    args=
-    for file
-    do
-      case $file in
-      -*) ;;
-      *)
-	# Do a test to see if this is really a libtool program.
-	if (sed -e '4q' $file | egrep "^# Generated by .*$PACKAGE") >/dev/null 2>&1; then
-	  # If there is no directory component, then add one.
-	  case $file in
-	  */* | *\\*) . $file ;;
-	  *) . ./$file ;;
-	  esac
-
-	  # Transform arg to wrapped name.
-	  file="$progdir/$program"
-	fi
-	;;
-      esac
-      # Quote arguments (to preserve shell metacharacters).
-      file=`$echo "X$file" | $Xsed -e "$sed_quote_subst"`
-      args="$args \"$file\""
-    done
-
-    if test -z "$run"; then
-      if test -n "$shlibpath_var"; then
-	# Export the shlibpath_var.
-	eval "export $shlibpath_var"
-      fi
-
-      # Restore saved enviroment variables
-      if test "${save_LC_ALL+set}" = set; then
-	LC_ALL="$save_LC_ALL"; export LC_ALL
-      fi
-      if test "${save_LANG+set}" = set; then
-	LANG="$save_LANG"; export LANG
-      fi
-
-      # Now actually exec the command.
-      eval "exec \$cmd$args"
-
-      $echo "$modename: cannot exec \$cmd$args"
-      exit 1
-    else
-      # Display what would be done.
-      if test -n "$shlibpath_var"; then
-	eval "\$echo \"\$shlibpath_var=\$$shlibpath_var\""
-	$echo "export $shlibpath_var"
-      fi
-      $echo "$cmd$args"
-      exit 0
-    fi
-    ;;
-
-  # libtool clean and uninstall mode
-  clean | uninstall)
-    modename="$modename: $mode"
-    rm="$nonopt"
-    files=
-    rmforce=
-    exit_status=0
-
-    # This variable tells wrapper scripts just to set variables rather
-    # than running their programs.
-    libtool_install_magic="$magic"
-
-    for arg
-    do
-      case $arg in
-      -f) rm="$rm $arg"; rmforce=yes ;;
-      -*) rm="$rm $arg" ;;
-      *) files="$files $arg" ;;
-      esac
-    done
-
-    if test -z "$rm"; then
-      $echo "$modename: you must specify an RM program" 1>&2
-      $echo "$help" 1>&2
-      exit 1
-    fi
-
-    rmdirs=
-
-    for file in $files; do
-      dir=`$echo "X$file" | $Xsed -e 's%/[^/]*$%%'`
-      if test "X$dir" = "X$file"; then
-	dir=.
-	objdir="$objdir"
-      else
-	objdir="$dir/$objdir"
-      fi
-      name=`$echo "X$file" | $Xsed -e 's%^.*/%%'`
-      test $mode = uninstall && objdir="$dir"
-
-      # Remember objdir for removal later, being careful to avoid duplicates
-      if test $mode = clean; then
-	case " $rmdirs " in
-	  *" $objdir "*) ;;
-	  *) rmdirs="$rmdirs $objdir" ;;
-	esac
-      fi
-
-      # Don't error if the file doesn't exist and rm -f was used.
-      if (test -L "$file") >/dev/null 2>&1 \
-        || (test -h "$file") >/dev/null 2>&1 \
-	|| test -f "$file"; then
-        :
-      elif test -d "$file"; then
-        exit_status=1
-	continue
-      elif test "$rmforce" = yes; then
-        continue
-      fi
-
-      rmfiles="$file"
-
-      case $name in
-      *.la)
-	# Possibly a libtool archive, so verify it.
-	if (sed -e '2q' $file | egrep "^# Generated by .*$PACKAGE") >/dev/null 2>&1; then
-	  . $dir/$name
-
-	  # Delete the libtool libraries and symlinks.
-	  for n in $library_names; do
-	    rmfiles="$rmfiles $objdir/$n"
-	  done
-	  test -n "$old_library" && rmfiles="$rmfiles $objdir/$old_library"
-	  test $mode = clean && rmfiles="$rmfiles $objdir/$name $objdir/${name}i"
-
-	  if test $mode = uninstall; then
-	    if test -n "$library_names"; then
-	      # Do each command in the postuninstall commands.
-	      eval cmds=\"$postuninstall_cmds\"
-	      IFS="${IFS= 	}"; save_ifs="$IFS"; IFS='~'
-	      for cmd in $cmds; do
-		IFS="$save_ifs"
-		$show "$cmd"
-		$run eval "$cmd"
-		if test $? != 0 && test "$rmforce" != yes; then
-		  exit_status=1
-		fi
-	      done
-	      IFS="$save_ifs"
-	    fi
-
-	    if test -n "$old_library"; then
-	      # Do each command in the old_postuninstall commands.
-	      eval cmds=\"$old_postuninstall_cmds\"
-	      IFS="${IFS= 	}"; save_ifs="$IFS"; IFS='~'
-	      for cmd in $cmds; do
-		IFS="$save_ifs"
-		$show "$cmd"
-		$run eval "$cmd"
-		if test $? != 0 && test "$rmforce" != yes; then
-		  exit_status=1
-		fi
-	      done
-	      IFS="$save_ifs"
-	    fi
-	    # FIXME: should reinstall the best remaining shared library.
-	  fi
-	fi
-	;;
-
-      *.lo)
-	if test "$build_old_libs" = yes; then
-	  oldobj=`$echo "X$name" | $Xsed -e "$lo2o"`
-	  rmfiles="$rmfiles $dir/$oldobj"
-	fi
-	;;
-
-      *)
-	# Do a test to see if this is a libtool program.
-	if test $mode = clean &&
-	   (sed -e '4q' $file | egrep "^# Generated by .*$PACKAGE") >/dev/null 2>&1; then
-	  relink_command=
-	  . $dir/$file
-
-	  rmfiles="$rmfiles $objdir/$name $objdir/${name}S.${objext}"
-	  if test "$fast_install" = yes && test -n "$relink_command"; then
-	    rmfiles="$rmfiles $objdir/lt-$name"
-	  fi
-	fi
-	;;
-      esac
-      $show "$rm $rmfiles"
-      $run $rm $rmfiles || exit_status=1
-    done
-
-    # Try to remove the ${objdir}s in the directories where we deleted files
-    for dir in $rmdirs; do
-      if test -d "$dir"; then
-	$show "rmdir $dir"
-	$run rmdir $dir >/dev/null 2>&1
-      fi
-    done
-
-    exit $exit_status
-    ;;
-
-  "")
-    $echo "$modename: you must specify a MODE" 1>&2
-    $echo "$generic_help" 1>&2
-    exit 1
-    ;;
-  esac
-
-  $echo "$modename: invalid operation mode \`$mode'" 1>&2
-  $echo "$generic_help" 1>&2
-  exit 1
-fi # test -z "$show_help"
-
-# We need to display help for each of the modes.
-case $mode in
-"") $echo \
-"Usage: $modename [OPTION]... [MODE-ARG]...
-
-Provide generalized library-building support services.
-
-    --config          show all configuration variables
-    --debug           enable verbose shell tracing
--n, --dry-run         display commands without modifying any files
-    --features        display basic configuration information and exit
-    --finish          same as \`--mode=finish'
-    --help            display this help message and exit
-    --mode=MODE       use operation mode MODE [default=inferred from MODE-ARGS]
-    --quiet           same as \`--silent'
-    --silent          don't print informational messages
-    --version         print version information
-
-MODE must be one of the following:
-
-      clean           remove files from the build directory
-      compile         compile a source file into a libtool object
-      execute         automatically set library path, then run a program
-      finish          complete the installation of libtool libraries
-      install         install libraries or executables
-      link            create a library or an executable
-      uninstall       remove libraries from an installed directory
-
-MODE-ARGS vary depending on the MODE.  Try \`$modename --help --mode=MODE' for
-a more detailed description of MODE."
-  exit 0
-  ;;
-
-clean)
-  $echo \
-"Usage: $modename [OPTION]... --mode=clean RM [RM-OPTION]... FILE...
-
-Remove files from the build directory.
-
-RM is the name of the program to use to delete files associated with each FILE
-(typically \`/bin/rm').  RM-OPTIONS are options (such as \`-f') to be passed
-to RM.
-
-If FILE is a libtool library, object or program, all the files associated
-with it are deleted. Otherwise, only FILE itself is deleted using RM."
-  ;;
-
-compile)
-  $echo \
-"Usage: $modename [OPTION]... --mode=compile COMPILE-COMMAND... SOURCEFILE
-
-Compile a source file into a libtool library object.
-
-This mode accepts the following additional options:
-
-  -o OUTPUT-FILE    set the output file name to OUTPUT-FILE
-  -prefer-pic       try to building PIC objects only
-  -prefer-non-pic   try to building non-PIC objects only
-  -static           always build a \`.o' file suitable for static linking
-
-COMPILE-COMMAND is a command to be used in creating a \`standard' object file
-from the given SOURCEFILE.
-
-The output file name is determined by removing the directory component from
-SOURCEFILE, then substituting the C source code suffix \`.c' with the
-library object suffix, \`.lo'."
-  ;;
-
-execute)
-  $echo \
-"Usage: $modename [OPTION]... --mode=execute COMMAND [ARGS]...
-
-Automatically set library path, then run a program.
-
-This mode accepts the following additional options:
-
-  -dlopen FILE      add the directory containing FILE to the library path
-
-This mode sets the library path environment variable according to \`-dlopen'
-flags.
-
-If any of the ARGS are libtool executable wrappers, then they are translated
-into their corresponding uninstalled binary, and any of their required library
-directories are added to the library path.
-
-Then, COMMAND is executed, with ARGS as arguments."
-  ;;
-
-finish)
-  $echo \
-"Usage: $modename [OPTION]... --mode=finish [LIBDIR]...
-
-Complete the installation of libtool libraries.
-
-Each LIBDIR is a directory that contains libtool libraries.
-
-The commands that this mode executes may require superuser privileges.  Use
-the \`--dry-run' option if you just want to see what would be executed."
-  ;;
-
-install)
-  $echo \
-"Usage: $modename [OPTION]... --mode=install INSTALL-COMMAND...
-
-Install executables or libraries.
-
-INSTALL-COMMAND is the installation command.  The first component should be
-either the \`install' or \`cp' program.
-
-The rest of the components are interpreted as arguments to that command (only
-BSD-compatible install options are recognized)."
-  ;;
-
-link)
-  $echo \
-"Usage: $modename [OPTION]... --mode=link LINK-COMMAND...
-
-Link object files or libraries together to form another library, or to
-create an executable program.
-
-LINK-COMMAND is a command using the C compiler that you would use to create
-a program from several object files.
-
-The following components of LINK-COMMAND are treated specially:
-
-  -all-static       do not do any dynamic linking at all
-  -avoid-version    do not add a version suffix if possible
-  -dlopen FILE      \`-dlpreopen' FILE if it cannot be dlopened at runtime
-  -dlpreopen FILE   link in FILE and add its symbols to lt_preloaded_symbols
-  -export-dynamic   allow symbols from OUTPUT-FILE to be resolved with dlsym(3)
-  -export-symbols SYMFILE
-		    try to export only the symbols listed in SYMFILE
-  -export-symbols-regex REGEX
-		    try to export only the symbols matching REGEX
-  -LLIBDIR          search LIBDIR for required installed libraries
-  -lNAME            OUTPUT-FILE requires the installed library libNAME
-  -module           build a library that can dlopened
-  -no-fast-install  disable the fast-install mode
-  -no-install       link a not-installable executable
-  -no-undefined     declare that a library does not refer to external symbols
-  -o OUTPUT-FILE    create OUTPUT-FILE from the specified objects
-  -release RELEASE  specify package release information
-  -rpath LIBDIR     the created library will eventually be installed in LIBDIR
-  -R[ ]LIBDIR       add LIBDIR to the runtime path of programs and libraries
-  -static           do not do any dynamic linking of libtool libraries
-  -version-info CURRENT[:REVISION[:AGE]]
-		    specify library version info [each variable defaults to 0]
-
-All other options (arguments beginning with \`-') are ignored.
-
-Every other argument is treated as a filename.  Files ending in \`.la' are
-treated as uninstalled libtool libraries, other files are standard or library
-object files.
-
-If the OUTPUT-FILE ends in \`.la', then a libtool library is created,
-only library objects (\`.lo' files) may be specified, and \`-rpath' is
-required, except when creating a convenience library.
-
-If OUTPUT-FILE ends in \`.a' or \`.lib', then a standard library is created
-using \`ar' and \`ranlib', or on Windows using \`lib'.
-
-If OUTPUT-FILE ends in \`.lo' or \`.${objext}', then a reloadable object file
-is created, otherwise an executable program is created."
-  ;;
-
-uninstall)
-  $echo \
-"Usage: $modename [OPTION]... --mode=uninstall RM [RM-OPTION]... FILE...
-
-Remove libraries from an installation directory.
-
-RM is the name of the program to use to delete files associated with each FILE
-(typically \`/bin/rm').  RM-OPTIONS are options (such as \`-f') to be passed
-to RM.
-
-If FILE is a libtool library, all the files associated with it are deleted.
-Otherwise, only FILE itself is deleted using RM."
-  ;;
-
-*)
-  $echo "$modename: invalid operation mode \`$mode'" 1>&2
-  $echo "$help" 1>&2
-  exit 1
-  ;;
-esac
-
-echo
-$echo "Try \`$modename --help' for more information about other modes."
-
-exit 0
-
-# Local Variables:
-# mode:shell-script
-# sh-indentation:2
-# End:
diff -uNr gmime-1.90.0/missing gmime/missing
--- gmime-1.90.0/missing	Tue Oct 30 18:46:21 2001
+++ gmime/missing	Thu Jan  1 01:00:00 1970
@@ -1,198 +0,0 @@
-#! /bin/sh
-# Common stub for a few missing GNU programs while installing.
-# Copyright (C) 1996, 1997, 2001 Free Software Foundation, Inc.
-# Franc,ois Pinard <pinard@iro.umontreal.ca>, 1996.
-
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2, or (at your option)
-# any later version.
-
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, write to the Free Software
-# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-# 02111-1307, USA.
-
-if test $# -eq 0; then
-  echo 1>&2 "Try \`$0 --help' for more information"
-  exit 1
-fi
-
-# In the cases where this matters, `missing' is being run in the
-# srcdir already.
-if test -f configure.in; then
-  configure_ac=configure.ac
-else
-  configure_ac=configure.in
-fi
-
-case "$1" in
-
-  -h|--h|--he|--hel|--help)
-    echo "\
-$0 [OPTION]... PROGRAM [ARGUMENT]...
-
-Handle \`PROGRAM [ARGUMENT]...' for when PROGRAM is missing, or return an
-error status if there is no known handling for PROGRAM.
-
-Options:
-  -h, --help      display this help and exit
-  -v, --version   output version information and exit
-
-Supported PROGRAM values:
-  aclocal      touch file \`aclocal.m4'
-  autoconf     touch file \`configure'
-  autoheader   touch file \`config.h.in'
-  automake     touch all \`Makefile.in' files
-  bison        create \`y.tab.[ch]', if possible, from existing .[ch]
-  flex         create \`lex.yy.c', if possible, from existing .c
-  lex          create \`lex.yy.c', if possible, from existing .c
-  makeinfo     touch the output file
-  yacc         create \`y.tab.[ch]', if possible, from existing .[ch]"
-    ;;
-
-  -v|--v|--ve|--ver|--vers|--versi|--versio|--version)
-    echo "missing - GNU libit 0.0"
-    ;;
-
-  -*)
-    echo 1>&2 "$0: Unknown \`$1' option"
-    echo 1>&2 "Try \`$0 --help' for more information"
-    exit 1
-    ;;
-
-  aclocal)
-    echo 1>&2 "\
-WARNING: \`$1' is missing on your system.  You should only need it if
-         you modified \`acinclude.m4' or \`$configure_ac'.  You might want
-         to install the \`Automake' and \`Perl' packages.  Grab them from
-         any GNU archive site."
-    touch aclocal.m4
-    ;;
-
-  autoconf)
-    echo 1>&2 "\
-WARNING: \`$1' is missing on your system.  You should only need it if
-         you modified \`$configure_ac'.  You might want to install the
-         \`Autoconf' and \`GNU m4' packages.  Grab them from any GNU
-         archive site."
-    touch configure
-    ;;
-
-  autoheader)
-    echo 1>&2 "\
-WARNING: \`$1' is missing on your system.  You should only need it if
-         you modified \`acconfig.h' or \`$configure_ac'.  You might want
-         to install the \`Autoconf' and \`GNU m4' packages.  Grab them
-         from any GNU archive site."
-    files=`sed -n 's/^[ ]*A[CM]_CONFIG_HEADER(\([^)]*\)).*/\1/p' $configure_ac`
-    test -z "$files" && files="config.h"
-    touch_files=
-    for f in $files; do
-      case "$f" in
-      *:*) touch_files="$touch_files "`echo "$f" |
-				       sed -e 's/^[^:]*://' -e 's/:.*//'`;;
-      *) touch_files="$touch_files $f.in";;
-      esac
-    done
-    touch $touch_files
-    ;;
-
-  automake)
-    echo 1>&2 "\
-WARNING: \`$1' is missing on your system.  You should only need it if
-         you modified \`Makefile.am', \`acinclude.m4' or \`$configure_ac'.
-         You might want to install the \`Automake' and \`Perl' packages.
-         Grab them from any GNU archive site."
-    find . -type f -name Makefile.am -print |
-	   sed 's/\.am$/.in/' |
-	   while read f; do touch "$f"; done
-    ;;
-
-  bison|yacc)
-    echo 1>&2 "\
-WARNING: \`$1' is missing on your system.  You should only need it if
-         you modified a \`.y' file.  You may need the \`Bison' package
-         in order for those modifications to take effect.  You can get
-         \`Bison' from any GNU archive site."
-    rm -f y.tab.c y.tab.h
-    if [ $# -ne 1 ]; then
-        eval LASTARG="\${$#}"
-	case "$LASTARG" in
-	*.y)
-	    SRCFILE=`echo "$LASTARG" | sed 's/y$/c/'`
-	    if [ -f "$SRCFILE" ]; then
-	         cp "$SRCFILE" y.tab.c
-	    fi
-	    SRCFILE=`echo "$LASTARG" | sed 's/y$/h/'`
-	    if [ -f "$SRCFILE" ]; then
-	         cp "$SRCFILE" y.tab.h
-	    fi
-	  ;;
-	esac
-    fi
-    if [ ! -f y.tab.h ]; then
-	echo >y.tab.h
-    fi
-    if [ ! -f y.tab.c ]; then
-	echo 'main() { return 0; }' >y.tab.c
-    fi
-    ;;
-
-  lex|flex)
-    echo 1>&2 "\
-WARNING: \`$1' is missing on your system.  You should only need it if
-         you modified a \`.l' file.  You may need the \`Flex' package
-         in order for those modifications to take effect.  You can get
-         \`Flex' from any GNU archive site."
-    rm -f lex.yy.c
-    if [ $# -ne 1 ]; then
-        eval LASTARG="\${$#}"
-	case "$LASTARG" in
-	*.l)
-	    SRCFILE=`echo "$LASTARG" | sed 's/l$/c/'`
-	    if [ -f "$SRCFILE" ]; then
-	         cp "$SRCFILE" lex.yy.c
-	    fi
-	  ;;
-	esac
-    fi
-    if [ ! -f lex.yy.c ]; then
-	echo 'main() { return 0; }' >lex.yy.c
-    fi
-    ;;
-
-  makeinfo)
-    echo 1>&2 "\
-WARNING: \`$1' is missing on your system.  You should only need it if
-         you modified a \`.texi' or \`.texinfo' file, or any other file
-         indirectly affecting the aspect of the manual.  The spurious
-         call might also be the consequence of using a buggy \`make' (AIX,
-         DU, IRIX).  You might want to install the \`Texinfo' package or
-         the \`GNU make' package.  Grab either from any GNU archive site."
-    file=`echo "$*" | sed -n 's/.*-o \([^ ]*\).*/\1/p'`
-    if test -z "$file"; then
-      file=`echo "$*" | sed 's/.* \([^ ]*\) *$/\1/'`
-      file=`sed -n '/^@setfilename/ { s/.* \([^ ]*\) *$/\1/; p; q; }' $file`
-    fi
-    touch $file
-    ;;
-
-  *)
-    echo 1>&2 "\
-WARNING: \`$1' is needed, and you do not seem to have it handy on your
-         system.  You might have modified some files without having the
-         proper tools for further handling them.  Check the \`README' file,
-         it often tells you about the needed prerequirements for installing
-         this package.  You may also peek at any GNU archive site, in case
-         some other package would contain this missing \`$1' program."
-    exit 1
-    ;;
-esac
-
-exit 0
diff -uNr gmime-1.90.0/mkinstalldirs gmime/mkinstalldirs
--- gmime-1.90.0/mkinstalldirs	Tue Oct 30 18:46:21 2001
+++ gmime/mkinstalldirs	Thu Jan  1 01:00:00 1970
@@ -1,40 +0,0 @@
-#! /bin/sh
-# mkinstalldirs --- make directory hierarchy
-# Author: Noah Friedman <friedman@prep.ai.mit.edu>
-# Created: 1993-05-16
-# Public domain
-
-# $Id$
-
-errstatus=0
-
-for file
-do
-   set fnord `echo ":$file" | sed -ne 's/^:\//#/;s/^://;s/\// /g;s/^#/\//;p'`
-   shift
-
-   pathcomp=
-   for d
-   do
-     pathcomp="$pathcomp$d"
-     case "$pathcomp" in
-       -* ) pathcomp=./$pathcomp ;;
-     esac
-
-     if test ! -d "$pathcomp"; then
-        echo "mkdir $pathcomp"
-
-        mkdir "$pathcomp" || lasterr=$?
-
-        if test ! -d "$pathcomp"; then
-  	  errstatus=$lasterr
-        fi
-     fi
-
-     pathcomp="$pathcomp/"
-   done
-done
-
-exit $errstatus
-
-# mkinstalldirs ends here
diff -uNr gmime-1.90.0/pan-mime-parser.c gmime/pan-mime-parser.c
--- gmime-1.90.0/pan-mime-parser.c	Thu Jan  1 01:00:00 1970
+++ gmime/pan-mime-parser.c	Sun Mar 17 01:17:57 2002
@@ -0,0 +1,549 @@
+/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*- */
+/*
+ *  Authors: Jeffrey Stedfast <fejj@helixcode.com>
+ *
+ *  Copyright 2000, 2001 Helix Code, Inc. (www.helixcode.com)
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Street #330, Boston, MA 02111-1307, USA.
+ *
+ */
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include "gmime-parser.h"
+#include "gmime-utils.h"
+#include "gmime-header.h"
+#include "gmime-stream-mem.h"
+#include "gmime-stream-buffer.h"
+#include "strlib.h"
+#include <ctype.h>
+
+#define d(x) x
+
+#ifndef HAVE_ISBLANK
+#define isblank(c) ((c) == ' ' || (c) == '\t')
+#endif /* HAVE_ISBLANK */
+
+static void
+header_unfold (char *header)
+{
+	/* strip all \n's and replace tabs with spaces - this should
+           undo any header folding */
+	char *src, *dst;
+	
+	for (src = dst = header; *src; src++) {
+		if (*src != '\n')
+			*dst++ = *src != '\t' ? *src : ' ';
+	}
+	*dst = '\0';
+}
+
+enum {
+	CONTENT_TYPE = 0,
+	CONTENT_TRANSFER_ENCODING,
+	CONTENT_DISPOSITION,
+	CONTENT_DESCRIPTION,
+	CONTENT_LOCATION,
+	CONTENT_MD5,
+	CONTENT_ID
+};
+
+static char *content_headers[] = {
+	"Content-Type:",
+	"Content-Transfer-Encoding:",
+	"Content-Disposition:",
+	"Content-Description:",
+	"Content-Location:",
+	"Content-Md5:",
+	"Content-Id:",
+	NULL
+};
+
+static int
+content_header (const char *field)
+{
+	int i;
+	
+	for (i = 0; content_headers[i]; i++)
+		if (!strncasecmp (field, content_headers[i], strlen (content_headers[i])))
+			return i;
+	
+	return -1;
+}
+
+enum {
+	HEADER_FROM = 0,
+	HEADER_REPLY_TO,
+	HEADER_TO,
+	HEADER_CC,
+	HEADER_BCC,
+	HEADER_SUBJECT,
+	HEADER_DATE,
+	HEADER_MESSAGE_ID,
+	HEADER_UNKNOWN
+};
+
+static char *fields[] = {
+	"From:",
+	"Reply-To:",
+	"To:",
+	"Cc:",
+	"Bcc:",
+	"Subject:",
+	"Date:",
+	"Message-Id:",
+	NULL
+};
+
+static gboolean
+special_header (const char *header)
+{
+	return (!strcasecmp (header, "MIME-Version:") || content_header (header) != -1);
+}
+
+static void
+parser_read_headers (GMimeStream *stream, GByteArray *buffer)
+{
+	size_t offset;
+	
+	do {
+		offset = buffer->len;
+		g_mime_stream_buffer_readln (stream, buffer);
+	} while (!g_mime_stream_eos (stream) && *(buffer->data + offset) != '\n');
+	
+	/* strip off the empty line */
+	g_byte_array_set_size (buffer, MAX (buffer->len - 1, 0));
+}
+
+enum {
+	FOUND_BOUNDARY,
+	FOUND_END_BOUNDARY,
+	FOUND_EOS,
+};
+
+static size_t
+parser_read_until_boundary (GMimeStream *stream, GByteArray *buffer,
+			    const char *boundary, const char *end_boundary, int *found)
+{
+	size_t boundary_len, end_boundary_len;
+	size_t offset, len, total = 0;
+	gboolean internal;
+	
+	*found = FOUND_EOS;
+	
+	if (!buffer) {
+		buffer = g_byte_array_new ();
+		internal = TRUE;
+	} else
+		internal = FALSE;
+	
+	boundary_len = boundary ? strlen (boundary) : 0;
+	end_boundary_len = end_boundary ? strlen (end_boundary) : 0;
+	
+	do {
+		offset = buffer->len;
+		g_mime_stream_buffer_readln (stream, buffer);
+		len = buffer->len - offset;
+		
+		if (boundary && len == boundary_len &&
+		    !memcmp (buffer->data + offset, boundary, len)) {
+			g_byte_array_set_size (buffer, offset);
+			*found = FOUND_BOUNDARY;
+			break;
+		}
+		
+		if (end_boundary && len == end_boundary_len &&
+		    !memcmp (buffer->data + offset, end_boundary, len)) {
+			g_byte_array_set_size (buffer, offset);
+			*found = FOUND_END_BOUNDARY;
+			break;
+		}
+		
+		total += len;
+		
+		if (internal)
+			g_byte_array_set_size (buffer, 0);
+		
+	} while (!g_mime_stream_eos (stream));
+	
+	if (internal)
+		g_byte_array_free (buffer, TRUE);
+	
+	return total;
+}
+
+
+/**
+ * parse_content_headers:
+ * @headers: content header string
+ * @inlen: length of the header block.
+ * @mime_part: mime part to populate with the information we get from the Content-* headers.
+ * @is_multipart: set to TRUE if the part is a multipart, FALSE otherwise (to be set by function)
+ * @boundary: multipart boundary string (to be set by function)
+ * @end_boundary: multipart end boundary string (to be set by function)
+ *
+ * Parse a header block for content information.
+ */
+static void
+construct_content_headers (GMimePart *mime_part, GByteArray *headers, gboolean *is_multipart,
+			   char **boundary, char **end_boundary)
+{
+	const char *inptr = headers->data;
+	const char *inend = inptr + headers->len;
+	
+	*boundary = NULL;
+	*end_boundary = NULL;
+	
+	while (inptr < inend) {
+		const int type = content_header (inptr);
+		const char *hvalptr;
+		const char *hvalend;
+		char *header = NULL;
+		char *value;
+		
+		if (type == -1) {
+			if (!(hvalptr = memchr (inptr, ':', inend - inptr)))
+				break;
+			header = g_strndup (inptr, hvalptr - inptr);
+			g_strstrip (header);
+			hvalptr++;
+		} else {
+			hvalptr = inptr + strlen (content_headers[type]);
+		}
+		
+		for (hvalend = hvalptr; hvalend < inend; hvalend++)
+			if (*hvalend == '\n' && !isblank (*(hvalend + 1)))
+				break;
+		
+		value = g_strndup (hvalptr, (int) (hvalend - hvalptr));
+		
+		header_unfold (value);
+		g_strstrip (value);
+		
+		switch (type) {
+		case CONTENT_DESCRIPTION: {
+			char *description = g_mime_utils_8bit_header_decode (value);
+			
+			g_strstrip (description);
+			g_mime_part_set_content_description (mime_part, description);
+			g_free (description);
+			
+			break;
+		}
+		case CONTENT_LOCATION:
+			g_mime_part_set_content_location (mime_part, value);
+			break;
+		case CONTENT_MD5:
+			g_mime_part_set_content_md5 (mime_part, value);
+			break;
+		case CONTENT_ID:
+			g_mime_part_set_content_id (mime_part, value);
+			break;
+		case CONTENT_TRANSFER_ENCODING:
+			g_mime_part_set_encoding (mime_part, g_mime_part_encoding_from_string (value));
+			break;
+		case CONTENT_TYPE: {
+			GMimeContentType *mime_type;
+			
+			mime_type = g_mime_content_type_new_from_string (value);
+			
+			*is_multipart = g_mime_content_type_is_type (mime_type, "multipart", "*");
+			if (*is_multipart) {
+				const char *b;
+				
+				b = g_mime_content_type_get_parameter (mime_type, "boundary");
+				if (b != NULL) {
+					/* create our temp boundary vars */
+					*boundary = g_strdup_printf ("--%s\n", b);
+					*end_boundary = g_strdup_printf ("--%s--\n", b);
+				} else {
+					g_warning ("Invalid MIME structure: boundary not found for multipart"
+						   " - defaulting to text/plain.");
+					
+					/* let's continue onward as if this was not a multipart */
+					g_mime_content_type_destroy (mime_type);
+					mime_type = g_mime_content_type_new ("text", "plain");
+					is_multipart = FALSE;
+				}
+			}
+			g_mime_part_set_content_type (mime_part, mime_type);
+			
+			break;
+		}
+		case CONTENT_DISPOSITION: {
+			GMimeDisposition *disposition;
+			
+			disposition = g_mime_disposition_new (value);
+			g_mime_part_set_content_disposition_object (mime_part, disposition);
+			
+			break;
+		}
+		default:
+			if (!strncasecmp (header, "Content-", 8))
+				g_mime_part_set_content_header (mime_part, header, value);
+			g_free (header);
+			break;
+		}
+		
+		g_free (value);
+		inptr = hvalend + 1;
+	}
+}
+
+static GMimePart *
+g_mime_parser_construct_part_internal (GMimeStream *stream, GByteArray *headers,
+				       const char *parent_boundary,
+				       const char *parent_end_boundary,
+				       int *parent_boundary_found)
+{
+	GMimePart *mime_part;
+	char *boundary;
+	char *end_boundary;
+	gboolean is_multipart;
+	
+	mime_part = g_mime_part_new ();
+	is_multipart = FALSE;
+	construct_content_headers (mime_part, headers, &is_multipart,
+				   &boundary, &end_boundary);
+	
+	/* Content */
+	if (is_multipart && boundary && end_boundary) {
+		/* get all the subparts */
+		GMimePart *subpart;
+		GByteArray *preface;
+		off_t start, end, pos;
+		int found;
+		
+		pos = g_mime_stream_tell (stream);
+		start = stream->bound_start;
+		end = stream->bound_end;
+		
+		preface = g_byte_array_new ();
+		parser_read_until_boundary (stream, preface, boundary, end_boundary, &found);
+		/* FIXME: save the preface? */
+		g_byte_array_free (preface, TRUE);
+		
+		while (found == FOUND_BOUNDARY) {
+			GByteArray *content_headers;
+			
+			content_headers = g_byte_array_new ();
+			parser_read_headers (stream, content_headers);
+			
+			g_mime_stream_set_bounds (stream, g_mime_stream_tell (stream), end);
+			subpart = g_mime_parser_construct_part_internal (stream, content_headers,
+									 boundary,
+									 end_boundary,
+									 &found);
+			g_mime_part_add_subpart (mime_part, subpart);
+			g_mime_object_unref (GMIME_OBJECT (subpart));
+			g_byte_array_free (content_headers, TRUE);
+		}
+		
+		g_mime_stream_set_bounds (stream, start, end);
+		
+		if (parent_boundary) {
+			parser_read_until_boundary (stream, NULL, parent_boundary,
+						    parent_end_boundary, parent_boundary_found);
+		}
+		
+		/* free our temp boundary strings */
+		g_free (boundary);
+		g_free (end_boundary);
+	} else {
+		GMimePartEncodingType encoding;
+		GMimeDataWrapper *wrapper;
+		GMimeStream *substream;
+		off_t start, end;
+		size_t len;
+		
+		start = g_mime_stream_tell (stream);		
+		
+		len = parser_read_until_boundary (stream, NULL, parent_boundary,
+						  parent_end_boundary,
+						  parent_boundary_found);
+		
+		if (*parent_boundary_found != FOUND_EOS)
+			end = start + len;
+		else
+			end = g_mime_stream_tell (stream);
+		
+		encoding = g_mime_part_get_encoding (mime_part);
+		
+		substream = g_mime_stream_substream (stream, start, end);
+		wrapper = g_mime_data_wrapper_new_with_stream (substream, encoding);
+		g_mime_part_set_content_object (mime_part, wrapper);
+		g_mime_stream_unref (substream);
+	}
+	
+	return mime_part;
+}
+
+
+/**
+ * g_mime_parser_construct_part:
+ * @stream: raw MIME Part stream
+ *
+ * Constructs a GMimePart object based on @stream.
+ *
+ * Returns a GMimePart object based on the data.
+ **/
+GMimePart *
+g_mime_parser_construct_part (GMimeStream *stream)
+{
+	GMimePart *part = NULL;
+	GByteArray *headers;
+	int found;
+	
+	g_return_val_if_fail (stream != NULL, NULL);
+	
+	headers = g_byte_array_new ();
+	parser_read_headers (stream, headers);
+	
+	if (headers->len)
+		part = g_mime_parser_construct_part_internal (stream, headers, NULL, NULL, &found);
+	
+	g_byte_array_free (headers, TRUE);
+	
+	return part;
+}
+
+static void
+construct_message_headers (GMimeMessage *message, GByteArray *headers, gboolean preserve_headers)
+{
+	char *field, *value, *raw, *q;
+	char *inptr, *inend;
+	time_t date;
+	int offset = 0;
+	int i;
+	
+	inptr = (char *) headers->data;
+	inend = inptr + headers->len;
+	
+	for ( ; inptr < inend; inptr++) {
+		for (i = 0; fields[i]; i++)
+			if (!strncasecmp (fields[i], inptr, strlen (fields[i])))
+				break;
+		
+		if (!fields[i]) {
+			field = inptr;
+			for (q = field; q < inend && *q != ':'; q++);
+			field = g_strndup (field, (int) (q - field + 1));
+			g_strstrip (field);
+		} else {
+			field = g_strdup (fields[i]);
+		}
+		
+		value = inptr + strlen (field);
+		for (q = value; q < inend; q++)
+			if (*q == '\n' && !isblank (*(q + 1)))
+				break;
+		
+		value = g_strndup (value, (int) (q - value));
+		g_strstrip (value);
+		header_unfold (value);
+		
+		switch (i) {
+		case HEADER_FROM:
+			raw = g_mime_utils_8bit_header_decode (value);
+			g_mime_message_set_sender (message, raw);
+			g_free (raw);
+			break;
+		case HEADER_REPLY_TO:
+			raw = g_mime_utils_8bit_header_decode (value);
+			g_mime_message_set_reply_to (message, raw);
+			g_free (raw);
+			break;
+		case HEADER_TO:
+			g_mime_message_add_recipients_from_string (message, GMIME_RECIPIENT_TYPE_TO, value);
+			break;
+		case HEADER_CC:
+			g_mime_message_add_recipients_from_string (message, GMIME_RECIPIENT_TYPE_CC, value);
+			break;
+		case HEADER_BCC:
+			g_mime_message_add_recipients_from_string (message, GMIME_RECIPIENT_TYPE_BCC, value);
+			break;
+		case HEADER_SUBJECT:
+			raw = g_mime_utils_8bit_header_decode (value);
+			g_mime_message_set_subject (message, raw);
+			g_free (raw);
+			break;
+		case HEADER_DATE:
+			date = g_mime_utils_header_decode_date (value, &offset);
+			g_mime_message_set_date (message, date, offset);
+			break;
+		case HEADER_MESSAGE_ID:
+			raw = g_mime_utils_8bit_header_decode (value);
+			g_mime_message_set_message_id (message, raw);
+			g_free (raw);
+			break;
+		case HEADER_UNKNOWN:
+		default:
+			/* possibly save the raw header */
+			if ((preserve_headers || fields[i]) && !special_header (field)) {
+				field[strlen (field) - 1] = '\0'; /* kill the ':' */
+				g_strstrip (field);
+				g_mime_header_add (message->header->headers, field, value);
+			}
+			break;
+		}
+		
+		g_free (field);
+		g_free (value);
+		
+		if (q >= inend)
+			break;
+		else
+			inptr = q;
+	}
+}
+
+
+/**
+ * g_mime_parser_construct_message:
+ * @stream: an rfc0822 message stream
+ * @preserve_headers: if %TRUE, then store the arbitrary headers
+ *
+ * Constructs a GMimeMessage object based on @stream.
+ *
+ * Returns a GMimeMessage object based on the rfc0822 message stream.
+ **/
+GMimeMessage *
+g_mime_parser_construct_message (GMimeStream *stream, gboolean preserve_headers)
+{
+	GMimeMessage *message = NULL;
+	GByteArray *headers;
+	
+	g_return_val_if_fail (stream != NULL, NULL);
+	
+	headers = g_byte_array_new ();
+	parser_read_headers (stream, headers);
+	
+	if (headers->len) {
+		GMimePart *part;
+		int found;
+		
+		message = g_mime_message_new (!preserve_headers);
+		construct_message_headers (message, headers, preserve_headers);
+		part = g_mime_parser_construct_part_internal (stream, headers, NULL, NULL, &found);
+		g_mime_message_set_mime_part (message, part);
+		g_mime_object_unref (GMIME_OBJECT (part));
+	}
+	
+	g_byte_array_free (headers, TRUE);
+	
+	return message;
+}
diff -uNr gmime-1.90.0/rfc/rfc0822.txt gmime/rfc/rfc0822.txt
--- gmime-1.90.0/rfc/rfc0822.txt	Thu Jan  1 01:00:00 1970
+++ gmime/rfc/rfc0822.txt	Tue Oct 24 23:01:37 2000
@@ -0,0 +1,2901 @@
+ 
+ 
+ 
+ 
+ 
+ 
+     RFC #  822
+ 
+     Obsoletes:  RFC #733  (NIC #41952)
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+                        STANDARD FOR THE FORMAT OF
+ 
+                        ARPA INTERNET TEXT MESSAGES
+ 
+ 
+ 
+ 
+ 
+ 
+                              August 13, 1982
+ 
+ 
+ 
+ 
+ 
+ 
+                                Revised by
+ 
+                             David H. Crocker
+ 
+ 
+                      Dept. of Electrical Engineering
+                 University of Delaware, Newark, DE  19711
+                      Network:  DCrocker @ UDel-Relay
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+                             TABLE OF CONTENTS
+ 
+ 
+     PREFACE ....................................................   ii
+ 
+     1.  INTRODUCTION ...........................................    1
+ 
+         1.1.  Scope ............................................    1
+         1.2.  Communication Framework ..........................    2
+ 
+     2.  NOTATIONAL CONVENTIONS .................................    3
+ 
+     3.  LEXICAL ANALYSIS OF MESSAGES ...........................    5
+ 
+         3.1.  General Description ..............................    5
+         3.2.  Header Field Definitions .........................    9
+         3.3.  Lexical Tokens ...................................   10
+         3.4.  Clarifications ...................................   11
+ 
+     4.  MESSAGE SPECIFICATION ..................................   17
+ 
+         4.1.  Syntax ...........................................   17
+         4.2.  Forwarding .......................................   19
+         4.3.  Trace Fields .....................................   20
+         4.4.  Originator Fields ................................   21
+         4.5.  Receiver Fields ..................................   23
+         4.6.  Reference Fields .................................   23
+         4.7.  Other Fields .....................................   24
+ 
+     5.  DATE AND TIME SPECIFICATION ............................   26
+ 
+         5.1.  Syntax ...........................................   26
+         5.2.  Semantics ........................................   26
+ 
+     6.  ADDRESS SPECIFICATION ..................................   27
+ 
+         6.1.  Syntax ...........................................   27
+         6.2.  Semantics ........................................   27
+         6.3.  Reserved Address .................................   33
+ 
+     7.  BIBLIOGRAPHY ...........................................   34
+ 
+ 
+                             APPENDIX
+ 
+     A.  EXAMPLES ...............................................   36
+     B.  SIMPLE FIELD PARSING ...................................   40
+     C.  DIFFERENCES FROM RFC #733 ..............................   41
+     D.  ALPHABETICAL LISTING OF SYNTAX RULES ...................   44
+ 
+ 
+     August 13, 1982               - i -                      RFC #822
+
+ 
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+                                  PREFACE
+ 
+ 
+          By 1977, the Arpanet employed several informal standards for
+     the  text  messages (mail) sent among its host computers.  It was
+     felt necessary to codify these practices and  provide  for  those
+     features  that  seemed  imminent.   The result of that effort was
+     Request for Comments (RFC) #733, "Standard for the Format of ARPA
+     Network Text Message", by Crocker, Vittal, Pogran, and Henderson.
+     The specification attempted to avoid major  changes  in  existing
+     software, while permitting several new features.
+ 
+          This document revises the specifications  in  RFC  #733,  in
+     order  to  serve  the  needs  of the larger and more complex ARPA
+     Internet.  Some of RFC #733's features failed  to  gain  adequate
+     acceptance.   In  order to simplify the standard and the software
+     that follows it, these features have been removed.   A  different
+     addressing  scheme  is  used, to handle the case of inter-network
+     mail; and the concept of re-transmission has been introduced.
+ 
+          This specification is intended for use in the ARPA Internet.
+     However, an attempt has been made to free it of any dependence on
+     that environment, so that it can be applied to other network text
+     message systems.
+ 
+          The specification of RFC #733 took place over the course  of
+     one  year, using the ARPANET mail environment, itself, to provide
+     an on-going forum for discussing the capabilities to be included.
+     More  than  twenty individuals, from across the country, partici-
+     pated in  the  original  discussion.   The  development  of  this
+     revised specification has, similarly, utilized network mail-based
+     group discussion.  Both specification efforts  greatly  benefited
+     from the comments and ideas of the participants.
+ 
+          The syntax of the standard,  in  RFC  #733,  was  originally
+     specified  in  the  Backus-Naur Form (BNF) meta-language.  Ken L.
+     Harrenstien, of SRI International, was responsible for  re-coding
+     the  BNF  into  an  augmented  BNF  that makes the representation
+     smaller and easier to understand.
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+     August 13, 1982              - ii -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+     1.  INTRODUCTION
+ 
+     1.1.  SCOPE
+ 
+          This standard specifies a syntax for text messages that  are
+     sent  among  computer  users, within the framework of "electronic
+     mail".  The standard supersedes  the  one  specified  in  ARPANET
+     Request  for Comments #733, "Standard for the Format of ARPA Net-
+     work Text Messages".
+ 
+          In this context, messages are viewed as having  an  envelope
+     and  contents.   The  envelope  contains  whatever information is
+     needed to accomplish transmission  and  delivery.   The  contents
+     compose  the object to be delivered to the recipient.  This stan-
+     dard applies only to the format and some of the semantics of mes-
+     sage  contents.   It contains no specification of the information
+     in the envelope.
+ 
+          However, some message systems may use information  from  the
+     contents  to create the envelope.  It is intended that this stan-
+     dard facilitate the acquisition of such information by programs.
+ 
+          Some message systems may  store  messages  in  formats  that
+     differ  from the one specified in this standard.  This specifica-
+     tion is intended strictly as a definition of what message content
+     format is to be passed BETWEEN hosts.
+ 
+     Note:  This standard is NOT intended to dictate the internal for-
+            mats  used  by sites, the specific message system features
+            that they are expected to support, or any of  the  charac-
+            teristics  of  user interface programs that create or read
+            messages.
+ 
+          A distinction should be made between what the  specification
+     REQUIRES  and  what  it ALLOWS.  Messages can be made complex and
+     rich with formally-structured components of information or can be
+     kept small and simple, with a minimum of such information.  Also,
+     the standard simplifies the interpretation  of  differing  visual
+     formats  in  messages;  only  the  visual  aspect of a message is
+     affected and not the interpretation  of  information  within  it.
+     Implementors may choose to retain such visual distinctions.
+ 
+          The formal definition is divided into four levels.  The bot-
+     tom level describes the meta-notation used in this document.  The
+     second level describes basic lexical analyzers that  feed  tokens
+     to  higher-level  parsers.   Next is an overall specification for
+     messages; it permits distinguishing individual fields.   Finally,
+     there is definition of the contents of several structured fields.
+ 
+ 
+ 
+     August 13, 1982               - 1 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+     1.2.  COMMUNICATION FRAMEWORK
+ 
+          Messages consist of lines of text.   No  special  provisions
+     are  made for encoding drawings, facsimile, speech, or structured
+     text.  No significant consideration has been given  to  questions
+     of  data  compression  or to transmission and storage efficiency,
+     and the standard tends to be free with the number  of  bits  con-
+     sumed.   For  example,  field  names  are specified as free text,
+     rather than special terse codes.
+ 
+          A general "memo" framework is used.  That is, a message con-
+     sists of some information in a rigid format, followed by the main
+     part of the message, with a format that is not specified in  this
+     document.   The  syntax of several fields of the rigidly-formated
+     ("headers") section is defined in  this  specification;  some  of
+     these fields must be included in all messages.
+ 
+          The syntax  that  distinguishes  between  header  fields  is
+     specified  separately  from  the  internal  syntax for particular
+     fields.  This separation is intended to allow simple  parsers  to
+     operate on the general structure of messages, without concern for
+     the detailed structure of individual header fields.   Appendix  B
+     is provided to facilitate construction of these parsers.
+ 
+          In addition to the fields specified in this document, it  is
+     expected  that  other fields will gain common use.  As necessary,
+     the specifications for these "extension-fields" will be published
+     through  the same mechanism used to publish this document.  Users
+     may also  wish  to  extend  the  set  of  fields  that  they  use
+     privately.  Such "user-defined fields" are permitted.
+ 
+          The framework severely constrains document tone and  appear-
+     ance and is primarily useful for most intra-organization communi-
+     cations and  well-structured   inter-organization  communication.
+     It  also  can  be used for some types of inter-process communica-
+     tion, such as simple file transfer and remote job entry.  A  more
+     robust  framework might allow for multi-font, multi-color, multi-
+     dimension encoding of information.  A  less  robust  one,  as  is
+     present  in  most  single-machine  message  systems,  would  more
+     severely constrain the ability to add fields and the decision  to
+     include specific fields.  In contrast with paper-based communica-
+     tion, it is interesting to note that the RECEIVER  of  a  message
+     can   exercise  an  extraordinary  amount  of  control  over  the
+     message's appearance.  The amount of actual control available  to
+     message  receivers  is  contingent upon the capabilities of their
+     individual message systems.
+ 
+ 
+ 
+ 
+ 
+     August 13, 1982               - 2 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+     2.  NOTATIONAL CONVENTIONS
+ 
+          This specification uses an augmented Backus-Naur Form  (BNF)
+     notation.  The differences from standard BNF involve naming rules
+     and indicating repetition and "local" alternatives.
+ 
+     2.1.  RULE NAMING
+ 
+          Angle brackets ("<", ">") are not  used,  in  general.   The
+     name  of  a rule is simply the name itself, rather than "<name>".
+     Quotation-marks enclose literal text (which may be  upper  and/or
+     lower  case).   Certain  basic  rules  are  in uppercase, such as
+     SPACE, TAB, CRLF, DIGIT, ALPHA, etc.  Angle brackets are used  in
+     rule  definitions,  and  in  the rest of this  document, whenever
+     their presence will facilitate discerning the use of rule names.
+ 
+     2.2.  RULE1 / RULE2:  ALTERNATIVES
+ 
+          Elements separated by slash ("/") are alternatives.   There-
+     fore "foo / bar" will accept foo or bar.
+ 
+     2.3.  (RULE1 RULE2):  LOCAL ALTERNATIVES
+ 
+          Elements enclosed in parentheses are  treated  as  a  single
+     element.   Thus,  "(elem  (foo  /  bar)  elem)"  allows the token
+     sequences "elem foo elem" and "elem bar elem".
+ 
+     2.4.  *RULE:  REPETITION
+ 
+          The character "*" preceding an element indicates repetition.
+     The full form is:
+ 
+                              <l>*<m>element
+ 
+     indicating at least <l> and at most <m> occurrences  of  element.
+     Default values are 0 and infinity so that "*(element)" allows any
+     number, including zero; "1*element" requires at  least  one;  and
+     "1*2element" allows one or two.
+ 
+     2.5.  [RULE]:  OPTIONAL
+ 
+          Square brackets enclose optional elements; "[foo  bar]"   is
+     equivalent to "*1(foo bar)".
+ 
+     2.6.  NRULE:  SPECIFIC REPETITION
+ 
+          "<n>(element)" is equivalent to "<n>*<n>(element)"; that is,
+     exactly  <n>  occurrences  of (element). Thus 2DIGIT is a 2-digit
+     number, and 3ALPHA is a string of three alphabetic characters.
+ 
+ 
+     August 13, 1982               - 3 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+     2.7.  #RULE:  LISTS
+ 
+          A construct "#" is defined, similar to "*", as follows:
+ 
+                              <l>#<m>element
+ 
+     indicating at least <l> and at most <m> elements, each  separated
+     by  one  or more commas (","). This makes the usual form of lists
+     very easy; a rule such as '(element *("," element))' can be shown
+     as  "1#element".   Wherever this construct is used, null elements
+     are allowed, but do not  contribute  to  the  count  of  elements
+     present.   That  is,  "(element),,(element)"  is  permitted,  but
+     counts as only two elements.  Therefore, where at least one  ele-
+     ment  is required, at least one non-null element must be present.
+     Default values are 0 and infinity so that "#(element)" allows any
+     number,  including  zero;  "1#element" requires at least one; and
+     "1#2element" allows one or two.
+ 
+     2.8.  ; COMMENTS
+ 
+          A semi-colon, set off some distance to  the  right  of  rule
+     text,  starts  a comment that continues to the end of line.  This
+     is a simple way of including useful notes in  parallel  with  the
+     specifications.
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+     August 13, 1982               - 4 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+     3.  LEXICAL ANALYSIS OF MESSAGES
+ 
+     3.1.  GENERAL DESCRIPTION
+ 
+          A message consists of header fields and, optionally, a body.
+     The  body  is simply a sequence of lines containing ASCII charac-
+     ters.  It is separated from the headers by a null line  (i.e.,  a
+     line with nothing preceding the CRLF).
+ 
+     3.1.1.  LONG HEADER FIELDS
+ 
+        Each header field can be viewed as a single, logical  line  of
+        ASCII  characters,  comprising  a field-name and a field-body.
+        For convenience, the field-body  portion  of  this  conceptual
+        entity  can be split into a multiple-line representation; this
+        is called "folding".  The general rule is that wherever  there
+        may  be  linear-white-space  (NOT  simply  LWSP-chars), a CRLF
+        immediately followed by AT LEAST one LWSP-char may instead  be
+        inserted.  Thus, the single line
+ 
+            To:  "Joe & J. Harvey" <ddd @Org>, JJV @ BBN
+ 
+        can be represented as:
+ 
+            To:  "Joe & J. Harvey" <ddd @ Org>,
+                    JJV@BBN
+ 
+        and
+ 
+            To:  "Joe & J. Harvey"
+                            <ddd@ Org>, JJV
+             @BBN
+ 
+        and
+ 
+            To:  "Joe &
+             J. Harvey" <ddd @ Org>, JJV @ BBN
+ 
+             The process of moving  from  this  folded   multiple-line
+        representation  of a header field to its single line represen-
+        tation is called "unfolding".  Unfolding  is  accomplished  by
+        regarding   CRLF   immediately  followed  by  a  LWSP-char  as
+        equivalent to the LWSP-char.
+ 
+        Note:  While the standard  permits  folding  wherever  linear-
+               white-space is permitted, it is recommended that struc-
+               tured fields, such as those containing addresses, limit
+               folding  to higher-level syntactic breaks.  For address
+               fields, it  is  recommended  that  such  folding  occur
+ 
+ 
+     August 13, 1982               - 5 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+               between addresses, after the separating comma.
+ 
+     3.1.2.  STRUCTURE OF HEADER FIELDS
+ 
+        Once a field has been unfolded, it may be viewed as being com-
+        posed of a field-name followed by a colon (":"), followed by a
+        field-body, and  terminated  by  a  carriage-return/line-feed.
+        The  field-name must be composed of printable ASCII characters
+        (i.e., characters that  have  values  between  33.  and  126.,
+        decimal, except colon).  The field-body may be composed of any
+        ASCII characters, except CR or LF.  (While CR and/or LF may be
+        present  in the actual text, they are removed by the action of
+        unfolding the field.)
+ 
+        Certain field-bodies of headers may be  interpreted  according
+        to  an  internal  syntax  that some systems may wish to parse.
+        These  fields  are  called  "structured   fields".    Examples
+        include  fields containing dates and addresses.  Other fields,
+        such as "Subject"  and  "Comments",  are  regarded  simply  as
+        strings of text.
+ 
+        Note:  Any field which has a field-body  that  is  defined  as
+               other  than  simply <text> is to be treated as a struc-
+               tured field.
+ 
+               Field-names, unstructured field bodies  and  structured
+               field bodies each are scanned by their own, independent
+               "lexical" analyzers.
+ 
+     3.1.3.  UNSTRUCTURED FIELD BODIES
+ 
+        For some fields, such as "Subject" and "Comments",  no  struc-
+        turing  is assumed, and they are treated simply as <text>s, as
+        in the message body.  Rules of folding apply to these  fields,
+        so  that  such  field  bodies  which occupy several lines must
+        therefore have the second and successive lines indented by  at
+        least one LWSP-char.
+ 
+     3.1.4.  STRUCTURED FIELD BODIES
+ 
+        To aid in the creation and reading of structured  fields,  the
+        free  insertion   of linear-white-space (which permits folding
+        by inclusion of CRLFs)  is  allowed  between  lexical  tokens.
+        Rather  than  obscuring  the  syntax  specifications for these
+        structured fields with explicit syntax for this  linear-white-
+        space, the existence of another "lexical" analyzer is assumed.
+        This analyzer does not apply  for  unstructured  field  bodies
+        that  are  simply  strings  of  text, as described above.  The
+        analyzer provides  an  interpretation  of  the  unfolded  text
+ 
+ 
+     August 13, 1982               - 6 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+        composing  the body of the field as a sequence of lexical sym-
+        bols.
+ 
+        These symbols are:
+ 
+                     -  individual special characters
+                     -  quoted-strings
+                     -  domain-literals
+                     -  comments
+                     -  atoms
+ 
+        The first four of these symbols  are  self-delimiting.   Atoms
+        are not; they are delimited by the self-delimiting symbols and
+        by  linear-white-space.   For  the  purposes  of  regenerating
+        sequences  of  atoms  and quoted-strings, exactly one SPACE is
+        assumed to exist, and should be used, between them.  (Also, in
+        the "Clarifications" section on "White Space", below, note the
+        rules about treatment of multiple contiguous LWSP-chars.)
+ 
+        So, for example, the folded body of an address field
+ 
+            ":sysmail"@  Some-Group. Some-Org,
+            Muhammed.(I am  the greatest) Ali @(the)Vegas.WBA
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+     August 13, 1982               - 7 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+        is analyzed into the following lexical symbols and types:
+ 
+                    :sysmail              quoted string
+                    @                     special
+                    Some-Group            atom
+                    .                     special
+                    Some-Org              atom
+                    ,                     special
+                    Muhammed              atom
+                    .                     special
+                    (I am  the greatest)  comment
+                    Ali                   atom
+                    @                     atom
+                    (the)                 comment
+                    Vegas                 atom
+                    .                     special
+                    WBA                   atom
+ 
+        The canonical representations for the data in these  addresses
+        are the following strings:
+ 
+                        ":sysmail"@Some-Group.Some-Org
+ 
+        and
+ 
+                            Muhammed.Ali@Vegas.WBA
+ 
+        Note:  For purposes of display, and when passing  such  struc-
+               tured information to other systems, such as mail proto-
+               col  services,  there  must  be  NO  linear-white-space
+               between  <word>s  that are separated by period (".") or
+               at-sign ("@") and exactly one SPACE between  all  other
+               <word>s.  Also, headers should be in a folded form.
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+     August 13, 1982               - 8 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+     3.2.  HEADER FIELD DEFINITIONS
+ 
+          These rules show a field meta-syntax, without regard for the
+     particular  type  or internal syntax.  Their purpose is to permit
+     detection of fields; also, they present to  higher-level  parsers
+     an image of each field as fitting on one line.
+ 
+     field       =  field-name ":" [ field-body ] CRLF
+ 
+     field-name  =  1*<any CHAR, excluding CTLs, SPACE, and ":">
+ 
+     field-body  =  field-body-contents
+                    [CRLF LWSP-char field-body]
+ 
+     field-body-contents =
+                   <the ASCII characters making up the field-body, as
+                    defined in the following sections, and consisting
+                    of combinations of atom, quoted-string, and
+                    specials tokens, or else consisting of texts>
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+     August 13, 1982               - 9 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+     3.3.  LEXICAL TOKENS
+ 
+          The following rules are used to define an underlying lexical
+     analyzer,  which  feeds  tokens to higher level parsers.  See the
+     ANSI references, in the Bibliography.
+ 
+                                                 ; (  Octal, Decimal.)
+     CHAR        =  <any ASCII character>        ; (  0-177,  0.-127.)
+     ALPHA       =  <any ASCII alphabetic character>
+                                                 ; (101-132, 65.- 90.)
+                                                 ; (141-172, 97.-122.)
+     DIGIT       =  <any ASCII decimal digit>    ; ( 60- 71, 48.- 57.)
+     CTL         =  <any ASCII control           ; (  0- 37,  0.- 31.)
+                     character and DEL>          ; (    177,     127.)
+     CR          =  <ASCII CR, carriage return>  ; (     15,      13.)
+     LF          =  <ASCII LF, linefeed>         ; (     12,      10.)
+     SPACE       =  <ASCII SP, space>            ; (     40,      32.)
+     HTAB        =  <ASCII HT, horizontal-tab>   ; (     11,       9.)
+     <">         =  <ASCII quote mark>           ; (     42,      34.)
+     CRLF        =  CR LF
+ 
+     LWSP-char   =  SPACE / HTAB                 ; semantics = SPACE
+ 
+     linear-white-space =  1*([CRLF] LWSP-char)  ; semantics = SPACE
+                                                 ; CRLF => folding
+ 
+     specials    =  "(" / ")" / "<" / ">" / "@"  ; Must be in quoted-
+                 /  "," / ";" / ":" / "\" / <">  ;  string, to use
+                 /  "." / "[" / "]"              ;  within a word.
+ 
+     delimiters  =  specials / linear-white-space / comment
+ 
+     text        =  <any CHAR, including bare    ; => atoms, specials,
+                     CR & bare LF, but NOT       ;  comments and
+                     including CRLF>             ;  quoted-strings are
+                                                 ;  NOT recognized.
+ 
+     atom        =  1*<any CHAR except specials, SPACE and CTLs>
+ 
+     quoted-string = <"> *(qtext/quoted-pair) <">; Regular qtext or
+                                                 ;   quoted chars.
+ 
+     qtext       =  <any CHAR excepting <">,     ; => may be folded
+                     "\" & CR, and including
+                     linear-white-space>
+ 
+     domain-literal =  "[" *(dtext / quoted-pair) "]"
+ 
+ 
+ 
+ 
+     August 13, 1982              - 10 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+     dtext       =  <any CHAR excluding "[",     ; => may be folded
+                     "]", "\" & CR, & including
+                     linear-white-space>
+ 
+     comment     =  "(" *(ctext / quoted-pair / comment) ")"
+ 
+     ctext       =  <any CHAR excluding "(",     ; => may be folded
+                     ")", "\" & CR, & including
+                     linear-white-space>
+ 
+     quoted-pair =  "\" CHAR                     ; may quote any char
+ 
+     phrase      =  1*word                       ; Sequence of words
+ 
+     word        =  atom / quoted-string
+ 
+ 
+     3.4.  CLARIFICATIONS
+ 
+     3.4.1.  QUOTING
+ 
+        Some characters are reserved for special interpretation,  such
+        as  delimiting lexical tokens.  To permit use of these charac-
+        ters as uninterpreted data, a quoting mechanism  is  provided.
+        To quote a character, precede it with a backslash ("\").
+ 
+        This mechanism is not fully general.  Characters may be quoted
+        only  within  a subset of the lexical constructs.  In particu-
+        lar, quoting is limited to use within:
+ 
+                             -  quoted-string
+                             -  domain-literal
+                             -  comment
+ 
+        Within these constructs, quoting is REQUIRED for  CR  and  "\"
+        and for the character(s) that delimit the token (e.g., "(" and
+        ")" for a comment).  However, quoting  is  PERMITTED  for  any
+        character.
+ 
+        Note:  In particular, quoting is NOT permitted  within  atoms.
+               For  example  when  the local-part of an addr-spec must
+               contain a special character, a quoted  string  must  be
+               used.  Therefore, a specification such as:
+ 
+                            Full\ Name@Domain
+ 
+               is not legal and must be specified as:
+ 
+                            "Full Name"@Domain
+ 
+ 
+     August 13, 1982              - 11 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+     3.4.2.  WHITE SPACE
+ 
+        Note:  In structured field bodies, multiple linear space ASCII
+               characters  (namely  HTABs  and  SPACEs) are treated as
+               single spaces and may freely surround any  symbol.   In
+               all header fields, the only place in which at least one
+               LWSP-char is REQUIRED is at the beginning of  continua-
+               tion lines in a folded field.
+ 
+        When passing text to processes  that  do  not  interpret  text
+        according to this standard (e.g., mail protocol servers), then
+        NO linear-white-space characters should occur between a period
+        (".") or at-sign ("@") and a <word>.  Exactly ONE SPACE should
+        be used in place of arbitrary linear-white-space  and  comment
+        sequences.
+ 
+        Note:  Within systems conforming to this standard, wherever  a
+               member of the list of delimiters is allowed, LWSP-chars
+               may also occur before and/or after it.
+ 
+        Writers of  mail-sending  (i.e.,  header-generating)  programs
+        should realize that there is no network-wide definition of the
+        effect of ASCII HT (horizontal-tab) characters on the  appear-
+        ance  of  text  at another network host; therefore, the use of
+        tabs in message headers, though permitted, is discouraged.
+ 
+     3.4.3.  COMMENTS
+ 
+        A comment is a set of ASCII characters, which is  enclosed  in
+        matching  parentheses  and which is not within a quoted-string
+        The comment construct permits message originators to add  text
+        which  will  be  useful  for  human readers, but which will be
+        ignored by the formal semantics.  Comments should be  retained
+        while  the  message  is subject to interpretation according to
+        this standard.  However, comments  must  NOT  be  included  in
+        other  cases,  such  as  during  protocol  exchanges with mail
+        servers.
+ 
+        Comments nest, so that if an unquoted left parenthesis  occurs
+        in  a  comment  string,  there  must  also be a matching right
+        parenthesis.  When a comment acts as the delimiter  between  a
+        sequence of two lexical symbols, such as two atoms, it is lex-
+        ically equivalent with a single SPACE,  for  the  purposes  of
+        regenerating  the  sequence, such as when passing the sequence
+        onto a mail protocol server.  Comments are  detected  as  such
+        only within field-bodies of structured fields.
+ 
+        If a comment is to be "folded" onto multiple lines,  then  the
+        syntax  for  folding  must  be  adhered to.  (See the "Lexical
+ 
+ 
+     August 13, 1982              - 12 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+        Analysis of Messages" section on "Folding Long Header  Fields"
+        above,  and  the  section on "Case Independence" below.)  Note
+        that  the  official  semantics  therefore  do  not  "see"  any
+        unquoted CRLFs that are in comments, although particular pars-
+        ing programs may wish to note their presence.  For these  pro-
+        grams,  it would be reasonable to interpret a "CRLF LWSP-char"
+        as being a CRLF that is part of the comment; i.e., the CRLF is
+        kept  and  the  LWSP-char is discarded.  Quoted CRLFs (i.e., a
+        backslash followed by a CR followed by a  LF)  still  must  be
+        followed by at least one LWSP-char.
+ 
+     3.4.4.  DELIMITING AND QUOTING CHARACTERS
+ 
+        The quote character (backslash) and  characters  that  delimit
+        syntactic  units  are not, generally, to be taken as data that
+        are part of the delimited or quoted unit(s).   In  particular,
+        the   quotation-marks   that   define   a  quoted-string,  the
+        parentheses that define  a  comment  and  the  backslash  that
+        quotes  a  following  character  are  NOT  part of the quoted-
+        string, comment or quoted character.  A quotation-mark that is
+        to  be  part  of  a quoted-string, a parenthesis that is to be
+        part of a comment and a backslash that is to be part of either
+        must  each be preceded by the quote-character backslash ("\").
+        Note that the syntax allows any character to be quoted  within
+        a  quoted-string  or  comment; however only certain characters
+        MUST be quoted to be included as data.  These  characters  are
+        the  ones that are not part of the alternate text group (i.e.,
+        ctext or qtext).
+ 
+        The one exception to this rule  is  that  a  single  SPACE  is
+        assumed  to  exist  between  contiguous words in a phrase, and
+        this interpretation is independent of  the  actual  number  of
+        LWSP-chars  that  the  creator  places  between the words.  To
+        include more than one SPACE, the creator must make  the  LWSP-
+        chars be part of a quoted-string.
+ 
+        Quotation marks that delimit a quoted string  and  backslashes
+        that  quote  the  following character should NOT accompany the
+        quoted-string when the string is passed to processes  that  do
+        not interpret data according to this specification (e.g., mail
+        protocol servers).
+ 
+     3.4.5.  QUOTED-STRINGS
+ 
+        Where permitted (i.e., in words in structured fields)  quoted-
+        strings  are  treated  as a single symbol.  That is, a quoted-
+        string is equivalent to an atom, syntactically.  If a  quoted-
+        string  is to be "folded" onto multiple lines, then the syntax
+        for folding must be adhered to.  (See the "Lexical Analysis of
+ 
+ 
+     August 13, 1982              - 13 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+        Messages"  section  on "Folding Long Header Fields" above, and
+        the section on "Case  Independence"  below.)   Therefore,  the
+        official  semantics  do  not  "see" any bare CRLFs that are in
+        quoted-strings; however particular parsing programs  may  wish
+        to  note  their presence.  For such programs, it would be rea-
+        sonable to interpret a "CRLF LWSP-char" as being a CRLF  which
+        is  part  of the quoted-string; i.e., the CRLF is kept and the
+        LWSP-char is discarded.  Quoted CRLFs (i.e., a backslash  fol-
+        lowed  by  a CR followed by a LF) are also subject to rules of
+        folding, but the presence of the quoting character (backslash)
+        explicitly  indicates  that  the  CRLF  is  data to the quoted
+        string.  Stripping off the first following LWSP-char  is  also
+        appropriate when parsing quoted CRLFs.
+ 
+     3.4.6.  BRACKETING CHARACTERS
+ 
+        There is one type of bracket which must occur in matched pairs
+        and may have pairs nested within each other:
+ 
+            o   Parentheses ("(" and ")") are used  to  indicate  com-
+                ments.
+ 
+        There are three types of brackets which must occur in  matched
+        pairs, and which may NOT be nested:
+ 
+            o   Colon/semi-colon (":" and ";") are   used  in  address
+                specifications  to  indicate that the included list of
+                addresses are to be treated as a group.
+ 
+            o   Angle brackets ("<" and ">")  are  generally  used  to
+                indicate  the  presence of a one machine-usable refer-
+                ence (e.g., delimiting mailboxes), possibly  including
+                source-routing to the machine.
+ 
+            o   Square brackets ("[" and "]") are used to indicate the
+                presence  of  a  domain-literal, which the appropriate
+                name-domain  is  to  use  directly,  bypassing  normal
+                name-resolution mechanisms.
+ 
+     3.4.7.  CASE INDEPENDENCE
+ 
+        Except as noted, alphabetic strings may be represented in  any
+        combination of upper and lower case.  The only syntactic units
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+     August 13, 1982              - 14 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+        which requires preservation of case information are:
+ 
+                    -  text
+                    -  qtext
+                    -  dtext
+                    -  ctext
+                    -  quoted-pair
+                    -  local-part, except "Postmaster"
+ 
+        When matching any other syntactic unit, case is to be ignored.
+        For  example, the field-names "From", "FROM", "from", and even
+        "FroM" are semantically equal and should all be treated ident-
+        ically.
+ 
+        When generating these units, any mix of upper and  lower  case
+        alphabetic  characters  may  be  used.  The case shown in this
+        specification is suggested for message-creating processes.
+ 
+        Note:  The reserved local-part address unit, "Postmaster",  is
+               an  exception.   When  the  value "Postmaster" is being
+               interpreted, it must be  accepted  in  any  mixture  of
+               case, including "POSTMASTER", and "postmaster".
+ 
+     3.4.8.  FOLDING LONG HEADER FIELDS
+ 
+        Each header field may be represented on exactly one line  con-
+        sisting  of the name of the field and its body, and terminated
+        by a CRLF; this is what the parser sees.  For readability, the
+        field-body  portion of long header fields may be "folded" onto
+        multiple lines of the actual field.  "Long" is commonly inter-
+        preted  to  mean greater than 65 or 72 characters.  The former
+        length serves as a limit, when the message is to be viewed  on
+        most  simple terminals which use simple display software; how-
+        ever, the limit is not imposed by this standard.
+ 
+        Note:  Some display software often can selectively fold lines,
+               to  suit  the display terminal.  In such cases, sender-
+               provided  folding  can  interfere  with   the   display
+               software.
+ 
+     3.4.9.  BACKSPACE CHARACTERS
+ 
+        ASCII BS characters (Backspace, decimal 8) may be included  in
+        texts and quoted-strings to effect overstriking.  However, any
+        use of backspaces which effects an overstrike to the  left  of
+        the beginning of the text or quoted-string is prohibited.
+ 
+ 
+ 
+ 
+ 
+     August 13, 1982              - 15 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+     3.4.10.  NETWORK-SPECIFIC TRANSFORMATIONS
+ 
+        During transmission through heterogeneous networks, it may  be
+        necessary  to  force data to conform to a network's local con-
+        ventions.  For example, it may be required that a CR  be  fol-
+        lowed  either by LF, making a CRLF, or by <null>, if the CR is
+        to stand alone).  Such transformations are reversed, when  the
+        message exits that network.
+ 
+        When  crossing  network  boundaries,  the  message  should  be
+        treated  as  passing  through  two modules.  It will enter the
+        first module containing whatever network-specific  transforma-
+        tions  that  were  necessary  to  permit migration through the
+        "current" network.  It then passes through the modules:
+ 
+            o   Transformation Reversal
+ 
+                The "current" network's idiosyncracies are removed and
+                the  message  is returned to the canonical form speci-
+                fied in this standard.
+ 
+            o   Transformation
+ 
+                The "next" network's local idiosyncracies are  imposed
+                on the message.
+ 
+                                ------------------
+                    From   ==>  | Remove Net-A   |
+                    Net-A       | idiosyncracies |
+                                ------------------
+                                       ||
+                                       \/
+                                  Conformance
+                                  with standard
+                                       ||
+                                       \/
+                                ------------------
+                                | Impose Net-B   |  ==>  To
+                                | idiosyncracies |       Net-B
+                                ------------------
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+     August 13, 1982              - 16 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+     4.  MESSAGE SPECIFICATION
+ 
+     4.1.  SYNTAX
+ 
+     Note:  Due to an artifact of the notational conventions, the syn-
+            tax  indicates that, when present, some fields, must be in
+            a particular order.  Header fields  are  NOT  required  to
+            occur  in  any  particular  order, except that the message
+            body must occur AFTER  the  headers.   It  is  recommended
+            that,  if  present,  headers be sent in the order "Return-
+            Path", "Received", "Date",  "From",  "Subject",  "Sender",
+            "To", "cc", etc.
+ 
+            This specification permits multiple  occurrences  of  most
+            fields.   Except  as  noted,  their  interpretation is not
+            specified here, and their use is discouraged.
+ 
+          The following syntax for the bodies of various fields should
+     be  thought  of  as  describing  each field body as a single long
+     string (or line).  The "Lexical Analysis of Message"  section  on
+     "Long  Header Fields", above, indicates how such long strings can
+     be represented on more than one line in  the  actual  transmitted
+     message.
+ 
+     message     =  fields *( CRLF *text )       ; Everything after
+                                                 ;  first null line
+                                                 ;  is message body
+ 
+     fields      =    dates                      ; Creation time,
+                      source                     ;  author id & one
+                    1*destination                ;  address required
+                     *optional-field             ;  others optional
+ 
+     source      = [  trace ]                    ; net traversals
+                      originator                 ; original mail
+                   [  resent ]                   ; forwarded
+ 
+     trace       =    return                     ; path to sender
+                    1*received                   ; receipt tags
+ 
+     return      =  "Return-path" ":" route-addr ; return address
+ 
+     received    =  "Received"    ":"            ; one per relay
+                       ["from" domain]           ; sending host
+                       ["by"   domain]           ; receiving host
+                       ["via"  atom]             ; physical path
+                      *("with" atom)             ; link/mail protocol
+                       ["id"   msg-id]           ; receiver msg id
+                       ["for"  addr-spec]        ; initial form
+ 
+ 
+     August 13, 1982              - 17 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+                        ";"    date-time         ; time received
+ 
+     originator  =   authentic                   ; authenticated addr
+                   [ "Reply-To"   ":" 1#address] )
+ 
+     authentic   =   "From"       ":"   mailbox  ; Single author
+                 / ( "Sender"     ":"   mailbox  ; Actual submittor
+                     "From"       ":" 1#mailbox) ; Multiple authors
+                                                 ;  or not sender
+ 
+     resent      =   resent-authentic
+                   [ "Resent-Reply-To"  ":" 1#address] )
+ 
+     resent-authentic =
+                 =   "Resent-From"      ":"   mailbox
+                 / ( "Resent-Sender"    ":"   mailbox
+                     "Resent-From"      ":" 1#mailbox  )
+ 
+     dates       =   orig-date                   ; Original
+                   [ resent-date ]               ; Forwarded
+ 
+     orig-date   =  "Date"        ":"   date-time
+ 
+     resent-date =  "Resent-Date" ":"   date-time
+ 
+     destination =  "To"          ":" 1#address  ; Primary
+                 /  "Resent-To"   ":" 1#address
+                 /  "cc"          ":" 1#address  ; Secondary
+                 /  "Resent-cc"   ":" 1#address
+                 /  "bcc"         ":"  #address  ; Blind carbon
+                 /  "Resent-bcc"  ":"  #address
+ 
+     optional-field =
+                 /  "Message-ID"        ":"   msg-id
+                 /  "Resent-Message-ID" ":"   msg-id
+                 /  "In-Reply-To"       ":"  *(phrase / msg-id)
+                 /  "References"        ":"  *(phrase / msg-id)
+                 /  "Keywords"          ":"  #phrase
+                 /  "Subject"           ":"  *text
+                 /  "Comments"          ":"  *text
+                 /  "Encrypted"         ":" 1#2word
+                 /  extension-field              ; To be defined
+                 /  user-defined-field           ; May be pre-empted
+ 
+     msg-id      =  "<" addr-spec ">"            ; Unique message id
+ 
+ 
+ 
+ 
+ 
+ 
+     August 13, 1982              - 18 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+     extension-field =
+                   <Any field which is defined in a document
+                    published as a formal extension to this
+                    specification; none will have names beginning
+                    with the string "X-">
+ 
+     user-defined-field =
+                   <Any field which has not been defined
+                    in this specification or published as an
+                    extension to this specification; names for
+                    such fields must be unique and may be
+                    pre-empted by published extensions>
+ 
+     4.2.  FORWARDING
+ 
+          Some systems permit mail recipients to  forward  a  message,
+     retaining  the original headers, by adding some new fields.  This
+     standard supports such a service, through the "Resent-" prefix to
+     field names.
+ 
+          Whenever the string "Resent-" begins a field name, the field
+     has  the  same  semantics as a field whose name does not have the
+     prefix.  However, the message is assumed to have  been  forwarded
+     by  an original recipient who attached the "Resent-" field.  This
+     new field is treated as being more recent  than  the  equivalent,
+     original  field.   For  example, the "Resent-From", indicates the
+     person that forwarded the message, whereas the "From" field indi-
+     cates the original author.
+ 
+          Use of such precedence  information  depends  upon  partici-
+     pants'  communication needs.  For example, this standard does not
+     dictate when a "Resent-From:" address should receive replies,  in
+     lieu of sending them to the "From:" address.
+ 
+     Note:  In general, the "Resent-" fields should be treated as con-
+            taining  a  set  of information that is independent of the
+            set of original fields.  Information for  one  set  should
+            not  automatically be taken from the other.  The interpre-
+            tation of multiple "Resent-" fields, of the same type,  is
+            undefined.
+ 
+          In the remainder of this specification, occurrence of  legal
+     "Resent-"  fields  are treated identically with the occurrence of
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+     August 13, 1982              - 19 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+     fields whose names do not contain this prefix.
+ 
+     4.3.  TRACE FIELDS
+ 
+          Trace information is used to provide an audit trail of  mes-
+     sage  handling.   In  addition,  it indicates a route back to the
+     sender of the message.
+ 
+          The list of known "via" and  "with"  values  are  registered
+     with  the  Network  Information  Center, SRI International, Menlo
+     Park, California.
+ 
+     4.3.1.  RETURN-PATH
+ 
+        This field  is  added  by  the  final  transport  system  that
+        delivers  the message to its recipient.  The field is intended
+        to contain definitive information about the address and  route
+        back to the message's originator.
+ 
+        Note:  The "Reply-To" field is added  by  the  originator  and
+               serves  to  direct  replies,  whereas the "Return-Path"
+               field is used to identify a path back to  the  origina-
+               tor.
+ 
+        While the syntax  indicates  that  a  route  specification  is
+        optional,  every attempt should be made to provide that infor-
+        mation in this field.
+ 
+     4.3.2.  RECEIVED
+ 
+        A copy of this field is added by each transport  service  that
+        relays the message.  The information in the field can be quite
+        useful for tracing transport problems.
+ 
+        The names of the sending  and  receiving  hosts  and  time-of-
+        receipt may be specified.  The "via" parameter may be used, to
+        indicate what physical mechanism the message  was  sent  over,
+        such  as  Arpanet or Phonenet, and the "with" parameter may be
+        used to indicate the mail-,  or  connection-,  level  protocol
+        that  was  used, such as the SMTP mail protocol, or X.25 tran-
+        sport protocol.
+ 
+        Note:  Several "with" parameters may  be  included,  to  fully
+               specify the set of protocols that were used.
+ 
+        Some transport services queue mail; the internal message iden-
+        tifier that is assigned to the message may be noted, using the
+        "id" parameter.  When the  sending  host  uses  a  destination
+        address specification that the receiving host reinterprets, by
+ 
+ 
+     August 13, 1982              - 20 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+        expansion or transformation, the receiving host  may  wish  to
+        record  the original specification, using the "for" parameter.
+        For example, when a copy of mail is sent to the  member  of  a
+        distribution  list,  this  parameter may be used to record the
+        original address that was used to specify the list.
+ 
+     4.4.  ORIGINATOR FIELDS
+ 
+          The standard allows only a subset of the combinations possi-
+     ble  with the From, Sender, Reply-To, Resent-From, Resent-Sender,
+     and Resent-Reply-To fields.  The limitation is intentional.
+ 
+     4.4.1.  FROM / RESENT-FROM
+ 
+        This field contains the identity of the person(s)  who  wished
+        this  message to be sent.  The message-creation process should
+        default this field  to  be  a  single,  authenticated  machine
+        address,  indicating  the  AGENT  (person,  system or process)
+        entering the message.  If this is not done, the "Sender" field
+        MUST  be  present.  If the "From" field IS defaulted this way,
+        the "Sender" field is  optional  and  is  redundant  with  the
+        "From"  field.   In  all  cases, addresses in the "From" field
+        must be machine-usable (addr-specs) and may not contain  named
+        lists (groups).
+ 
+     4.4.2.  SENDER / RESENT-SENDER
+ 
+        This field contains the authenticated identity  of  the  AGENT
+        (person,  system  or  process)  that sends the message.  It is
+        intended for use when the sender is not the author of the mes-
+        sage,  or  to  indicate  who among a group of authors actually
+        sent the message.  If the contents of the "Sender" field would
+        be  completely  redundant  with  the  "From"  field,  then the
+        "Sender" field need not be present and its use is  discouraged
+        (though  still legal).  In particular, the "Sender" field MUST
+        be present if it is NOT the same as the "From" Field.
+ 
+        The Sender mailbox  specification  includes  a  word  sequence
+        which  must correspond to a specific agent (i.e., a human user
+        or a computer program) rather than a standard  address.   This
+        indicates  the  expectation  that  the field will identify the
+        single AGENT (person,  system,  or  process)  responsible  for
+        sending  the mail and not simply include the name of a mailbox
+        from which the mail was sent.  For example in the  case  of  a
+        shared login name, the name, by itself, would not be adequate.
+        The local-part address unit, which refers to  this  agent,  is
+        expected to be a computer system term, and not (for example) a
+        generalized person reference which can  be  used  outside  the
+        network text message context.
+ 
+ 
+     August 13, 1982              - 21 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+        Since the critical function served by the  "Sender"  field  is
+        identification  of  the agent responsible for sending mail and
+        since computer programs cannot be held accountable  for  their
+        behavior, it is strongly recommended that when a computer pro-
+        gram generates a message, the HUMAN  who  is  responsible  for
+        that program be referenced as part of the "Sender" field mail-
+        box specification.
+ 
+     4.4.3.  REPLY-TO / RESENT-REPLY-TO
+ 
+        This field provides a general  mechanism  for  indicating  any
+        mailbox(es)  to which responses are to be sent.  Three typical
+        uses for this feature can  be  distinguished.   In  the  first
+        case,  the  author(s) may not have regular machine-based mail-
+        boxes and therefore wish(es) to indicate an alternate  machine
+        address.   In  the  second case, an author may wish additional
+        persons to be made aware of, or responsible for,  replies.   A
+        somewhat  different  use  may be of some help to "text message
+        teleconferencing" groups equipped with automatic  distribution
+        services:   include the address of that service in the "Reply-
+        To" field of all messages  submitted  to  the  teleconference;
+        then  participants  can  "reply"  to conference submissions to
+        guarantee the correct distribution of any submission of  their
+        own.
+ 
+        Note:  The "Return-Path" field is added by the mail  transport
+               service,  at the time of final deliver.  It is intended
+               to identify a path back to the orginator  of  the  mes-
+               sage.   The  "Reply-To"  field  is added by the message
+               originator and is intended to direct replies.
+ 
+     4.4.4.  AUTOMATIC USE OF FROM / SENDER / REPLY-TO
+ 
+        For systems which automatically  generate  address  lists  for
+        replies to messages, the following recommendations are made:
+ 
+            o   The "Sender" field mailbox should be sent  notices  of
+                any  problems in transport or delivery of the original
+                messages.  If there is no  "Sender"  field,  then  the
+                "From" field mailbox should be used.
+ 
+            o   The  "Sender"  field  mailbox  should  NEVER  be  used
+                automatically, in a recipient's reply message.
+ 
+            o   If the "Reply-To" field exists, then the reply  should
+                go to the addresses indicated in that field and not to
+                the address(es) indicated in the "From" field.
+ 
+ 
+ 
+ 
+     August 13, 1982              - 22 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+            o   If there is a "From" field, but no  "Reply-To"  field,
+                the  reply should be sent to the address(es) indicated
+                in the "From" field.
+ 
+        Sometimes, a recipient may actually wish to  communicate  with
+        the  person  that  initiated  the  message  transfer.  In such
+        cases, it is reasonable to use the "Sender" address.
+ 
+        This recommendation is intended  only  for  automated  use  of
+        originator-fields  and is not intended to suggest that replies
+        may not also be sent to other recipients of messages.   It  is
+        up  to  the  respective  mail-handling programs to decide what
+        additional facilities will be provided.
+ 
+        Examples are provided in Appendix A.
+ 
+     4.5.  RECEIVER FIELDS
+ 
+     4.5.1.  TO / RESENT-TO
+ 
+        This field contains the identity of the primary recipients  of
+        the message.
+ 
+     4.5.2.  CC / RESENT-CC
+ 
+        This field contains the identity of  the  secondary  (informa-
+        tional) recipients of the message.
+ 
+     4.5.3.  BCC / RESENT-BCC
+ 
+        This field contains the identity of additional  recipients  of
+        the  message.   The contents of this field are not included in
+        copies of the message sent to the primary and secondary  reci-
+        pients.   Some  systems  may choose to include the text of the
+        "Bcc" field only in the author(s)'s  copy,  while  others  may
+        also include it in the text sent to all those indicated in the
+        "Bcc" list.
+ 
+     4.6.  REFERENCE FIELDS
+ 
+     4.6.1.  MESSAGE-ID / RESENT-MESSAGE-ID
+ 
+             This field contains a unique identifier  (the  local-part
+        address  unit)  which  refers to THIS version of THIS message.
+        The uniqueness of the message identifier is guaranteed by  the
+        host  which  generates  it.  This identifier is intended to be
+        machine readable and not necessarily meaningful to humans.   A
+        message  identifier pertains to exactly one instantiation of a
+        particular message; subsequent revisions to the message should
+ 
+ 
+     August 13, 1982              - 23 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+        each receive new message identifiers.
+ 
+     4.6.2.  IN-REPLY-TO
+ 
+             The contents of this field identify  previous  correspon-
+        dence  which this message answers.  Note that if message iden-
+        tifiers are used in this  field,  they  must  use  the  msg-id
+        specification format.
+ 
+     4.6.3.  REFERENCES
+ 
+             The contents of this field identify other  correspondence
+        which  this message references.  Note that if message identif-
+        iers are used, they must use the msg-id specification format.
+ 
+     4.6.4.  KEYWORDS
+ 
+             This field contains keywords  or  phrases,  separated  by
+        commas.
+ 
+     4.7.  OTHER FIELDS
+ 
+     4.7.1.  SUBJECT
+ 
+             This is intended to provide a summary,  or  indicate  the
+        nature, of the message.
+ 
+     4.7.2.  COMMENTS
+ 
+             Permits adding text comments  onto  the  message  without
+        disturbing the contents of the message's body.
+ 
+     4.7.3.  ENCRYPTED
+ 
+             Sometimes,  data  encryption  is  used  to  increase  the
+        privacy  of  message  contents.   If the body of a message has
+        been encrypted, to keep its contents private, the  "Encrypted"
+        field  can be used to note the fact and to indicate the nature
+        of the encryption.  The first <word> parameter  indicates  the
+        software  used  to  encrypt the body, and the second, optional
+        <word> is intended to  aid  the  recipient  in  selecting  the
+        proper  decryption  key.   This  code word may be viewed as an
+        index to a table of keys held by the recipient.
+ 
+        Note:  Unfortunately, headers must contain envelope,  as  well
+               as  contents,  information.  Consequently, it is neces-
+               sary that they remain unencrypted, so that  mail  tran-
+               sport   services   may   access   them.   Since  names,
+               addresses, and "Subject"  field  contents  may  contain
+ 
+ 
+     August 13, 1982              - 24 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+               sensitive  information,  this  requirement limits total
+               message privacy.
+ 
+             Names of encryption software are registered with the Net-
+        work  Information Center, SRI International, Menlo Park, Cali-
+        fornia.
+ 
+     4.7.4.  EXTENSION-FIELD
+ 
+             A limited number of common fields have  been  defined  in
+        this  document.   As  network mail requirements dictate, addi-
+        tional fields may be standardized.   To  provide  user-defined
+        fields  with  a  measure  of  safety,  in name selection, such
+        extension-fields will never have names  that  begin  with  the
+        string "X-".
+ 
+             Names of Extension-fields are registered with the Network
+        Information Center, SRI International, Menlo Park, California.
+ 
+     4.7.5.  USER-DEFINED-FIELD
+ 
+             Individual users of network mail are free to  define  and
+        use  additional  header  fields.   Such fields must have names
+        which are not already used in the current specification or  in
+        any definitions of extension-fields, and the overall syntax of
+        these user-defined-fields must conform to this specification's
+        rules   for   delimiting  and  folding  fields.   Due  to  the
+        extension-field  publishing  process,  the  name  of  a  user-
+        defined-field may be pre-empted
+ 
+        Note:  The prefatory string "X-" will never  be  used  in  the
+               names  of Extension-fields.  This provides user-defined
+               fields with a protected set of names.
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+     August 13, 1982              - 25 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+     5.  DATE AND TIME SPECIFICATION
+ 
+     5.1.  SYNTAX
+ 
+     date-time   =  [ day "," ] date time        ; dd mm yy
+                                                 ;  hh:mm:ss zzz
+ 
+     day         =  "Mon"  / "Tue" /  "Wed"  / "Thu"
+                 /  "Fri"  / "Sat" /  "Sun"
+ 
+     date        =  1*2DIGIT month 2DIGIT        ; day month year
+                                                 ;  e.g. 20 Jun 82
+ 
+     month       =  "Jan"  /  "Feb" /  "Mar"  /  "Apr"
+                 /  "May"  /  "Jun" /  "Jul"  /  "Aug"
+                 /  "Sep"  /  "Oct" /  "Nov"  /  "Dec"
+ 
+     time        =  hour zone                    ; ANSI and Military
+ 
+     hour        =  2DIGIT ":" 2DIGIT [":" 2DIGIT]
+                                                 ; 00:00:00 - 23:59:59
+ 
+     zone        =  "UT"  / "GMT"                ; Universal Time
+                                                 ; North American : UT
+                 /  "EST" / "EDT"                ;  Eastern:  - 5/ - 4
+                 /  "CST" / "CDT"                ;  Central:  - 6/ - 5
+                 /  "MST" / "MDT"                ;  Mountain: - 7/ - 6
+                 /  "PST" / "PDT"                ;  Pacific:  - 8/ - 7
+                 /  1ALPHA                       ; Military: Z = UT;
+                                                 ;  A:-1; (J not used)
+                                                 ;  M:-12; N:+1; Y:+12
+                 / ( ("+" / "-") 4DIGIT )        ; Local differential
+                                                 ;  hours+min. (HHMM)
+ 
+     5.2.  SEMANTICS
+ 
+          If included, day-of-week must be the day implied by the date
+     specification.
+ 
+          Time zone may be indicated in several ways.  "UT" is Univer-
+     sal  Time  (formerly called "Greenwich Mean Time"); "GMT" is per-
+     mitted as a reference to Universal Time.  The  military  standard
+     uses  a  single  character for each zone.  "Z" is Universal Time.
+     "A" indicates one hour earlier, and "M" indicates 12  hours  ear-
+     lier;  "N"  is  one  hour  later, and "Y" is 12 hours later.  The
+     letter "J" is not used.  The other remaining two forms are  taken
+     from ANSI standard X3.51-1975.  One allows explicit indication of
+     the amount of offset from UT; the other uses  common  3-character
+     strings for indicating time zones in North America.
+ 
+ 
+     August 13, 1982              - 26 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+     6.  ADDRESS SPECIFICATION
+ 
+     6.1.  SYNTAX
+ 
+     address     =  mailbox                      ; one addressee
+                 /  group                        ; named list
+ 
+     group       =  phrase ":" [#mailbox] ";"
+ 
+     mailbox     =  addr-spec                    ; simple address
+                 /  phrase route-addr            ; name & addr-spec
+ 
+     route-addr  =  "<" [route] addr-spec ">"
+ 
+     route       =  1#("@" domain) ":"           ; path-relative
+ 
+     addr-spec   =  local-part "@" domain        ; global address
+ 
+     local-part  =  word *("." word)             ; uninterpreted
+                                                 ; case-preserved
+ 
+     domain      =  sub-domain *("." sub-domain)
+ 
+     sub-domain  =  domain-ref / domain-literal
+ 
+     domain-ref  =  atom                         ; symbolic reference
+ 
+     6.2.  SEMANTICS
+ 
+          A mailbox receives mail.  It is a  conceptual  entity  which
+     does  not necessarily pertain to file storage.  For example, some
+     sites may choose to print mail on their line printer and  deliver
+     the output to the addressee's desk.
+ 
+          A mailbox specification comprises a person, system  or  pro-
+     cess name reference, a domain-dependent string, and a name-domain
+     reference.  The name reference is optional and is usually used to
+     indicate  the  human name of a recipient.  The name-domain refer-
+     ence specifies a sequence of sub-domains.   The  domain-dependent
+     string is uninterpreted, except by the final sub-domain; the rest
+     of the mail service merely transmits it as a literal string.
+ 
+     6.2.1.  DOMAINS
+ 
+        A name-domain is a set of registered (mail)  names.   A  name-
+        domain  specification  resolves  to  a subordinate name-domain
+        specification  or  to  a  terminal  domain-dependent   string.
+        Hence,  domain  specification  is  extensible,  permitting any
+        number of registration levels.
+ 
+ 
+     August 13, 1982              - 27 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+        Name-domains model a global, logical, hierarchical  addressing
+        scheme.   The  model is logical, in that an address specifica-
+        tion is related to name registration and  is  not  necessarily
+        tied  to  transmission  path.   The  model's  hierarchy  is  a
+        directed graph, called an in-tree, such that there is a single
+        path  from  the root of the tree to any node in the hierarchy.
+        If more than one path actually exists, they are considered  to
+        be different addresses.
+ 
+        The root node is common to all addresses; consequently, it  is
+        not  referenced.   Its  children  constitute "top-level" name-
+        domains.  Usually, a service has access to its own full domain
+        specification and to the names of all top-level name-domains.
+ 
+        The "top" of the domain addressing hierarchy -- a child of the
+        root  --  is  indicated  by  the right-most field, in a domain
+        specification.  Its child is specified to the left, its  child
+        to the left, and so on.
+ 
+        Some groups provide formal registration services;  these  con-
+        stitute   name-domains   that  are  independent  logically  of
+        specific machines.  In addition, networks and machines  impli-
+        citly  compose name-domains, since their membership usually is
+        registered in name tables.
+ 
+        In the case of formal registration, an organization implements
+        a  (distributed)  data base which provides an address-to-route
+        mapping service for addresses of the form:
+ 
+                         person@registry.organization
+ 
+        Note that "organization" is a logical  entity,  separate  from
+        any particular communication network.
+ 
+        A mechanism for accessing "organization" is universally avail-
+        able.   That mechanism, in turn, seeks an instantiation of the
+        registry; its location is not indicated in the address specif-
+        ication.   It  is assumed that the system which operates under
+        the name "organization" knows how to find a subordinate regis-
+        try.  The registry will then use the "person" string to deter-
+        mine where to send the mail specification.
+ 
+        The latter,  network-oriented  case  permits  simple,  direct,
+        attachment-related address specification, such as:
+ 
+                              user@host.network
+ 
+        Once the network is accessed, it is expected  that  a  message
+        will  go  directly  to the host and that the host will resolve
+ 
+ 
+     August 13, 1982              - 28 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+        the user name, placing the message in the user's mailbox.
+ 
+     6.2.2.  ABBREVIATED DOMAIN SPECIFICATION
+ 
+        Since any number of  levels  is  possible  within  the  domain
+        hierarchy,  specification  of  a  fully  qualified address can
+        become inconvenient.  This standard permits abbreviated domain
+        specification, in a special case:
+ 
+            For the address of  the  sender,  call  the  left-most
+            sub-domain  Level  N.   In a header address, if all of
+            the sub-domains above (i.e., to the right of) Level  N
+            are  the same as those of the sender, then they do not
+            have to appear in the specification.   Otherwise,  the
+            address must be fully qualified.
+ 
+            This feature is subject  to  approval  by  local  sub-
+            domains.   Individual  sub-domains  may  require their
+            member systems, which originate mail, to provide  full
+            domain  specification only.  When permitted, abbrevia-
+            tions may be present  only  while  the  message  stays
+            within the sub-domain of the sender.
+ 
+            Use of this mechanism requires the sender's sub-domain
+            to reserve the names of all top-level domains, so that
+            full specifications can be distinguished from abbrevi-
+            ated specifications.
+ 
+        For example, if a sender's address is:
+ 
+                 sender@registry-A.registry-1.organization-X
+ 
+        and one recipient's address is:
+ 
+                recipient@registry-B.registry-1.organization-X
+ 
+        and another's is:
+ 
+                recipient@registry-C.registry-2.organization-X
+ 
+        then ".registry-1.organization-X" need not be specified in the
+        the  message,  but  "registry-C.registry-2"  DOES  have  to be
+        specified.  That is, the first two addresses may  be  abbrevi-
+        ated, but the third address must be fully specified.
+ 
+        When a message crosses a domain boundary, all  addresses  must
+        be  specified  in  the  full format, ending with the top-level
+        name-domain in the right-most field.  It is the responsibility
+        of  mail  forwarding services to ensure that addresses conform
+ 
+ 
+     August 13, 1982              - 29 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+        with this requirement.  In the case of abbreviated  addresses,
+        the  relaying  service must make the necessary expansions.  It
+        should be noted that it often is difficult for such a  service
+        to locate all occurrences of address abbreviations.  For exam-
+        ple, it will not be possible to find such abbreviations within
+        the  body  of  the  message.   The "Return-Path" field can aid
+        recipients in recovering from these errors.
+ 
+        Note:  When passing any portion of an addr-spec onto a process
+               which  does  not interpret data according to this stan-
+               dard (e.g., mail protocol servers).  There must  be  NO
+               LWSP-chars  preceding  or  following the at-sign or any
+               delimiting period ("."), such as  shown  in  the  above
+               examples,   and   only  ONE  SPACE  between  contiguous
+               <word>s.
+ 
+     6.2.3.  DOMAIN TERMS
+ 
+        A domain-ref must be THE official name of a registry, network,
+        or  host.   It  is  a  symbolic  reference, within a name sub-
+        domain.  At times, it is necessary to bypass standard  mechan-
+        isms  for  resolving  such  references,  using  more primitive
+        information, such as a network host address  rather  than  its
+        associated host name.
+ 
+        To permit such references, this standard provides the  domain-
+        literal  construct.   Its contents must conform with the needs
+        of the sub-domain in which it is interpreted.
+ 
+        Domain-literals which refer to domains within the ARPA  Inter-
+        net  specify  32-bit  Internet addresses, in four 8-bit fields
+        noted in decimal, as described in Request for  Comments  #820,
+        "Assigned Numbers."  For example:
+ 
+                                 [10.0.3.19]
+ 
+        Note:  THE USE OF DOMAIN-LITERALS IS STRONGLY DISCOURAGED.  It
+               is  permitted  only  as  a means of bypassing temporary
+               system limitations, such as name tables which  are  not
+               complete.
+ 
+        The names of "top-level" domains, and  the  names  of  domains
+        under  in  the  ARPA Internet, are registered with the Network
+        Information Center, SRI International, Menlo Park, California.
+ 
+     6.2.4.  DOMAIN-DEPENDENT LOCAL STRING
+ 
+        The local-part of an  addr-spec  in  a  mailbox  specification
+        (i.e.,  the  host's  name for the mailbox) is understood to be
+ 
+ 
+     August 13, 1982              - 30 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+        whatever the receiving mail protocol server allows.  For exam-
+        ple,  some systems do not understand mailbox references of the
+        form "P. D. Q. Bach", but others do.
+ 
+        This specification treats periods (".") as lexical separators.
+        Hence,  their  presence  in  local-parts which are not quoted-
+        strings, is detected.   However,  such  occurrences  carry  NO
+        semantics.  That is, if a local-part has periods within it, an
+        address parser will divide the local-part into several tokens,
+        but  the  sequence  of  tokens will be treated as one uninter-
+        preted unit.  The sequence  will  be  re-assembled,  when  the
+        address is passed outside of the system such as to a mail pro-
+        tocol service.
+ 
+        For example, the address:
+ 
+                           First.Last@Registry.Org
+ 
+        is legal and does not require the local-part to be  surrounded
+        with  quotation-marks.   (However,  "First  Last" DOES require
+        quoting.)  The local-part of the address, when passed  outside
+        of  the  mail  system,  within  the  Registry.Org  domain,  is
+        "First.Last", again without quotation marks.
+ 
+     6.2.5.  BALANCING LOCAL-PART AND DOMAIN
+ 
+        In some cases, the boundary between local-part and domain  can
+        be  flexible.  The local-part may be a simple string, which is
+        used for the final determination of the  recipient's  mailbox.
+        All  other  levels  of  reference  are, therefore, part of the
+        domain.
+ 
+        For some systems, in the case of abbreviated reference to  the
+        local  and  subordinate  sub-domains,  it  may  be possible to
+        specify only one reference within the domain  part  and  place
+        the  other,  subordinate  name-domain  references  within  the
+        local-part.  This would appear as:
+ 
+                        mailbox.sub1.sub2@this-domain
+ 
+        Such a specification would be acceptable  to  address  parsers
+        which  conform  to  RFC  #733,  but  do not support this newer
+        Internet standard.  While contrary to the intent of this stan-
+        dard, the form is legal.
+ 
+        Also, some sub-domains have a specification syntax which  does
+        not conform to this standard.  For example:
+ 
+                      sub-net.mailbox@sub-domain.domain
+ 
+ 
+     August 13, 1982              - 31 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+        uses a different parsing  sequence  for  local-part  than  for
+        domain.
+ 
+        Note:  As a rule,  the  domain  specification  should  contain
+               fields  which  are  encoded  according to the syntax of
+               this standard and which contain  generally-standardized
+               information.   The local-part specification should con-
+               tain only that portion of the  address  which  deviates
+               from the form or intention of the domain field.
+ 
+     6.2.6.  MULTIPLE MAILBOXES
+ 
+        An individual may have several mailboxes and wish  to  receive
+        mail  at  whatever  mailbox  is  convenient  for the sender to
+        access.  This standard does not provide a means of  specifying
+        "any member of" a list of mailboxes.
+ 
+        A set of individuals may wish to receive mail as a single unit
+        (i.e.,  a  distribution  list).  The <group> construct permits
+        specification of such a list.  Recipient mailboxes are  speci-
+        fied  within  the  bracketed  part (":" - ";").  A copy of the
+        transmitted message is to be  sent  to  each  mailbox  listed.
+        This  standard  does  not  permit  recursive  specification of
+        groups within groups.
+ 
+        While a list must be named, it is not required that  the  con-
+        tents  of  the  list be included.  In this case, the <address>
+        serves only as an indication of group distribution  and  would
+        appear in the form:
+ 
+                                    name:;
+ 
+        Some mail  services  may  provide  a  group-list  distribution
+        facility,  accepting  a single mailbox reference, expanding it
+        to the full distribution list, and relaying the  mail  to  the
+        list's  members.   This standard provides no additional syntax
+        for indicating such a  service.   Using  the  <group>  address
+        alternative,  while listing one mailbox in it, can mean either
+        that the mailbox reference will be expanded to a list or  that
+        there is a group with one member.
+ 
+     6.2.7.  EXPLICIT PATH SPECIFICATION
+ 
+        At times, a  message  originator  may  wish  to  indicate  the
+        transmission  path  that  a  message  should  follow.  This is
+        called source routing.  The normal addressing scheme, used  in
+        an  addr-spec,  is  carefully separated from such information;
+        the <route> portion of a route-addr is provided for such occa-
+        sions.  It specifies the sequence of hosts and/or transmission
+ 
+ 
+     August 13, 1982              - 32 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+        services that are  to  be  traversed.   Both  domain-refs  and
+        domain-literals may be used.
+ 
+        Note:  The use of source routing is discouraged.   Unless  the
+               sender has special need of path restriction, the choice
+               of transmission route should be left to the mail  tran-
+               sport service.
+ 
+     6.3.  RESERVED ADDRESS
+ 
+          It often is necessary to send mail to a site, without  know-
+     ing  any  of its valid addresses.  For example, there may be mail
+     system dysfunctions, or a user may wish to find  out  a  person's
+     correct address, at that site.
+ 
+          This standard specifies a single, reserved  mailbox  address
+     (local-part)  which  is  to  be valid at each site.  Mail sent to
+     that address is to be routed to  a  person  responsible  for  the
+     site's mail system or to a person with responsibility for general
+     site operation.  The name of the reserved local-part address is:
+ 
+                                Postmaster
+ 
+     so that "Postmaster@domain" is required to be valid.
+ 
+     Note:  This reserved local-part must be  matched  without  sensi-
+            tivity to alphabetic case, so that "POSTMASTER", "postmas-
+            ter", and even "poStmASteR" is to be accepted.
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+     August 13, 1982              - 33 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+     7.  BIBLIOGRAPHY
+ 
+ 
+     ANSI.  "USA Standard Code  for  Information  Interchange,"  X3.4.
+        American  National Standards Institute: New York (1968).  Also
+        in:  Feinler, E.  and J. Postel, eds., "ARPANET Protocol Hand-
+        book", NIC 7104.
+ 
+     ANSI.  "Representations of Universal Time, Local  Time  Differen-
+        tials,  and United States Time Zone References for Information
+        Interchange," X3.51-1975.  American National Standards  Insti-
+        tute:  New York (1975).
+ 
+     Bemer, R.W., "Time and the Computer."  In:  Interface  Age  (Feb.
+        1979).
+ 
+     Bennett, C.J.  "JNT Mail Protocol".  Joint Network Team,  Ruther-
+        ford and Appleton Laboratory:  Didcot, England.
+ 
+     Bhushan, A.K., Pogran, K.T., Tomlinson,  R.S.,  and  White,  J.E.
+        "Standardizing  Network  Mail  Headers,"   ARPANET Request for
+        Comments No. 561, Network Information Center  No.  18516;  SRI
+        International:  Menlo Park (September 1973).
+ 
+     Birrell, A.D., Levin, R.,  Needham,  R.M.,  and  Schroeder,  M.D.
+        "Grapevine:  An Exercise in Distributed Computing," Communica-
+        tions of the ACM 25, 4 (April 1982), 260-274.
+ 
+     Crocker,  D.H.,  Vittal,  J.J.,  Pogran,  K.T.,  Henderson,  D.A.
+        "Standard  for  the  Format  of  ARPA  Network  Text Message,"
+        ARPANET Request for  Comments  No.  733,  Network  Information
+        Center  No.  41952.   SRI International:  Menlo Park (November
+        1977).
+ 
+     Feinler, E.J. and Postel, J.B.  ARPANET Protocol  Handbook,  Net-
+        work  Information  Center  No.  7104   (NTIS AD A003890).  SRI
+        International:  Menlo Park (April 1976).
+ 
+     Harary, F.   "Graph  Theory".   Addison-Wesley:   Reading,  Mass.
+        (1969).
+ 
+     Levin, R. and Schroeder, M.  "Transport  of  Electronic  Messages
+        through  a  Network,"   TeleInformatics  79, pp. 29-33.  North
+        Holland (1979).  Also  as  Xerox  Palo  Alto  Research  Center
+        Technical Report CSL-79-4.
+ 
+     Myer, T.H. and Henderson, D.A.  "Message Transmission  Protocol,"
+        ARPANET  Request  for  Comments,  No. 680, Network Information
+        Center No. 32116.  SRI International:  Menlo Park (1975).
+ 
+ 
+     August 13, 1982              - 34 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+     NBS.  "Specification of Message Format for Computer Based Message
+        Systems, Recommended Federal Information Processing Standard."
+        National  Bureau   of   Standards:    Gaithersburg,   Maryland
+        (October 1981).
+ 
+     NIC.  Internet Protocol Transition Workbook.  Network Information
+        Center,   SRI-International,  Menlo  Park,  California  (March
+        1982).
+ 
+     Oppen, D.C. and Dalal, Y.K.  "The Clearinghouse:  A Decentralized
+        Agent  for  Locating  Named  Objects in a Distributed Environ-
+        ment," OPD-T8103.  Xerox Office Products Division:  Palo Alto,
+        CA. (October 1981).
+ 
+     Postel, J.B.  "Assigned Numbers,"  ARPANET Request for  Comments,
+        No. 820.  SRI International:  Menlo Park (August 1982).
+ 
+     Postel, J.B.  "Simple Mail Transfer  Protocol,"  ARPANET  Request
+        for Comments, No. 821.  SRI International:  Menlo Park (August
+        1982).
+ 
+     Shoch, J.F.  "Internetwork naming, addressing  and  routing,"  in
+        Proc. 17th IEEE Computer Society International Conference, pp.
+        72-79, Sept. 1978, IEEE Cat. No. 78 CH 1388-8C.
+ 
+     Su, Z. and Postel, J.  "The Domain Naming Convention for Internet
+        User  Applications,"  ARPANET  Request  for Comments, No. 819.
+        SRI International:  Menlo Park (August 1982).
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+     August 13, 1982              - 35 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+                                 APPENDIX
+ 
+ 
+     A.  EXAMPLES
+ 
+     A.1.  ADDRESSES
+ 
+     A.1.1.  Alfred Neuman <Neuman@BBN-TENEXA>
+ 
+     A.1.2.  Neuman@BBN-TENEXA
+ 
+             These two "Alfred Neuman" examples have identical  seman-
+        tics, as far as the operation of the local host's mail sending
+        (distribution) program (also sometimes  called  its  "mailer")
+        and  the remote host's mail protocol server are concerned.  In
+        the first example, the  "Alfred  Neuman"  is  ignored  by  the
+        mailer,  as "Neuman@BBN-TENEXA" completely specifies the reci-
+        pient.  The second example contains  no  superfluous  informa-
+        tion,  and,  again,  "Neuman@BBN-TENEXA" is the intended reci-
+        pient.
+ 
+        Note:  When the message crosses name-domain  boundaries,  then
+               these specifications must be changed, so as to indicate
+               the remainder of the hierarchy, starting with  the  top
+               level.
+ 
+     A.1.3.  "George, Ted" <Shared@Group.Arpanet>
+ 
+             This form might be used to indicate that a single mailbox
+        is  shared  by several users.  The quoted string is ignored by
+        the originating host's mailer, because  "Shared@Group.Arpanet"
+        completely specifies the destination mailbox.
+ 
+     A.1.4.  Wilt . (the  Stilt) Chamberlain@NBA.US
+ 
+             The "(the  Stilt)" is a comment, which is NOT included in
+        the  destination  mailbox  address  handed  to the originating
+        system's mailer.  The local-part of the address is the  string
+        "Wilt.Chamberlain", with NO space between the first and second
+        words.
+ 
+     A.1.5.  Address Lists
+ 
+     Gourmets:  Pompous Person <WhoZiWhatZit@Cordon-Bleu>,
+                Childs@WGBH.Boston, Galloping Gourmet@
+                ANT.Down-Under (Australian National Television),
+                Cheapie@Discount-Liquors;,
+       Cruisers:  Port@Portugal, Jones@SEA;,
+         Another@Somewhere.SomeOrg
+ 
+ 
+     August 13, 1982              - 36 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+        This group list example points out the use of comments and the
+        mixing of addresses and groups.
+ 
+     A.2.  ORIGINATOR ITEMS
+ 
+     A.2.1.  Author-sent
+ 
+             George Jones logs into his host  as  "Jones".   He  sends
+        mail himself.
+ 
+            From:  Jones@Group.Org
+ 
+        or
+ 
+            From:  George Jones <Jones@Group.Org>
+ 
+     A.2.2.  Secretary-sent
+ 
+             George Jones logs in as Jones on his  host.   His  secre-
+        tary,  who logs in as Secy sends mail for him.  Replies to the
+        mail should go to George.
+ 
+            From:    George Jones <Jones@Group>
+            Sender:  Secy@Other-Group
+ 
+     A.2.3.  Secretary-sent, for user of shared directory
+ 
+             George Jones' secretary sends mail  for  George.  Replies
+        should go to George.
+ 
+            From:     George Jones<Shared@Group.Org>
+            Sender:   Secy@Other-Group
+ 
+        Note that there need not be a space between  "Jones"  and  the
+        "<",  but  adding a space enhances readability (as is the case
+        in other examples.
+ 
+     A.2.4.  Committee activity, with one author
+ 
+             George is a member of a committee.  He wishes to have any
+        replies to his message go to all committee members.
+ 
+            From:     George Jones <Jones@Host.Net>
+            Sender:   Jones@Host
+            Reply-To: The Committee: Jones@Host.Net,
+                                     Smith@Other.Org,
+                                     Doe@Somewhere-Else;
+ 
+        Note  that  if  George  had  not  included  himself   in   the
+ 
+ 
+     August 13, 1982              - 37 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+        enumeration  of  The  Committee,  he  would not have gotten an
+        implicit reply; the presence of the  "Reply-to"  field  SUPER-
+        SEDES the sending of a reply to the person named in the "From"
+        field.
+ 
+     A.2.5.  Secretary acting as full agent of author
+ 
+             George Jones asks his secretary  (Secy@Host)  to  send  a
+        message for him in his capacity as Group.  He wants his secre-
+        tary to handle all replies.
+ 
+            From:     George Jones <Group@Host>
+            Sender:   Secy@Host
+            Reply-To: Secy@Host
+ 
+     A.2.6.  Agent for user without online mailbox
+ 
+             A friend  of  George's,  Sarah,  is  visiting.   George's
+        secretary  sends  some  mail to a friend of Sarah in computer-
+        land.  Replies should go to George, whose mailbox is Jones  at
+        Registry.
+ 
+            From:     Sarah Friendly <Secy@Registry>
+            Sender:   Secy-Name <Secy@Registry>
+            Reply-To: Jones@Registry.
+ 
+     A.2.7.  Agent for member of a committee
+ 
+             George's secretary sends out a message which was authored
+        jointly by all the members of a committee.  Note that the name
+        of the committee cannot be specified, since <group> names  are
+        not permitted in the From field.
+ 
+            From:   Jones@Host,
+                    Smith@Other-Host,
+                    Doe@Somewhere-Else
+            Sender: Secy@SHost
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+     August 13, 1982              - 38 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+     A.3.  COMPLETE HEADERS
+ 
+     A.3.1.  Minimum required
+ 
+     Date:     26 Aug 76 1429 EDT        Date:     26 Aug 76 1429 EDT
+     From:     Jones@Registry.Org   or   From:     Jones@Registry.Org
+     Bcc:                                To:       Smith@Registry.Org
+ 
+        Note that the "Bcc" field may be empty, while the  "To"  field
+        is required to have at least one address.
+ 
+     A.3.2.  Using some of the additional fields
+ 
+     Date:     26 Aug 76 1430 EDT
+     From:     George Jones<Group@Host>
+     Sender:   Secy@SHOST
+     To:       "Al Neuman"@Mad-Host,
+               Sam.Irving@Other-Host
+     Message-ID:  <some.string@SHOST>
+ 
+     A.3.3.  About as complex as you're going to get
+ 
+     Date     :  27 Aug 76 0932 PDT
+     From     :  Ken Davis <KDavis@This-Host.This-net>
+     Subject  :  Re: The Syntax in the RFC
+     Sender   :  KSecy@Other-Host
+     Reply-To :  Sam.Irving@Reg.Organization
+     To       :  George Jones <Group@Some-Reg.An-Org>,
+                 Al.Neuman@MAD.Publisher
+     cc       :  Important folk:
+                   Tom Softwood <Balsa@Tree.Root>,
+                   "Sam Irving"@Other-Host;,
+                 Standard Distribution:
+                   /main/davis/people/standard@Other-Host,
+                   "<Jones>standard.dist.3"@Tops-20-Host>;
+     Comment  :  Sam is away on business. He asked me to handle
+                 his mail for him.  He'll be able to provide  a
+                 more  accurate  explanation  when  he  returns
+                 next week.
+     In-Reply-To: <some.string@DBM.Group>, George's message
+     X-Special-action:  This is a sample of user-defined field-
+                 names.  There could also be a field-name
+                 "Special-action", but its name might later be
+                 preempted
+     Message-ID: <4231.629.XYzi-What@Other-Host>
+ 
+ 
+ 
+ 
+ 
+ 
+     August 13, 1982              - 39 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+     B.  SIMPLE FIELD PARSING
+ 
+          Some mail-reading software systems may wish to perform  only
+     minimal  processing,  ignoring  the internal syntax of structured
+     field-bodies and treating them the  same  as  unstructured-field-
+     bodies.  Such software will need only to distinguish:
+ 
+         o   Header fields from the message body,
+ 
+         o   Beginnings of fields from lines which continue fields,
+ 
+         o   Field-names from field-contents.
+ 
+          The abbreviated set of syntactic rules  which  follows  will
+     suffice  for  this  purpose.  It describes a limited view of mes-
+     sages and is a subset of the syntactic rules provided in the main
+     part of this specification.  One small exception is that the con-
+     tents of field-bodies consist only of text:
+ 
+     B.1.  SYNTAX
+ 
+ 
+     message         =   *field *(CRLF *text)
+ 
+     field           =    field-name ":" [field-body] CRLF
+ 
+     field-name      =  1*<any CHAR, excluding CTLs, SPACE, and ":">
+ 
+     field-body      =   *text [CRLF LWSP-char field-body]
+ 
+ 
+     B.2.  SEMANTICS
+ 
+          Headers occur before the message body and are terminated  by
+     a null line (i.e., two contiguous CRLFs).
+ 
+          A line which continues a header field begins with a SPACE or
+     HTAB  character,  while  a  line  beginning a field starts with a
+     printable character which is not a colon.
+ 
+          A field-name consists of one or  more  printable  characters
+     (excluding  colon,  space, and control-characters).  A field-name
+     MUST be contained on one line.  Upper and lower case are not dis-
+     tinguished when comparing field-names.
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+     August 13, 1982              - 40 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+     C.  DIFFERENCES FROM RFC #733
+ 
+          The following summarizes the differences between this  stan-
+     dard  and the one specified in Arpanet Request for Comments #733,
+     "Standard for the Format of ARPA  Network  Text  Messages".   The
+     differences  are  listed  in the order of their occurrence in the
+     current specification.
+ 
+     C.1.  FIELD DEFINITIONS
+ 
+     C.1.1.  FIELD NAMES
+ 
+        These now must be a sequence of  printable  characters.   They
+        may not contain any LWSP-chars.
+ 
+     C.2.  LEXICAL TOKENS
+ 
+     C.2.1.  SPECIALS
+ 
+        The characters period ("."), left-square  bracket  ("["),  and
+        right-square  bracket ("]") have been added.  For presentation
+        purposes, and when passing a specification to  a  system  that
+        does  not conform to this standard, periods are to be contigu-
+        ous with their surrounding lexical tokens.   No  linear-white-
+        space  is  permitted  between them.  The presence of one LWSP-
+        char between other tokens is still directed.
+ 
+     C.2.2.  ATOM
+ 
+        Atoms may not contain SPACE.
+ 
+     C.2.3.  SPECIAL TEXT
+ 
+        ctext and qtext have had backslash ("\") added to the list  of
+        prohibited characters.
+ 
+     C.2.4.  DOMAINS
+ 
+        The lexical tokens  <domain-literal>  and  <dtext>  have  been
+        added.
+ 
+     C.3.  MESSAGE SPECIFICATION
+ 
+     C.3.1.  TRACE
+ 
+        The "Return-path:" and "Received:" fields have been specified.
+ 
+ 
+ 
+ 
+ 
+     August 13, 1982              - 41 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+     C.3.2.  FROM
+ 
+        The "From" field must contain machine-usable addresses  (addr-
+        spec).   Multiple  addresses may be specified, but named-lists
+        (groups) may not.
+ 
+     C.3.3.  RESENT
+ 
+        The meta-construct of prefacing field names  with  the  string
+        "Resent-"  has been added, to indicate that a message has been
+        forwarded by an intermediate recipient.
+ 
+     C.3.4.  DESTINATION
+ 
+        A message must contain at least one destination address field.
+        "To" and "CC" are required to contain at least one address.
+ 
+     C.3.5.  IN-REPLY-TO
+ 
+        The field-body is no longer a comma-separated list, although a
+        sequence is still permitted.
+ 
+     C.3.6.  REFERENCE
+ 
+        The field-body is no longer a comma-separated list, although a
+        sequence is still permitted.
+ 
+     C.3.7.  ENCRYPTED
+ 
+        A field has been specified that permits  senders  to  indicate
+        that the body of a message has been encrypted.
+ 
+     C.3.8.  EXTENSION-FIELD
+ 
+        Extension fields are prohibited from beginning with the  char-
+        acters "X-".
+ 
+     C.4.  DATE AND TIME SPECIFICATION
+ 
+     C.4.1.  SIMPLIFICATION
+ 
+        Fewer optional forms are permitted  and  the  list  of  three-
+        letter time zones has been shortened.
+ 
+     C.5.  ADDRESS SPECIFICATION
+ 
+ 
+ 
+ 
+ 
+ 
+     August 13, 1982              - 42 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+     C.5.1.  ADDRESS
+ 
+        The use of quoted-string, and the ":"-atom-":" construct, have
+        been  removed.   An  address  now  is  either a single mailbox
+        reference or is a named list of addresses.  The  latter  indi-
+        cates a group distribution.
+ 
+     C.5.2.  GROUPS
+ 
+        Group lists are now required to to have a name.   Group  lists
+        may not be nested.
+ 
+     C.5.3.  MAILBOX
+ 
+        A mailbox specification  may  indicate  a  person's  name,  as
+        before.   Such  a  named  list  no longer may specify multiple
+        mailboxes and may not be nested.
+ 
+     C.5.4.  ROUTE ADDRESSING
+ 
+        Addresses now are taken to be absolute, global specifications,
+        independent  of transmission paths.  The <route> construct has
+        been provided, to permit explicit specification  of  transmis-
+        sion  path.   RFC  #733's  use  of multiple at-signs ("@") was
+        intended as a general syntax  for  indicating  routing  and/or
+        hierarchical addressing.  The current standard separates these
+        specifications and only one at-sign is permitted.
+ 
+     C.5.5.  AT-SIGN
+ 
+        The string " at " no longer is used as an  address  delimiter.
+        Only at-sign ("@") serves the function.
+ 
+     C.5.6.  DOMAINS
+ 
+        Hierarchical, logical name-domains have been added.
+ 
+     C.6.  RESERVED ADDRESS
+ 
+     The local-part "Postmaster" has been reserved, so that users  can
+     be guaranteed at least one valid address at a site.
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+     August 13, 1982              - 43 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+     D.  ALPHABETICAL LISTING OF SYNTAX RULES
+ 
+     address     =  mailbox                      ; one addressee
+                 /  group                        ; named list
+     addr-spec   =  local-part "@" domain        ; global address
+     ALPHA       =  <any ASCII alphabetic character>
+                                                 ; (101-132, 65.- 90.)
+                                                 ; (141-172, 97.-122.)
+     atom        =  1*<any CHAR except specials, SPACE and CTLs>
+     authentic   =   "From"       ":"   mailbox  ; Single author
+                 / ( "Sender"     ":"   mailbox  ; Actual submittor
+                     "From"       ":" 1#mailbox) ; Multiple authors
+                                                 ;  or not sender
+     CHAR        =  <any ASCII character>        ; (  0-177,  0.-127.)
+     comment     =  "(" *(ctext / quoted-pair / comment) ")"
+     CR          =  <ASCII CR, carriage return>  ; (     15,      13.)
+     CRLF        =  CR LF
+     ctext       =  <any CHAR excluding "(",     ; => may be folded
+                     ")", "\" & CR, & including
+                     linear-white-space>
+     CTL         =  <any ASCII control           ; (  0- 37,  0.- 31.)
+                     character and DEL>          ; (    177,     127.)
+     date        =  1*2DIGIT month 2DIGIT        ; day month year
+                                                 ;  e.g. 20 Jun 82
+     dates       =   orig-date                   ; Original
+                   [ resent-date ]               ; Forwarded
+     date-time   =  [ day "," ] date time        ; dd mm yy
+                                                 ;  hh:mm:ss zzz
+     day         =  "Mon"  / "Tue" /  "Wed"  / "Thu"
+                 /  "Fri"  / "Sat" /  "Sun"
+     delimiters  =  specials / linear-white-space / comment
+     destination =  "To"          ":" 1#address  ; Primary
+                 /  "Resent-To"   ":" 1#address
+                 /  "cc"          ":" 1#address  ; Secondary
+                 /  "Resent-cc"   ":" 1#address
+                 /  "bcc"         ":"  #address  ; Blind carbon
+                 /  "Resent-bcc"  ":"  #address
+     DIGIT       =  <any ASCII decimal digit>    ; ( 60- 71, 48.- 57.)
+     domain      =  sub-domain *("." sub-domain)
+     domain-literal =  "[" *(dtext / quoted-pair) "]"
+     domain-ref  =  atom                         ; symbolic reference
+     dtext       =  <any CHAR excluding "[",     ; => may be folded
+                     "]", "\" & CR, & including
+                     linear-white-space>
+     extension-field =
+                   <Any field which is defined in a document
+                    published as a formal extension to this
+                    specification; none will have names beginning
+                    with the string "X-">
+ 
+ 
+     August 13, 1982              - 44 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+     field       =  field-name ":" [ field-body ] CRLF
+     fields      =    dates                      ; Creation time,
+                      source                     ;  author id & one
+                    1*destination                ;  address required
+                     *optional-field             ;  others optional
+     field-body  =  field-body-contents
+                    [CRLF LWSP-char field-body]
+     field-body-contents =
+                   <the ASCII characters making up the field-body, as
+                    defined in the following sections, and consisting
+                    of combinations of atom, quoted-string, and
+                    specials tokens, or else consisting of texts>
+     field-name  =  1*<any CHAR, excluding CTLs, SPACE, and ":">
+     group       =  phrase ":" [#mailbox] ";"
+     hour        =  2DIGIT ":" 2DIGIT [":" 2DIGIT]
+                                                 ; 00:00:00 - 23:59:59
+     HTAB        =  <ASCII HT, horizontal-tab>   ; (     11,       9.)
+     LF          =  <ASCII LF, linefeed>         ; (     12,      10.)
+     linear-white-space =  1*([CRLF] LWSP-char)  ; semantics = SPACE
+                                                 ; CRLF => folding
+     local-part  =  word *("." word)             ; uninterpreted
+                                                 ; case-preserved
+     LWSP-char   =  SPACE / HTAB                 ; semantics = SPACE
+     mailbox     =  addr-spec                    ; simple address
+                 /  phrase route-addr            ; name & addr-spec
+     message     =  fields *( CRLF *text )       ; Everything after
+                                                 ;  first null line
+                                                 ;  is message body
+     month       =  "Jan"  /  "Feb" /  "Mar"  /  "Apr"
+                 /  "May"  /  "Jun" /  "Jul"  /  "Aug"
+                 /  "Sep"  /  "Oct" /  "Nov"  /  "Dec"
+     msg-id      =  "<" addr-spec ">"            ; Unique message id
+     optional-field =
+                 /  "Message-ID"        ":"   msg-id
+                 /  "Resent-Message-ID" ":"   msg-id
+                 /  "In-Reply-To"       ":"  *(phrase / msg-id)
+                 /  "References"        ":"  *(phrase / msg-id)
+                 /  "Keywords"          ":"  #phrase
+                 /  "Subject"           ":"  *text
+                 /  "Comments"          ":"  *text
+                 /  "Encrypted"         ":" 1#2word
+                 /  extension-field              ; To be defined
+                 /  user-defined-field           ; May be pre-empted
+     orig-date   =  "Date"        ":"   date-time
+     originator  =   authentic                   ; authenticated addr
+                   [ "Reply-To"   ":" 1#address] )
+     phrase      =  1*word                       ; Sequence of words
+ 
+ 
+ 
+ 
+     August 13, 1982              - 45 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+     qtext       =  <any CHAR excepting <">,     ; => may be folded
+                     "\" & CR, and including
+                     linear-white-space>
+     quoted-pair =  "\" CHAR                     ; may quote any char
+     quoted-string = <"> *(qtext/quoted-pair) <">; Regular qtext or
+                                                 ;   quoted chars.
+     received    =  "Received"    ":"            ; one per relay
+                       ["from" domain]           ; sending host
+                       ["by"   domain]           ; receiving host
+                       ["via"  atom]             ; physical path
+                      *("with" atom)             ; link/mail protocol
+                       ["id"   msg-id]           ; receiver msg id
+                       ["for"  addr-spec]        ; initial form
+                        ";"    date-time         ; time received
+ 
+     resent      =   resent-authentic
+                   [ "Resent-Reply-To"  ":" 1#address] )
+     resent-authentic =
+                 =   "Resent-From"      ":"   mailbox
+                 / ( "Resent-Sender"    ":"   mailbox
+                     "Resent-From"      ":" 1#mailbox  )
+     resent-date =  "Resent-Date" ":"   date-time
+     return      =  "Return-path" ":" route-addr ; return address
+     route       =  1#("@" domain) ":"           ; path-relative
+     route-addr  =  "<" [route] addr-spec ">"
+     source      = [  trace ]                    ; net traversals
+                      originator                 ; original mail
+                   [  resent ]                   ; forwarded
+     SPACE       =  <ASCII SP, space>            ; (     40,      32.)
+     specials    =  "(" / ")" / "<" / ">" / "@"  ; Must be in quoted-
+                 /  "," / ";" / ":" / "\" / <">  ;  string, to use
+                 /  "." / "[" / "]"              ;  within a word.
+     sub-domain  =  domain-ref / domain-literal
+     text        =  <any CHAR, including bare    ; => atoms, specials,
+                     CR & bare LF, but NOT       ;  comments and
+                     including CRLF>             ;  quoted-strings are
+                                                 ;  NOT recognized.
+     time        =  hour zone                    ; ANSI and Military
+     trace       =    return                     ; path to sender
+                    1*received                   ; receipt tags
+     user-defined-field =
+                   <Any field which has not been defined
+                    in this specification or published as an
+                    extension to this specification; names for
+                    such fields must be unique and may be
+                    pre-empted by published extensions>
+     word        =  atom / quoted-string
+ 
+ 
+ 
+ 
+     August 13, 1982              - 46 -                      RFC #822
+
+ 
+ 
+     Standard for ARPA Internet Text Messages
+ 
+ 
+     zone        =  "UT"  / "GMT"                ; Universal Time
+                                                 ; North American : UT
+                 /  "EST" / "EDT"                ;  Eastern:  - 5/ - 4
+                 /  "CST" / "CDT"                ;  Central:  - 6/ - 5
+                 /  "MST" / "MDT"                ;  Mountain: - 7/ - 6
+                 /  "PST" / "PDT"                ;  Pacific:  - 8/ - 7
+                 /  1ALPHA                       ; Military: Z = UT;
+     <">         =  <ASCII quote mark>           ; (     42,      34.)
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+     August 13, 1982              - 47 -                      RFC #822
+ 
diff -uNr gmime-1.90.0/rfc/rfc1521.txt gmime/rfc/rfc1521.txt
--- gmime-1.90.0/rfc/rfc1521.txt	Thu Jan  1 01:00:00 1970
+++ gmime/rfc/rfc1521.txt	Wed Nov 21 01:47:15 2001
@@ -0,0 +1,4539 @@
+
+
+
+
+
+
+Network Working Group                                      N. Borenstein
+Request for Comments: 1521                                      Bellcore
+Obsoletes: 1341                                                 N. Freed
+Category: Standards Track                                       Innosoft
+                                                          September 1993
+
+
+         MIME (Multipurpose Internet Mail Extensions) Part One:
+                Mechanisms for Specifying and Describing
+                 the Format of Internet Message Bodies
+
+Status of this Memo
+
+   This RFC specifies an Internet standards track protocol for the
+   Internet community, and requests discussion and suggestions for
+   improvements.  Please refer to the current edition of the "Internet
+   Official Protocol Standards" for the standardization state and status
+   of this protocol.  Distribution of this memo is unlimited.
+
+Abstract
+
+   STD 11, RFC 822 defines a message representation protocol which
+   specifies considerable detail about message headers, but which leaves
+   the message content, or message body, as flat ASCII text.  This
+   document redefines the format of message bodies to allow multi-part
+   textual and non-textual message bodies to be represented and
+   exchanged without loss of information.  This is based on earlier work
+   documented in RFC 934 and STD 11, RFC 1049, but extends and revises
+   that work.  Because RFC 822 said so little about message bodies, this
+   document is largely orthogonal to (rather than a revision of) RFC
+   822.
+
+   In particular, this document is designed to provide facilities to
+   include multiple objects in a single message, to represent body text
+   in character sets other than US-ASCII, to represent formatted multi-
+   font text messages, to represent non-textual material such as images
+   and audio fragments, and generally to facilitate later extensions
+   defining new types of Internet mail for use by cooperating mail
+   agents.
+
+   This document does NOT extend Internet mail header fields to permit
+   anything other than US-ASCII text data.  Such extensions are the
+   subject of a companion document [RFC-1522].
+
+   This document is a revision of RFC 1341.  Significant differences
+   from RFC 1341 are summarized in Appendix H.
+
+
+
+
+
+Borenstein & Freed                                              [Page 1]
+
+RFC 1521                          MIME                    September 1993
+
+
+Table of Contents
+
+   1.     Introduction.......................................  3
+   2.     Notations, Conventions, and Generic BNF Grammar....  6
+   3.     The MIME-Version Header Field......................  7
+   4.     The Content-Type Header Field......................  9
+   5.     The Content-Transfer-Encoding Header Field......... 13
+   5.1.   Quoted-Printable Content-Transfer-Encoding......... 18
+   5.2.   Base64 Content-Transfer-Encoding................... 21
+   6.     Additional Content-Header Fields................... 23
+   6.1.   Optional Content-ID Header Field................... 23
+   6.2.   Optional Content-Description Header Field.......... 24
+   7.     The Predefined Content-Type Values................. 24
+   7.1.   The Text Content-Type.............................. 24
+   7.1.1. The charset parameter.............................. 25
+   7.1.2. The Text/plain subtype............................. 28
+   7.2.   The Multipart Content-Type......................... 28
+   7.2.1. Multipart:  The common syntax...................... 29
+   7.2.2. The Multipart/mixed (primary) subtype.............. 34
+   7.2.3. The Multipart/alternative subtype.................. 34
+   7.2.4. The Multipart/digest subtype....................... 36
+   7.2.5. The Multipart/parallel subtype..................... 37
+   7.2.6. Other Multipart subtypes........................... 37
+   7.3.   The Message Content-Type........................... 38
+   7.3.1. The Message/rfc822 (primary) subtype............... 38
+   7.3.2. The Message/Partial subtype........................ 39
+   7.3.3. The Message/External-Body subtype.................. 42
+   7.3.3.1.  The "ftp" and "tftp" access-types............... 44
+   7.3.3.2.  The "anon-ftp" access-type...................... 45
+   7.3.3.3.  The "local-file" and "afs" access-types......... 45
+   7.3.3.4.  The "mail-server" access-type................... 45
+   7.3.3.5.  Examples and Further Explanations............... 46
+   7.4.   The Application Content-Type....................... 49
+   7.4.1. The Application/Octet-Stream (primary) subtype..... 50
+   7.4.2. The Application/PostScript subtype................. 50
+   7.4.3. Other Application subtypes......................... 53
+   7.5.   The Image Content-Type............................. 53
+   7.6.   The Audio Content-Type............................. 54
+   7.7.   The Video Content-Type............................. 54
+   7.8.   Experimental Content-Type Values................... 54
+   8.     Summary............................................ 56
+   9.     Security Considerations............................ 56
+   10.    Authors' Addresses................................. 57
+   11.    Acknowledgements................................... 58
+   Appendix A -- Minimal MIME-Conformance.................... 60
+   Appendix B -- General Guidelines For Sending Email Data... 63
+   Appendix C -- A Complex Multipart Example................. 66
+   Appendix D -- Collected Grammar........................... 68
+
+
+
+Borenstein & Freed                                              [Page 2]
+
+RFC 1521                          MIME                    September 1993
+
+
+   Appendix E -- IANA Registration Procedures................ 72
+   E.1  Registration of New Content-type/subtype Values...... 72
+   E.2  Registration of New Access-type Values
+        for Message/external-body............................ 73
+   Appendix F -- Summary of the Seven Content-types.......... 74
+   Appendix G -- Canonical Encoding Model.................... 76
+   Appendix H -- Changes from RFC 1341....................... 78
+   References................................................ 80
+
+1.    Introduction
+
+   Since its publication in 1982, STD 11, RFC 822 [RFC-822] has defined
+   the standard format of textual mail messages on the Internet.  Its
+   success has been such that the RFC 822 format has been adopted,
+   wholly or partially, well beyond the confines of the Internet and the
+   Internet SMTP transport defined by STD 10, RFC 821 [RFC-821].  As the
+   format has seen wider use, a number of limitations have proven
+   increasingly restrictive for the user community.
+
+   RFC 822 was intended to specify a format for text messages.  As such,
+   non-text messages, such as multimedia messages that might include
+   audio or images, are simply not mentioned.  Even in the case of text,
+   however, RFC 822 is inadequate for the needs of mail users whose
+   languages require the use of character sets richer than US ASCII
+   [US-ASCII]. Since RFC 822 does not specify mechanisms for mail
+   containing audio, video, Asian language text, or even text in most
+   European languages, additional specifications are needed.
+
+   One of the notable limitations of RFC 821/822 based mail systems is
+   the fact that they limit the contents of electronic mail messages to
+   relatively short lines of seven-bit ASCII.  This forces users to
+   convert any non-textual data that they may wish to send into seven-
+   bit bytes representable as printable ASCII characters before invoking
+   a local mail UA (User Agent, a program with which human users send
+   and receive mail). Examples of such encodings currently used in the
+   Internet include pure hexadecimal, uuencode, the 3-in-4 base 64
+   scheme specified in RFC 1421, the Andrew Toolkit Representation
+   [ATK], and many others.
+
+   The limitations of RFC 822 mail become even more apparent as gateways
+   are designed to allow for the exchange of mail messages between RFC
+   822 hosts and X.400 hosts. X.400 [X400] specifies mechanisms for the
+   inclusion of non-textual body parts within electronic mail messages.
+   The current standards for the mapping of X.400 messages to RFC 822
+   messages specify either that X.400 non-textual body parts must be
+   converted to (not encoded in) an ASCII format, or that they must be
+   discarded, notifying the RFC 822 user that discarding has occurred.
+   This is clearly undesirable, as information that a user may wish to
+
+
+
+Borenstein & Freed                                              [Page 3]
+
+RFC 1521                          MIME                    September 1993
+
+
+   receive is lost.  Even though a user's UA may not have the capability
+   of dealing with the non-textual body part, the user might have some
+   mechanism external to the UA that can extract useful information from
+   the body part.  Moreover, it does not allow for the fact that the
+   message may eventually be gatewayed back into an X.400 message
+   handling system (i.e., the X.400 message is "tunneled" through
+   Internet mail), where the non-textual information would definitely
+   become useful again.
+
+   This document describes several mechanisms that combine to solve most
+   of these problems without introducing any serious incompatibilities
+   with the existing world of RFC 822 mail.  In particular, it
+   describes:
+
+   1. A MIME-Version header field, which uses a version number to
+       declare a message to be conformant with this specification and
+       allows mail processing agents to distinguish between such
+       messages and those generated by older or non-conformant software,
+       which is presumed to lack such a field.
+
+   2. A Content-Type header field, generalized from RFC 1049 [RFC-1049],
+       which can be used to specify the type and subtype of data in the
+       body of a message and to fully specify the native representation
+       (encoding) of such data.
+
+       2.a. A "text" Content-Type value, which can be used to represent
+            textual information in a number of character sets and
+            formatted text description languages in a standardized
+            manner.
+
+       2.b. A "multipart" Content-Type value, which can be used to
+            combine several body parts, possibly of differing types of
+            data, into a single message.
+
+       2.c. An "application" Content-Type value, which can be used to
+            transmit application data or binary data, and hence, among
+            other uses, to implement an electronic mail file transfer
+            service.
+
+       2.d. A "message" Content-Type value, for encapsulating another
+            mail message.
+
+       2.e An "image" Content-Type value, for transmitting still image
+            (picture) data.
+
+       2.f. An "audio" Content-Type value, for transmitting audio or
+            voice data.
+
+
+
+
+Borenstein & Freed                                              [Page 4]
+
+RFC 1521                          MIME                    September 1993
+
+
+       2.g. A "video" Content-Type value, for transmitting video or
+            moving image data, possibly with audio as part of the
+            composite video data format.
+
+   3. A Content-Transfer-Encoding header field, which can be used to
+       specify an auxiliary encoding that was applied to the data in
+       order to allow it to pass through mail transport mechanisms which
+       may have data or character set limitations.
+
+   4. Two additional header fields that can be used to further describe
+       the data in a message body, the Content-ID and Content-
+       Description header fields.
+
+   MIME has been carefully designed as an extensible mechanism, and it
+   is expected that the set of content-type/subtype pairs and their
+   associated parameters will grow significantly with time.  Several
+   other MIME fields, notably including character set names, are likely
+   to have new values defined over time.  In order to ensure that the
+   set of such values is developed in an orderly, well-specified, and
+   public manner, MIME defines a registration process which uses the
+   Internet Assigned Numbers Authority (IANA) as a central registry for
+   such values.  Appendix E provides details about how IANA registration
+   is accomplished.
+
+   Finally, to specify and promote interoperability, Appendix A of this
+   document provides a basic applicability statement for a subset of the
+   above mechanisms that defines a minimal level of "conformance" with
+   this document.
+
+      HISTORICAL NOTE: Several of the mechanisms described in this
+      document may seem somewhat strange or even baroque at first
+      reading.  It is important to note that compatibility with existing
+      standards AND robustness across existing practice were two of the
+      highest priorities of the working group that developed this
+      document.  In particular, compatibility was always favored over
+      elegance.
+
+   MIME was first defined and published as RFCs 1341 and 1342 [RFC-1341]
+   [RFC-1342].  This document is a relatively minor updating of RFC
+   1341, and is intended to supersede it.  The differences between this
+   document and RFC 1341 are summarized in Appendix H.  Please refer to
+   the current edition of the "IAB Official Protocol Standards" for the
+   standardization state and status of this protocol.  Several other RFC
+   documents will be of interest to the MIME implementor, in particular
+   [RFC 1343], [RFC-1344], and [RFC-1345].
+
+
+
+
+
+
+Borenstein & Freed                                              [Page 5]
+
+RFC 1521                          MIME                    September 1993
+
+
+2.    Notations, Conventions, and Generic BNF Grammar
+
+   This document is being published in two versions, one as plain ASCII
+   text and one as PostScript (PostScript is a trademark of Adobe
+   Systems Incorporated.).  While the text version is the official
+   specification, some will find the PostScript version easier to read.
+   The textual contents are identical.  An Andrew-format copy of this
+   document is also available from the first author (Borenstein).
+
+   Although the mechanisms specified in this document are all described
+   in prose, most are also described formally in the modified BNF
+   notation of RFC 822.  Implementors will need to be familiar with this
+   notation in order to understand this specification, and are referred
+   to RFC 822 for a complete explanation of the modified BNF notation.
+
+   Some of the modified BNF in this document makes reference to
+   syntactic entities that are defined in RFC 822 and not in this
+   document.  A complete formal grammar, then, is obtained by combining
+   the collected grammar appendix of this document with that of RFC 822
+   plus the modifications to RFC 822 defined in RFC 1123, which
+   specifically changes the syntax for `return', `date' and `mailbox'.
+
+   The term CRLF, in this document, refers to the sequence of the two
+   ASCII characters CR (13) and LF (10) which, taken together, in this
+   order, denote a line break in RFC 822 mail.
+
+   The term "character set" is used in this document to refer to a
+   method used with one or more tables to convert encoded text to a
+   series of octets.  This definition is intended to allow various kinds
+   of text encodings, from simple single-table mappings such as ASCII to
+   complex table switching methods such as those that use ISO 2022's
+   techniques.  However, a MIME character set name must fully specify
+   the mapping to be performed.
+
+   The term "message", when not further qualified, means either the
+   (complete or "top-level") message being transferred on a network, or
+   a message encapsulated in a body of type "message".
+
+   The term "body part", in this document, means one of the parts of the
+   body of a multipart entity. A body part has a header and a body, so
+   it makes sense to speak about the body of a body part.
+
+   The term "entity", in this document, means either a message or a body
+   part.  All kinds of entities share the property that they have a
+   header and a body.
+
+   The term "body", when not further qualified, means the body of an
+   entity, that is the body of either a message or of a body part.
+
+
+
+Borenstein & Freed                                              [Page 6]
+
+RFC 1521                          MIME                    September 1993
+
+
+      NOTE: The previous four definitions are clearly circular.  This is
+      unavoidable, since the overall structure of a MIME message is
+      indeed recursive.
+
+   In this document, all numeric and octet values are given in decimal
+   notation.
+
+   It must be noted that Content-Type values, subtypes, and parameter
+   names as defined in this document are case-insensitive.  However,
+   parameter values are case-sensitive unless otherwise specified for
+   the specific parameter.
+
+      FORMATTING NOTE: This document has been carefully formatted for
+      ease of reading.  The PostScript version of this document, in
+      particular, places notes like this one, which may be skipped by
+      the reader, in a smaller, italicized, font, and indents it as
+      well.  In the text version, only the indentation is preserved, so
+      if you are reading the text version of this you might consider
+      using the PostScript version instead. However, all such notes will
+      be indented and preceded by "NOTE:" or some similar introduction,
+      even in the text version.
+
+      The primary purpose of these non-essential notes is to convey
+      information about the rationale of this document, or to place this
+      document in the proper historical or evolutionary context.  Such
+      information may be skipped by those who are focused entirely on
+      building a conformant implementation, but may be of use to those
+      who wish to understand why this document is written as it is.
+
+      For ease of recognition, all BNF definitions have been placed in a
+      fixed-width font in the PostScript version of this document.
+
+3.    The MIME-Version Header Field
+
+   Since RFC 822 was published in 1982, there has really been only one
+   format standard for Internet messages, and there has been little
+   perceived need to declare the format standard in use.  This document
+   is an independent document that complements RFC 822. Although the
+   extensions in this document have been defined in such a way as to be
+   compatible with RFC 822, there are still circumstances in which it
+   might be desirable for a mail-processing agent to know whether a
+   message was composed with the new standard in mind.
+
+   Therefore, this document defines a new header field, "MIME-Version",
+   which is to be used to declare the version of the Internet message
+   body format standard in use.
+
+   Messages composed in accordance with this document MUST include such
+
+
+
+Borenstein & Freed                                              [Page 7]
+
+RFC 1521                          MIME                    September 1993
+
+
+   a header field, with the following verbatim text:
+
+   MIME-Version: 1.0
+
+   The presence of this header field is an assertion that the message
+   has been composed in compliance with this document.
+
+   Since it is possible that a future document might extend the message
+   format standard again, a formal BNF is given for the content of the
+   MIME-Version field:
+
+   version := "MIME-Version" ":" 1*DIGIT "." 1*DIGIT
+
+   Thus, future format specifiers, which might replace or extend "1.0",
+   are constrained to be two integer fields, separated by a period.  If
+   a message is received with a MIME-version value other than "1.0", it
+   cannot be assumed to conform with this specification.
+
+   Note that the MIME-Version header field is required at the top level
+   of a message. It is not required for each body part of a multipart
+   entity.  It is required for the embedded headers of a body of type
+   "message" if and only if the embedded message is itself claimed to be
+   MIME-conformant.
+
+   It is not possible to fully specify how a mail reader that conforms
+   with MIME as defined in this document should treat a message that
+   might arrive in the future with some value of MIME-Version other than
+   "1.0".  However, conformant software is encouraged to check the
+   version number and at least warn the user if an unrecognized MIME-
+   version is encountered.
+
+   It is also worth noting that version control for specific content-
+   types is not accomplished using the MIME-Version mechanism.  In
+   particular, some formats (such as application/postscript) have
+   version numbering conventions that are internal to the document
+   format.  Where such conventions exist, MIME does nothing to supersede
+   them.  Where no such conventions exist, a MIME type might use a
+   "version" parameter in the content-type field if necessary.
+
+   NOTE TO IMPLEMENTORS: All header fields defined in this document,
+   including MIME-Version, Content-type, etc., are subject to the
+   general syntactic rules for header fields specified in RFC 822.  In
+   particular, all can include comments, which means that the following
+   two MIME-Version fields are equivalent:
+
+                    MIME-Version: 1.0
+                    MIME-Version: 1.0 (Generated by GBD-killer 3.7)
+
+
+
+
+Borenstein & Freed                                              [Page 8]
+
+RFC 1521                          MIME                    September 1993
+
+
+4.    The Content-Type Header Field
+
+   The purpose of the Content-Type field is to describe the data
+   contained in the body fully enough that the receiving user agent can
+   pick an appropriate agent or mechanism to present the data to the
+   user, or otherwise deal with the data in an appropriate manner.
+
+   HISTORICAL NOTE: The Content-Type header field was first defined in
+   RFC 1049.  RFC 1049 Content-types used a simpler and less powerful
+   syntax, but one that is largely compatible with the mechanism given
+   here.
+
+   The Content-Type header field is used to specify the nature of the
+   data in the body of an entity, by giving type and subtype
+   identifiers, and by providing auxiliary information that may be
+   required for certain types.  After the type and subtype names, the
+   remainder of the header field is simply a set of parameters,
+   specified in an attribute/value notation.  The set of meaningful
+   parameters differs for the different types.  In particular, there are
+   NO globally-meaningful parameters that apply to all content-types.
+   Global mechanisms are best addressed, in the MIME model, by the
+   definition of additional Content-* header fields.  The ordering of
+   parameters is not significant.  Among the defined parameters is a
+   "charset" parameter by which the character set used in the body may
+   be declared. Comments are allowed in accordance with RFC 822 rules
+   for structured header fields.
+
+   In general, the top-level Content-Type is used to declare the general
+   type of data, while the subtype specifies a specific format for that
+   type of data.  Thus, a Content-Type of "image/xyz" is enough to tell
+   a user agent that the data is an image, even if the user agent has no
+   knowledge of the specific image format "xyz".  Such information can
+   be used, for example, to decide whether or not to show a user the raw
+   data from an unrecognized subtype -- such an action might be
+   reasonable for unrecognized subtypes of text, but not for
+   unrecognized subtypes of image or audio.  For this reason, registered
+   subtypes of audio, image, text, and video, should not contain
+   embedded information that is really of a different type.  Such
+   compound types should be represented using the "multipart" or
+   "application" types.
+
+   Parameters are modifiers of the content-subtype, and do not
+   fundamentally affect the requirements of the host system.  Although
+   most parameters make sense only with certain content-types, others
+   are "global" in the sense that they might apply to any subtype.  For
+   example, the "boundary" parameter makes sense only for the
+   "multipart" content-type, but the "charset" parameter might make
+   sense with several content-types.
+
+
+
+Borenstein & Freed                                              [Page 9]
+
+RFC 1521                          MIME                    September 1993
+
+
+   An initial set of seven Content-Types is defined by this document.
+   This set of top-level names is intended to be substantially complete.
+   It is expected that additions to the larger set of supported types
+   can generally be accomplished by the creation of new subtypes of
+   these initial types.  In the future, more top-level types may be
+   defined only by an extension to this standard.  If another primary
+   type is to be used for any reason, it must be given a name starting
+   with "X-" to indicate its non-standard status and to avoid a
+   potential conflict with a future official name.
+
+   In the Augmented BNF notation of RFC 822, a Content-Type header field
+   value is defined as follows:
+
+     content  :=   "Content-Type"  ":"  type  "/"  subtype  *(";"
+     parameter)
+               ; case-insensitive matching of type and subtype
+
+     type :=          "application"     / "audio"
+               / "image"           / "message"
+               / "multipart"  / "text"
+               / "video"           / extension-token
+               ; All values case-insensitive
+
+     extension-token :=  x-token / iana-token
+
+     iana-token := <a publicly-defined extension token,
+               registered with IANA, as specified in
+               appendix E>
+
+     x-token := <The two characters "X-" or "x-" followed, with
+                 no intervening white space, by any token>
+
+     subtype := token ; case-insensitive
+
+     parameter := attribute "=" value
+
+     attribute := token   ; case-insensitive
+
+     value := token / quoted-string
+
+     token  :=  1*<any (ASCII) CHAR except SPACE, CTLs,
+                   or tspecials>
+
+     tspecials :=  "(" / ")" / "<" / ">" / "@"
+                /  "," / ";" / ":" / "\" / <">
+                /  "/" / "[" / "]" / "?" / "="
+               ; Must be in quoted-string,
+               ; to use within parameter values
+
+
+
+Borenstein & Freed                                             [Page 10]
+
+RFC 1521                          MIME                    September 1993
+
+
+   Note that the definition of "tspecials" is the same as the RFC 822
+   definition of "specials" with the addition of the three characters
+   "/", "?", and "=", and the removal of ".".
+
+   Note also that a subtype specification is MANDATORY.  There are no
+   default subtypes.
+
+   The type, subtype, and parameter names are not case sensitive.  For
+   example, TEXT, Text, and TeXt are all equivalent.  Parameter values
+   are normally case sensitive, but certain parameters are interpreted
+   to be case-insensitive, depending on the intended use.  (For example,
+   multipart boundaries are case-sensitive, but the "access-type" for
+   message/External-body is not case-sensitive.)
+
+   Beyond this syntax, the only constraint on the definition of subtype
+   names is the desire that their uses must not conflict.  That is, it
+   would be undesirable to have two different communities using
+   "Content-Type: application/foobar" to mean two different things.  The
+   process of defining new content-subtypes, then, is not intended to be
+   a mechanism for imposing restrictions, but simply a mechanism for
+   publicizing the usages. There are, therefore, two acceptable
+   mechanisms for defining new Content-Type subtypes:
+
+            1.  Private values (starting with "X-") may be
+                defined bilaterally between two cooperating
+                agents without outside registration or
+                standardization.
+
+            2.  New standard values must be documented,
+                registered with, and approved by IANA, as
+                described in Appendix E.  Where intended for
+                public use, the formats they refer to must
+                also be defined by a published specification,
+                and possibly offered for standardization.
+
+   The seven standard initial predefined Content-Types are detailed in
+   the bulk of this document.  They are:
+
+    text -- textual information.  The primary subtype,
+         "plain", indicates plain (unformatted) text.  No
+         special software is required to get the full
+         meaning of the text, aside from support for the
+         indicated character set.  Subtypes are to be used
+         for enriched text in forms where application
+         software may enhance the appearance of the text,
+         but such software must not be required in order to
+         get the general idea of the content.  Possible
+         subtypes thus include any readable word processor
+
+
+
+Borenstein & Freed                                             [Page 11]
+
+RFC 1521                          MIME                    September 1993
+
+
+         format.  A very simple and portable subtype,
+         richtext, was defined in RFC 1341, with a future
+         revision expected.
+
+    multipart -- data consisting of multiple parts of
+         independent data types.  Four initial subtypes
+         are defined, including the primary "mixed"
+         subtype, "alternative" for representing the same
+         data in multiple formats, "parallel" for parts
+         intended to be viewed simultaneously, and "digest"
+         for multipart entities in which each part is of
+         type "message".
+
+    message -- an encapsulated message.  A body of
+         Content-Type "message" is itself all or part of a
+         fully formatted RFC 822 conformant message which
+         may contain its own different Content-Type header
+         field.  The primary subtype is "rfc822".  The
+         "partial" subtype is defined for partial messages,
+         to permit the fragmented transmission of bodies
+         that are thought to be too large to be passed
+         through mail transport facilities.  Another
+         subtype, "External-body", is defined for
+         specifying large bodies by reference to an
+         external data source.
+
+    image -- image data.  Image requires a display device
+         (such as a graphical display, a printer, or a FAX
+         machine) to view the information.  Initial
+         subtypes are defined for two widely-used image
+         formats, jpeg and gif.
+
+    audio -- audio data, with initial subtype "basic".
+         Audio requires an audio output device (such as a
+         speaker or a telephone) to "display" the contents.
+
+    video -- video data.  Video requires the capability to
+         display moving images, typically including
+         specialized hardware and software.  The initial
+         subtype is "mpeg".
+
+    application -- some other kind of data, typically
+         either uninterpreted binary data or information to
+         be processed by a mail-based application.  The
+         primary subtype, "octet-stream", is to be used in
+         the case of uninterpreted binary data, in which
+         case the simplest recommended action is to offer
+         to write the information into a file for the user.
+
+
+
+Borenstein & Freed                                             [Page 12]
+
+RFC 1521                          MIME                    September 1993
+
+
+         An additional subtype, "PostScript", is defined
+         for transporting PostScript documents in bodies.
+         Other expected uses for "application" include
+         spreadsheets, data for mail-based scheduling
+         systems, and languages for "active"
+         (computational) email.  (Note that active email
+         and other application data may entail several
+         security considerations, which are discussed later
+         in this memo, particularly in the context of
+         application/PostScript.)
+
+   Default RFC 822 messages are typed by this protocol as plain text in
+   the US-ASCII character set, which can be explicitly specified as
+   "Content-type: text/plain; charset=us-ascii".  If no Content-Type is
+   specified, this default is assumed.  In the presence of a MIME-
+   Version header field, a receiving User Agent can also assume that
+   plain US-ASCII text was the sender's intent.  In the absence of a
+   MIME-Version specification, plain US-ASCII text must still be
+   assumed, but the sender's intent might have been otherwise.
+
+      RATIONALE: In the absence of any Content-Type header field or
+      MIME-Version header field, it is impossible to be certain that a
+      message is actually text in the US-ASCII character set, since it
+      might well be a message that, using the conventions that predate
+      this document, includes text in another character set or non-
+      textual data in a manner that cannot be automatically recognized
+      (e.g., a uuencoded compressed UNIX tar file).  Although there is
+      no fully acceptable alternative to treating such untyped messages
+      as "text/plain; charset=us-ascii", implementors should remain
+      aware that if a message lacks both the MIME-Version and the
+      Content-Type header fields, it may in practice contain almost
+      anything.
+
+   It should be noted that the list of Content-Type values given here
+   may be augmented in time, via the mechanisms described above, and
+   that the set of subtypes is expected to grow substantially.
+
+   When a mail reader encounters mail with an unknown Content-type
+   value, it should generally treat it as equivalent to
+   "application/octet-stream", as described later in this document.
+
+5.    The Content-Transfer-Encoding Header Field
+
+   Many Content-Types which could usefully be transported via email are
+   represented, in their "natural" format, as 8-bit character or binary
+   data.  Such data cannot be transmitted over some transport protocols.
+   For example, RFC 821 restricts mail messages to 7-bit US-ASCII data
+   with lines no longer than 1000 characters.
+
+
+
+Borenstein & Freed                                             [Page 13]
+
+RFC 1521                          MIME                    September 1993
+
+
+   It is necessary, therefore, to define a standard mechanism for re-
+   encoding such data into a 7-bit short-line format.  This document
+   specifies that such encodings will be indicated by a new "Content-
+   Transfer-Encoding" header field.  The Content-Transfer-Encoding field
+   is used to indicate the type of transformation that has been used in
+   order to represent the body in an acceptable manner for transport.
+
+   Unlike Content-Types, a proliferation of Content-Transfer-Encoding
+   values is undesirable and unnecessary.  However, establishing only a
+   single Content-Transfer-Encoding mechanism does not seem possible.
+   There is a tradeoff between the desire for a compact and efficient
+   encoding of largely-binary data and the desire for a readable
+   encoding of data that is mostly, but not entirely, 7-bit data.  For
+   this reason, at least two encoding mechanisms are necessary: a
+   "readable" encoding and a "dense" encoding.
+
+   The Content-Transfer-Encoding field is designed to specify an
+   invertible mapping between the "native" representation of a type of
+   data and a representation that can be readily exchanged using 7 bit
+   mail transport protocols, such as those defined by RFC 821 (SMTP).
+   This field has not been defined by any previous standard. The field's
+   value is a single token specifying the type of encoding, as
+   enumerated below.  Formally:
+
+   encoding := "Content-Transfer-Encoding" ":" mechanism
+
+   mechanism :=     "7bit"  ;  case-insensitive
+                  / "quoted-printable"
+                  / "base64"
+                  / "8bit"
+                  / "binary"
+                  / x-token
+
+   These values are not case sensitive.  That is, Base64 and BASE64 and
+   bAsE64 are all equivalent.  An encoding type of 7BIT requires that
+   the body is already in a seven-bit mail-ready representation.  This
+   is the default value -- that is, "Content-Transfer-Encoding: 7BIT" is
+   assumed if the Content-Transfer-Encoding header field is not present.
+
+   The values "8bit", "7bit", and "binary" all mean that NO encoding has
+   been performed. However, they are potentially useful as indications
+   of the kind of data contained in the object, and therefore of the
+   kind of encoding that might need to be performed for transmission in
+   a given transport system.  In particular:
+
+       "7bit" means that the data is all represented as short
+            lines of US-ASCII data.
+
+
+
+
+Borenstein & Freed                                             [Page 14]
+
+RFC 1521                          MIME                    September 1993
+
+
+       "8bit" means that the lines are short, but there may be
+            non-ASCII characters (octets with the high-order
+            bit set).
+
+       "Binary" means that not only may non-ASCII characters
+            be present, but also that the lines are not
+            necessarily short enough for SMTP transport.
+
+   The difference between "8bit" (or any other conceivable bit-width
+   token) and the "binary" token is that "binary" does not require
+   adherence to any limits on line length or to the SMTP CRLF semantics,
+   while the bit-width tokens do require such adherence.  If the body
+   contains data in any bit-width other than 7-bit, the appropriate
+   bit-width Content-Transfer-Encoding token must be used (e.g., "8bit"
+   for unencoded 8 bit wide data).  If the body contains binary data,
+   the "binary" Content-Transfer-Encoding token must be used.
+
+      NOTE: The distinction between the Content-Transfer-Encoding values
+      of "binary", "8bit", etc.  may seem unimportant, in that all of
+      them really mean "none" -- that is, there has been no encoding of
+      the data for transport.  However, clear labeling will be of
+      enormous value to gateways between future mail transport systems
+      with differing capabilities in transporting data that do not meet
+      the restrictions of RFC 821 transport.
+
+      Mail transport for unencoded 8-bit data is defined in RFC-1426
+      [RFC-1426].  As of the publication of this document, there are no
+      standardized Internet mail transports for which it is legitimate
+      to include unencoded binary data in mail bodies.  Thus there are
+      no circumstances in which the "binary" Content-Transfer-Encoding
+      is actually legal on the Internet.  However, in the event that
+      binary mail transport becomes a reality in Internet mail, or when
+      this document is used in conjunction with any other binary-capable
+      transport mechanism, binary bodies should be labeled as such using
+      this mechanism.
+
+      NOTE: The five values defined for the Content-Transfer-Encoding
+      field imply nothing about the Content-Type other than the
+      algorithm by which it was encoded or the transport system
+      requirements if unencoded.
+
+   Implementors may, if necessary, define new Content-Transfer-Encoding
+   values, but must use an x-token, which is a name prefixed by "X-" to
+   indicate its non-standard status, e.g., "Content-Transfer-Encoding:
+   x-my-new-encoding".  However, unlike Content-Types and subtypes, the
+   creation of new Content-Transfer-Encoding values is explicitly and
+   strongly discouraged, as it seems likely to hinder interoperability
+   with little potential benefit.  Their use is allowed only as the
+
+
+
+Borenstein & Freed                                             [Page 15]
+
+RFC 1521                          MIME                    September 1993
+
+
+   result of an agreement between cooperating user agents.
+
+   If a Content-Transfer-Encoding header field appears as part of a
+   message header, it applies to the entire body of that message.  If a
+   Content-Transfer-Encoding header field appears as part of a body
+   part's headers, it applies only to the body of that body part.  If an
+   entity is of type "multipart" or "message", the Content-Transfer-
+   Encoding is not permitted to have any value other than a bit width
+   (e.g., "7bit", "8bit", etc.) or "binary".
+
+   It should be noted that email is character-oriented, so that the
+   mechanisms described here are mechanisms for encoding arbitrary octet
+   streams, not bit streams.  If a bit stream is to be encoded via one
+   of these mechanisms, it must first be converted to an 8-bit byte
+   stream using the network standard bit order ("big-endian"), in which
+   the earlier bits in a stream become the higher-order bits in a byte.
+   A bit stream not ending at an 8-bit boundary must be padded with
+   zeroes.  This document provides a mechanism for noting the addition
+   of such padding in the case of the application Content-Type, which
+   has a "padding" parameter.
+
+   The encoding mechanisms defined here explicitly encode all data in
+   ASCII.  Thus, for example, suppose an entity has header fields such
+   as:
+
+        Content-Type: text/plain; charset=ISO-8859-1
+        Content-transfer-encoding: base64
+
+   This must be interpreted to mean that the body is a base64 ASCII
+   encoding of data that was originally in ISO-8859-1, and will be in
+   that character set again after decoding.
+
+   The following sections will define the two standard encoding
+   mechanisms.  The definition of new content-transfer-encodings is
+   explicitly discouraged and should only occur when absolutely
+   necessary.  All content-transfer-encoding namespace except that
+   beginning with "X-" is explicitly reserved to the IANA for future
+   use.  Private agreements about content-transfer-encodings are also
+   explicitly discouraged.
+
+   Certain Content-Transfer-Encoding values may only be used on certain
+   Content-Types.  In particular, it is expressly forbidden to use any
+   encodings other than "7bit", "8bit", or "binary" with any Content-
+   Type that recursively includes other Content-Type fields, notably the
+   "multipart" and "message" Content-Types.  All encodings that are
+   desired for bodies of type multipart or message must be done at the
+   innermost level, by encoding the actual body that needs to be
+   encoded.
+
+
+
+Borenstein & Freed                                             [Page 16]
+
+RFC 1521                          MIME                    September 1993
+
+
+      NOTE ON ENCODING RESTRICTIONS: Though the prohibition against
+      using content-transfer-encodings on data of type multipart or
+      message may seem overly restrictive, it is necessary to prevent
+      nested encodings, in which data are passed through an encoding
+      algorithm multiple times, and must be decoded multiple times in
+      order to be properly viewed.  Nested encodings add considerable
+      complexity to user agents: aside from the obvious efficiency
+      problems with such multiple encodings, they can obscure the basic
+      structure of a message.  In particular, they can imply that
+      several decoding operations are necessary simply to find out what
+      types of objects a message contains.  Banning nested encodings may
+      complicate the job of certain mail gateways, but this seems less
+      of a problem than the effect of nested encodings on user agents.
+
+      NOTE ON THE RELATIONSHIP BETWEEN CONTENT-TYPE AND CONTENT-
+      TRANSFER-ENCODING: It may seem that the Content-Transfer-Encoding
+      could be inferred from the characteristics of the Content-Type
+      that is to be encoded, or, at the very least, that certain
+      Content-Transfer-Encodings could be mandated for use with specific
+      Content-Types. There are several reasons why this is not the case.
+      First, given the varying types of transports used for mail, some
+      encodings may be appropriate for some Content-Type/transport
+      combinations and not for others.  (For example, in an 8-bit
+      transport, no encoding would be required for text in certain
+      character sets, while such encodings are clearly required for 7-
+      bit SMTP.)  Second, certain Content-Types may require different
+      types of transfer encoding under different circumstances. For
+      example, many PostScript bodies might consist entirely of short
+      lines of 7-bit data and hence require little or no encoding.
+      Other PostScript bodies (especially those using Level 2
+      PostScript's binary encoding mechanism) may only be reasonably
+      represented using a binary transport encoding. Finally, since
+      Content-Type is intended to be an open-ended specification
+      mechanism, strict specification of an association between
+      Content-Types and encodings effectively couples the specification
+      of an application protocol with a specific lower-level transport.
+      This is not desirable since the developers of a Content-Type
+      should not have to be aware of all the transports in use and what
+      their limitations are.
+
+      NOTE ON TRANSLATING ENCODINGS: The quoted-printable and base64
+      encodings are designed so that conversion between them is
+      possible.  The only issue that arises in such a conversion is the
+      handling of line breaks.  When converting from quoted-printable to
+      base64 a line break must be converted into a CRLF sequence.
+      Similarly, a CRLF sequence in base64 data must be converted to a
+      quoted-printable line break, but ONLY when converting text data.
+
+
+
+
+Borenstein & Freed                                             [Page 17]
+
+RFC 1521                          MIME                    September 1993
+
+
+      NOTE ON CANONICAL ENCODING MODEL: There was some confusion, in
+      earlier drafts of this memo, regarding the model for when email
+      data was to be converted to canonical form and encoded, and in
+      particular how this process would affect the treatment of CRLFs,
+      given that the representation of newlines varies greatly from
+      system to system, and the relationship between content-transfer-
+      encodings and character sets.  For this reason, a canonical model
+      for encoding is presented as Appendix G.
+
+5.1.  Quoted-Printable Content-Transfer-Encoding
+
+   The Quoted-Printable encoding is intended to represent data that
+   largely consists of octets that correspond to printable characters in
+   the ASCII character set.  It encodes the data in such a way that the
+   resulting octets are unlikely to be modified by mail transport.  If
+   the data being encoded are mostly ASCII text, the encoded form of the
+   data remains largely recognizable by humans.  A body which is
+   entirely ASCII may also be encoded in Quoted-Printable to ensure the
+   integrity of the data should the message pass through a character-
+   translating, and/or line-wrapping gateway.
+
+   In this encoding, octets are to be represented as determined by the
+   following rules:
+
+      Rule #1: (General 8-bit representation) Any octet, except those
+      indicating a line break according to the newline convention of the
+      canonical (standard) form of the data being encoded, may be
+      represented by an "=" followed by a two digit hexadecimal
+      representation of the octet's value.  The digits of the
+      hexadecimal alphabet, for this purpose, are "0123456789ABCDEF".
+      Uppercase letters must be used when sending hexadecimal data,
+      though a robust implementation may choose to recognize lowercase
+      letters on receipt.  Thus, for example, the value 12 (ASCII form
+      feed) can be represented by "=0C", and the value 61 (ASCII EQUAL
+      SIGN) can be represented by "=3D".  Except when the following
+      rules allow an alternative encoding, this rule is mandatory.
+
+      Rule #2: (Literal representation) Octets with decimal values of 33
+      through 60 inclusive, and 62 through 126, inclusive, MAY be
+      represented as the ASCII characters which correspond to those
+      octets (EXCLAMATION POINT through LESS THAN, and GREATER THAN
+      through TILDE, respectively).
+
+      Rule #3: (White Space): Octets with values of 9 and 32 MAY be
+      represented as ASCII TAB (HT) and SPACE characters, respectively,
+      but MUST NOT be so represented at the end of an encoded line. Any
+      TAB (HT) or SPACE characters on an encoded line MUST thus be
+      followed on that line by a printable character.  In particular, an
+
+
+
+Borenstein & Freed                                             [Page 18]
+
+RFC 1521                          MIME                    September 1993
+
+
+      "=" at the end of an encoded line, indicating a soft line break
+      (see rule #5) may follow one or more TAB (HT) or SPACE characters.
+      It follows that an octet with value 9 or 32 appearing at the end
+      of an encoded line must be represented according to Rule #1.  This
+      rule is necessary because some MTAs (Message Transport Agents,
+      programs which transport messages from one user to another, or
+      perform a part of such transfers) are known to pad lines of text
+      with SPACEs, and others are known to remove "white space"
+      characters from the end of a line.  Therefore, when decoding a
+      Quoted-Printable body, any trailing white space on a line must be
+      deleted, as it will necessarily have been added by intermediate
+      transport agents.
+
+      Rule #4 (Line Breaks): A line break in a text body, independent of
+      what its representation is following the canonical representation
+      of the data being encoded, must be represented by a (RFC 822) line
+      break, which is a CRLF sequence, in the Quoted-Printable encoding.
+      Since the canonical representation of types other than text do not
+      generally include the representation of line breaks, no hard line
+      breaks (i.e.  line breaks that are intended to be meaningful and
+      to be displayed to the user) should occur in the quoted-printable
+      encoding of such types.  Of course, occurrences of "=0D", "=0A",
+      "0A=0D" and "=0D=0A" will eventually be encountered.  In general,
+      however, base64 is preferred over quoted-printable for binary
+      data.
+
+      Note that many implementations may elect to encode the local
+      representation of various content types directly, as described in
+      Appendix G.  In particular, this may apply to plain text material
+      on systems that use newline conventions other than CRLF
+      delimiters. Such an implementation is permissible, but the
+      generation of line breaks must be generalized to account for the
+      case where alternate representations of newline sequences are
+      used.
+
+      Rule #5 (Soft Line Breaks): The Quoted-Printable encoding REQUIRES
+      that encoded lines be no more than 76 characters long. If longer
+      lines are to be encoded with the Quoted-Printable encoding, 'soft'
+      line breaks must be used. An equal sign as the last character on a
+      encoded line indicates such a non-significant ('soft') line break
+      in the encoded text. Thus if the "raw" form of the line is a
+      single unencoded line that says:
+
+          Now's the time for all folk to come to the aid of
+          their country.
+
+      This can be represented, in the Quoted-Printable encoding, as
+
+
+
+
+Borenstein & Freed                                             [Page 19]
+
+RFC 1521                          MIME                    September 1993
+
+
+          Now's the time =
+          for all folk to come=
+           to the aid of their country.
+
+      This provides a mechanism with which long lines are encoded in
+      such a way as to be restored by the user agent.  The 76 character
+      limit does not count the trailing CRLF, but counts all other
+      characters, including any equal signs.
+
+   Since the hyphen character ("-") is represented as itself in the
+   Quoted-Printable encoding, care must be taken, when encapsulating a
+   quoted-printable encoded body in a multipart entity, to ensure that
+   the encapsulation boundary does not appear anywhere in the encoded
+   body.  (A good strategy is to choose a boundary that includes a
+   character sequence such as "=_" which can never appear in a quoted-
+   printable body.  See the definition of multipart messages later in
+   this document.)
+
+      NOTE: The quoted-printable encoding represents something of a
+      compromise between readability and reliability in transport.
+      Bodies encoded with the quoted-printable encoding will work
+      reliably over most mail gateways, but may not work perfectly over
+      a few gateways, notably those involving translation into EBCDIC.
+      (In theory, an EBCDIC gateway could decode a quoted-printable body
+      and re-encode it using base64, but such gateways do not yet
+      exist.)  A higher level of confidence is offered by the base64
+      Content-Transfer-Encoding.  A way to get reasonably reliable
+      transport through EBCDIC gateways is to also quote the ASCII
+      characters
+
+             !"#$@[\]^`{|}~
+
+      according to rule #1.  See Appendix B for more information.
+
+   Because quoted-printable data is generally assumed to be line-
+   oriented, it is to be expected that the representation of the breaks
+   between the lines of quoted printable data may be altered in
+   transport, in the same manner that plain text mail has always been
+   altered in Internet mail when passing between systems with differing
+   newline conventions.  If such alterations are likely to constitute a
+   corruption of the data, it is probably more sensible to use the
+   base64 encoding rather than the quoted-printable encoding.
+
+   WARNING TO IMPLEMENTORS: If binary data are encoded in quoted-
+   printable, care must be taken to encode CR and LF characters as "=0D"
+   and "=0A", respectively.  In particular, a CRLF sequence in binary
+   data should be encoded as "=0D=0A".  Otherwise, if CRLF were
+   represented as a hard line break, it might be incorrectly decoded on
+
+
+
+Borenstein & Freed                                             [Page 20]
+
+RFC 1521                          MIME                    September 1993
+
+
+   platforms with different line break conventions.
+
+   For formalists, the syntax of quoted-printable data is described by
+   the following grammar:
+
+   quoted-printable := ([*(ptext / SPACE / TAB) ptext] ["="] CRLF)
+        ; Maximum line length of 76 characters excluding CRLF
+
+   ptext := octet /<any ASCII character except "=", SPACE, or TAB>
+        ; characters not listed as "mail-safe" in Appendix B
+        ; are also not recommended.
+
+   octet := "=" 2(DIGIT / "A" / "B" / "C" / "D" / "E" / "F")
+        ; octet must be used for characters > 127, =, SPACE, or TAB,
+        ; and is recommended for any characters not listed in
+        ; Appendix B as "mail-safe".
+
+5.2.  Base64 Content-Transfer-Encoding
+
+   The Base64 Content-Transfer-Encoding is designed to represent
+   arbitrary sequences of octets in a form that need not be humanly
+   readable.  The encoding and decoding algorithms are simple, but the
+   encoded data are consistently only about 33 percent larger than the
+   unencoded data.  This encoding is virtually identical to the one used
+   in Privacy Enhanced Mail (PEM) applications, as defined in RFC 1421.
+   The base64 encoding is adapted from RFC 1421, with one change: base64
+   eliminates the "*" mechanism for embedded clear text.
+
+   A 65-character subset of US-ASCII is used, enabling 6 bits to be
+   represented per printable character. (The extra 65th character, "=",
+   is used to signify a special processing function.)
+
+      NOTE: This subset has the important property that it is
+      represented identically in all versions of ISO 646, including US
+      ASCII, and all characters in the subset are also represented
+      identically in all versions of EBCDIC.  Other popular encodings,
+      such as the encoding used by the uuencode utility and the base85
+      encoding specified as part of Level 2 PostScript, do not share
+      these properties, and thus do not fulfill the portability
+      requirements a binary transport encoding for mail must meet.
+
+   The encoding process represents 24-bit groups of input bits as output
+   strings of 4 encoded characters. Proceeding from left to right, a
+   24-bit input group is formed by concatenating 3 8-bit input groups.
+   These 24 bits are then treated as 4 concatenated 6-bit groups, each
+   of which is translated into a single digit in the base64 alphabet.
+   When encoding a bit stream via the base64 encoding, the bit stream
+   must be presumed to be ordered with the most-significant-bit first.
+
+
+
+Borenstein & Freed                                             [Page 21]
+
+RFC 1521                          MIME                    September 1993
+
+
+   That is, the first bit in the stream will be the high-order bit in
+   the first byte, and the eighth bit will be the low-order bit in the
+   first byte, and so on.
+
+   Each 6-bit group is used as an index into an array of 64 printable
+   characters. The character referenced by the index is placed in the
+   output string. These characters, identified in Table 1, below, are
+   selected so as to be universally representable, and the set excludes
+   characters with particular significance to SMTP (e.g., ".", CR, LF)
+   and to the encapsulation boundaries defined in this document (e.g.,
+   "-").
+
+                            Table 1: The Base64 Alphabet
+
+      Value Encoding  Value Encoding  Value Encoding  Value Encoding
+           0 A            17 R            34 i            51 z
+           1 B            18 S            35 j            52 0
+           2 C            19 T            36 k            53 1
+           3 D            20 U            37 l            54 2
+           4 E            21 V            38 m            55 3
+           5 F            22 W            39 n            56 4
+           6 G            23 X            40 o            57 5
+           7 H            24 Y            41 p            58 6
+           8 I            25 Z            42 q            59 7
+           9 J            26 a            43 r            60 8
+          10 K            27 b            44 s            61 9
+          11 L            28 c            45 t            62 +
+          12 M            29 d            46 u            63 /
+          13 N            30 e            47 v
+          14 O            31 f            48 w         (pad) =
+          15 P            32 g            49 x
+          16 Q            33 h            50 y
+
+   The output stream (encoded bytes) must be represented in lines of no
+   more than 76 characters each.  All line breaks or other characters
+   not found in Table 1 must be ignored by decoding software.  In base64
+   data, characters other than those in Table 1, line breaks, and other
+   white space probably indicate a transmission error, about which a
+   warning message or even a message rejection might be appropriate
+   under some circumstances.
+
+   Special processing is performed if fewer than 24 bits are available
+   at the end of the data being encoded.  A full encoding quantum is
+   always completed at the end of a body.  When fewer than 24 input bits
+   are available in an input group, zero bits are added (on the right)
+   to form an integral number of 6-bit groups.  Padding at the end of
+   the data is performed using the '=' character.  Since all base64
+   input is an integral number of octets, only the following cases can
+
+
+
+Borenstein & Freed                                             [Page 22]
+
+RFC 1521                          MIME                    September 1993
+
+
+   arise: (1) the final quantum of encoding input is an integral
+   multiple of 24 bits; here, the final unit of encoded output will be
+   an integral multiple of 4 characters with no "=" padding, (2) the
+   final quantum of encoding input is exactly 8 bits; here, the final
+   unit of encoded output will be two characters followed by two "="
+   padding characters, or (3) the final quantum of encoding input is
+   exactly 16 bits; here, the final unit of encoded output will be three
+   characters followed by one "=" padding character.
+
+   Because it is used only for padding at the end of the data, the
+   occurrence of any '=' characters may be taken as evidence that the
+   end of the data has been reached (without truncation in transit).  No
+   such assurance is possible, however, when the number of octets
+   transmitted was a multiple of three.
+
+   Any characters outside of the base64 alphabet are to be ignored in
+   base64-encoded data.  The same applies to any illegal sequence of
+   characters in the base64 encoding, such as "====="
+
+   Care must be taken to use the proper octets for line breaks if base64
+   encoding is applied directly to text material that has not been
+   converted to canonical form.  In particular, text line breaks must be
+   converted into CRLF sequences prior to base64 encoding. The important
+   thing to note is that this may be done directly by the encoder rather
+   than in a prior canonicalization step in some implementations.
+
+      NOTE: There is no need to worry about quoting apparent
+      encapsulation boundaries within base64-encoded parts of multipart
+      entities because no hyphen characters are used in the base64
+      encoding.
+
+6.    Additional Content-Header Fields
+
+6.1.  Optional Content-ID Header Field
+
+   In constructing a high-level user agent, it may be desirable to allow
+   one body to make reference to another.  Accordingly, bodies may be
+   labeled using the "Content-ID" header field, which is syntactically
+   identical to the "Message-ID" header field:
+
+   id :=  "Content-ID" ":" msg-id
+   Like the Message-ID values, Content-ID values must be generated to be
+   world-unique.
+
+   The Content-ID value may be used for uniquely identifying MIME
+   entities in several contexts, particularly for cacheing data
+   referenced by the message/external-body mechanism.  Although the
+   Content-ID header is generally optional, its use is mandatory in
+
+
+
+Borenstein & Freed                                             [Page 23]
+
+RFC 1521                          MIME                    September 1993
+
+
+   implementations which generate data of the optional MIME Content-type
+   "message/external-body".  That is, each message/external-body entity
+   must have a Content-ID field to permit cacheing of such data.
+
+   It is also worth noting that the Content-ID value has special
+   semantics in the case of the multipart/alternative content-type.
+   This is explained in the section of this document dealing with
+   multipart/alternative.
+
+6.2.  Optional Content-Description Header Field
+
+   The ability to associate some descriptive information with a given
+   body is often desirable. For example, it may be useful to mark an
+   "image" body as "a picture of the Space Shuttle Endeavor."  Such text
+   may be placed in the Content-Description header field.
+
+   description := "Content-Description" ":" *text
+
+   The description is presumed to be given in the US-ASCII character
+   set, although the mechanism specified in [RFC-1522] may be used for
+   non-US-ASCII Content-Description values.
+
+7.    The Predefined Content-Type Values
+
+   This document defines seven initial Content-Type values and an
+   extension mechanism for private or experimental types.  Further
+   standard types must be defined by new published specifications.  It
+   is expected that most innovation in new types of mail will take place
+   as subtypes of the seven types defined here.  The most essential
+   characteristics of the seven content-types are summarized in Appendix
+   F.
+
+7.1  The Text Content-Type
+
+   The text Content-Type is intended for sending material which is
+   principally textual in form.  It is the default Content-Type.  A
+   "charset" parameter may be used to indicate the character set of the
+   body text for some text subtypes, notably including the primary
+   subtype, "text/plain", which indicates plain (unformatted) text.  The
+   default Content-Type for Internet mail is "text/plain; charset=us-
+   ascii".
+
+   Beyond plain text, there are many formats for representing what might
+   be known as "extended text" -- text with embedded formatting and
+   presentation information.  An interesting characteristic of many such
+   representations is that they are to some extent readable even without
+   the software that interprets them.  It is useful, then, to
+   distinguish them, at the highest level, from such unreadable data as
+
+
+
+Borenstein & Freed                                             [Page 24]
+
+RFC 1521                          MIME                    September 1993
+
+
+   images, audio, or text represented in an unreadable form.  In the
+   absence of appropriate interpretation software, it is reasonable to
+   show subtypes of text to the user, while it is not reasonable to do
+   so with most nontextual data.
+
+   Such formatted textual data should be represented using subtypes of
+   text.  Plausible subtypes of text are typically given by the common
+   name of the representation format, e.g., "text/richtext" [RFC-1341].
+
+7.1.1.     The charset parameter
+
+   A critical parameter that may be specified in the Content-Type field
+   for text/plain data is the character set.  This is specified with a
+   "charset" parameter, as in:
+
+        Content-type: text/plain; charset=us-ascii
+
+   Unlike some other parameter values, the values of the charset
+   parameter are NOT case sensitive.  The default character set, which
+   must be assumed in the absence of a charset parameter, is US-ASCII.
+
+   The specification for any future subtypes of "text" must specify
+   whether or not they will also utilize a "charset" parameter, and may
+   possibly restrict its values as well.  When used with a particular
+   body, the semantics of the "charset" parameter should be identical to
+   those specified here for "text/plain", i.e., the body consists
+   entirely of characters in the given charset.  In particular, definers
+   of future text subtypes should pay close attention the the
+   implications of multibyte character sets for their subtype
+   definitions.
+
+   This RFC specifies the definition of the charset parameter for the
+   purposes of MIME to be a unique mapping of a byte stream to glyphs, a
+   mapping which does not require external profiling information.
+
+   An initial list of predefined character set names can be found at the
+   end of this section.  Additional character sets may be registered
+   with IANA, although the standardization of their use requires the
+   usual IESG [RFC-1340] review and approval.  Note that if the
+   specified character set includes 8-bit data, a Content-Transfer-
+   Encoding header field and a corresponding encoding on the data are
+   required in order to transmit the body via some mail transfer
+   protocols, such as SMTP.
+
+   The default character set, US-ASCII, has been the subject of some
+   confusion and ambiguity in the past.  Not only were there some
+   ambiguities in the definition, there have been wide variations in
+   practice.  In order to eliminate such ambiguity and variations in the
+
+
+
+Borenstein & Freed                                             [Page 25]
+
+RFC 1521                          MIME                    September 1993
+
+
+   future, it is strongly recommended that new user agents explicitly
+   specify a character set via the Content-Type header field.  "US-
+   ASCII" does not indicate an arbitrary seven-bit character code, but
+   specifies that the body uses character coding that uses the exact
+   correspondence of codes to characters specified in ASCII.  National
+   use variations of ISO 646 [ISO-646] are NOT ASCII and their use in
+   Internet mail is explicitly discouraged. The omission of the ISO 646
+   character set is deliberate in this regard.  The character set name
+   of "US-ASCII" explicitly refers to ANSI X3.4-1986 [US-ASCII] only.
+   The character set name "ASCII" is reserved and must not be used for
+   any purpose.
+
+      NOTE: RFC 821 explicitly specifies "ASCII", and references an
+      earlier version of the American Standard.  Insofar as one of the
+      purposes of specifying a Content-Type and character set is to
+      permit the receiver to unambiguously determine how the sender
+      intended the coded message to be interpreted, assuming anything
+      other than "strict ASCII" as the default would risk unintentional
+      and incompatible changes to the semantics of messages now being
+      transmitted.  This also implies that messages containing
+      characters coded according to national variations on ISO 646, or
+      using code-switching procedures (e.g., those of ISO 2022), as well
+      as 8-bit or multiple octet character encodings MUST use an
+      appropriate character set specification to be consistent with this
+      specification.
+
+   The complete US-ASCII character set is listed in [US-ASCII].  Note
+   that the control characters including DEL (0-31, 127) have no defined
+   meaning apart from the combination CRLF (ASCII values 13 and 10)
+   indicating a new line.  Two of the characters have de facto meanings
+   in wide use: FF (12) often means "start subsequent text on the
+   beginning of a new page"; and TAB or HT (9) often (though not always)
+   means "move the cursor to the next available column after the current
+   position where the column number is a multiple of 8 (counting the
+   first column as column 0)." Apart from this, any use of the control
+   characters or DEL in a body must be part of a private agreement
+   between the sender and recipient.  Such private agreements are
+   discouraged and should be replaced by the other capabilities of this
+   document.
+
+      NOTE: Beyond US-ASCII, an enormous proliferation of character sets
+      is possible. It is the opinion of the IETF working group that a
+      large number of character sets is NOT a good thing.  We would
+      prefer to specify a single character set that can be used
+      universally for representing all of the world's languages in
+      electronic mail.  Unfortunately, existing practice in several
+      communities seems to point to the continued use of multiple
+      character sets in the near future.  For this reason, we define
+
+
+
+Borenstein & Freed                                             [Page 26]
+
+RFC 1521                          MIME                    September 1993
+
+
+      names for a small number of character sets for which a strong
+      constituent base exists.
+
+   The defined charset values are:
+
+   US-ASCII -- as defined in [US-ASCII].
+
+        ISO-8859-X -- where "X" is to be replaced, as necessary, for the
+             parts of ISO-8859 [ISO-8859].  Note that the ISO 646
+             character sets have deliberately been omitted in favor of
+             their 8859 replacements, which are the designated character
+             sets for Internet mail.  As of the publication of this
+             document, the legitimate values for "X" are the digits 1
+             through 9.
+
+   The character sets specified above are the ones that were relatively
+   uncontroversial during the drafting of MIME.  This document does not
+   endorse the use of any particular character set other than US-ASCII,
+   and recognizes that the future evolution of world character sets
+   remains unclear.  It is expected that in the future, additional
+   character sets will be registered for use in MIME.
+
+   Note that the character set used, if anything other than US-ASCII,
+   must always be explicitly specified in the Content-Type field.
+
+   No other character set name may be used in Internet mail without the
+   publication of a formal specification and its registration with IANA,
+   or by private agreement, in which case the character set name must
+   begin with "X-".
+
+   Implementors are discouraged from defining new character sets for
+   mail use unless absolutely necessary.
+
+   The "charset" parameter has been defined primarily for the purpose of
+   textual data, and is described in this section for that reason.
+   However, it is conceivable that non-textual data might also wish to
+   specify a charset value for some purpose, in which case the same
+   syntax and values should be used.
+
+   In general, mail-sending software must always use the "lowest common
+   denominator" character set possible.  For example, if a body contains
+   only US-ASCII characters, it must be marked as being in the US-ASCII
+   character set, not ISO-8859-1, which, like all the ISO-8859 family of
+   character sets, is a superset of US-ASCII.  More generally, if a
+   widely-used character set is a subset of another character set, and a
+   body contains only characters in the widely-used subset, it must be
+   labeled as being in that subset.  This will increase the chances that
+   the recipient will be able to view the mail correctly.
+
+
+
+Borenstein & Freed                                             [Page 27]
+
+RFC 1521                          MIME                    September 1993
+
+
+7.1.2.     The Text/plain subtype
+
+   The primary subtype of text is "plain".  This indicates plain
+   (unformatted) text.  The default Content-Type for Internet mail,
+   "text/plain; charset=us-ascii", describes existing Internet practice.
+   That is, it is the type of body defined by RFC 822.
+
+   No other text subtype is defined by this document.
+
+   The formal grammar for the content-type header field for text is as
+   follows:
+
+   text-type := "text" "/" text-subtype [";" "charset" "=" charset]
+
+   text-subtype := "plain" / extension-token
+
+   charset := "us-ascii"/ "iso-8859-1"/ "iso-8859-2"/ "iso-8859-3"
+          / "iso-8859-4"/ "iso-8859-5"/ "iso-8859-6"/ "iso-8859-7"
+          / "iso-8859-8" / "iso-8859-9" / extension-token
+                    ; case insensitive
+
+7.2.  The Multipart Content-Type
+
+   In the case of multiple part entities, in which one or more different
+   sets of data are combined in a single body, a "multipart" Content-
+   Type field must appear in the entity's header. The body must then
+   contain one or more "body parts," each preceded by an encapsulation
+   boundary, and the last one followed by a closing boundary.  Each part
+   starts with an encapsulation boundary, and then contains a body part
+   consisting of header area, a blank line, and a body area.  Thus a
+   body part is similar to an RFC 822 message in syntax, but different
+   in meaning.
+
+   A body part is NOT to be interpreted as actually being an RFC 822
+   message.  To begin with, NO header fields are actually required in
+   body parts.  A body part that starts with a blank line, therefore, is
+   allowed and is a body part for which all default values are to be
+   assumed.  In such a case, the absence of a Content-Type header field
+   implies that the corresponding body is plain US-ASCII text.  The only
+   header fields that have defined meaning for body parts are those the
+   names of which begin with "Content-".  All other header fields are
+   generally to be ignored in body parts.  Although they should
+   generally be retained in mail processing, they may be discarded by
+   gateways if necessary.  Such other fields are permitted to appear in
+   body parts but must not be depended on.  "X-" fields may be created
+   for experimental or private purposes, with the recognition that the
+   information they contain may be lost at some gateways.
+
+
+
+
+Borenstein & Freed                                             [Page 28]
+
+RFC 1521                          MIME                    September 1993
+
+
+      NOTE: The distinction between an RFC 822 message and a body part
+      is subtle, but important. A gateway between Internet and X.400
+      mail, for example, must be able to tell the difference between a
+      body part that contains an image and a body part that contains an
+      encapsulated message, the body of which is an image.  In order to
+      represent the latter, the body part must have "Content-Type:
+      message", and its body (after the blank line) must be the
+      encapsulated message, with its own "Content-Type: image" header
+      field.  The use of similar syntax facilitates the conversion of
+      messages to body parts, and vice versa, but the distinction
+      between the two must be understood by implementors.  (For the
+      special case in which all parts actually are messages, a "digest"
+      subtype is also defined.)
+
+   As stated previously, each body part is preceded by an encapsulation
+   boundary.  The encapsulation boundary MUST NOT appear inside any of
+   the encapsulated parts.  Thus, it is crucial that the composing agent
+   be able to choose and specify the unique boundary that will separate
+   the parts.
+
+   All present and future subtypes of the "multipart" type must use an
+   identical syntax.  Subtypes may differ in their semantics, and may
+   impose additional restrictions on syntax, but must conform to the
+   required syntax for the multipart type.  This requirement ensures
+   that all conformant user agents will at least be able to recognize
+   and separate the parts of any multipart entity, even of an
+   unrecognized subtype.
+
+   As stated in the definition of the Content-Transfer-Encoding field,
+   no encoding other than "7bit", "8bit", or "binary" is permitted for
+   entities of type "multipart".  The multipart delimiters and header
+   fields are always represented as 7-bit ASCII in any case (though the
+   header fields may encode non-ASCII header text as per [RFC-1522]),
+   and data within the body parts can be encoded on a part-by-part
+   basis, with Content-Transfer-Encoding fields for each appropriate
+   body part.
+
+   Mail gateways, relays, and other mail handling agents are commonly
+   known to alter the top-level header of an RFC 822 message.  In
+   particular, they frequently add, remove, or reorder header fields.
+   Such alterations are explicitly forbidden for the body part headers
+   embedded in the bodies of messages of type "multipart."
+
+7.2.1.     Multipart:  The common syntax
+
+   All subtypes of "multipart" share a common syntax, defined in this
+   section.  A simple example of a multipart message also appears in
+   this section.  An example of a more complex multipart message is
+
+
+
+Borenstein & Freed                                             [Page 29]
+
+RFC 1521                          MIME                    September 1993
+
+
+   given in Appendix C.
+
+   The Content-Type field for multipart entities requires one parameter,
+   "boundary", which is used to specify the encapsulation boundary.  The
+   encapsulation boundary is defined as a line consisting entirely of
+   two hyphen characters ("-", decimal code 45) followed by the boundary
+   parameter value from the Content-Type header field.
+
+      NOTE: The hyphens are for rough compatibility with the earlier RFC
+      934 method of message encapsulation, and for ease of searching for
+      the boundaries in some implementations. However, it should be
+      noted that multipart messages are NOT completely compatible with
+      RFC 934 encapsulations; in particular, they do not obey RFC 934
+      quoting conventions for embedded lines that begin with hyphens.
+      This mechanism was chosen over the RFC 934 mechanism because the
+      latter causes lines to grow with each level of quoting.  The
+      combination of this growth with the fact that SMTP implementations
+      sometimes wrap long lines made the RFC 934 mechanism unsuitable
+      for use in the event that deeply-nested multipart structuring is
+      ever desired.
+
+   WARNING TO IMPLEMENTORS: The grammar for parameters on the Content-
+   type field is such that it is often necessary to enclose the
+   boundaries in quotes on the Content-type line.  This is not always
+   necessary, but never hurts.  Implementors should be sure to study the
+   grammar carefully in order to avoid producing illegal Content-type
+   fields. Thus, a typical multipart Content-Type header field might
+   look like this:
+
+                 Content-Type: multipart/mixed;
+                      boundary=gc0p4Jq0M2Yt08jU534c0p
+
+   But the following is illegal:
+
+                 Content-Type: multipart/mixed;
+                      boundary=gc0p4Jq0M:2Yt08jU534c0p
+
+   (because of the colon) and must instead be represented as
+
+                 Content-Type: multipart/mixed;
+                      boundary="gc0p4Jq0M:2Yt08jU534c0p"
+
+   This indicates that the entity consists of several parts, each itself
+   with a structure that is syntactically identical to an RFC 822
+   message, except that the header area might be completely empty, and
+   that the parts are each preceded by the line
+
+                 --gc0p4Jq0M:2Yt08jU534c0p
+
+
+
+Borenstein & Freed                                             [Page 30]
+
+RFC 1521                          MIME                    September 1993
+
+
+   Note that the encapsulation boundary must occur at the beginning of a
+   line, i.e., following a CRLF, and that the initial CRLF is considered
+   to be attached to the encapsulation boundary rather than part of the
+   preceding part.  The boundary must be followed immediately either by
+   another CRLF and the header fields for the next part, or by two
+   CRLFs, in which case there are no header fields for the next part
+   (and it is therefore assumed to be of Content-Type text/plain).
+
+      NOTE: The CRLF preceding the encapsulation line is conceptually
+      attached to the boundary so that it is possible to have a part
+      that does not end with a CRLF (line break). Body parts that must
+      be considered to end with line breaks, therefore, must have two
+      CRLFs preceding the encapsulation line, the first of which is part
+      of the preceding body part, and the second of which is part of the
+      encapsulation boundary.
+
+   Encapsulation boundaries must not appear within the encapsulations,
+   and must be no longer than 70 characters, not counting the two
+   leading hyphens.
+
+   The encapsulation boundary following the last body part is a
+   distinguished delimiter that indicates that no further body parts
+   will follow.  Such a delimiter is identical to the previous
+   delimiters, with the addition of two more hyphens at the end of the
+   line:
+
+                 --gc0p4Jq0M2Yt08jU534c0p--
+
+   There appears to be room for additional information prior to the
+   first encapsulation boundary and following the final boundary.  These
+   areas should generally be left blank, and implementations must ignore
+   anything that appears before the first boundary or after the last
+   one.
+
+      NOTE: These "preamble" and "epilogue" areas are generally not used
+      because of the lack of proper typing of these parts and the lack
+      of clear semantics for handling these areas at gateways,
+      particularly X.400 gateways.  However, rather than leaving the
+      preamble area blank, many MIME implementations have found this to
+      be a convenient place to insert an explanatory note for recipients
+      who read the message with pre-MIME software, since such notes will
+      be ignored by MIME-compliant software.
+
+      NOTE: Because encapsulation boundaries must not appear in the body
+      parts being encapsulated, a user agent must exercise care to
+      choose a unique boundary.  The boundary in the example above could
+      have been the result of an algorithm designed to produce
+      boundaries with a very low probability of already existing in the
+
+
+
+Borenstein & Freed                                             [Page 31]
+
+RFC 1521                          MIME                    September 1993
+
+
+      data to be encapsulated without having to prescan the data.
+      Alternate algorithms might result in more 'readable' boundaries
+      for a recipient with an old user agent, but would require more
+      attention to the possibility that the boundary might appear in the
+      encapsulated part.  The simplest boundary possible is something
+      like "---", with a closing boundary of "-----".
+
+   As a very simple example, the following multipart message has two
+   parts, both of them plain text, one of them explicitly typed and one
+   of them implicitly typed:
+
+      From: Nathaniel Borenstein <nsb@bellcore.com>
+      To:  Ned Freed <ned@innosoft.com>
+      Subject: Sample message
+      MIME-Version: 1.0
+      Content-type: multipart/mixed; boundary="simple
+      boundary"
+
+      This is the preamble.  It is to be ignored, though it
+      is a handy place for mail composers to include an
+      explanatory note to non-MIME conformant readers.
+      --simple boundary
+
+      This is implicitly typed plain ASCII text.
+      It does NOT end with a linebreak.
+      --simple boundary
+      Content-type: text/plain; charset=us-ascii
+
+      This is explicitly typed plain ASCII text.
+      It DOES end with a linebreak.
+
+      --simple boundary--
+      This is the epilogue.  It is also to be ignored.
+
+   The use of a Content-Type of multipart in a body part within another
+   multipart entity is explicitly allowed.  In such cases, for obvious
+   reasons, care must be taken to ensure that each nested multipart
+   entity must use a different boundary delimiter. See Appendix C for an
+   example of nested multipart entities.
+
+   The use of the multipart Content-Type with only a single body part
+   may be useful in certain contexts, and is explicitly permitted.
+
+   The only mandatory parameter for the multipart Content-Type is the
+   boundary parameter, which consists of 1 to 70 characters from a set
+   of characters known to be very robust through email gateways, and NOT
+   ending with white space.  (If a boundary appears to end with white
+   space, the white space must be presumed to have been added by a
+
+
+
+Borenstein & Freed                                             [Page 32]
+
+RFC 1521                          MIME                    September 1993
+
+
+   gateway, and must be deleted.)  It is formally specified by the
+   following BNF:
+
+   boundary := 0*69<bchars> bcharsnospace
+
+   bchars := bcharsnospace / " "
+
+   bcharsnospace :=    DIGIT / ALPHA / "'" / "(" / ")" / "+" /"_"
+                 / "," / "-" / "." / "/" / ":" / "=" / "?"
+
+   Overall, the body of a multipart entity may be specified  as
+   follows:
+
+   multipart-body := preamble 1*encapsulation
+                  close-delimiter epilogue
+
+   encapsulation := delimiter body-part CRLF
+
+   delimiter := "--" boundary CRLF ; taken from Content-Type field.
+                                   ; There must be no space
+                                   ; between "--" and boundary.
+
+   close-delimiter := "--" boundary "--" CRLF ; Again, no space
+   by "--",
+
+   preamble := discard-text   ;  to  be  ignored upon receipt.
+
+   epilogue := discard-text   ;  to  be  ignored upon receipt.
+
+   discard-text := *(*text CRLF)
+
+   body-part := <"message" as defined in RFC 822,
+             with all header fields optional, and with the
+             specified delimiter not occurring anywhere in
+             the message body, either on a line by itself
+             or as a substring anywhere.  Note that the
+             semantics of a part differ from the semantics
+             of a message, as described in the text.>
+
+      NOTE: In certain transport enclaves, RFC 822 restrictions such as
+      the one that limits bodies to printable ASCII characters may not
+      be in force.  (That is, the transport domains may resemble
+      standard Internet mail transport as specified in RFC821 and
+      assumed by RFC822, but without certain restrictions.)  The
+      relaxation of these restrictions should be construed as locally
+      extending the definition of bodies, for example to include octets
+      outside of the ASCII range, as long as these extensions are
+      supported by the transport and adequately documented in the
+
+
+
+Borenstein & Freed                                             [Page 33]
+
+RFC 1521                          MIME                    September 1993
+
+
+      Content-Transfer-Encoding header field. However, in no event are
+      headers (either message headers or body-part headers) allowed to
+      contain anything other than ASCII characters.
+
+      NOTE: Conspicuously missing from the multipart type is a notion of
+      structured, related body parts.  In general, it seems premature to
+      try to standardize interpart structure yet.  It is recommended
+      that those wishing to provide a more structured or integrated
+      multipart messaging facility should define a subtype of multipart
+      that is syntactically identical, but that always expects the
+      inclusion of a distinguished part that can be used to specify the
+      structure and integration of the other parts, probably referring
+      to them by their Content-ID field.  If this approach is used,
+      other implementations will not recognize the new subtype, but will
+      treat it as the primary subtype (multipart/mixed) and will thus be
+      able to show the user the parts that are recognized.
+
+7.2.2.     The Multipart/mixed (primary) subtype
+
+   The primary subtype for multipart, "mixed", is intended for use when
+   the body parts are independent and need to be bundled in a particular
+   order.  Any multipart subtypes that an implementation does not
+   recognize must be treated as being of subtype "mixed".
+
+7.2.3.     The Multipart/alternative subtype
+
+   The multipart/alternative type is syntactically identical to
+   multipart/mixed, but the semantics are different.  In particular,
+   each of the parts is an "alternative" version of the same
+   information.
+
+   Systems should recognize that the content of the various parts are
+   interchangeable.  Systems should choose the "best" type based on the
+   local environment and preferences, in some cases even through user
+   interaction.  As with multipart/mixed, the order of body parts is
+   significant.  In this case, the alternatives appear in an order of
+   increasing faithfulness to the original content. In general, the best
+   choice is the LAST part of a type supported by the recipient system's
+   local environment.
+
+   Multipart/alternative may be used, for example, to send mail in a
+   fancy text format in such a way that it can easily be displayed
+   anywhere:
+
+
+
+
+
+
+
+
+Borenstein & Freed                                             [Page 34]
+
+RFC 1521                          MIME                    September 1993
+
+
+   From:  Nathaniel Borenstein <nsb@bellcore.com>
+   To: Ned Freed <ned@innosoft.com>
+   Subject: Formatted text mail
+   MIME-Version: 1.0
+   Content-Type: multipart/alternative; boundary=boundary42
+
+   --boundary42
+
+   Content-Type: text/plain; charset=us-ascii
+
+      ...plain text version of message goes here....
+   --boundary42
+   Content-Type: text/richtext
+
+      .... RFC 1341 richtext version of same message goes here ...
+   --boundary42
+   Content-Type: text/x-whatever
+
+      .... fanciest formatted version of same  message  goes  here
+      ...
+   --boundary42--
+
+   In this example, users whose mail system understood the "text/x-
+   whatever" format would see only the fancy version, while other users
+   would see only the richtext or plain text version, depending on the
+   capabilities of their system.
+
+   In general, user agents that compose multipart/alternative entities
+   must place the body parts in increasing order of preference, that is,
+   with the preferred format last.  For fancy text, the sending user
+   agent should put the plainest format first and the richest format
+   last.  Receiving user agents should pick and display the last format
+   they are capable of displaying.  In the case where one of the
+   alternatives is itself of type "multipart" and contains unrecognized
+   sub-parts, the user agent may choose either to show that alternative,
+   an earlier alternative, or both.
+
+      NOTE: From an implementor's perspective, it might seem more
+      sensible to reverse this ordering, and have the plainest
+      alternative last.  However, placing the plainest alternative first
+      is the friendliest possible option when multipart/alternative
+      entities are viewed using a non-MIME-conformant mail reader.
+      While this approach does impose some burden on conformant mail
+      readers, interoperability with older mail readers was deemed to be
+      more important in this case.
+
+   It may be the case that some user agents, if they can recognize more
+   than one of the formats, will prefer to offer the user the choice of
+
+
+
+Borenstein & Freed                                             [Page 35]
+
+RFC 1521                          MIME                    September 1993
+
+
+   which format to view.  This makes sense, for example, if mail
+   includes both a nicely-formatted image version and an easily-edited
+   text version.  What is most critical, however, is that the user not
+   automatically be shown multiple versions of the same data.  Either
+   the user should be shown the last recognized version or should be
+   given the choice.
+
+   NOTE ON THE SEMANTICS OF CONTENT-ID IN MULTIPART/ALTERNATIVE: Each
+   part of a multipart/alternative entity represents the same data, but
+   the mappings between the two are not necessarily without information
+   loss.  For example, information is lost when translating ODA to
+   PostScript or plain text.  It is recommended that each part should
+   have a different Content-ID value in the case where the information
+   content of the two parts is not identical.  However, where the
+   information content is identical -- for example, where several parts
+   of type "application/external- body" specify alternate ways to access
+   the identical data -- the same Content-ID field value should be used,
+   to optimize any cacheing mechanisms that might be present on the
+   recipient's end.  However, it is recommended that the Content-ID
+   values used by the parts should not be the same Content-ID value that
+   describes the multipart/alternative as a whole, if there is any such
+   Content-ID field.  That is, one Content-ID value will refer to the
+   multipart/alternative entity, while one or more other Content-ID
+   values will refer to the parts inside it.
+
+7.2.4.     The Multipart/digest subtype
+
+   This document defines a "digest" subtype of the multipart Content-
+   Type.  This type is syntactically identical to multipart/mixed, but
+   the semantics are different.  In particular, in a digest, the default
+   Content-Type value for a body part is changed from "text/plain" to
+   "message/rfc822".  This is done to allow a more readable digest
+   format that is largely compatible (except for the quoting convention)
+   with RFC 934.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Borenstein & Freed                                             [Page 36]
+
+RFC 1521                          MIME                    September 1993
+
+
+   A digest in this format might, then, look something like this:
+
+   From: Moderator-Address
+   To: Recipient-List
+   MIME-Version: 1.0
+   Subject:  Internet Digest, volume 42
+   Content-Type: multipart/digest;
+        boundary="---- next message ----"
+
+   ------ next message ----
+
+   From: someone-else
+   Subject: my opinion
+
+      ...body goes here ...
+
+   ------ next message ----
+
+   From: someone-else-again
+   Subject: my different opinion
+
+      ... another body goes here...
+
+   ------ next message ------
+
+7.2.5.     The Multipart/parallel subtype
+
+   This document defines a "parallel" subtype of the multipart Content-
+   Type.  This type is syntactically identical to multipart/mixed, but
+   the semantics are different.  In particular, in a parallel entity,
+   the order of body parts is not significant.
+
+   A common presentation of this type is to display all of the parts
+   simultaneously on hardware and software that are capable of doing so.
+   However, composing agents should be aware that many mail readers will
+   lack this capability and will show the parts serially in any event.
+
+7.2.6.     Other Multipart subtypes
+
+   Other multipart subtypes are expected in the future.  MIME
+   implementations must in general treat unrecognized subtypes of
+   multipart as being equivalent to "multipart/mixed".
+
+   The formal grammar for content-type header fields for multipart data
+   is given by:
+
+   multipart-type := "multipart" "/" multipart-subtype
+                  ";" "boundary" "=" boundary
+
+
+
+Borenstein & Freed                                             [Page 37]
+
+RFC 1521                          MIME                    September 1993
+
+
+   multipart-subtype := "mixed" / "parallel" / "digest"
+                  / "alternative" / extension-token
+
+7.3.  The Message Content-Type
+
+   It is frequently desirable, in sending mail, to encapsulate another
+   mail message. For this common operation, a special Content-Type,
+   "message", is defined.  The primary subtype, message/rfc822, has no
+   required parameters in the Content-Type field.  Additional subtypes,
+   "partial" and "External-body", do have required parameters.  These
+   subtypes are explained below.
+
+      NOTE: It has been suggested that subtypes of message might be
+      defined for forwarded or rejected messages.  However, forwarded
+      and rejected messages can be handled as multipart messages in
+      which the first part contains any control or descriptive
+      information, and a second part, of type message/rfc822, is the
+      forwarded or rejected message.  Composing rejection and forwarding
+      messages in this manner will preserve the type information on the
+      original message and allow it to be correctly presented to the
+      recipient, and hence is strongly encouraged.
+
+   As stated in the definition of the Content-Transfer-Encoding field,
+   no encoding other than "7bit", "8bit", or "binary" is permitted for
+   messages or parts of type "message".  Even stronger restrictions
+   apply to the subtypes "message/partial" and "message/external-body",
+   as specified below.  The message header fields are always US-ASCII in
+   any case, and data within the body can still be encoded, in which
+   case the Content-Transfer-Encoding header field in the encapsulated
+   message will reflect this.  Non-ASCII text in the headers of an
+   encapsulated message can be specified using the mechanisms described
+   in [RFC-1522].
+
+   Mail gateways, relays, and other mail handling agents are commonly
+   known to alter the top-level header of an RFC 822 message.  In
+   particular, they frequently add, remove, or reorder header fields.
+   Such alterations are explicitly forbidden for the encapsulated
+   headers embedded in the bodies of messages of type "message."
+
+7.3.1.     The Message/rfc822 (primary) subtype
+
+   A Content-Type of "message/rfc822" indicates that the body contains
+   an encapsulated message, with the syntax of an RFC 822 message.
+   However, unlike top-level RFC 822 messages, it is not required that
+   each message/rfc822 body must include a "From", "Subject", and at
+   least one destination header.
+
+   It should be noted that, despite the use of the numbers "822", a
+
+
+
+Borenstein & Freed                                             [Page 38]
+
+RFC 1521                          MIME                    September 1993
+
+
+   message/rfc822 entity can include enhanced information as defined in
+   this document.  In other words, a message/rfc822 message may be a
+   MIME message.
+
+7.3.2.     The Message/Partial subtype
+
+   A subtype of message, "partial", is defined in order to allow large
+   objects to be delivered as several separate pieces of mail and
+   automatically reassembled by the receiving user agent.  (The concept
+   is similar to IP fragmentation/reassembly in the basic Internet
+   Protocols.)  This mechanism can be used when intermediate transport
+   agents limit the size of individual messages that can be sent.
+   Content-Type "message/partial" thus indicates that the body contains
+   a fragment of a larger message.
+
+   Three parameters must be specified in the Content-Type field of type
+   message/partial: The first, "id", is a unique identifier, as close to
+   a world-unique identifier as possible, to be used to match the parts
+   together.  (In general, the identifier is essentially a message-id;
+   if placed in double quotes, it can be any message-id, in accordance
+   with the BNF for "parameter" given earlier in this specification.)
+   The second, "number", an integer, is the part number, which indicates
+   where this part fits into the sequence of fragments.  The third,
+   "total", another integer, is the total number of parts. This third
+   subfield is required on the final part, and is optional (though
+   encouraged) on the earlier parts.  Note also that these parameters
+   may be given in any order.
+
+   Thus, part 2 of a 3-part message may have either of the following
+   header fields:
+
+                Content-Type: Message/Partial;
+                     number=2; total=3;
+                     id="oc=jpbe0M2Yt4s@thumper.bellcore.com"
+
+                Content-Type: Message/Partial;
+                     id="oc=jpbe0M2Yt4s@thumper.bellcore.com";
+                     number=2
+
+   But part 3 MUST specify the total number of parts:
+
+                Content-Type: Message/Partial;
+                     number=3; total=3;
+                     id="oc=jpbe0M2Yt4s@thumper.bellcore.com"
+
+   Note that part numbering begins with 1, not 0.
+
+   When the parts of a message broken up in this manner are put
+
+
+
+Borenstein & Freed                                             [Page 39]
+
+RFC 1521                          MIME                    September 1993
+
+
+   together, the result is a complete MIME entity, which may have its
+   own Content-Type header field, and thus may contain any other data
+   type.
+
+   Message fragmentation and reassembly: The semantics of a reassembled
+   partial message must be those of the "inner" message, rather than of
+   a message containing the inner message.  This makes it possible, for
+   example, to send a large audio message as several partial messages,
+   and still have it appear to the recipient as a simple audio message
+   rather than as an encapsulated message containing an audio message.
+   That is, the encapsulation of the message is considered to be
+   "transparent".
+
+   When generating and reassembling the parts of a message/partial
+   message, the headers of the encapsulated message must be merged with
+   the headers of the enclosing entities.  In this process the following
+   rules must be observed:
+
+      (1) All of the header fields from the initial enclosing entity
+      (part one), except those that start with "Content-" and the
+      specific header fields "Message-ID", "Encrypted", and "MIME-
+      Version", must be copied, in order, to the new message.
+
+      (2) Only those header fields in the enclosed message which start
+      with "Content-" and "Message-ID", "Encrypted", and "MIME-Version"
+      must be appended, in order, to the header fields of the new
+      message.  Any header fields in the enclosed message which do not
+      start with "Content-" (except for "Message-ID", "Encrypted", and
+      "MIME-Version") will be ignored.
+
+      (3) All of the header fields from the second and any subsequent
+      messages will be ignored.
+
+   For example, if an audio message is broken into two parts, the first
+   part might look something like this:
+
+      X-Weird-Header-1: Foo
+      From: Bill@host.com
+      To: joe@otherhost.com
+      Subject: Audio mail
+      Message-ID: <id1@host.com>
+      MIME-Version: 1.0
+      Content-type: message/partial;
+           id="ABC@host.com";
+           number=1; total=2
+
+      X-Weird-Header-1: Bar
+      X-Weird-Header-2: Hello
+
+
+
+Borenstein & Freed                                             [Page 40]
+
+RFC 1521                          MIME                    September 1993
+
+
+      Message-ID: <anotherid@foo.com>
+      MIME-Version: 1.0
+      Content-type: audio/basic
+      Content-transfer-encoding: base64
+
+         ... first half of encoded audio data goes here...
+
+   and the second half might look something like this:
+
+      From: Bill@host.com
+      To: joe@otherhost.com
+      Subject: Audio mail
+      MIME-Version: 1.0
+      Message-ID: <id2@host.com>
+      Content-type: message/partial;
+           id="ABC@host.com"; number=2; total=2
+
+         ... second half of encoded audio data goes here...
+
+   Then, when the fragmented message is reassembled, the resulting
+   message to be displayed to the user should look something like this:
+
+      X-Weird-Header-1: Foo
+      From: Bill@host.com
+      To: joe@otherhost.com
+      Subject: Audio mail
+      Message-ID: <anotherid@foo.com>
+      MIME-Version: 1.0
+      Content-type: audio/basic
+      Content-transfer-encoding: base64
+
+         ... first half of encoded audio data goes here...
+         ... second half of encoded audio data goes here...
+
+   Note on encoding of MIME entities encapsulated inside message/partial
+   entities: Because data of type "message" may never be encoded in
+   base64 or quoted-printable, a problem might arise if message/partial
+   entities are constructed in an environment that supports binary or
+   8-bit transport.  The problem is that the binary data would be split
+   into multiple message/partial objects, each of them requiring binary
+   transport.  If such objects were encountered at a gateway into a 7-
+   bit transport environment, there would be no way to properly encode
+   them for the 7-bit world, aside from waiting for all of the parts,
+   reassembling the message, and then encoding the reassembled data in
+   base64 or quoted-printable.  Since it is possible that different
+   parts might go through different gateways, even this is not an
+   acceptable solution.  For this reason, it is specified that MIME
+   entities of type message/partial must always have a content-
+
+
+
+Borenstein & Freed                                             [Page 41]
+
+RFC 1521                          MIME                    September 1993
+
+
+   transfer-encoding of 7-bit (the default).  In particular, even in
+   environments that support binary or 8-bit transport, the use of a
+   content-transfer-encoding of "8bit" or "binary" is explicitly
+   prohibited for entities of type message/partial.
+
+   It should be noted that, because some message transfer agents may
+   choose to automatically fragment large messages, and because such
+   agents may use different fragmentation thresholds, it is possible
+   that the pieces of a partial message, upon reassembly, may prove
+   themselves to comprise a partial message.  This is explicitly
+   permitted.
+
+   It should also be noted that the inclusion of a "References" field in
+   the headers of the second and subsequent pieces of a fragmented
+   message that references the Message-Id on the previous piece may be
+   of benefit to mail readers that understand and track references.
+   However, the generation of such "References" fields is entirely
+   optional.
+
+   Finally, it should be noted that the "Encrypted" header field has
+   been made obsolete by Privacy Enhanced Messaging (PEM), but the rules
+   above are believed to describe the correct way to treat it if it is
+   encountered in the context of conversion to and from message/partial
+   fragments.
+
+7.3.3.     The Message/External-Body subtype
+
+   The external-body subtype indicates that the actual body data are not
+   included, but merely referenced.  In this case, the parameters
+   describe a mechanism for accessing the external data.
+
+   When an entity is of type "message/external-body", it consists of a
+   header, two consecutive CRLFs, and the message header for the
+   encapsulated message.  If another pair of consecutive CRLFs appears,
+   this of course ends the message header for the encapsulated message.
+   However, since the encapsulated message's body is itself external, it
+   does NOT appear in the area that follows.  For example, consider the
+   following message:
+
+      Content-type: message/external-body; access-
+      type=local-file;
+
+           name="/u/nsb/Me.gif"
+
+      Content-type:  image/gif
+      Content-ID: <id42@guppylake.bellcore.com>
+      Content-Transfer-Encoding: binary
+
+
+
+
+Borenstein & Freed                                             [Page 42]
+
+RFC 1521                          MIME                    September 1993
+
+
+      THIS IS NOT REALLY THE BODY!
+
+   The area at the end, which might be called the "phantom body", is
+   ignored for most external-body messages.  However, it may be used to
+   contain auxiliary information for some such messages, as indeed it is
+   when the access-type is "mail-server".  Of the access-types defined
+   by this document, the phantom body is used only when the access-type
+   is "mail-server".  In all other cases, the phantom body is ignored.
+
+   The only always-mandatory parameter for message/external-body is
+   "access-type"; all of the other parameters may be mandatory or
+   optional depending on the value of access-type.
+
+      ACCESS-TYPE -- A case-insensitive word, indicating the supported
+      access mechanism by which the file or data may be obtained.
+      Values include, but are not limited to, "FTP", "ANON-FTP", "TFTP",
+      "AFS", "LOCAL-FILE", and "MAIL-SERVER".  Future values, except for
+      experimental values beginning with "X-" must be registered with
+      IANA, as described in Appendix E .
+
+   In addition, the following three parameters are optional for ALL
+   access-types:
+
+      EXPIRATION -- The date (in the RFC 822 "date-time" syntax, as
+      extended by RFC 1123 to permit 4 digits in the year field) after
+      which the existence of the external data is not guaranteed.
+
+      SIZE -- The size (in octets) of the data.  The intent of this
+      parameter is to help the recipient decide whether or not to expend
+      the necessary resources to retrieve the external data.  Note that
+      this describes the size of the data in its canonical form, that
+      is, before any Content- Transfer-Encoding has been applied or
+      after the data have been decoded.
+
+      PERMISSION -- A case-insensitive field that indicates whether or
+      not it is expected that clients might also attempt to overwrite
+      the data.  By default, or if permission is "read", the assumption
+      is that they are not, and that if the data is retrieved once, it
+      is never needed again.  If PERMISSION is "read-write", this
+      assumption is invalid, and any local copy must be considered no
+      more than a cache.  "Read" and "Read-write" are the only defined
+      values of permission.
+
+   The precise semantics of the access-types defined here are described
+   in the sections that follow.
+
+   The encapsulated headers in ALL message/external-body entities MUST
+   include a Content-ID header field to give a unique identifier by
+
+
+
+Borenstein & Freed                                             [Page 43]
+
+RFC 1521                          MIME                    September 1993
+
+
+   which to reference the data.  This identifier may be used for
+   cacheing mechanisms, and for recognizing the receipt of the data when
+   the access-type is "mail-server".
+
+   Note that, as specified here, the tokens that describe external-body
+   data, such as file names and mail server commands, are required to be
+   in the US-ASCII character set.  If this proves problematic in
+   practice, a new mechanism may be required as a future extension to
+   MIME, either as newly defined access-types for message/external-body
+   or by some other mechanism.
+
+   As with message/partial, it is specified that MIME entities of type
+   message/external-body must always have a content-transfer-encoding of
+   7-bit (the default).  In particular, even in environments that
+   support binary or 8-bit transport, the use of a content-transfer-
+   encoding of "8bit" or "binary" is explicitly prohibited for entities
+   of type message/external-body.
+
+7.3.3.1.  The "ftp" and "tftp" access-types
+
+   An access-type of FTP or TFTP indicates that the message body is
+   accessible as a file using the FTP [RFC-959] or TFTP [RFC-783]
+   protocols, respectively.  For these access-types, the following
+   additional parameters are mandatory:
+
+      NAME -- The name of the file that contains the actual body data.
+
+      SITE -- A machine from which the file may be obtained, using the
+      given protocol. This must be a fully qualified domain name, not a
+      nickname.
+
+   Before any data are retrieved, using FTP, the user will generally
+   need to be asked to provide a login id and a password for the machine
+   named by the site parameter.  For security reasons, such an id and
+   password are not specified as content-type parameters, but must be
+   obtained from the user.
+
+   In addition, the following parameters are optional:
+
+      DIRECTORY -- A directory from which the data named by NAME should
+      be retrieved.
+
+      MODE -- A case-insensitive string indicating the mode to be used
+      when retrieving the information.  The legal values for access-type
+      "TFTP" are "NETASCII", "OCTET", and "MAIL", as specified by the
+      TFTP protocol [RFC-783].  The legal values for access-type "FTP"
+      are "ASCII", "EBCDIC", "IMAGE", and "LOCALn" where "n" is a
+      decimal integer, typically 8.  These correspond to the
+
+
+
+Borenstein & Freed                                             [Page 44]
+
+RFC 1521                          MIME                    September 1993
+
+
+      representation types "A" "E" "I" and "L n" as specified by the FTP
+      protocol [RFC-959].  Note that "BINARY" and "TENEX" are not valid
+      values for MODE, but that "OCTET" or "IMAGE" or "LOCAL8" should be
+      used instead.  IF MODE is not specified, the default value is
+      "NETASCII" for TFTP and "ASCII" otherwise.
+
+7.3.3.2.  The "anon-ftp" access-type
+
+   The "anon-ftp" access-type is identical to the "ftp" access type,
+   except that the user need not be asked to provide a name and password
+   for the specified site.  Instead, the ftp protocol will be used with
+   login "anonymous" and a password that corresponds to the user's email
+   address.
+
+7.3.3.3.  The "local-file" and "afs" access-types
+
+   An access-type of "local-file" indicates that the actual body is
+   accessible as a file on the local machine.  An access-type of "afs"
+   indicates that the file is accessible via the global AFS file system.
+   In both cases, only a single parameter is required:
+
+      NAME -- The name of the file that contains the actual body data.
+
+   The following optional parameter may be used to describe the locality
+   of reference for the data, that is, the site or sites at which the
+   file is expected to be visible:
+
+      SITE -- A domain specifier for a machine or set of machines that
+      are known to have access to the data file.  Asterisks may be used
+      for wildcard matching to a part of a domain name, such as
+      "*.bellcore.com", to indicate a set of machines on which the data
+      should be directly visible, while a single asterisk may be used to
+      indicate a file that is expected to be universally available,
+      e.g., via a global file system.
+
+7.3.3.4.  The "mail-server" access-type
+
+   The "mail-server" access-type indicates that the actual body is
+   available from a mail server.  The mandatory parameter for this
+   access-type is:
+
+      SERVER -- The email address of the mail server from which the
+      actual body data can be obtained.
+
+   Because mail servers accept a variety of syntaxes, some of which is
+   multiline, the full command to be sent to a mail server is not
+   included as a parameter on the content-type line.  Instead, it is
+   provided as the "phantom body" when the content-type is
+
+
+
+Borenstein & Freed                                             [Page 45]
+
+RFC 1521                          MIME                    September 1993
+
+
+   message/external-body and the access- type is mail-server.
+
+   An optional parameter for this access-type is:
+
+      SUBJECT -- The subject that is to be used in the mail that is sent
+      to obtain the data. Note that keying mail servers on Subject lines
+      is NOT recommended, but such mail servers are known to exist.
+
+   Note that MIME does not define a mail server syntax.  Rather, it
+   allows the inclusion of arbitrary mail server commands in the phantom
+   body.  Implementations must include the phantom body in the body of
+   the message it sends to the mail server address to retrieve the
+   relevant data.
+
+   It is worth noting that, unlike other access-types, mail-server
+   access is asynchronous and will happen at an unpredictable time in
+   the future.  For this reason, it is important that there be a
+   mechanism by which the returned data can be matched up with the
+   original message/external-body entity.  MIME mailservers must use the
+   same Content-ID field on the returned message that was used in the
+   original message/external-body entity, to facilitate such matching.
+
+7.3.3.5.  Examples and Further Explanations
+
+   With the emerging possibility of very wide-area file systems, it
+   becomes very hard to know in advance the set of machines where a file
+   will and will not be accessible directly from the file system.
+   Therefore it may make sense to provide both a file name, to be tried
+   directly, and the name of one or more sites from which the file is
+   known to be accessible.  An implementation can try to retrieve remote
+   files using FTP or any other protocol, using anonymous file retrieval
+   or prompting the user for the necessary name and password.  If an
+   external body is accessible via multiple mechanisms, the sender may
+   include multiple parts of type message/external-body within an entity
+   of type multipart/alternative.
+
+   However, the external-body mechanism is not intended to be limited to
+   file retrieval, as shown by the mail-server access-type.  Beyond
+   this, one can imagine, for example, using a video server for external
+   references to video clips.
+
+   If an entity is of type "message/external-body", then the body of the
+   entity will contain the header fields of the encapsulated message.
+   The body itself is to be found in the external location.  This means
+   that if the body of the "message/external-body" message contains two
+   consecutive CRLFs, everything after those pairs is NOT part of the
+   message itself.  For most message/external-body messages, this
+   trailing area must simply be ignored.  However, it is a convenient
+
+
+
+Borenstein & Freed                                             [Page 46]
+
+RFC 1521                          MIME                    September 1993
+
+
+   place for additional data that cannot be included in the content-type
+   header field.  In particular, if the "access-type" value is "mail-
+   server", then the trailing area must contain commands to be sent to
+   the mail server at the address given by the value of the SERVER
+   parameter.
+
+   The embedded message header fields which appear in the body of the
+   message/external-body data must be used to declare the Content-type
+   of the external body if it is anything other than plain ASCII text,
+   since the external body does not have a header section to declare its
+   type.  Similarly, any Content-transfer-encoding other than "7bit"
+   must also be declared here.  Thus a complete message/external-body
+   message, referring to a document in PostScript format, might look
+   like this:
+
+      From: Whomever
+      To: Someone
+      Subject: whatever
+      MIME-Version: 1.0
+      Message-ID: <id1@host.com>
+      Content-Type: multipart/alternative; boundary=42
+      Content-ID: <id001@guppylake.bellcore.com>
+
+      --42
+      Content-Type: message/external-body;
+           name="BodyFormats.ps";
+           site="thumper.bellcore.com";
+           access-type=ANON-FTP;
+           directory="pub";
+           mode="image";
+           expiration="Fri, 14 Jun 1991 19:13:14 -0400 (EDT)"
+
+      Content-type: application/postscript
+      Content-ID: <id42@guppylake.bellcore.com>
+
+      --42
+      Content-Type: message/external-body;
+           name="/u/nsb/writing/rfcs/RFC-MIME.ps";
+           site="thumper.bellcore.com";
+           access-type=AFS
+           expiration="Fri, 14 Jun 1991 19:13:14 -0400 (EDT)"
+
+      Content-type: application/postscript
+      Content-ID: <id42@guppylake.bellcore.com>
+
+      --42
+      Content-Type: message/external-body;
+           access-type=mail-server
+
+
+
+Borenstein & Freed                                             [Page 47]
+
+RFC 1521                          MIME                    September 1993
+
+
+           server="listserv@bogus.bitnet";
+           expiration="Fri, 14 Jun 1991 19:13:14 -0400 (EDT)"
+
+      Content-type: application/postscript
+      Content-ID: <id42@guppylake.bellcore.com>
+
+      get RFC-MIME.DOC
+
+      --42--
+
+   Note that in the above examples, the default Content-transfer-
+   encoding of "7bit" is assumed for the external postscript data.
+
+   Like the message/partial type, the message/external-body type is
+   intended to be transparent, that is, to convey the data type in the
+   external body rather than to convey a message with a body of that
+   type.  Thus the headers on the outer and inner parts must be merged
+   using the same rules as for message/partial.  In particular, this
+   means that the Content-type header is overridden, but the From and
+   Subject headers are preserved.
+
+   Note that since the external bodies are not transported as mail, they
+   need not conform to the 7-bit and line length requirements, but might
+   in fact be binary files.  Thus a Content-Transfer-Encoding is not
+   generally necessary, though it is permitted.
+
+   Note that the body of a message of type "message/external-body" is
+   governed by the basic syntax for an RFC 822 message.  In particular,
+   anything before the first consecutive pair of CRLFs is header
+   information, while anything after it is body information, which is
+   ignored for most access-types.
+
+   The formal grammar for content-type header fields for data of type
+   message is given by:
+
+   message-type := "message" "/" message-subtype
+
+   message-subtype := "rfc822"
+                   / "partial" 2#3partial-param
+                   / "external-body" 1*external-param
+                   / extension-token
+
+   partial-param :=     (";" "id" "=" value)
+              /  (";" "number" "=" 1*DIGIT)
+              /  (";" "total" "=" 1*DIGIT)
+         ; id & number required; total  required  for  last part
+
+   external-param :=   (";" "access-type" "=" atype)
+
+
+
+Borenstein & Freed                                             [Page 48]
+
+RFC 1521                          MIME                    September 1993
+
+
+              / (";" "expiration" "=" date-time)
+                   ; Note that date-time is quoted
+              / (";" "size" "=" 1*DIGIT)
+              / (";"  "permission"  "="  ("read"  /  "read-write"))
+                   ; Permission is case-insensitive
+              / (";" "name" "="  value)
+              / (";" "site" "=" value)
+              / (";" "dir" "=" value)
+              / (";" "mode" "=" value)
+              / (";" "server" "=" value)
+              / (";" "subject" "=" value)
+          ; access-type required;others required based on access-type
+
+   atype := "ftp" / "anon-ftp" / "tftp" / "local-file"
+                  / "afs" / "mail-server" / extension-token
+                  ; Case-insensitive
+
+7.4.  The Application Content-Type
+
+   The "application" Content-Type is to be used for data which do not
+   fit in any of the other categories, and particularly for data to be
+   processed by mail-based uses of application programs.  This is
+   information which must be processed by an application before it is
+   viewable or usable to a user.  Expected uses for Content-Type
+   application include mail-based file transfer, spreadsheets, data for
+   mail-based scheduling systems, and languages for "active"
+   (computational) email.  (The latter, in particular, can pose security
+   problems which must be understood by implementors, and are considered
+   in detail in the discussion of the application/PostScript content-
+   type.)
+
+   For example, a meeting scheduler might define a standard
+   representation for information about proposed meeting dates.  An
+   intelligent user agent would use this information to conduct a dialog
+   with the user, and might then send further mail based on that dialog.
+   More generally, there have been several "active" messaging languages
+   developed in which programs in a suitably specialized language are
+   sent through the mail and automatically run in the recipient's
+   environment.
+
+   Such applications may be defined as subtypes of the "application"
+   Content-Type.  This document defines two subtypes: octet-stream, and
+   PostScript.
+
+   In general, the subtype of application will often be the name of the
+   application for which the data are intended.  This does not mean,
+   however, that any application program name may be used freely as a
+   subtype of application.  Such usages (other than subtypes beginning
+
+
+
+Borenstein & Freed                                             [Page 49]
+
+RFC 1521                          MIME                    September 1993
+
+
+   with "x-") must be registered with IANA, as described in Appendix E.
+
+7.4.1.     The Application/Octet-Stream (primary) subtype
+
+   The primary subtype of application, "octet-stream", may be used to
+   indicate that a body contains binary data.  The set of possible
+   parameters includes, but is not limited to:
+
+      TYPE -- the general type or category of binary data.  This is
+      intended as information for the human recipient rather than for
+      any automatic processing.
+
+      PADDING -- the number of bits of padding that were appended to the
+      bit-stream comprising the actual contents to produce the enclosed
+      byte-oriented data.  This is useful for enclosing a bit-stream in
+      a body when the total number of bits is not a multiple of the byte
+      size.
+
+   An additional parameter, "conversions", was defined in [RFC-1341] but
+   has been removed.
+
+   RFC 1341 also defined the use of a "NAME" parameter which gave a
+   suggested file name to be used if the data were to be written to a
+   file.  This has been deprecated in anticipation of a separate
+   Content-Disposition header field, to be defined in a subsequent RFC.
+
+   The recommended action for an implementation that receives
+   application/octet-stream mail is to simply offer to put the data in a
+   file, with any Content-Transfer-Encoding undone, or perhaps to use it
+   as input to a user-specified process.
+
+   To reduce the danger of transmitting rogue programs through the mail,
+   it is strongly recommended that implementations NOT implement a
+   path-search mechanism whereby an arbitrary program named in the
+   Content-Type parameter (e.g., an "interpreter=" parameter) is found
+   and executed using the mail body as input.
+
+7.4.2.     The Application/PostScript subtype
+
+   A Content-Type of "application/postscript" indicates a PostScript
+   program.  Currently two variants of the PostScript language are
+   allowed; the original level 1 variant is described in [POSTSCRIPT]
+   and the more recent level 2 variant is described in [POSTSCRIPT2].
+
+   PostScript is a registered trademark of Adobe Systems, Inc.  Use of
+   the MIME content-type "application/postscript" implies recognition of
+   that trademark and all the rights it entails.
+
+
+
+
+Borenstein & Freed                                             [Page 50]
+
+RFC 1521                          MIME                    September 1993
+
+
+   The PostScript language definition provides facilities for internal
+   labeling of the specific language features a given program uses. This
+   labeling, called the PostScript document structuring conventions, is
+   very general and provides substantially more information than just
+   the language level.
+
+   The use of document structuring conventions, while not required, is
+   strongly recommended as an aid to interoperability.  Documents which
+   lack proper structuring conventions cannot be tested to see whether
+   or not they will work in a given environment.  As such, some systems
+   may assume the worst and refuse to process unstructured documents.
+
+   The execution of general-purpose PostScript interpreters entails
+   serious security risks, and implementors are discouraged from simply
+   sending PostScript email bodies to "off-the-shelf" interpreters.
+   While it is usually safe to send PostScript to a printer, where the
+   potential for harm is greatly constrained, implementors should
+   consider all of the following before they add interactive display of
+   PostScript bodies to their mail readers.
+
+   The remainder of this section outlines some, though probably not all,
+   of the possible problems with sending PostScript through the mail.
+
+   Dangerous operations in the PostScript language include, but may not
+   be limited to, the PostScript operators deletefile, renamefile,
+   filenameforall, and file.  File is only dangerous when applied to
+   something other than standard input or output. Implementations may
+   also define additional nonstandard file operators; these may also
+   pose a threat to security.  Filenameforall, the wildcard file search
+   operator, may appear at first glance to be harmless. Note, however,
+   that this operator has the potential to reveal information about what
+   files the recipient has access to, and this information may itself be
+   sensitive.  Message senders should avoid the use of potentially
+   dangerous file operators, since these operators are quite likely to
+   be unavailable in secure PostScript implementations.  Message-
+   receiving and -displaying software should either completely disable
+   all potentially dangerous file operators or take special care not to
+   delegate any special authority to their operation. These operators
+   should be viewed as being done by an outside agency when interpreting
+   PostScript documents.  Such disabling and/or checking should be done
+   completely outside of the reach of the PostScript language itself;
+   care should be taken to insure that no method exists for re-enabling
+   full-function versions of these operators.
+
+   The PostScript language provides facilities for exiting the normal
+   interpreter, or server, loop. Changes made in this "outer"
+   environment are customarily retained across documents, and may in
+   some cases be retained semipermanently in nonvolatile memory. The
+
+
+
+Borenstein & Freed                                             [Page 51]
+
+RFC 1521                          MIME                    September 1993
+
+
+   operators associated with exiting the interpreter loop have the
+   potential to interfere with subsequent document processing. As such,
+   their unrestrained use constitutes a threat of service denial.
+   PostScript operators that exit the interpreter loop include, but may
+   not be limited to, the exitserver and startjob operators.  Message-
+   sending software should not generate PostScript that depends on
+   exiting the interpreter loop to operate. The ability to exit will
+   probably be unavailable in secure PostScript implementations.
+   Message-receiving and -displaying software should, if possible,
+   disable the ability to make retained changes to the PostScript
+   environment, and eliminate the startjob and exitserver commands.  If
+   these commands cannot be eliminated, the password associated with
+   them should at least be set to a hard-to-guess value.
+
+   PostScript provides operators for setting system-wide and device-
+   specific parameters. These parameter settings may be retained across
+   jobs and may potentially pose a threat to the correct operation of
+   the interpreter.  The PostScript operators that set system and device
+   parameters include, but may not be limited to, the setsystemparams
+   and setdevparams operators.  Message-sending software should not
+   generate PostScript that depends on the setting of system or device
+   parameters to operate correctly. The ability to set these parameters
+   will probably be unavailable in secure PostScript implementations.
+   Message-receiving and -displaying software should, if possible,
+   disable the ability to change system and device parameters.  If these
+   operators cannot be disabled, the password associated with them
+   should at least be set to a hard-to-guess value.
+
+   Some PostScript implementations provide nonstandard facilities for
+   the direct loading and execution of machine code.  Such facilities
+   are quite obviously open to substantial abuse.  Message-sending
+   software should not make use of such features. Besides being totally
+   hardware- specific, they are also likely to be unavailable in secure
+   implementations of PostScript.  Message-receiving and -displaying
+   software should not allow such operators to be used if they exist.
+
+   PostScript is an extensible language, and many, if not most,
+   implementations of it provide a number of their own extensions. This
+   document does not deal with such extensions explicitly since they
+   constitute an unknown factor.  Message-sending software should not
+   make use of nonstandard extensions; they are likely to be missing
+   from some implementations. Message-receiving and -displaying software
+   should make sure that any nonstandard PostScript operators are secure
+   and don't present any kind of threat.
+
+   It is possible to write PostScript that consumes huge amounts of
+   various system resources. It is also possible to write PostScript
+   programs that loop infinitely.  Both types of programs have the
+
+
+
+Borenstein & Freed                                             [Page 52]
+
+RFC 1521                          MIME                    September 1993
+
+
+   potential to cause damage if sent to unsuspecting recipients.
+   Message-sending software should avoid the construction and
+   dissemination of such programs, which is antisocial.  Message-
+   receiving and -displaying software should provide appropriate
+   mechanisms to abort processing of a document after a reasonable
+   amount of time has elapsed. In addition, PostScript interpreters
+   should be limited to the consumption of only a reasonable amount of
+   any given system resource.
+
+   Finally, bugs may exist in some PostScript interpreters which could
+   possibly be exploited to gain unauthorized access to a recipient's
+   system.  Apart from noting this possibility, there is no specific
+   action to take to prevent this, apart from the timely correction of
+   such bugs if any are found.
+
+7.4.3.     Other Application subtypes
+
+   It is expected that many other subtypes of application will be
+   defined in the future.  MIME implementations must generally treat any
+   unrecognized subtypes as being equivalent to application/octet-
+   stream.
+
+   The formal grammar for content-type header fields for application
+   data is given by:
+
+   application-type :=  "application" "/" application-subtype
+
+   application-subtype := ("octet-stream" *stream-param)
+                       / "postscript" / extension-token
+
+   stream-param :=  (";" "type" "=" value)
+                       / (";" "padding" "=" padding)
+
+   padding := "0" / "1" /  "2" /  "3" / "4" / "5" / "6" / "7"
+
+7.5.  The Image Content-Type
+
+   A Content-Type of "image" indicates that the body contains an image.
+   The subtype names the specific image format.  These names are case
+   insensitive.  Two initial subtypes are "jpeg" for the JPEG format,
+   JFIF encoding, and "gif" for GIF format [GIF].
+
+   The list of image subtypes given here is neither exclusive nor
+   exhaustive, and is expected to grow as more types are registered with
+   IANA, as described in Appendix E.
+
+   The formal grammar for the content-type header field for data of type
+   image is given by:
+
+
+
+Borenstein & Freed                                             [Page 53]
+
+RFC 1521                          MIME                    September 1993
+
+
+   image-type := "image" "/" ("gif" / "jpeg" / extension-token)
+
+7.6.  The Audio Content-Type
+
+   A Content-Type of "audio" indicates that the body contains audio
+   data.  Although there is not yet a consensus on an "ideal" audio
+   format for use with computers, there is a pressing need for a format
+   capable of providing interoperable behavior.
+
+   The initial subtype of "basic" is specified to meet this requirement
+   by providing an absolutely minimal lowest common denominator audio
+   format.  It is expected that richer formats for higher quality and/or
+   lower bandwidth audio will be defined by a later document.
+
+   The content of the "audio/basic" subtype is audio encoded using 8-bit
+   ISDN mu-law [PCM].  When this subtype is present, a sample rate of
+   8000 Hz and a single channel is assumed.
+
+   The formal grammar for the content-type header field for data of type
+   audio is given by:
+
+   audio-type := "audio" "/" ("basic" / extension-token)
+
+7.7.  The Video Content-Type
+
+   A Content-Type of "video" indicates that the body contains a time-
+   varying-picture image, possibly with color and coordinated sound.
+   The term "video" is used extremely generically, rather than with
+   reference to any particular technology or format, and is not meant to
+   preclude subtypes such as animated drawings encoded compactly.  The
+   subtype "mpeg" refers to video coded according to the MPEG standard
+   [MPEG].
+
+   Note that although in general this document strongly discourages the
+   mixing of multiple media in a single body, it is recognized that many
+   so-called "video" formats include a representation for synchronized
+   audio, and this is explicitly permitted for subtypes of "video".
+
+   The formal grammar for the content-type header field for data of type
+   video is given by:
+
+   video-type := "video" "/" ("mpeg" / extension-token)
+
+7.8.  Experimental Content-Type Values
+
+   A Content-Type value beginning with the characters "X-" is a private
+   value, to be used by consenting mail systems by mutual agreement.
+   Any format without a rigorous and public definition must be named
+
+
+
+Borenstein & Freed                                             [Page 54]
+
+RFC 1521                          MIME                    September 1993
+
+
+   with an "X-" prefix, and publicly specified values shall never begin
+   with "X-".  (Older versions of the widely-used Andrew system use the
+   "X-BE2" name, so new systems should probably choose a different
+   name.)
+
+   In general, the use of "X-" top-level types is strongly discouraged.
+   Implementors should invent subtypes of the existing types whenever
+   possible.  The invention of new types is intended to be restricted
+   primarily to the development of new media types for email, such as
+   digital odors or holography, and not for new data formats in general.
+   In many cases, a subtype of application will be more appropriate than
+   a new top-level type.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Borenstein & Freed                                             [Page 55]
+
+RFC 1521                          MIME                    September 1993
+
+
+8. Summary
+
+   Using the MIME-Version, Content-Type, and Content-Transfer-Encoding
+   header fields, it is possible to include, in a standardized way,
+   arbitrary types of data objects with RFC 822 conformant mail
+   messages.  No restrictions imposed by either RFC 821 or RFC 822 are
+   violated, and care has been taken to avoid problems caused by
+   additional restrictions imposed by the characteristics of some
+   Internet mail transport mechanisms (see Appendix B). The "multipart"
+   and "message" Content-Types allow mixing and hierarchical structuring
+   of objects of different types in a single message.  Further Content-
+   Types provide a standardized mechanism for tagging messages or body
+   parts as audio, image, or several other kinds of data.  A
+   distinguished parameter syntax allows further specification of data
+   format details, particularly the specification of alternate character
+   sets.  Additional optional header fields provide mechanisms for
+   certain extensions deemed desirable by many implementors.  Finally, a
+   number of useful Content-Types are defined for general use by
+   consenting user agents, notably message/partial, and
+   message/external-body.
+
+9. Security Considerations
+
+   Security issues are discussed in Section 7.4.2 and in Appendix F.
+   Implementors should pay special attention to the security
+   implications of any mail content-types that can cause the remote
+   execution of any actions in the recipient's environment.  In such
+   cases, the discussion of the application/postscript content-type in
+   Section 7.4.2 may serve as a model for considering other content-
+   types with remote execution capabilities.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Borenstein & Freed                                             [Page 56]
+
+RFC 1521                          MIME                    September 1993
+
+
+10. Authors' Addresses
+
+   For more information, the authors of this document may be contacted
+   via Internet mail:
+
+   Nathaniel S. Borenstein
+   MRE 2D-296, Bellcore
+   445 South St.
+   Morristown, NJ 07962-1910
+
+   Phone: +1 201 829 4270
+   Fax:  +1 201 829 7019
+   Email: nsb@bellcore.com
+
+
+   Ned Freed
+   Innosoft International, Inc.
+   250 West First Street
+   Suite 240
+   Claremont, CA 91711
+
+   Phone:  +1 909 624 7907
+   Fax: +1 909 621 5319
+   Email: ned@innosoft.com
+
+   MIME is a result of the work of the Internet Engineering Task Force
+   Working Group on Email Extensions. The chairman of that group, Greg
+   Vaudreuil, may be reached at:
+
+   Gregory M. Vaudreuil
+   Tigon Corporation
+   17060 Dallas Parkway
+   Dallas Texas, 75248
+
+   Phone:    +1 214-733-2722
+   EMail: gvaudre@cnri.reston.va.us
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Borenstein & Freed                                             [Page 57]
+
+RFC 1521                          MIME                    September 1993
+
+
+11. Acknowledgements
+
+   This document is the result of the collective effort of a large
+   number of people, at several IETF meetings, on the IETF-SMTP and
+   IETF-822 mailing lists, and elsewhere.  Although any enumeration
+   seems doomed to suffer from egregious omissions, the following are
+   among the many contributors to this effort:
+
+            Harald Tveit Alvestrand       Timo Lehtinen
+            Randall Atkinson              John R. MacMillan
+            Philippe Brandon              Rick McGowan
+            Kevin Carosso                 Leo Mclaughlin
+            Uhhyung Choi                  Goli Montaser-Kohsari
+            Cristian Constantinof         Keith Moore
+            Mark Crispin                  Tom Moore
+            Dave Crocker                  Erik Naggum
+            Terry Crowley                 Mark Needleman
+            Walt Daniels                  John Noerenberg
+            Frank Dawson                  Mats Ohrman
+            Hitoshi Doi                   Julian Onions
+            Kevin Donnelly                Michael Patton
+            Keith Edwards                 David J. Pepper
+            Chris Eich                    Blake C. Ramsdell
+            Johnny Eriksson               Luc Rooijakkers
+            Craig Everhart                Marshall T. Rose
+            Patrik Faeltstroem            Jonathan Rosenberg
+            Erik E. Fair                  Jan Rynning
+            Roger Fajman                  Harri Salminen
+            Alain Fontaine                Michael Sanderson
+            James M. Galvin               Masahiro Sekiguchi
+            Philip Gladstone              Mark Sherman
+            Thomas Gordon                 Keld Simonsen
+            Phill Gross                   Bob Smart
+            James Hamilton                Peter Speck
+            Steve Hardcastle-Kille        Henry Spencer
+            David Herron                  Einar Stefferud
+            Bruce Howard                  Michael Stein
+            Bill Janssen                  Klaus Steinberger
+            Olle Jaernefors               Peter Svanberg
+            Risto Kankkunen               James Thompson
+            Phil Karn                     Steve Uhler
+            Alan Katz                     Stuart Vance
+            Tim Kehres                    Erik van der Poel
+            Neil Katin                    Guido van Rossum
+            Kyuho Kim                     Peter Vanderbilt
+            Anders Klemets                Greg Vaudreuil
+            John Klensin                  Ed Vielmetti
+            Valdis Kletniek               Ryan Waldron
+
+
+
+Borenstein & Freed                                             [Page 58]
+
+RFC 1521                          MIME                    September 1993
+
+
+            Jim Knowles                   Wally Wedel
+            Stev Knowles                  Sven-Ove Westberg
+            Bob Kummerfeld                Brian Wideen
+            Pekka Kytolaakso              John Wobus
+            Stellan Lagerstrom            Glenn Wright
+            Vincent Lau                   Rayan Zachariassen
+            Donald Lindsay                David Zimmerman
+            Marc Andreessen               Bob Braden
+            Brian Capouch                 Peter Clitherow
+            Dave Collier-Brown            John Coonrod
+            Stephen Crocker               Jim Davis
+            Axel Deininger                Dana S Emery
+            Martin Forssen                Stephen Gildea
+            Terry Gray                    Mark Horton
+            Warner Losh                   Carlyn Lowery
+            Laurence Lundblade            Charles Lynn
+            Larry Masinter                Michael J. McInerny
+            Jon Postel                    Christer Romson
+            Yutaka Sato                   Markku Savela
+            Richard Alan Schafer          Larry W. Virden
+            Rhys Weatherly                Jay Weber
+            Dave Wecker
+
+The authors apologize for any omissions from this list, which are
+certainly unintentional.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Borenstein & Freed                                             [Page 59]
+
+RFC 1521                          MIME                    September 1993
+
+
+Appendix A -- Minimal MIME-Conformance
+
+   The mechanisms described in this document are open-ended.  It is
+   definitely not expected that all implementations will support all of
+   the Content-Types described, nor that they will all share the same
+   extensions.  In order to promote interoperability, however, it is
+   useful to define the concept of "MIME-conformance" to define a
+   certain level of implementation that allows the useful interworking
+   of messages with content that differs from US ASCII text.  In this
+   section, we specify the requirements for such conformance.
+
+   A mail user agent that is MIME-conformant MUST:
+
+      1.  Always generate a "MIME-Version: 1.0" header field.
+
+      2.  Recognize the Content-Transfer-Encoding header field, and
+      decode all received data encoded with either the quoted-printable
+      or base64 implementations.  Encode any data sent that is not in
+      seven-bit mail-ready representation using one of these
+      transformations and include the appropriate Content-Transfer-
+      Encoding header field, unless the underlying transport mechanism
+      supports non-seven-bit data, as SMTP does not.
+
+      3.  Recognize and interpret the Content-Type header field, and
+      avoid showing users raw data with a Content-Type field other than
+      text.  Be able to send at least text/plain messages, with the
+      character set specified as a parameter if it is not US-ASCII.
+
+      4.  Explicitly handle the following Content-Type values, to at
+      least the following extents:
+
+      Text:
+
+            -- Recognize and display "text" mail
+                 with the character set "US-ASCII."
+
+            -- Recognize other character sets at
+                 least to the extent of being able
+                 to inform the user about what
+                 character set the message uses.
+
+            -- Recognize the "ISO-8859-*" character
+                 sets to the extent of being able to
+                 display those characters that are
+                 common to ISO-8859-* and US-ASCII,
+                 namely all characters represented
+                 by octet values 0-127.
+
+
+
+
+Borenstein & Freed                                             [Page 60]
+
+RFC 1521                          MIME                    September 1993
+
+
+            -- For unrecognized subtypes, show or
+                 offer to show the user the "raw"
+                 version of the data after
+                 conversion of the content from
+                 canonical form to local form.
+
+       Message:
+
+            -- Recognize and display at least the
+                 primary (822) encapsulation.
+
+       Multipart:
+
+            -- Recognize the primary (mixed)
+                 subtype.  Display all relevant
+                 information on the message level
+                 and the body part header level and
+                 then display or offer to display
+                 each of the body parts individually.
+
+            -- Recognize the "alternative" subtype,
+                 and avoid showing the user
+                 redundant parts of
+                 multipart/alternative mail.
+
+            -- Treat any unrecognized subtypes as if
+                 they were "mixed".
+
+       Application:
+
+            -- Offer the ability to remove either of
+                 the two types of Content-Transfer-
+                 Encoding defined in this document
+                 and put the resulting information
+                 in a user file.
+
+      5.  Upon encountering any unrecognized Content- Type, an
+      implementation must treat it as if it had a Content-Type of
+      "application/octet-stream" with no parameter sub-arguments.  How
+      such data are handled is up to an implementation, but likely
+      options for handling such unrecognized data include offering the
+      user to write it into a file (decoded from its mail transport
+      format) or offering the user to name a program to which the
+      decoded data should be passed as input.  Unrecognized predefined
+      types, which in a MIME-conformant mailer might still include
+      audio, image, or video, should also be treated in this way.
+
+   A user agent that meets the above conditions is said to be MIME-
+
+
+
+Borenstein & Freed                                             [Page 61]
+
+RFC 1521                          MIME                    September 1993
+
+
+   conformant.  The meaning of this phrase is that it is assumed to be
+   "safe" to send virtually any kind of properly-marked data to users of
+   such mail systems, because such systems will at least be able to
+   treat the data as undifferentiated binary, and will not simply splash
+   it onto the screen of unsuspecting users.  There is another sense in
+   which it is always "safe" to send data in a format that is MIME-
+   conformant, which is that such data will not break or be broken by
+   any known systems that are conformant with RFC 821 and RFC 822.  User
+   agents that are MIME-conformant have the additional guarantee that
+   the user will not be shown data that were never intended to be viewed
+   as text.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Borenstein & Freed                                             [Page 62]
+
+RFC 1521                          MIME                    September 1993
+
+
+Appendix B -- General Guidelines For Sending Email Data
+
+   Internet email is not a perfect, homogeneous system.  Mail may become
+   corrupted at several stages in its travel to a final destination.
+   Specifically, email sent throughout the Internet may travel across
+   many networking technologies.  Many networking and mail technologies
+   do not support the full functionality possible in the SMTP transport
+   environment. Mail traversing these systems is likely to be modified
+   in such a way that it can be transported.
+
+   There exist many widely-deployed non-conformant MTAs in the Internet.
+   These MTAs, speaking the SMTP protocol, alter messages on the fly to
+   take advantage of the internal data structure of the hosts they are
+   implemented on, or are just plain broken.
+
+   The following guidelines may be useful to anyone devising a data
+   format (Content-Type) that will survive the widest range of
+   networking technologies and known broken MTAs unscathed.  Note that
+   anything encoded in the base64 encoding will satisfy these rules, but
+   that some well-known mechanisms, notably the UNIX uuencode facility,
+   will not.  Note also that anything encoded in the Quoted-Printable
+   encoding will survive most gateways intact, but possibly not some
+   gateways to systems that use the EBCDIC character set.
+
+      (1) Under some circumstances the encoding used for data may change
+      as part of normal gateway or user agent operation. In particular,
+      conversion from base64 to quoted-printable and vice versa may be
+      necessary. This may result in the confusion of CRLF sequences with
+      line breaks in text bodies. As such, the persistence of CRLF as
+      something other than a line break must not be relied on.
+
+      (2) Many systems may elect to represent and store text data using
+      local newline conventions. Local newline conventions may not match
+      the RFC822 CRLF convention -- systems are known that use plain CR,
+      plain LF, CRLF, or counted records.  The result is that isolated
+      CR and LF characters are not well tolerated in general; they may
+      be lost or converted to delimiters on some systems, and hence must
+      not be relied on.
+
+      (3) TAB (HT) characters may be misinterpreted or may be
+      automatically converted to variable numbers of spaces.  This is
+      unavoidable in some environments, notably those not based on the
+      ASCII character set. Such conversion is STRONGLY DISCOURAGED, but
+      it may occur, and mail formats must not rely on the persistence of
+      TAB (HT) characters.
+
+      (4) Lines longer than 76 characters may be wrapped or truncated in
+      some environments. Line wrapping and line truncation are STRONGLY
+
+
+
+Borenstein & Freed                                             [Page 63]
+
+RFC 1521                          MIME                    September 1993
+
+
+      DISCOURAGED, but unavoidable in some cases. Applications which
+      require long lines must somehow differentiate between soft and
+      hard line breaks.  (A simple way to do this is to use the quoted-
+      printable encoding.)
+
+      (5) Trailing "white space" characters (SPACE, TAB (HT)) on a line
+      may be discarded by some transport agents, while other transport
+      agents may pad lines with these characters so that all lines in a
+      mail file are of equal length.  The persistence of trailing white
+      space, therefore, must not be relied on.
+
+      (6) Many mail domains use variations on the ASCII character set,
+      or use character sets such as EBCDIC which contain most but not
+      all of the US-ASCII characters.  The correct translation of
+      characters not in the "invariant" set cannot be depended on across
+      character converting gateways.  For example, this situation is a
+      problem when sending uuencoded information across BITNET, an
+      EBCDIC system.  Similar problems can occur without crossing a
+      gateway, since many Internet hosts use character sets other than
+      ASCII internally.  The definition of Printable Strings in X.400
+      adds further restrictions in certain special cases.  In
+      particular, the only characters that are known to be consistent
+      across all gateways are the 73 characters that correspond to the
+      upper and lower case letters A-Z and a-z, the 10 digits 0-9, and
+      the following eleven special characters:
+
+                        "'"  (ASCII code 39)
+                        "("  (ASCII code 40)
+                        ")"  (ASCII code 41)
+                        "+"  (ASCII code 43)
+                        ","  (ASCII code 44)
+                        "-"  (ASCII code 45)
+                        "."  (ASCII code 46)
+                        "/"  (ASCII code 47)
+                        ":"  (ASCII code 58)
+                        "="  (ASCII code 61)
+                        "?"  (ASCII code 63)
+
+      A maximally portable mail representation, such as the base64
+      encoding, will confine itself to relatively short lines of text in
+      which the only meaningful characters are taken from this set of 73
+      characters.
+
+      (7) Some mail transport agents will corrupt data that includes
+      certain literal strings.  In particular, a period (".") alone on a
+      line is known to be corrupted by some (incorrect) SMTP
+      implementations, and a line that starts with the five characters
+      "From " (the fifth character is a SPACE) are commonly corrupted as
+
+
+
+Borenstein & Freed                                             [Page 64]
+
+RFC 1521                          MIME                    September 1993
+
+
+      well.  A careful composition agent can prevent these corruptions
+      by encoding the data (e.g., in the quoted-printable encoding,
+      "=46rom " in place of "From " at the start of a line, and "=2E" in
+      place of "." alone on a line.
+
+   Please note that the above list is NOT a list of recommended
+   practices for MTAs.  RFC 821 MTAs are prohibited from altering the
+   character of white space or wrapping long lines.  These BAD and
+   illegal practices are known to occur on established networks, and
+   implementations should be robust in dealing with the bad effects they
+   can cause.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Borenstein & Freed                                             [Page 65]
+
+RFC 1521                          MIME                    September 1993
+
+
+Appendix C -- A Complex Multipart Example
+
+   What follows is the outline of a complex multipart message.  This
+   message has five parts to be displayed serially: two introductory
+   plain text parts, an embedded multipart message, a richtext part, and
+   a closing encapsulated text message in a non-ASCII character set.
+   The embedded multipart message has two parts to be displayed in
+   parallel, a picture and an audio fragment.
+
+      MIME-Version: 1.0
+      From: Nathaniel Borenstein <nsb@bellcore.com>
+      To: Ned Freed <ned@innosoft.com>
+      Subject: A multipart example
+      Content-Type: multipart/mixed;
+           boundary=unique-boundary-1
+
+      This is the preamble area of a multipart message.
+      Mail readers that understand multipart format
+      should ignore this preamble.
+      If you are reading this text, you might want to
+      consider changing to a mail reader that understands
+      how to properly display multipart messages.
+      --unique-boundary-1
+
+         ...Some text appears here...
+      [Note that the preceding blank line means
+      no header fields were given and this is text,
+      with charset US ASCII.  It could have been
+      done with explicit typing as in the next part.]
+
+      --unique-boundary-1
+      Content-type: text/plain; charset=US-ASCII
+
+      This could have been part of the previous part,
+      but illustrates explicit versus implicit
+      typing of body parts.
+
+      --unique-boundary-1
+      Content-Type: multipart/parallel;
+           boundary=unique-boundary-2
+
+
+      --unique-boundary-2
+      Content-Type: audio/basic
+      Content-Transfer-Encoding: base64
+
+         ... base64-encoded 8000 Hz single-channel
+             mu-law-format audio data goes here....
+
+
+
+Borenstein & Freed                                             [Page 66]
+
+RFC 1521                          MIME                    September 1993
+
+
+      --unique-boundary-2
+      Content-Type: image/gif
+      Content-Transfer-Encoding: base64
+
+         ... base64-encoded image data goes here....
+
+      --unique-boundary-2--
+
+      --unique-boundary-1
+      Content-type: text/richtext
+
+      This is <bold><italic>richtext.</italic></bold>
+      <smaller>as defined in RFC 1341</smaller>
+      <nl><nl>Isn't it
+      <bigger><bigger>cool?</bigger></bigger>
+
+      --unique-boundary-1
+      Content-Type: message/rfc822
+
+      From: (mailbox in US-ASCII)
+      To: (address in US-ASCII)
+      Subject: (subject in US-ASCII)
+      Content-Type: Text/plain; charset=ISO-8859-1
+      Content-Transfer-Encoding: Quoted-printable
+
+         ... Additional text in ISO-8859-1 goes here ...
+
+      --unique-boundary-1--
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Borenstein & Freed                                             [Page 67]
+
+RFC 1521                          MIME                    September 1993
+
+
+Appendix D -- Collected Grammar
+
+   This appendix contains the complete BNF grammar for all the syntax
+   specified by this document.
+
+   By itself, however, this grammar is incomplete.  It refers to several
+   entities that are defined by RFC 822.  Rather than reproduce those
+   definitions here, and risk unintentional differences between the two,
+   this document simply refers the reader to RFC 822 for the remaining
+   definitions.  Wherever a term is undefined, it refers to the RFC 822
+   definition.
+
+   application-subtype := ("octet-stream" *stream-param)
+                       / "postscript" / extension-token
+
+   application-type :=  "application" "/" application-subtype
+
+   attribute := token    ; case-insensitive
+
+   atype := "ftp" / "anon-ftp" / "tftp" / "local-file"
+                  / "afs" / "mail-server" / extension-token
+                  ; Case-insensitive
+
+   audio-type := "audio" "/" ("basic" / extension-token)
+
+   body-part := <"message" as defined in RFC 822,
+            with all header fields optional, and with the
+            specified delimiter not occurring anywhere in
+            the message body, either on a line by itself
+            or as a substring anywhere.>
+
+      NOTE: In certain transport enclaves, RFC 822 restrictions such as
+      the one that limits bodies to printable ASCII characters may not
+      be in force.  (That is, the transport domains may resemble
+      standard Internet mail transport as specified in RFC821 and
+      assumed by RFC822, but without certain restrictions.)  The
+      relaxation of these restrictions should be construed as locally
+      extending the definition of bodies, for example to include octets
+      outside of the ASCII range, as long as these extensions are
+      supported by the transport and adequately documented in the
+      Content-Transfer-Encoding header field. However, in no event are
+      headers (either message headers or body-part headers) allowed to
+      contain anything other than ASCII characters.
+
+
+
+
+
+
+
+
+Borenstein & Freed                                             [Page 68]
+
+RFC 1521                          MIME                    September 1993
+
+
+   boundary := 0*69<bchars> bcharsnospace
+
+   bchars := bcharsnospace / " "
+
+   bcharsnospace :=    DIGIT / ALPHA / "'" / "(" / ")" / "+"  / "_"
+                  / "," / "-" / "." / "/" / ":" / "=" / "?"
+
+   charset := "us-ascii" / "iso-8859-1" / "iso-8859-2"/ "iso-8859-3"
+        / "iso-8859-4" / "iso-8859-5" /  "iso-8859-6" / "iso-8859-7"
+        / "iso-8859-8" / "iso-8859-9" / extension-token
+        ; case insensitive
+
+   close-delimiter := "--" boundary "--" CRLF;Again,no space by "--",
+
+   content  := "Content-Type"  ":" type "/" subtype  *(";" parameter)
+             ; case-insensitive matching of type and subtype
+
+   delimiter := "--" boundary CRLF  ;taken from Content-Type field.
+                                ; There must be no space
+                                ; between "--" and boundary.
+
+   description := "Content-Description" ":" *text
+
+   discard-text := *(*text CRLF)
+
+   encapsulation := delimiter body-part CRLF
+
+   encoding := "Content-Transfer-Encoding" ":" mechanism
+
+   epilogue := discard-text        ;  to  be  ignored upon receipt.
+
+   extension-token :=  x-token / iana-token
+
+   external-param :=   (";" "access-type" "=" atype)
+                  / (";" "expiration" "=" date-time)
+
+                       ; Note that date-time is quoted
+                  / (";" "size" "=" 1*DIGIT)
+                  / (";"  "permission"  "="  ("read" / "read-write"))
+                       ; Permission is case-insensitive
+                  / (";" "name" "="  value)
+                  / (";" "site" "=" value)
+                  / (";" "dir" "=" value)
+                  / (";" "mode" "=" value)
+                  / (";" "server" "=" value)
+                  / (";" "subject" "=" value)
+           ;access-type required; others required based on access-type
+
+
+
+
+Borenstein & Freed                                             [Page 69]
+
+RFC 1521                          MIME                    September 1993
+
+
+   iana-token := <a publicly-defined extension token,
+             registered with IANA, as specified in
+             appendix E>
+
+   id :=  "Content-ID" ":" msg-id
+
+   image-type := "image" "/" ("gif" / "jpeg" / extension-token)
+
+   mechanism :=     "7bit"    ;  case-insensitive
+                  / "quoted-printable"
+                  / "base64"
+                  / "8bit"
+                  / "binary"
+                  / x-token
+
+   message-subtype := "rfc822"
+                  / "partial" 2#3partial-param
+                  / "external-body" 1*external-param
+                  / extension-token
+
+   message-type := "message" "/" message-subtype
+
+   multipart-body :=preamble 1*encapsulation close-delimiter epilogue
+
+   multipart-subtype := "mixed" / "parallel" / "digest"
+                  / "alternative" / extension-token
+
+   multipart-type := "multipart" "/" multipart-subtype
+                  ";" "boundary" "=" boundary
+
+   octet := "=" 2(DIGIT / "A" / "B" / "C" / "D" / "E" / "F")
+        ; octet must be used for characters > 127, =, SPACE, or
+   TAB,
+        ; and is recommended for any characters not listed in
+        ; Appendix B as "mail-safe".
+
+   padding := "0" / "1" /  "2" /  "3" / "4" / "5" / "6" / "7"
+
+   parameter := attribute "=" value
+
+   partial-param :=     (";" "id" "=" value)
+                  /  (";" "number" "=" 1*DIGIT)
+                  /  (";" "total" "=" 1*DIGIT)
+             ; id & number required;total required for last part
+
+   preamble := discard-text       ;  to  be  ignored upon receipt.
+
+   ptext := octet / <any ASCII character except "=", SPACE,  or TAB>
+
+
+
+Borenstein & Freed                                             [Page 70]
+
+RFC 1521                          MIME                    September 1993
+
+
+        ; characters not listed as "mail-safe" in Appendix B
+        ; are also not recommended.
+
+   quoted-printable := ([*(ptext / SPACE /  TAB)  ptext]  ["="] CRLF)
+        ; Maximum line length of 76 characters excluding CRLF
+
+   stream-param :=  (";" "type" "=" value)
+                / (";" "padding" "=" padding)
+
+   subtype := token  ; case-insensitive
+
+   text-subtype := "plain" / extension-token
+
+   text-type := "text" "/" text-subtype [";" "charset" "=" charset]
+
+   token  :=  1*<any  (ASCII) CHAR except SPACE, CTLs, or tspecials>
+
+   tspecials :=  "(" / ")" / "<" / ">" / "@"
+              /  "," / ";" / ":" / "\" / <">
+              /  "/" / "[" / "]" / "?" / "="
+             ; Must be in quoted-string,
+             ; to use within parameter values
+
+
+   type :=     "application"     /  "audio"   ; case-insensitive
+             / "image"           / "message"
+             / "multipart"  / "text"
+             / "video"           / extension-token
+             ; All values case-insensitive
+
+   value := token / quoted-string
+
+   version := "MIME-Version" ":" 1*DIGIT "." 1*DIGIT
+
+   video-type := "video" "/" ("mpeg" / extension-token)
+
+   x-token := <The two characters "X-" or "x-" followed, with no
+              intervening white space, by any token>
+
+
+
+
+
+
+
+
+
+
+
+
+
+Borenstein & Freed                                             [Page 71]
+
+RFC 1521                          MIME                    September 1993
+
+
+Appendix E -- IANA Registration Procedures
+
+   MIME has been carefully designed to have extensible mechanisms, and
+   it is expected that the set of content-type/subtype pairs and their
+   associated parameters will grow significantly with time.  Several
+   other MIME fields, notably character set names, access-type
+   parameters for the message/external-body type, and possibly even
+   Content-Transfer-Encoding values, are likely to have new values
+   defined over time.  In order to ensure that the set of such values is
+   developed in an orderly, well-specified, and public manner, MIME
+   defines a registration process which uses the Internet Assigned
+   Numbers Authority (IANA) as a central registry for such values.
+
+   In general, parameters in the content-type header field are used to
+   convey supplemental information for various content types, and their
+   use is defined when the content-type and subtype are defined.  New
+   parameters should not be defined as a way to introduce new
+   functionality.
+
+   In order to simplify and standardize the registration process, this
+   appendix gives templates for the registration of new values with
+   IANA.  Each of these is given in the form of an email message
+   template, to be filled in by the registering party.
+
+   E.1  Registration of New Content-type/subtype Values
+
+   Note that MIME is generally expected to be extended by subtypes.  If
+   a new fundamental top-level type is needed, its specification must be
+   published as an RFC or submitted in a form suitable to become an RFC,
+   and be subject to the Internet standards process.
+
+      To:  IANA@isi.edu
+      Subject:  Registration of new MIME
+           content-type/subtype
+
+      MIME type name:
+
+      (If the above is not an existing top-level MIME type,
+      please explain why an existing type cannot be used.)
+
+      MIME subtype name:
+
+      Required parameters:
+
+      Optional parameters:
+
+      Encoding considerations:
+
+
+
+
+Borenstein & Freed                                             [Page 72]
+
+RFC 1521                          MIME                    September 1993
+
+
+      Security considerations:
+
+      Published specification:
+
+      (The published specification must be an Internet RFC or
+      RFC-to-be if a new top-level type is being defined, and
+      must be a publicly available specification in any
+      case.)
+
+      Person & email address to contact for further information:
+
+   E.2  Registration of New Access-type Values
+           for Message/external-body
+
+      To:  IANA@isi.edu
+      Subject:  Registration of new MIME Access-type for
+           Message/external-body content-type
+
+      MIME access-type name:
+
+      Required parameters:
+
+      Optional parameters:
+
+      Published specification:
+
+      (The published specification must be an Internet RFC or
+      RFC-to-be.)
+
+      Person & email address to contact for further information:
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Borenstein & Freed                                             [Page 73]
+
+RFC 1521                          MIME                    September 1993
+
+
+Appendix F -- Summary of the Seven Content-types
+
+   Content-type: text
+
+   Subtypes defined by this document:  plain
+
+   Important Parameters: charset
+
+   Encoding notes: quoted-printable generally preferred if an encoding
+      is needed and the character set is mostly an ASCII superset.
+
+   Security considerations: Rich text formats such as TeX and Troff
+      often contain mechanisms for executing arbitrary commands or file
+      system operations, and should not be used automatically unless
+      these security problems have been addressed.  Even plain text may
+      contain control characters that can be used to exploit the
+      capabilities of "intelligent" terminals and cause security
+      violations.  User interfaces designed to run on such terminals
+      should be aware of and try to prevent such problems.
+
+   ________________________________________________________
+   Content-type: multipart
+
+   Subtypes defined by  this  document: mixed, alternative,
+        digest, parallel.
+
+   Important Parameters: boundary
+
+   Encoding notes: No content-transfer-encoding is permitted.
+
+   ________________________________________________________
+   Content-type: message
+
+   Subtypes defined by this document: rfc822, partial, external-body
+
+   Important Parameters: id, number, total, access-type, expiration,
+      size, permission, name, site, directory, mode, server, subject
+
+   Encoding notes: No content-transfer-encoding is permitted.
+      Specifically, only "7bit" is permitted for "message/partial" or
+      "message/external-body", and only "7bit", "8bit", or "binary" are
+      permitted for other subtypes of "message".
+   ______________________________________________________________
+   Content-type: application
+
+   Subtypes defined by this document:  octet-stream, postscript
+
+   Important Parameters:  type, padding
+
+
+
+Borenstein & Freed                                             [Page 74]
+
+RFC 1521                          MIME                    September 1993
+
+
+   Deprecated Parameters: name and conversions were
+                          defined in RFC 1341.
+
+   Encoding notes: base64 preferred for unreadable subtypes.
+
+   Security considerations:  This  type  is  intended  for  the
+   transmission  of data to be interpreted by locally-installed
+   programs.  If used,  for  example,  to  transmit  executable
+   binary  programs  or programs in general-purpose interpreted
+   languages, such as LISP programs or  shell  scripts,  severe
+   security  problems  could  result.   Authors of mail-reading
+   agents are cautioned against giving their systems the  power
+   to  execute  mail-based  application  data without carefully
+   considering  the  security  implications.    While   it   is
+   certainly  possible  to  define safe application formats and
+   even safe interpreters for unsafe formats, each  interpreter
+   should   be   evaluated  separately  for  possible  security
+   problems.
+   ________________________________________________________________
+   Content-type: image
+
+   Subtypes defined by this document:  jpeg, gif
+
+   Important Parameters: none
+
+   Encoding notes: base64 generally preferred
+   ________________________________________________________________
+   Content-type: audio
+
+   Subtypes defined by this document:  basic
+
+   Important Parameters: none
+
+   Encoding notes: base64 generally preferred
+   ________________________________________________________________
+   Content-type: video
+
+   Subtypes defined by this document:  mpeg
+
+   Important Parameters: none
+
+   Encoding notes: base64 generally preferred
+
+
+
+
+
+
+
+
+
+Borenstein & Freed                                             [Page 75]
+
+RFC 1521                          MIME                    September 1993
+
+
+Appendix G -- Canonical Encoding Model
+
+   There was some confusion, in earlier drafts of this memo, regarding
+   the model for when email data was to be converted to canonical form
+   and encoded, and in particular how this process would affect the
+   treatment of CRLFs, given that the representation of newlines varies
+   greatly from system to system.  For this reason, a canonical model
+   for encoding is presented below.
+
+   The process of composing a MIME entity can be modeled as being done
+   in a number of steps.  Note that these steps are roughly similar to
+   those steps used in RFC 1421 and are performed for each 'innermost
+   level' body:
+
+   Step 1.  Creation of local form.
+
+   The body to be transmitted is created in the system's native format.
+   The native character set is used, and where appropriate local end of
+   line conventions are used as well.  The body may be a UNIX-style text
+   file, or a Sun raster image, or a VMS indexed file, or audio data in
+   a system-dependent format stored only in memory, or anything else
+   that corresponds to the local model for the representation of some
+   form of information.  Fundamentally, the data is created in the
+   "native" form specified by the type/subtype information.
+
+   Step 2.  Conversion to canonical form.
+
+   The entire body, including "out-of-band" information such as record
+   lengths and possibly file attribute information, is converted to a
+   universal canonical form.  The specific content type of the body as
+   well as its associated attributes dictate the nature of the canonical
+   form that is used.  Conversion to the proper canonical form may
+   involve character set conversion, transformation of audio data,
+   compression, or various other operations specific to the various
+   content types.  If character set conversion is involved, however,
+   care must be taken to understand the semantics of the content-type,
+   which may have strong implications for any character set conversion,
+   e.g.  with regard to syntactically meaningful characters in a text
+   subtype other than "plain".
+
+   For example, in the case of text/plain data, the text must be
+   converted to a supported character set and lines must be delimited
+   with CRLF delimiters in accordance with RFC822.  Note that the
+   restriction on line lengths implied by RFC822 is eliminated if the
+   next step employs either quoted-printable or base64 encoding.
+
+
+
+
+
+
+Borenstein & Freed                                             [Page 76]
+
+RFC 1521                          MIME                    September 1993
+
+
+   Step 3.  Apply transfer encoding.
+
+   A Content-Transfer-Encoding appropriate for this body is applied.
+   Note that there is no fixed relationship between the content type and
+   the transfer encoding.  In particular, it may be appropriate to base
+   the choice of base64 or quoted-printable on character frequency
+   counts which are specific to a given instance of a body.
+
+   Step 4.  Insertion into entity.
+
+   The encoded object is inserted into a MIME entity with appropriate
+   headers.  The entity is then inserted into the body of a higher-level
+   entity (message or multipart) if needed.
+
+   It is vital to note that these steps are only a model; they are
+   specifically NOT a blueprint for how an actual system would be built.
+   In particular, the model fails to account for two common designs:
+
+      1.  In many cases the conversion to a canonical form prior to
+      encoding will be subsumed into the encoder itself, which
+      understands local formats directly.  For example, the local
+      newline convention for text bodies might be carried through to the
+      encoder itself along with knowledge of what that format is.
+
+      2.  The output of the encoders may have to pass through one or
+      more additional steps prior to being transmitted as a message.  As
+      such, the output of the encoder may not be conformant with the
+      formats specified by RFC822.  In particular, once again it may be
+      appropriate for the converter's output to be expressed using local
+      newline conventions rather than using the standard RFC822 CRLF
+      delimiters.
+
+   Other implementation variations are conceivable as well.  The vital
+   aspect of this discussion is that, in spite of any optimizations,
+   collapsings of required steps, or insertion of additional processing,
+   the resulting messages must be consistent with those produced by the
+   model described here.  For example, a message with the following
+   header fields:
+
+        Content-type: text/foo; charset=bar
+        Content-Transfer-Encoding: base64
+
+   must be first represented in the text/foo form, then (if necessary)
+   represented in the "bar" character set, and finally transformed via
+   the base64 algorithm into a mail-safe form.
+
+
+
+
+
+
+Borenstein & Freed                                             [Page 77]
+
+RFC 1521                          MIME                    September 1993
+
+
+Appendix H -- Changes from RFC 1341
+
+   This document is a relatively minor revision  of  RFC  1341.  For
+   the  convenience  of  those familiar with RFC 1341, the technical
+   changes from that document are summarized in  this appendix.
+
+   1.  The definition of "tspecials" has been changed to no longer
+   include ".".
+
+   2.  The Content-ID field is now mandatory for message/external-body
+   parts.
+
+   3.  The text/richtext type (including the old Section 7.1.3 and
+   Appendix D) has been moved to a separate document.
+
+   4.  The rules on header merging for message/partial data have been
+   changed to treat the Encrypted and MIME-Version headers as special
+   cases.
+
+   5.  The definition of the external-body access-type parameter has
+   been changed so that it can only indicate a single access method
+   (which was all that made sense).
+
+   6.  There is a new "Subject" parameter for message/external-body,
+   access-type mail-server, to permit MIME-based use of mail servers
+   that rely on Subject field information.
+
+   7.  The "conversions" parameter for application/octet-stream has been
+   removed.
+
+   8.  Section 7.4.1 now deprecates the use of the "name" parameter for
+   application/octet-stream, as this will be superseded in the future by
+   a Content-Disposition header.
+
+   9.  The formal grammar for multipart bodies has been changed so that
+   a CRLF is no longer required before the first boundary line.
+
+   10.  MIME entities of type "message/partial" and "message/external-
+   body" are now required to use only the "7bit" transfer-encoding.
+   (Specifically, "binary" and "8bit" are not permitted.)
+
+   11.  The "application/oda" content-type has been removed.
+
+   12.  A note has been added to the end of section 7.2.3, explaining
+   the semantics of Content-ID in a multipart/alternative MIME entity.
+
+   13.  The formal syntax for the "MIME-Version" field has been
+   tightened, but in a way that is completely compatible with the only
+
+
+
+Borenstein & Freed                                             [Page 78]
+
+RFC 1521                          MIME                    September 1993
+
+
+   version number defined in RFC 1341.
+
+   14.  In Section 7.3.1, the definition of message/rfc822 has been
+   relaxed regarding mandatory fields.
+
+   All other changes from RFC 1341 were editorial changes and do not
+   affect the technical content of MIME.  Considerable formal grammar
+   has been added, but this reflects the prose specification that was
+   already in place.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Borenstein & Freed                                             [Page 79]
+
+RFC 1521                          MIME                    September 1993
+
+
+References
+
+   [US-ASCII] Coded Character Set--7-Bit American Standard Code for
+   Information Interchange, ANSI X3.4-1986.
+
+   [ATK] Borenstein, Nathaniel S., Multimedia Applications Development
+   with the Andrew Toolkit, Prentice-Hall, 1990.
+
+   [GIF] Graphics Interchange Format (Version 89a), Compuserve, Inc.,
+   Columbus, Ohio, 1990.
+
+   [ISO-2022] International Standard--Information Processing--ISO 7-bit
+   and 8-bit coded character sets--Code extension techniques, ISO
+   2022:1986.
+
+   [ISO-8859] Information Processing -- 8-bit Single-Byte Coded Graphic
+   Character Sets -- Part 1: Latin Alphabet No. 1, ISO 8859-1:1987.  Part
+   2: Latin alphabet No.  2, ISO 8859-2, 1987.  Part 3: Latin alphabet
+   No. 3, ISO 8859-3, 1988.  Part 4: Latin alphabet No.  4, ISO 8859-4,
+   1988.  Part 5: Latin/Cyrillic alphabet, ISO 8859-5, 1988.  Part 6:
+   Latin/Arabic alphabet, ISO 8859-6, 1987.  Part 7: Latin/Greek
+   alphabet, ISO 8859-7, 1987.  Part 8: Latin/Hebrew alphabet, ISO
+   8859-8, 1988.  Part 9: Latin alphabet No. 5, ISO 8859-9, 1990.
+
+   [ISO-646] International Standard--Information Processing--ISO 7-bit
+   coded character set for information interchange, ISO 646:1983.
+
+   [MPEG] Video Coding Draft Standard ISO 11172 CD, ISO IEC/TJC1/SC2/WG11
+   (Motion Picture Experts Group), May, 1991.
+
+   [PCM] CCITT, Fascicle III.4 - Recommendation G.711, Geneva, 1972,
+   "Pulse Code Modulation (PCM) of Voice Frequencies".
+
+   [POSTSCRIPT] Adobe Systems, Inc., PostScript Language Reference
+   Manual, Addison-Wesley, 1985.
+
+   [POSTSCRIPT2] Adobe Systems, Inc., PostScript Language Reference
+   Manual, Addison-Wesley, Second Edition, 1990.
+
+   [X400] Schicker, Pietro, "Message Handling Systems, X.400", Message
+   Handling Systems and Distributed Applications, E.  Stefferud, O-j.
+   Jacobsen, and P.  Schicker, eds., North-Holland, 1989, pp. 3-41.
+
+   [RFC-783] Sollins, K., "TFTP Protocol (revision 2)", RFC 783, MIT,
+   June 1981.
+
+   [RFC-821] Postel, J., "Simple Mail Transfer Protocol", STD 10, RFC
+   821, USC/Information Sciences Institute, August 1982.
+
+
+
+Borenstein & Freed                                             [Page 80]
+
+RFC 1521                          MIME                    September 1993
+
+
+   [RFC-822] Crocker, D., "Standard for the Format of ARPA Internet Text
+   Messages", STD 11, RFC 822, UDEL, August 1982.
+
+   [RFC-934] Rose, M., and E. Stefferud, "Proposed Standard for Message
+   Encapsulation", RFC 934, Delaware and NMA, January 1985.
+
+   [RFC-959] Postel, J. and J. Reynolds, "File Transfer Protocol",
+   STD 9, RFC 959, USC/Information Sciences Institute, October 1985.
+
+   [RFC-1049] Sirbu, M., "Content-Type Header Field for Internet
+   Messages", STD 11, RFC 1049, CMU, March 1988.
+
+   [RFC-1421] Linn, J., "Privacy Enhancement for Internet Electronic Mail:
+   Part I - Message Encryption and Authentication Procedures", RFC
+   1421, IAB IRTF PSRG, IETF PEM WG, February 1993.
+
+   [RFC-1154] Robinson, D. and R. Ullmann, "Encoding Header Field for
+   Internet Messages", RFC 1154, Prime Computer, Inc., April 1990.
+
+   [RFC-1341] Borenstein, N., and N.  Freed, "MIME (Multipurpose Internet
+   Mail Extensions): Mechanisms for Specifying and Describing the Format
+   of Internet Message Bodies", RFC 1341, Bellcore, Innosoft, June 1992.
+
+   [RFC-1342] Moore, K., "Representation of Non-Ascii Text in Internet
+   Message Headers", RFC 1342, University of Tennessee, June 1992.
+
+   [RFC-1343] Borenstein, N., "A User Agent Configuration Mechanism
+   for Multimedia Mail Format Information", RFC 1343, Bellcore, June
+   1992.
+
+   [RFC-1344] Borenstein, N., "Implications of MIME for Internet
+   Mail Gateways", RFC 1344, Bellcore, June 1992.
+
+   [RFC-1345] Simonsen, K., "Character Mnemonics & Character Sets",
+   RFC 1345, Rationel Almen Planlaegning, June 1992.
+
+   [RFC-1426] Klensin, J., (WG Chair), Freed, N., (Editor), Rose, M.,
+   Stefferud, E., and D. Crocker, "SMTP Service Extension for 8bit-MIME
+   transport", RFC 1426, United Nations Universit, Innosoft, Dover Beach
+   Consulting, Inc., Network Management Associates, Inc., The Branch
+   Office, February 1993.
+
+   [RFC-1522] Moore, K., "Representation of Non-Ascii Text in Internet
+   Message Headers" RFC 1522, University of Tennessee, September 1993.
+
+   [RFC-1340] Reynolds, J., and J. Postel, "Assigned Numbers", STD 2, RFC
+   1340, USC/Information Sciences Institute, July 1992.
+
+
+
+
+Borenstein & Freed                                             [Page 81]
+
\ No newline at end of file
diff -uNr gmime-1.90.0/rfc/rfc1847.txt gmime/rfc/rfc1847.txt
--- gmime-1.90.0/rfc/rfc1847.txt	Thu Jan  1 01:00:00 1970
+++ gmime/rfc/rfc1847.txt	Tue Dec  5 07:39:10 2000
@@ -0,0 +1,619 @@
+
+
+
+
+
+
+Network Working Group                                          J. Galvin
+Request For Comments: 1847                                     S. Murphy
+Category: Standards Track                    Trusted Information Systems
+                                                              S. Crocker
+                                                         CyberCash, Inc.
+                                                                N. Freed
+                                            Innosoft International, Inc.
+                                                            October 1995
+
+
+                     Security Multiparts for MIME:
+                Multipart/Signed and Multipart/Encrypted
+
+Status of this Memo
+
+   This document specifies an Internet standards track protocol for the
+   Internet community, and requests discussion and suggestions for
+   improvements.  Please refer to the current edition of the "Internet
+   Official Protocol Standards" (STD 1) for the standardization state
+   and status of this protocol.  Distribution of this memo is unlimited.
+
+Abstract
+
+   This document defines a framework within which security services may
+   be applied to MIME body parts.  MIME, an acronym for "Multipurpose
+   Internet Mail Extensions", defines the format of the contents of
+   Internet mail messages and provides for multi-part textual and non-
+   textual message bodies.  The new content types are subtypes of
+   multipart: signed and encrypted.  Each will contain two body parts:
+   one for the protected data and one for the control information
+   necessary to remove the protection.  The type and contents of the
+   control information body parts are determined by the value of the
+   protocol parameter of the enclosing multipart/signed or
+   multipart/encrypted content type, which is required to be present.
+
+Table of Contents
+
+   1.  Introduction ..............................................    2
+   2.  Definition of Security Subtypes of Multipart ..............    2
+   2.1   Definition of Multipart/Signed ..........................    3
+   2.2   Definition of Multipart/Encrypted .......................    6
+   3.  Definition of Control Information Content Types ...........    9
+   4.  Definition of Key Management Content Types ................    9
+   5.  Security Considerations ...................................   10
+   6.  Acknowledgements ..........................................   10
+   7.  References ................................................   10
+   8.  Authors' Addresses ........................................   11
+
+
+
+
+Galvin, et al               Standards Track                     [Page 1]
+
+RFC 1847                  Security Multiparts               October 1995
+
+
+1.  Introduction
+
+   An Internet electronic mail message consists of two parts: the
+   headers and the body.  The headers form a collection of field/value
+   pairs structured according to STD 11, RFC 822 [1], whilst the body,
+   if structured, is defined according to MIME [2].  The basic MIME
+   specification does not provide specific security protection.
+
+   This document defines a framework whereby security protection
+   provided by other protocols may be used with MIME in a complementary
+   fashion.  By itself, it does not specify security protection.  A MIME
+   agent must include support for both the framework defined here and a
+   mechanism to interact with a security protocol defined in a separate
+   document.  The resulting combined service provides security for
+   single-part and multi-part textual and non-textual messages.
+
+   The framework is provided by defining two new security subtypes of
+   the MIME multipart content type: signed and encrypted.  In each of
+   the security subtypes, there are exactly two related body parts: one
+   for the protected data and one for the control information.  The type
+   and contents of the control information body parts are determined by
+   the value of the protocol parameter of the enclosing multipart/signed
+   or multipart/encrypted content type, which is required to be present.
+   By registering new values for the required protocol parameter, the
+   framework is easily extended to accommodate a variety of protocols.
+
+   A MIME agent that includes support for this framework will be able to
+   recognize a security multipart body part and to identify its
+   protected data and control information body parts.  If the value of
+   the protocol parameter is unrecognized the MIME agent will not be
+   able to process the security multipart.  However, a MIME agent may
+   continue to process any other body parts that may be present.
+
+2.  Definition of Security Subtypes of Multipart
+
+   The multipart/signed content type specifies how to support
+   authentication and integrity services via digital signature.  The
+   control information is carried in the second of the two required body
+   parts.
+
+   The multipart/encrypted content type specifies how to support
+   confidentiality via encryption.  The control information is carried
+   in the first of the two required body parts.
+
+   A three-step process is described for the origination and reception
+   of the multipart/signed and multipart/encrypted contents.  The
+   details of the processing performed during each step is left to be
+   specified by the security protocol being used.
+
+
+
+Galvin, et al               Standards Track                     [Page 2]
+
+RFC 1847                  Security Multiparts               October 1995
+
+
+2.1.  Definition of Multipart/Signed
+
+   (1)  MIME type name: multipart
+
+   (2)  MIME subtype name: signed
+
+   (3)  Required parameters: boundary, protocol, and micalg
+
+   (4)  Optional parameters: none
+
+   (5)  Security considerations: Must be treated as opaque while in
+        transit
+
+   The multipart/signed content type contains exactly two body parts.
+   The first body part is the body part over which the digital signature
+   was created, including its MIME headers.  The second body part
+   contains the control information necessary to verify the digital
+   signature.  The first body part may contain any valid MIME content
+   type, labeled accordingly.  The second body part is labeled according
+   to the value of the protocol parameter.
+
+   The attribute token for the protocol parameter is "protocol", i.e.,
+
+    parameter := "protocol" "=" value
+
+   The value token is comprised of the type and sub-type tokens of the
+   Content-Type: header of the second body part, i.e.,
+
+    value := <"> type "/" subtype <">
+
+   where the type and subtype tokens are defined by the MIME [2]
+   specification.  The semantics of the protocol parameter are defined
+   according to its value.
+
+   The attribute token for the micalg parameter is "micalg", i.e.,
+
+    parameter := "micalg" "=" value
+
+   The Message Integrity Check (MIC) is the name given to the quantity
+   computed over the body part with a message digest or hash function,
+   in support of the digital signature service.  Valid value tokens are
+   defined by the specification for the value of the protocol parameter.
+   The value may be a comma (",") separated list of tokens, indicating
+   the use of multiple MIC algorithms.  As a result, the comma (",")
+   character is explicitly excluded from the list of characters that may
+   be included in a token used as a value of the micalg parameter.  If
+   multiple MIC algorithms are specified, the purpose and use of the
+   multiple algorithms is defined by the protocol.  If the MIC algorithm
+
+
+
+Galvin, et al               Standards Track                     [Page 3]
+
+RFC 1847                  Security Multiparts               October 1995
+
+
+   is also specified in the control information and the value there does
+   not agree with the value in this parameter, it must be treated as an
+   error.
+
+    NOTE: The presence of the micalg parameter on the
+    multipart/signed content type header is explicitly intended to
+    support one-pass processing.  MIME implementations may locate
+    the second body part by inputting the first body part and
+    computing the specified MIC values until the boundary
+    identifying the second body part is found.
+
+   The entire contents of the multipart/signed container must be treated
+   as opaque while it is in transit from an originator to a recipient.
+   Intermediate message transfer agents must not alter the content of a
+   multipart/signed in any way, including, but not limited to, changing
+   the content transfer encoding of the body part or any of its
+   encapsulated body parts.
+
+   The signature in a multipart/signed only applies to the material that
+   is actually within the multipart/signed object.  In particular, it
+   does not apply to any enclosing message material, nor does it apply
+   to entities that are referenced (e.g. via a MIME message/external-
+   body) by rather than included in the signed content.
+
+   When creating a multipart/signed body part, the following sequence of
+   steps describes the processing necessary.  It must be emphasized that
+   these steps are descriptive, not prescriptive, and in no way impose
+   restrictions or requirements on implementations of this
+   specification.
+
+   (1)  The content of the body part to be protected is prepared
+        according to a local convention.  The content is then
+        transformed into a MIME body part in canonical MIME format,
+        including an appropriate set of MIME headers.
+
+        In addition, if the multipart/signed object is EVER to be
+        transferred over the standard Internet SMTP infrastructure, the
+        resulting MIME body is constrained to 7 bits -- that is, the use
+        of material requiring either 8bit or binary
+        content-transfer-encoding is NOT allowed.  Such 8bit or binary
+        material MUST be encoded using either the quoted-printable or
+        base64 encodings.
+
+        This requirement exists because it is not generally possible,
+        given the current characteristics of Internet SMTP, for a
+        message originator to guarantee that a message will travel only
+        along paths capable of carrying 8bit or binary material.
+
+
+
+
+Galvin, et al               Standards Track                     [Page 4]
+
+RFC 1847                  Security Multiparts               October 1995
+
+
+        SMTP clients normally have the option of either converting the
+        message to eliminate the use of 8bit or binary encoding or
+        returning a nondelivery notification to the originator.
+        However, conversion is not viable in the case of signed objects
+        since conversion would necessarily invalidate the signature.
+        This leaves a nondelivery notification as the only available
+        option, which is not acceptable.
+
+   (2)  The body part (headers and content) to be digitally signed is
+        prepared for signature according to the value of the protocol
+        parameter.  The MIME headers of the signed body part are
+        included in the signature to protect the integrity of the MIME
+        labeling of the data that is signed.
+
+   (3)  The prepared body part is made available to the signature creation
+        process according to a local convention.  The signature creation
+        process must make available to a MIME implementation two data
+        streams: the control information necessary to verify the
+        signature, which the MIME implementation will place in the second
+        body part and label according to the value of the protocol
+        parameter, and the digitally signed body part, which the MIME
+        implementation will use as the first body part.
+
+   When receiving a multipart/signed body part, the following sequence
+   of steps describes the processing necessary to verify the signature
+   or signatures.  It must be emphasized that these steps are
+   descriptive, not prescriptive, and in no way impose restrictions or
+   requirements on implementations of this specification.
+
+   (1)  The first body part and the control information in the second body
+        part must be prepared for the signature verification process
+        according to the value of the protocol parameter.
+
+   (2)  The prepared body parts must be made available to the signature
+        verification process according to a local convention.  The
+        signature verification process must make available to the MIME
+        implementation the result of the signature verification and the
+        body part that was digitally signed.
+
+            NOTE: The result of the signature verification is likely to
+            include a testament of the success or failure of the
+            verification.  Also, in the usual case, the body part
+            returned after signature verification will be the same as
+            the body part that was received.  We do not insist that
+            this be the case to allow for protocols that may modify the
+            body part during the signature processing.
+
+
+
+
+
+Galvin, et al               Standards Track                     [Page 5]
+
+RFC 1847                  Security Multiparts               October 1995
+
+
+   (3)  The result of the signature verification process is made available
+        to the user and the MIME implementation continues processing with
+        the verified body part, i.e., the body part returned by the
+        signature verification process.
+
+   The following example is an illustration of a multipart/signed body
+   part.  It is necessarily incomplete since the control information is
+   defined by the security protocol, which must be specified in a
+   separate document.
+
+    Content-Type: multipart/signed; protocol="TYPE/STYPE";
+            micalg="MICALG"; boundary="Signed Boundary"
+
+    --Signed Boundary
+    Content-Type: text/plain; charset="us-ascii"
+
+    This is some text to be signed although it could be
+    any type of data, labeled accordingly, of course.
+
+    --Signed Boundary
+    Content-Type: TYPE/STYPE
+
+    CONTROL INFORMATION for protocol "TYPE/STYPE" would be here
+
+    --Signed Boundary--
+
+2.2.  Definition of Multipart/Encrypted
+
+   (1)  MIME type name: multipart
+
+   (2)  MIME subtype name: encrypted
+
+   (3)  Required parameters: boundary, protocol
+
+   (4)  Optional parameters: none
+
+   (5)  Security considerations: none
+
+   The multipart/encrypted content type contains exactly two body parts.
+   The first body part contains the control information necessary to
+   decrypt the data in the second body part and is labeled according to
+   the value of the protocol parameter.  The second body part contains
+   the data which was encrypted and is always labeled
+   application/octet-stream.
+
+   The attribute token for the protocol parameter is "protocol", i.e.,
+
+    parameter := "protocol" "=" value
+
+
+
+Galvin, et al               Standards Track                     [Page 6]
+
+RFC 1847                  Security Multiparts               October 1995
+
+
+   The value token is comprised of the type and sub-type tokens of the
+   Content-Type: header of the first body part, i.e.,
+
+    value := <"> type "/" subtype <">
+
+   where the type and subtype tokens are defined by the MIME [2]
+   specification.  The semantics of the protocol parameter are defined
+   according to its value.
+
+   When creating a multipart/encrypted body part, the following sequence
+   of steps describes the processing necessary.  It must be emphasized
+   that these steps are descriptive, not prescriptive, and in no way
+   impose restrictions or requirements on implementations of this
+   specification.
+
+   (1)  The contents of the body part to be protected is prepared according
+        to a local convention.  The contents are then transformed into a
+        MIME body part in canonical MIME format, including an appropriate
+        set of MIME headers.
+
+   (2)  The body part (headers and content) to be encrypted is prepared for
+        encryption according to the value of the protocol parameter.  The
+        MIME headers of the encrypted body part are included in the
+        encryption to protect from disclosure the MIME labeling of the
+        data that is encrypted.
+
+   (3)  The prepared body part is made available to the encryption process
+        according to a local convention.  The encryption process must make
+        available to a MIME implementation two data streams: the control
+        information necessary to decrypt the body part, which the MIME
+        implementation will place in the first body part and label
+        according to the value of the protocol parameter, and the
+        encrypted body part, which the MIME implementation will place in
+        the second body part and label application/octet-stream.  Thus,
+        when used in a multipart/encrypted, the application/octet-stream
+        data is comprised of a nested MIME body part.
+
+   When receiving a multipart/encrypted body part, the following
+   sequence of steps describes the processing necessary to decrypt the
+   enclosed data.  It must be emphasized that these steps are
+   descriptive, not prescriptive, and in no way impose restrictions or
+   requirements on implementations of this specification.
+
+   (1)  The second body part and the control information in the first body
+        part must be prepared for the decryption process according to the
+        value of the protocol parameter.
+
+
+
+
+
+Galvin, et al               Standards Track                     [Page 7]
+
+RFC 1847                  Security Multiparts               October 1995
+
+
+   (2)  The prepared body parts must be made available to the decryption
+        process according to a local convention.  The decryption process
+        must make available to the MIME implementation the result of the
+        decryption and the decrypted form of the encrypted body part.
+
+            NOTE: The result of the decryption process is likely to
+            include a testament of the success or failure of the
+            decryption.  Failure may be due to an inability to locate
+            the proper decryption key or the proper recipient field,
+            etc.  Implementors should note that the data, if any, of a
+            failed decryption process is pretty much guaranteed to be
+            garbage.
+
+   (3)  The result of the decryption process is made available to the user
+        and the MIME implementation continues processing with the decrypted
+        body part, i.e., the body part returned by the decryption process.
+
+            NOTE: A MIME implementation will not be able to display the
+            received form of the second body part because the
+            application of encryption will transform the body part.
+            This transformation will not be described in the MIME
+            headers (Content-Type: and Content-Transfer-Encoding:) but,
+            rather, will be described in the content of the first body
+            part.  Therefore, an implementation should wait until the
+            encryption has been removed before attempting to display
+            the content.
+
+   The following example is an illustration of a multipart/encrypted
+   body part.  It is necessarily incomplete since the control
+   information is defined by the security protocol, which must be
+   specified in a separate document.
+
+    Content-Type: multipart/encrypted; protocol="TYPE/STYPE";
+            boundary="Encrypted Boundary"
+
+    --Encrypted Boundary
+    Content-Type: TYPE/STYPE
+
+    CONTROL INFORMATION for protocol "TYPE/STYPE" would be here
+
+    --Encrypted Boundary
+    Content-Type: application/octet-stream
+
+        Content-Type: text/plain; charset="us-ascii"
+
+
+
+
+
+
+
+Galvin, et al               Standards Track                     [Page 8]
+
+RFC 1847                  Security Multiparts               October 1995
+
+
+        All of this indented text, including the indented headers,
+        would be unreadable since it would have been encrypted by
+        the protocol "TYPE/STYPE".  Also, this encrypted data could
+        be any type of data, labeled accordingly, of course.
+
+    --Encrypted Boundary--
+
+3.  Definition of Control Information Content Types
+
+   This document defines a framework within which security services may
+   be applied to MIME body parts.  A minimal MIME implementation will be
+   able to recognize multipart/signed and multipart/encrypted body parts
+   and be able to identify the protected data and control information
+   body parts within them.
+
+   Complete support for security services requires the MIME agent to
+   recognize the value of the protocol parameter and to continue
+   processing based on its value.  The value of the protocol parameter
+   is the same value used to label the content type of the control
+   information.
+
+   The value of the protocol parameter and the resulting processing
+   required must be specified in the document defining the security
+   protocol used.  That document must also precisely specify the
+   contents of the control information body part.
+
+4.  Definition of Key Management Content Types
+
+   This specification recognizes that the complete specification of a
+   MIME-based security protocol must include a mechanism for
+   distributing the cryptographic material used in support of the
+   security services.  For example, a digital signature service
+   implemented with asymmetric cryptography requires that a signer's
+   public key be available to the signee.
+
+   One possible mechanism for distributing cryptographic material is to
+   define two additional body parts: one for the purpose of requesting
+   cryptographic information and one for the purpose of returning the
+   cryptographic information requested.  The specification of a security
+   protocol may include a definition of two such body parts or it may
+   specify an alternate mechanism for the distribution of cryptographic
+   material.
+
+
+
+
+
+
+
+
+
+Galvin, et al               Standards Track                     [Page 9]
+
+RFC 1847                  Security Multiparts               October 1995
+
+
+5.  Security Considerations
+
+   This specification describes an enhancement to MIME to support signed
+   and encrypted body parts.  In that context this entire document is
+   about security.
+
+6.  Acknowledgements
+
+   David H. Crocker suggested the use of a multipart structure for the
+   MIME and PEM interaction.
+
+7.  References
+
+   [1] Crocker, D., "Standard for the Format of ARPA Internet Text
+       Messages", STD 11, RFC 822, University of Delaware, August 1982.
+
+   [2] Borenstein, N., and N. Freed, "MIME (Multipurpose Internet Mail
+       Extension) Part One: Mechanisms for Specifying and Describing the
+       Format of Internet Message Bodies", RFC 1521, Bellcore and
+       Innosoft, September 1993.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Galvin, et al               Standards Track                    [Page 10]
+
+RFC 1847                  Security Multiparts               October 1995
+
+
+8.  Authors' Addresses
+
+   Jim Galvin
+   Trusted Information Systems
+   3060 Washington Road
+   Glenwood, MD  21738
+
+   Phone: +1 301 854 6889
+   Fax: +1 301 854 5363
+   EMail:  galvin@tis.com
+
+
+   Sandy Murphy
+   Trusted Information Systems
+   3060 Washington Road
+   Glenwood, MD  21738
+
+   Phone: +1 301 854 6889
+   Fax: +1 301 854 5363
+   EMail:  sandy@tis.com
+
+
+   Steve Crocker
+   CyberCash, Inc.
+   2086 Hunters Crest Way
+   Vienna, VA 22181
+
+   Phone::    +1 703 620 1222
+   Fax:    +1 703 391 2651
+   EMail:  crocker@cybercash.com
+
+
+   Ned Freed
+   Innosoft International, Inc.
+   1050 East Garvey Avenue South
+   West Covina, CA 91790
+
+   Phone: +1 818 919 3600
+   Fax: +1 818 919 3614
+   EMail:  ned@innosoft.com
+
+
+
+
+
+
+
+
+
+
+
+Galvin, et al               Standards Track                    [Page 11]
+
diff -uNr gmime-1.90.0/rfc/rfc1864.txt gmime/rfc/rfc1864.txt
--- gmime-1.90.0/rfc/rfc1864.txt	Thu Jan  1 01:00:00 1970
+++ gmime/rfc/rfc1864.txt	Sun Jan  7 09:35:50 2001
@@ -0,0 +1,227 @@
+
+
+
+
+
+
+Network Working Group                                           J. Myers
+Request For Comments: 1864                               Carnegie Mellon
+Obsoletes: 1544                                                  M. Rose
+                                            Dover Beach Consulting, Inc.
+                                                            October 1995
+
+
+                      The Content-MD5 Header Field
+
+Status of this Memo
+
+   This document specifies an Internet standards track protocol for the
+   Internet community, and requests discussion and suggestions for
+   improvements.  Please refer to the current edition of the "Internet
+   Official Protocol Standards" (STD 1) for the standardization state
+   and status of this protocol.  Distribution of this memo is unlimited.
+
+Abstract
+
+   This memo specifies an optional header field, Content-MD5, for use
+   with MIME-conformant messages.
+
+Table of Contents
+
+   1. Introduction ..............................................    1
+   2. Generation of the Content-MD5 Field .......................    2
+   3. Processing the Content-MD5 field ..........................    3
+   4. Security Considerations ...................................    3
+   5. Acknowledgements ..........................................    3
+   6. References ................................................    3
+   7. Authors' Addresses ........................................    4
+
+1. Introduction
+
+   Despite all of the mechanisms provided by MIME [1] which attempt to
+   protect data from being damaged in the course of email transport, it
+   is still desirable to have a mechanism for verifying that the data,
+   once decoded, are intact.  For this reason, this memo defines the use
+   of an optional header field, Content-MD5, which may be used as a
+   message integrity check (MIC), to verify that the decoded data are
+   the same data that were initially sent.  The Content-MD5 header may
+   also be placed in the encapsulated headers of an object of type
+   message/external-body, to be used to verify that the retreived and
+   decoded data are the same data that were initially referenced.
+
+   MD5 is an algorithm for computing a 128 bit "digest" of arbitrary-
+   length data, with a high degree of confidence that any alterations in
+   the data will be reflected in alterations in the digest.  The MD5
+
+
+
+Myers & Rose                Standards Track                     [Page 1]
+
+RFC 1864                Content-MD5 Header Field            October 1995
+
+
+   algorithm itself is defined in [2]. This memo specifies how the
+   algorithm may be used as an integrity check for MIME mail.
+
+2. Generation of the Content-MD5 Field
+
+   The Content-MD5 field is generated by only an originating user agent.
+   Message relays and gateways are expressly forbidden from generating a
+   Content-MD5 field.
+
+   Use of the Content-MD5 field is completely optional, but its use is
+   recommended whenever data integrity is desired, but Privacy-Enhanced
+   Mail services [3] are not available.  (Consult Section 4 for further
+   details.) The Content-MD5 field may only be added to MIME entities of
+   a `leaf' nature, i.e., the Content-MD5 field may be used with any
+   content type other than multipart or message/rfc822.
+
+   To generate the value of the Content-MD5 field, the MD5 algorithm is
+   computed on the canonical form of the MIME entity's object.  In
+   particular, this means that the sender applies the MD5 algorithm on
+   the data immediately after conversion to canonical form, before
+   applying any content-transfer-encoding, and that the receiver also
+   applies the MD5 algorithm on the canonical form, after undoing any
+   content-transfer-encoding.  For textual data, this means the MD5
+   algorithm must be computed on data in which the canonical form for
+   newlines applies, that is, in which each newline is represented by a
+   CR-LF pair.  The canonical encoding model of MIME is described in
+   Appendix G of [1].
+
+   The output of the MD5 algorithm is a 128 bit digest.  When viewed in
+   network byte order (big-endian order), this yields a sequence of 16
+   octets of binary data.  These 16 octets are then encoded according to
+   the base64 algorithm in order to obtain the value that is placed in
+   the Content-MD5 field.  Thus, if the application of the MD5 algorithm
+   over the raw data of a MIME entity results in a digest having the
+   (unlikely) value of "Check Integrity!", then that MIME entity's
+   header could contain the field
+
+        Content-MD5:  Q2hlY2sgSW50ZWdyaXR5IQ==
+
+   Finally, as discussed in Appendix B of [1], textual data is regularly
+   altered in the normal delivery of mail.  Because the addition or
+   deletion of trailing white space will result in a different digest,
+   either the quoted-printable or base64 algorithm should be employed as
+   a content-transfer-encoding when the Content-MD5 field is used.
+
+
+
+
+
+
+
+Myers & Rose                Standards Track                     [Page 2]
+
+RFC 1864                Content-MD5 Header Field            October 1995
+
+
+3. Processing the Content-MD5 field
+
+   If the Content-MD5 field is present, a recipient user agent may
+   choose to use it to verify that the contents of a MIME entity have
+   not been modified during transport.  Message relays and gateways are
+   expressly forbidden to alter their processing based on the presence
+   of the Content-MD5 field.  However, a message gateway is allowed to
+   remove the Content-MD5 field if the corresponding MIME entity is
+   translated into a different content-type.
+
+4. Security Considerations
+
+   This document specifies a data integrity service that protects data
+   from accidental modification while in transit from the sender to the
+   recipient.  A secure data integrity service, such as that provided by
+   Privacy Enhanced Mail [3], is conjectured to protect data from all
+   modifications.
+
+5. Acknowledgements
+
+   This memo is based almost entirely on text originally written by
+   Nathaniel Borenstein of Bellcore.  In addition, several improvements
+   were suggested by Keith Moore of the University of Tennessee,
+   Knoxville.
+
+6. References
+
+   [1] Borenstein, N., and N. Freed, "MIME (Multipurpose Internet Mail
+       Extensions) Part One: Mechanisms for Specifying and Describing
+       the Format of Internet Message Bodies", RFC 1521, Bellcore,
+       Innosoft, September 1993.
+
+   [2] Rivest, R., "The MD5 Message-Digest Algorithm", RFC 1321, MIT
+       Laboratory for Computer Science and RSA Data Security, Inc.,
+       April 1992.
+
+   [3] Linn, J., "Privacy Enhancement for Internet Electronic Mail, Part
+       I: Message Encryption and Authentication Procedures", RFC 1421,
+       IAB IRTF PSRG, IETF PEM WG, February 1993.
+
+
+
+
+
+
+
+
+
+
+
+
+Myers & Rose                Standards Track                     [Page 3]
+
+RFC 1864                Content-MD5 Header Field            October 1995
+
+
+7. Authors' Addresses
+
+   John G. Myers
+   Carnegie Mellon University
+
+   EMail: jgm+@cmu.edu
+
+
+   Marshall T. Rose
+   Dover Beach Consulting, Inc.
+
+   EMail: mrose@dbc.mtview.ca.us
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Myers & Rose                Standards Track                     [Page 4]
+
diff -uNr gmime-1.90.0/rfc/rfc1872.txt gmime/rfc/rfc1872.txt
--- gmime-1.90.0/rfc/rfc1872.txt	Thu Jan  1 01:00:00 1970
+++ gmime/rfc/rfc1872.txt	Tue Dec  5 07:39:10 2000
@@ -0,0 +1,451 @@
+
+
+
+
+
+
+Network Working Group                                        E. Levinson
+Request for Comments: 1872            Accurate Information Systems, Inc.
+Category: Experimental                                     December 1995
+
+
+                The MIME Multipart/Related Content-type
+
+Status of this Memo
+
+   This memo defines an Experimental Protocol for the Internet
+   community.  This memo does not specify an Internet standard of any
+   kind.  Discussion and suggestions for improvement are requested.
+   Distribution of this memo is unlimited.
+
+Abstract
+
+   The Multipart/Related content-type provides a common mechanism for
+   representing objects that are aggregates of related MIME body parts.
+   This document defines the Multipart/Related content-type and provides
+   examples of its use.
+
+1.  Introduction
+
+   Several applications of MIME, including MIME-PEM, and MIME-Macintosh
+   and other proposals, require multiple body parts that make sense only
+   in the aggregate.  The present approach to these compound objects has
+   been to define specific multipart subtypes for each new object.  In
+   keeping with the MIME philosophy of having one mechanism to achieve
+   the same goal for different purposes, this document describes a
+   single mechanism for such aggregate or compound objects.
+
+   The Multipart/Related content-type addresses the MIME representation
+   of compound objects.  The object is categorized by a "type"
+   parameter.  Additional parameters are provided to indicate a specific
+   starting body part or root and auxiliary information which may be
+   required when unpacking or processing the object.
+
+   Responsibility for the display or processing of a Multipart/Related's
+   constituent entities rests with the application that handles the
+   compound object.
+
+
+
+
+
+
+
+
+
+
+
+Levinson                      Experimental                      [Page 1]
+
+RFC 1872                   Multipart/Related               December 1995
+
+
+2.  Multipart/Related Registration Information
+
+   The following form is copied from RFC 1590, Appendix A.
+
+   To:  IANA@isi.edu
+   Subject:  Registration of new Media Type content-type/subtype
+
+   Media Type name:           Multipart
+
+   Media subtype name:        Related
+
+   Required parameters:       Type, a media type/subtype.
+
+   Optional parameters:       Start, a content-id.
+                              Start-info, a string or content-id list.
+
+   Encoding considerations:   Multipart content-types cannot have
+                              encodings.
+
+   Security considerations:   Depends solely on the referenced type.
+
+   Published specification:   This document.
+
+   Person & email address to contact for further information:
+                              Edward Levinson
+                              Accurate Information Systems, Inc.
+                              2 Industrial Way
+                              Eatontown, NJ 07724
+                              +1 908 389 5550
+                              +1 908 389 5556 (fax)
+                              ELevinson@Accurate.com
+
+3.  Intended usage
+
+   The Multipart/Related media type is intended for compound objects
+   consisting of several inter-related body parts.  For a
+   Multipart/Related object, proper display cannot be achieved by
+   individually displaying the constituent body parts.  The content-type
+   of the Multipart/Related object is specified by the type parameter.
+   The "start" parameter, if given, points, via a content-ID, to the
+   body part that contains the object root.  The default root is the
+   first body part within the Multipart/Related body.
+
+   The relationships among the body parts of a compound object
+   distinguishes it from other object types.  These relationships are
+   often represented by links internal to the object's components that
+   reference the other components.  Within a single operating
+   environment the links are often file names, such links may be
+
+
+
+Levinson                      Experimental                      [Page 2]
+
+RFC 1872                   Multipart/Related               December 1995
+
+
+   represented within a MIME message using content-IDs or the value of
+   some other "Content-" header.
+
+3.1.  The Type Parameter
+
+   The type parameter must be specified and its value is the MIME media
+   type of the root body part.  It permits a MIME user agent to
+   determine the content-type without reference to the enclosed body
+   part.  If the value of the type parameter and the root body part's
+   content-type differ then the User Agent's behavior is undefined.
+
+   Note: Constraining the "type" parameter's value to an existing media
+   type allows the appropriate processing to be identified without
+   creating yet another hierarchy of registered types.  A possible
+   default action would have the MIME mail User Agent (MUA) to display
+   the "start" entity alone when it could process the media type as a
+   basic type but not as Multipart/Related.
+
+3.2.  The Start Parameter
+
+   The start parameter, if given, is the content-ID of the compound
+   object's root.  If not present the root is the first body part in the
+   Multipart/Related entity.  The root is the element the application
+   processes first.
+
+   In the case of a Multipart/Alternative body part containing several
+   entities with identical content-IDs the start entity should be
+   selected using the Multipart/Alternative rules.
+
+   Note: The "start" parameter allows for types in which the root
+   element gets generated by the sending application, perhaps on the
+   fly.  Such an application can create the "start" content-id when
+   processing begins and then insert the body part when it is complete.
+
+3.3.  The Start-Info Parameter
+
+   Additional information can be provided to an application by the
+   start-info parameter.  It contains either a string or points, via a
+   content-ID, to another MIME entity in the message.  A typical use
+   might be to provide additional command line parameters or a MIME
+   entity giving auxiliary information for processing the compound
+   object.
+
+   Applications that use Multipart/Related must specify the
+   interpretation of start-info.  User Agents shall provide the
+   parameter's value to the processing application.  Processes can
+   distinguish a start-info reference from a token or quoted-string by
+   examining the first non-white-space character, "<" indicates a
+
+
+
+Levinson                      Experimental                      [Page 3]
+
+RFC 1872                   Multipart/Related               December 1995
+
+
+   content-id reference.
+
+3.4.  Syntax
+
+     related-param    := [ ";" "start" "=" cid ]
+                         [ ";" "start-info"  "="
+                           ( cid-list / value ) ]
+                         [ ";" "type"  "=" type "/" subtype ]
+                         ; order independent
+
+     cid-list        := cid cid-list
+
+     cid             := msg-id     ; c.f. [822]
+
+     value           := token / quoted-string    ; c.f. [MIME]
+                             ; value cannot begin with "<"
+
+   Note that the parameter values will usually require quoting.  Msg-id
+   contains the special characters "<", ">", "@", and perhaps other
+   special characters.  If msg-id contains quoted-strings, those quote
+   marks must be escaped.  Similarly, the type parameter contains the
+   special character "/".
+
+4.  Examples
+
+4.1 Application/X-FixedRecord
+
+   The X-FixedRecord content-type consists of one or more octet- streams
+   and a list of the lengths of each record.  The root, which lists the
+   record lengths of each record within the streams.  The record length
+   list, type Application/X-FixedRecord, consists of a set of INTEGERs
+   in ASCII format, one per line.  Each INTEGER gives the number of
+   octets from the octet-stream body part that constitute the next
+   "record".
+
+   The example below, uses a single data block which the sender
+   processes on the fly to generate the record length list.
+   Consequently the list appears after the data.
+
+     Content-Type: Multipart/Related; boundary=example-1
+             start="<950120.aaCC@XIson.com>";
+             type="Application/X-FixedRecord"
+             start-info="-o ps"
+
+     --example-1
+     Content-Type: Application/octet-stream
+     Content-Description: The fixed length records
+     Content-Transfer-Encoding: base64
+
+
+
+Levinson                      Experimental                      [Page 4]
+
+RFC 1872                   Multipart/Related               December 1995
+
+
+     Content-ID: <950120.aaCB@XIson.com>
+
+     T2xkIE1hY0RvbmFsZCBoYWQgYSBmYXJtCkUgSS
+     BFIEkgTwpBbmQgb24gaGlzIGZhcm0gaGUgaGFk
+     IHNvbWUgZHVja3MKRSBJIEUgSSBPCldpdGggYS
+     BxdWFjayBxdWFjayBoZXJlLAphIHF1YWNrIHF1
+     YWNrIHRoZXJlLApldmVyeSB3aGVyZSBhIHF1YW
+     NrIHF1YWNrCkUgSSBFIEkgTwo=
+     --example-1
+     Content-Type: Application/X-FixedRecord
+     Content-ID: <950120.aaCC@XIson.com>
+
+     25
+     10
+     34
+     10
+     25
+     21
+     26
+     10
+     --example-1--
+
+4.2 Text/X-Okie
+
+The Text/X-Okie is an invented markup language, similar to
+HTML, that permits the inclusion of images with text.  A
+feature of this example is the inclusion of two additional
+body parts, both picture. They are referred to internally by
+the encapsulated document via each picture's body part
+content-ID.  Usage of "cid:", as in this example, may be
+useful for a variety of compound objects.  It is not, however,
+a part of the Multipart/Related specification.
+
+     Content-Type: Multipart/Related; boundary=example-2;
+             start="<950118.AEBH@XIson.com>"
+             type="Text/x-Okie"
+
+     --example-2
+     Content-Type: Text/x-Okie; charset=iso-8859-1;
+             declaration="<950118.AEB0@XIson.com>"
+     Content-ID: <950118.AEBH@XIson.com>
+     Content-Description: Document
+
+     {doc}
+     This picture was taken by an automatic camera mounted ...
+     {image file=cid:950118.AECB@XIson.com}
+     {para}
+     Now this is an enlargement of the area ...
+
+
+
+Levinson                      Experimental                      [Page 5]
+
+RFC 1872                   Multipart/Related               December 1995
+
+
+     {image file=cid:950118.AFDH@XIson.com}
+     {/doc}
+     --example-2
+     Content-Type: image/jpeg
+     Content-ID: <950118.AFDH@XIson.com>
+     Content-Transfer-Encoding: BASE64
+     Content-Description: Picture A
+
+     [encoded jpeg image]
+     --example-2
+     Content-Type: image/jpeg
+     Content-ID: <950118.AECB@XIson.com>
+     Content-Transfer-Encoding: BASE64
+     Content-Description: Picture B
+
+     [encoded jpeg image]
+     --example-1--
+
+5.  User Agent Requirements
+
+   User agents that do not recognize Multipart/Related shall, in
+   accordance with [MIME], treat the entire entity as Multipart/Mixed.
+   MIME User Agents that recognize Multipart/Related entities but are
+   unable to process the given type shall either suppress the entire
+   Multipart/Related body part or process the root alone.  In either
+   case the user should be notified of the MUA's action.
+
+   Handling Multipart/Related differs from other media types in that
+   processing cannot be reduced to handling the individual entities.
+   Existing media types are handled by MIME-capable MUAs handle in a
+   straightforward manner.  For basic media types (e.g., text, image,
+   etc.) the body of the entity can be directly passed to a display
+   process.  Composite media types can be reduced to handing one or more
+   discrete types.
+
+   Multipart/Related provides an irreducible composite media type.
+
+   The following sections discuss what information the processing
+   application requires.
+
+   It is possible that an application specific "receiving agent" will
+   manipulate the entities, after initial processing by the MIME User
+   Agent, prior to invoking actual application process.  From the
+   viewpoint of the MUA, the receiving agent is the application.  Okie,
+   above, demonstrates this; it may need a receiving agent to parse the
+   document and substitute local file names for the originator's file
+   names.  Other applications may just require a table showing the
+   correspondence between the local file names and the originator's.
+
+
+
+Levinson                      Experimental                      [Page 6]
+
+RFC 1872                   Multipart/Related               December 1995
+
+
+   The receiving agent takes responsibility any for such processing.
+
+5.1 Data Requirements
+
+   MIME-capable MUAs are required to provide the application:
+
+   (a)  the bodies of the MIME entities and the entity Content-*
+        headers,
+
+   (b)  the parameters of the Multipart/Related Content-type
+        header, and
+
+   (c)  the correspondence between each body's local file name,
+        that body's header data, and, if present, the body part's
+        content-ID.
+
+5.2 Storing Multipart/Related Entities
+
+   The Multipart/Related media type will be used for objects that have
+   internal linkages between the body parts.  When the objects are
+   stored the linkages may require processing by the application or its
+   receiving agent.
+
+5.3 Recursion
+
+   MIME is a recursive structure.  Hence one must expect a
+   Multipart/Related entity to contain other Multipart/Related entities.
+   When a Multipart/Related entity is being processed for display or
+   storage, any enclosed Multipart/Related entities shall be processed
+   as though they were being stored.  It shall be the responsibility of
+   the application handling the outermost Multipart/Related to insure
+   the appropriate processing of embedded Multipart/Related entities.
+
+5.5 Configuration Considerations
+
+   It is suggested that MUAs that use configuration mechanisms, see
+   [CFG] for an example, refer to Multipart/Related as
+   Multipart/Related/<type>, were <type> is the value of the "type"
+   parameter.
+
+6.  Security Considerations
+
+   Security considerations relevant to Multipart/Related are identical
+   to those of the underlying content-type.
+
+
+
+
+
+
+
+Levinson                      Experimental                      [Page 7]
+
+RFC 1872                   Multipart/Related               December 1995
+
+
+7.  Acknowledgments
+
+   This proposal is the result of conversations the author has had with
+   many people.  In particular, similar work was described by Harald A.
+   Alvestrand (early drafts of Multipart/Related), Dave Crocker
+   (Multipart/Families), and Keith Moore (Multipart/References). In
+   addition, James Clark, Charles Goldfarb, Gary Houston, Ned Freed, Ray
+   Moody, and Don Stinchfield, provided both encouragement and
+   invaluable help.  The author, however, take full responsibility for
+   all errors contained in this document.
+
+8.  References
+
+   [822]       Crocker, D., "Standard for the Format of ARPA
+               Internet Text Messages", STD 11, RFC 822, UDEL,
+               August 1982.
+
+   [CFG]       Borenstein, N., "A User Agent Configuration
+               Mechanism For Multimedia Mail Format Information",
+               RFC 1524, Bellcore, September 1993.
+
+   [MIME]      Borenstein, N. and and N. Freed, "MIME (Multipurpose
+               Internet Mail Extensions) Part One: Mechanisms for
+               Specifying and Describing the Format of Internet Message
+               Bodies", RFC 1521, Bellcore, Innosoft, September 1993.
+
+9.  Author's Address
+
+   Edward Levinson
+   Accurate Information Systems, Inc.
+   2 Industrial Way
+   Eatontown, NJ  07724-2265
+   USA
+
+   Phone: +1 908 389 5550
+   EMail: ELevinson@Accurate.com
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Levinson                      Experimental                      [Page 8]
+
diff -uNr gmime-1.90.0/rfc/rfc1927.txt gmime/rfc/rfc1927.txt
--- gmime-1.90.0/rfc/rfc1927.txt	Thu Jan  1 01:00:00 1970
+++ gmime/rfc/rfc1927.txt	Tue Dec  5 07:39:10 2000
@@ -0,0 +1,171 @@
+
+
+
+
+
+
+Network Working Group                                          C. Rogers
+Request for Comments: 1927                                           ISI
+Category: Informational                                     1 April 1996
+
+
+       Suggested Additional MIME Types for Associating Documents
+
+Status of this Memo
+
+   This memo provides information for the Internet community.  This memo
+   does not specify an Internet standard of any kind.  Distribution of
+   this memo is unlimited.
+
+1)      New MIME Types: Staple and "Paper" Clip
+
+        1) indicates the degree of binding of multipart documents:
+           stapled documents should stay together on the desktop,
+           while paper clipped ones should be easily spreadable
+
+        2) big paper clips vs small ones; heirarchical assembly
+
+        3) big vs small for large documents vs. small ones?
+
+        4) warning!  the presence of electronic staples or paper clips
+           may break some programs, particularly those designed to do
+           high-speed copying!
+
+2)      patents on the electronic staple and paper clip
+
+        1) use First Virtual to record a charge each time new staples
+           or paper clips are made.
+
+        2) to reduce transmission charges, electronic staples should be
+           bought in boxes of 5000.  Reference: Apple's "bento"
+           technology?
+
+        3) electonic staples should have a standard "size and shape"
+           so a supply of staples could be used be used by several
+           programs.
+
+3)      recycling electronic staples and paper clips
+
+        1) to assure proper accounting, and to detect patent violations
+           (people making their own electronic staples), it may be
+           necessary to attach a certificate to each staple or paper
+           clip.
+
+
+
+
+
+Rogers                       Informational                      [Page 1]
+
+RFC 1927           MIME Types: Associating Documents        1 April 1996
+
+
+        2) When a file or folder is deleted, a "recycler" program could
+           look inside for staples or paper clips that could be reused
+           or recycled.
+
+                1) staples could be reycled for a small credit
+
+                2) paper clips could be reused.
+
+4)      custom-look electronic staples and paper clips
+
+        1) when stabled or clipped documents are displayed on the
+           desktop, there should be some icon or visual indicator to
+           show the presence of the (possibly removable) staple
+           or paper clip
+
+        2) "color=" and "shape=" attributes in the MIME line should
+           allow senders to customize the appearance of individual
+           staples or paper clips.
+
+                1) this could have some significance for office filing
+                   systems, for instance: a silver paper clip could
+                   trigger one workflow component, while
+                   a gold paper clip could trigger another.
+
+        3) "src=" would allow the specification of a URL of the image to
+           be shown, for even greater control of appearance.
+
+        4) it should be possible to specify 3D modelling of your custom
+           paper clip, for electronic desktops being viewed through
+           virtual reality headsets
+
+5)      electronic paper clip sculpture
+
+        1) instead of discarding or reusing paper clips, it should be
+           possible to "bend" them and display the resulting sculpture
+           on the desktop
+
+                1) a morphing interface would be suitable
+
+        2) linked chains of paper clips
+
+        3) each paper clip should keep track of how many times it has
+           been  bent.  Above a certain limit, the clip should fail.
+
+
+
+
+
+
+
+
+Rogers                       Informational                      [Page 2]
+
+RFC 1927           MIME Types: Associating Documents        1 April 1996
+
+
+6)      electronic paper clips as page flags
+
+        1) in addition to using electronic paper clips to group related
+           documents, it should be possible to attach an electronic
+           paper clip to a single page of a multipage document or
+           collection of documents.  This highlights or draws
+           attention to the page.
+
+        2) it should be possible to include positioning information
+           with the electronic paper clip, to mark specific paragraphs
+           or sentences
+
+        3) combinations of color, shape, size, position, orientation,
+           etc. could have special meaning
+
+7)      additional safety hazards of electronic paper clips
+
+        1) they should not be used on data flines which might end up in
+           the hands of very small children
+
+                1) thus, one should consider keeping them in a locked
+                   drawer of the electonic desk on home PCs
+
+        2) they should not be attached to documents on floppy disks, as
+           they may erase portions of the floppy
+
+Security Considerations
+
+   Security issues are not discussed in this memo.
+
+Author's Address
+
+   Craig Milo Rogers
+   USC/Information Sciences Institute
+   4676 Admiralty Way
+   Marina del Rey, CA 90292
+
+   Phone: 310-822-1511
+   EMail: rogers@isi.edu
+
+
+
+
+
+
+
+
+
+
+
+
+Rogers                       Informational                      [Page 3]
+
diff -uNr gmime-1.90.0/rfc/rfc2015.txt gmime/rfc/rfc2015.txt
--- gmime-1.90.0/rfc/rfc2015.txt	Thu Jan  1 01:00:00 1970
+++ gmime/rfc/rfc2015.txt	Tue Dec  5 07:39:10 2000
@@ -0,0 +1,451 @@
+
+
+
+
+
+
+Network Working Group                                          M. Elkins
+Request for Comments: 2015                     The Aerospace Corporation
+Category: Standards Track                                   October 1996
+
+
+              MIME Security with Pretty Good Privacy (PGP)
+
+Status of this Memo
+
+   This document specifies an Internet standards track protocol for the
+   Internet community, and requests discussion and suggestions for
+   improvements.  Please refer to the current edition of the "Internet
+   Official Protocol Standards" (STD 1) for the standardization state
+   and status of this protocol.  Distribution of this memo is unlimited.
+
+Abstract
+
+   This document describes how Pretty Good Privacy (PGP) can be used to
+   provide privacy and authentication using the Multipurpose Internet
+   Mail Extensions (MIME) security content types described in RFC1847.
+
+1.  Introduction
+
+   Previous work on integrating PGP with MIME (including the since
+   withdrawn application/pgp content type) has suffered from a number of
+   problems, the most significant of which is the inability to recover
+   signed message bodies without parsing data structures specific to
+   PGP.  This work makes use of the elegant solution proposed in
+   RFC1847, which defines security multipart formats for MIME. The
+   security multiparts clearly separate the signed message body from the
+   signature, and have a number of other desirable properties. This
+   document is styled after RFC 1848, which defines MIME Object Security
+   Services (MOSS) for providing security and authentication.
+
+   This document defines three new content types for implementing
+   security and privacy with PGP: application/pgp-encrypted,
+   application/pgp-signature and application/pgp-keys.
+
+1.1  Compliance
+
+   In order for an implementation to be compliant with this
+   specification, is it absolutely necessary for it to obey all items
+   labeled as MUST or REQUIRED.
+
+
+
+
+
+
+
+
+Elkins                      Standards Track                     [Page 1]
+
+RFC 2015                 MIME Security with PGP             October 1996
+
+
+2.  PGP data formats
+
+   PGP can generate either ASCII armor (described in [3]) or 8-bit
+   binary output when encrypting data, generating a digital signature,
+   or extracting public key data.  The ASCII armor output is the
+   REQUIRED method for data transfer.  This allows those users who do
+   not have the means to interpret the formats described in this
+   document to be able extract and use the PGP information in the
+   message.
+
+   When the amount of data to be transmitted requires that it be sent in
+   many parts, the MIME message/partial mechanism should be used rather
+   than the multipart ASCII armor PGP format.
+
+3.  Content-Transfer-Encoding restrictions
+
+   Multipart/signed and multipart/encrypted are to be treated by agents
+   as opaque, meaning that the data is not to be altered in any way [1].
+   However, many existing mail gateways will detect if the next hop does
+   not support MIME or 8-bit data and perform conversion to either
+   Quoted-Printable or Base64.  This presents serious problems for
+   multipart/signed, in particular, where the signature is invalidated
+   when such an operation occurs.  For this reason all data signed
+   according to this protocol MUST be constrained to 7 bits (8- bit data
+   should be encoded using either Quoted-Printable or Base64).  Note
+   that this also includes the case where a signed object is also
+   encrypted (see section 6).  This restriction will increase the
+   likelihood that the signature will be valid upon receipt.
+
+   Data that is ONLY to be encrypted is allowed to contain 8-bit
+   characters and therefore need not be converted to a 7-bit format.
+
+     Implementor's note: It cannot be stressed enough that applications
+     using this standard should follow MIME's suggestion that you "be
+     conservative in what you generate, and liberal in what you accept."
+     In this particular case it means it would be wise for an
+     implementation to accept messages with any content-transfer-
+     encoding, but restrict generation to the 7-bit format required by
+     this memo.  This will allow future compatibility in the event the
+     Internet SMTP framework becomes 8-bit friendly.
+
+4.  PGP encrypted data
+
+   Before encryption with PGP, the data should be written in MIME
+   canonical format (body and headers).
+
+   PGP encrypted data is denoted by the "multipart/encrypted" content
+   type, described in [1], and MUST have a "protocol" parameter value of
+
+
+
+Elkins                      Standards Track                     [Page 2]
+
+RFC 2015                 MIME Security with PGP             October 1996
+
+
+   "application/pgp-encrypted".  Note that the value of the parameter
+   MUST be enclosed in quotes.
+
+   The multipart/encrypted MUST consist of exactly two parts.  The first
+   MIME body part must have a content type of "application/pgp-
+   encrypted".  This body contains the control information.  A message
+   complying with this standard MUST contain a "Version: 1" field in
+   this body.  Since the PGP packet format contains all other
+   information necessary for decrypting, no other information is
+   required here.
+
+   The second MIME body part MUST contain the actual encrypted data.  It
+   must be labeled with a content type of "application/octet- stream".
+
+   Example message:
+
+     From: Michael Elkins <elkins@aero.org>
+     To: Michael Elkins <elkins@aero.org>
+     Mime-Version: 1.0
+     Content-Type: multipart/encrypted; boundary=foo;
+        protocol="application/pgp-encrypted"
+
+     --foo
+     Content-Type: application/pgp-encrypted
+
+     Version: 1
+
+     --foo
+     Content-Type: application/octet-stream
+
+     -----BEGIN PGP MESSAGE-----
+     Version: 2.6.2
+
+     hIwDY32hYGCE8MkBA/wOu7d45aUxF4Q0RKJprD3v5Z9K1YcRJ2fve87lMlDlx4Oj
+     eW4GDdBfLbJE7VUpp13N19GL8e/AqbyyjHH4aS0YoTk10QQ9nnRvjY8nZL3MPXSZ
+     g9VGQxFeGqzykzmykU6A26MSMexR4ApeeON6xzZWfo+0yOqAq6lb46wsvldZ96YA
+     AABH78hyX7YX4uT1tNCWEIIBoqqvCeIMpp7UQ2IzBrXg6GtukS8NxbukLeamqVW3
+     1yt21DYOjuLzcMNe/JNsD9vDVCvOOG3OCi8=
+     =zzaA
+     -----END PGP MESSAGE-----
+
+     --foo--
+
+5.  PGP signed data
+
+   PGP signed messages are denoted by the "multipart/signed" content
+   type, described in [1], with a "protocol" parameter which MUST have a
+   value of "application/pgp-signature" (MUST be quoted).  The "micalg"
+
+
+
+Elkins                      Standards Track                     [Page 3]
+
+RFC 2015                 MIME Security with PGP             October 1996
+
+
+   parameter MUST have a value of "pgp-<hash-symbol>", where <hash-
+   symbol> identifies the message integrity check (MIC) used to generate
+   the signature.  The currently defined values for <hash-symbol> are
+   "md5" for the MD5 checksum, and "sha1" for the SHA.1 algorithm.
+
+   The multipart/signed body MUST consist of exactly two parts.  The
+   first part contains the signed data in MIME canonical format,
+   including a set of appropriate content headers describing the data.
+
+   The second body MUST contain the PGP digital signature.  It MUST be
+   labeled with a content type of "application/pgp-signature".
+
+   When the PGP digital signature is generated:
+
+   (1)  The data to be signed must first be converted to its
+        type/subtype specific canonical form.  For text/plain, this
+        means conversion to an appropriate character set and conversion
+        of line endings to the canonical <CR><LF> sequence.
+
+   (2)  An appropriate Content-Transfer-Encoding is then applied. Each
+        line of the encoded data MUST end with the canonical <CR><LF>
+        sequence.
+
+   (3)  MIME content headers are then added to the body, each ending
+        with the canonical <CR><LF> sequence.
+
+   (4)  As described in [1], the digital signature MUST be calculated
+        over both the data to be signed and its set of content headers.
+
+   (5)  The signature MUST be generated detached from the signed data
+        so that the process does not alter the signed data in any way.
+
+   Example message:
+
+     From: Michael Elkins <elkins@aero.org>
+     To: Michael Elkins <elkins@aero.org>
+     Mime-Version: 1.0
+     Content-Type: multipart/signed; boundary=bar; micalg=pgp-md5;
+     protocol="application/pgp-signature"
+
+     --bar
+     & Content-Type: text/plain; charset=iso-8859-1
+     & Content-Transfer-Encoding: quoted-printable
+     &
+     & =A1Hola!
+     &
+     & Did you know that talking to yourself is a sign of senility?
+     &
+
+
+
+Elkins                      Standards Track                     [Page 4]
+
+RFC 2015                 MIME Security with PGP             October 1996
+
+
+     & It's generally a good idea to encode lines that begin with
+     & From=20because some mail transport agents will insert a greater-
+     & than (>) sign, thus invalidating the signature.
+     &
+     & Also, in some cases it might be desirable to encode any   =20
+     &railing whitespace that occurs on lines in order to ensure  =20
+     & that the message signature is not invalidated when passing =20
+     & a gateway that modifies such whitespace (like BITNET). =20
+     &
+     & me
+
+     --bar
+     Content-Type: application/pgp-signature
+
+    -----BEGIN PGP MESSAGE-----
+   Version: 2.6.2
+
+   iQCVAwUBMJrRF2N9oWBghPDJAQE9UQQAtl7LuRVndBjrk4EqYBIb3h5QXIX/LC//
+   jJV5bNvkZIGPIcEmI5iFd9boEgvpirHtIREEqLQRkYNoBActFBZmh9GC3C041WGq
+   uMbrbxc+nIs1TIKlA08rVi9ig/2Yh7LFrK5Ein57U/W72vgSxLhe/zhdfolT9Brn
+   HOxEa44b+EI=
+   =ndaj
+   -----END PGP MESSAGE-----
+
+   --bar--
+
+   The "&"s in the previous example indicate the portion of the data
+   over which the signature was calculated.
+
+   Though not required, it is generally a good idea to use Quoted-
+   Printable encoding in the first step (writing out the data to be
+   signed in MIME canonical format) if any of the lines in the data
+   begin with "From ", and encode the "F".  This will avoid an MTA
+   inserting a ">" in front of the line, thus invalidating the
+   signature!
+
+   Upon receipt of a signed message, an application MUST:
+
+   (1)  Convert line endings to the canonical <CR><LF> sequence before
+        the signature can be verified.  This is necessary since the
+        local MTA may have converted to a local end of line convention.
+
+   (2)  Pass both the signed data and its associated content headers
+        along with the PGP signature to the signature verification
+        service.
+
+
+
+
+
+
+Elkins                      Standards Track                     [Page 5]
+
+RFC 2015                 MIME Security with PGP             October 1996
+
+
+6.  Encrypted and Signed Data
+
+   Sometimes it is desirable to both digitally sign and then encrypt a
+   message to be sent.  This protocol allows for two methods of
+   accomplishing this task.
+
+6.1  RFC1847 Encapsulation
+
+   [1], it is stated that the data should first be signed as a
+   multipart/signature body, and then encrypted to form the final
+   multipart/encrypted body, i.e.,
+
+    Content-Type: multipart/encrypted;
+       protocol="application/pgp-encrypted"; boundary=foo
+
+    --foo
+    Content-Type: application/pgp-encrypted
+
+    Version: 1
+
+    --foo
+    Content-Type: application/octet-stream
+
+    -----BEGIN PGP MESSAGE-----
+    & Content-Type: multipart/signed; micalg=pgp-md5
+    &     protocol="application/pgp-signature"; boundary=bar
+    &
+    & --bar
+    & Content-Type: text/plain; charset=us-ascii
+    &
+    & This message was first signed, and then encrypted.
+    &
+    & --bar
+    & Content-Type: application/pgp-signature
+    &
+    & -----BEGIN PGP MESSAGE-----
+    & Version: 2.6.2
+    &
+    & iQCVAwUBMJrRF2N9oWBghPDJAQE9UQQAtl7LuRVndBjrk4EqYBIb3h5QXIX/LC//
+    & jJV5bNvkZIGPIcEmI5iFd9boEgvpirHtIREEqLQRkYNoBActFBZmh9GC3C041WGq
+    & uMbrbxc+nIs1TIKlA08rVi9ig/2Yh7LFrK5Ein57U/W72vgSxLhe/zhdfolT9Brn
+    & HOxEa44b+EI=
+    & =ndaj
+    & -----END PGP MESSAGE-----
+    &
+    & --bar--
+    -----END PGP MESSAGE-----
+
+
+
+
+Elkins                      Standards Track                     [Page 6]
+
+RFC 2015                 MIME Security with PGP             October 1996
+
+
+    --foo--
+
+    (The text preceded by '&' indicates that it is really
+    encrypted, but presented as text for clarity.)
+
+6.2  Combined method
+
+   Versions 2.x of PGP also allow data to be signed and encrypted in one
+   operation.  This method is an acceptable shortcut, and has the
+   benefit of less overhead.  The resulting data should be formed as a
+   "multipart/encrypted" object as described above.
+
+   Messages which are encrypted and signed in this combined fashion are
+   REQUIRED to follow the same canonicalization rules as for
+   multipart/signed objects.
+
+   It is explicitly allowed for an agent to decrypt a combined message
+   and rewrite it as a multipart/signed object using the signature data
+   embedded in the encrypted version.
+
+7.  Distribution of PGP public keys
+
+   Content-Type: application/pgp-keys
+   Required parameters: none
+   Optional parameters: none
+
+   This is the content type which should be used for relaying public key
+   blocks.
+
+8.  Notes
+
+   PGP and Pretty Good Privacy are trademarks of Philip Zimmermann.
+
+9.  Security Considerations
+
+   Use of this protocol has the same security considerations as PGP, and
+   is not known to either increase or decrease the security of messages
+   using it; see [3] for more information.
+
+10.  Author's Address
+
+        Michael Elkins
+        P.O. Box 92957 - M1/102
+        Los Angeles, CA 90009-2957
+
+        Phone: +1 310 336 8040
+        Fax: +1 310 336 4402
+
+
+
+
+Elkins                      Standards Track                     [Page 7]
+
+RFC 2015                 MIME Security with PGP             October 1996
+
+
+References
+
+   [1]  Galvin, J., Murphy, G., Crocker, S., and N. Freed, "Security
+        Multiparts for MIME: Multipart/Signed and Multipart/Encrypted",
+        RFC 1847, October 1995.
+
+   [2]  Galvin, J., Murphy, G., Crocker, S., and N. Freed, "MIME Object
+        Security Services", RFC 1848, October 1995.
+
+   [3]  Atkins, D., Stallings, W., and P. Zimmermann, "PGP Message
+        Exchange Formats", RFC 1991, August 1996.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Elkins                      Standards Track                     [Page 8]
+
diff -uNr gmime-1.90.0/rfc/rfc2045.txt gmime/rfc/rfc2045.txt
--- gmime-1.90.0/rfc/rfc2045.txt	Thu Jan  1 01:00:00 1970
+++ gmime/rfc/rfc2045.txt	Tue Oct 24 23:01:38 2000
@@ -0,0 +1,1739 @@
+
+
+
+
+
+
+Network Working Group                                          N. Freed
+Request for Comments: 2045                                     Innosoft
+Obsoletes: 1521, 1522, 1590                               N. Borenstein
+Category: Standards Track                                 First Virtual
+                                                          November 1996
+
+
+                 Multipurpose Internet Mail Extensions
+                            (MIME) Part One:
+                   Format of Internet Message Bodies
+
+Status of this Memo
+
+   This document specifies an Internet standards track protocol for the
+   Internet community, and requests discussion and suggestions for
+   improvements.  Please refer to the current edition of the "Internet
+   Official Protocol Standards" (STD 1) for the standardization state
+   and status of this protocol.  Distribution of this memo is unlimited.
+
+Abstract
+
+   STD 11, RFC 822, defines a message representation protocol specifying
+   considerable detail about US-ASCII message headers, and leaves the
+   message content, or message body, as flat US-ASCII text.  This set of
+   documents, collectively called the Multipurpose Internet Mail
+   Extensions, or MIME, redefines the format of messages to allow for
+
+    (1)   textual message bodies in character sets other than
+          US-ASCII,
+
+    (2)   an extensible set of different formats for non-textual
+          message bodies,
+
+    (3)   multi-part message bodies, and
+
+    (4)   textual header information in character sets other than
+          US-ASCII.
+
+   These documents are based on earlier work documented in RFC 934, STD
+   11, and RFC 1049, but extends and revises them.  Because RFC 822 said
+   so little about message bodies, these documents are largely
+   orthogonal to (rather than a revision of) RFC 822.
+
+   This initial document specifies the various headers used to describe
+   the structure of MIME messages. The second document, RFC 2046,
+   defines the general structure of the MIME media typing system and
+   defines an initial set of media types. The third document, RFC 2047,
+   describes extensions to RFC 822 to allow non-US-ASCII text data in
+
+
+
+Freed & Borenstein          Standards Track                     [Page 1]
+
+RFC 2045                Internet Message Bodies            November 1996
+
+
+   Internet mail header fields. The fourth document, RFC 2048, specifies
+   various IANA registration procedures for MIME-related facilities. The
+   fifth and final document, RFC 2049, describes MIME conformance
+   criteria as well as providing some illustrative examples of MIME
+   message formats, acknowledgements, and the bibliography.
+
+   These documents are revisions of RFCs 1521, 1522, and 1590, which
+   themselves were revisions of RFCs 1341 and 1342.  An appendix in RFC
+   2049 describes differences and changes from previous versions.
+
+Table of Contents
+
+   1. Introduction .........................................    3
+   2. Definitions, Conventions, and Generic BNF Grammar ....    5
+   2.1 CRLF ................................................    5
+   2.2 Character Set .......................................    6
+   2.3 Message .............................................    6
+   2.4 Entity ..............................................    6
+   2.5 Body Part ...........................................    7
+   2.6 Body ................................................    7
+   2.7 7bit Data ...........................................    7
+   2.8 8bit Data ...........................................    7
+   2.9 Binary Data .........................................    7
+   2.10 Lines ..............................................    7
+   3. MIME Header Fields ...................................    8
+   4. MIME-Version Header Field ............................    8
+   5. Content-Type Header Field ............................   10
+   5.1 Syntax of the Content-Type Header Field .............   12
+   5.2 Content-Type Defaults ...............................   14
+   6. Content-Transfer-Encoding Header Field ...............   14
+   6.1 Content-Transfer-Encoding Syntax ....................   14
+   6.2 Content-Transfer-Encodings Semantics ................   15
+   6.3 New Content-Transfer-Encodings ......................   16
+   6.4 Interpretation and Use ..............................   16
+   6.5 Translating Encodings ...............................   18
+   6.6 Canonical Encoding Model ............................   19
+   6.7 Quoted-Printable Content-Transfer-Encoding ..........   19
+   6.8 Base64 Content-Transfer-Encoding ....................   24
+   7. Content-ID Header Field ..............................   26
+   8. Content-Description Header Field .....................   27
+   9. Additional MIME Header Fields ........................   27
+   10. Summary .............................................   27
+   11. Security Considerations .............................   27
+   12. Authors' Addresses ..................................   28
+   A. Collected Grammar ....................................   29
+
+
+
+
+
+
+Freed & Borenstein          Standards Track                     [Page 2]
+
+RFC 2045                Internet Message Bodies            November 1996
+
+
+1.  Introduction
+
+   Since its publication in 1982, RFC 822 has defined the standard
+   format of textual mail messages on the Internet.  Its success has
+   been such that the RFC 822 format has been adopted, wholly or
+   partially, well beyond the confines of the Internet and the Internet
+   SMTP transport defined by RFC 821.  As the format has seen wider use,
+   a number of limitations have proven increasingly restrictive for the
+   user community.
+
+   RFC 822 was intended to specify a format for text messages.  As such,
+   non-text messages, such as multimedia messages that might include
+   audio or images, are simply not mentioned.  Even in the case of text,
+   however, RFC 822 is inadequate for the needs of mail users whose
+   languages require the use of character sets richer than US-ASCII.
+   Since RFC 822 does not specify mechanisms for mail containing audio,
+   video, Asian language text, or even text in most European languages,
+   additional specifications are needed.
+
+   One of the notable limitations of RFC 821/822 based mail systems is
+   the fact that they limit the contents of electronic mail messages to
+   relatively short lines (e.g. 1000 characters or less [RFC-821]) of
+   7bit US-ASCII.  This forces users to convert any non-textual data
+   that they may wish to send into seven-bit bytes representable as
+   printable US-ASCII characters before invoking a local mail UA (User
+   Agent, a program with which human users send and receive mail).
+   Examples of such encodings currently used in the Internet include
+   pure hexadecimal, uuencode, the 3-in-4 base 64 scheme specified in
+   RFC 1421, the Andrew Toolkit Representation [ATK], and many others.
+
+   The limitations of RFC 822 mail become even more apparent as gateways
+   are designed to allow for the exchange of mail messages between RFC
+   822 hosts and X.400 hosts.  X.400 [X400] specifies mechanisms for the
+   inclusion of non-textual material within electronic mail messages.
+   The current standards for the mapping of X.400 messages to RFC 822
+   messages specify either that X.400 non-textual material must be
+   converted to (not encoded in) IA5Text format, or that they must be
+   discarded, notifying the RFC 822 user that discarding has occurred.
+   This is clearly undesirable, as information that a user may wish to
+   receive is lost.  Even though a user agent may not have the
+   capability of dealing with the non-textual material, the user might
+   have some mechanism external to the UA that can extract useful
+   information from the material.  Moreover, it does not allow for the
+   fact that the message may eventually be gatewayed back into an X.400
+   message handling system (i.e., the X.400 message is "tunneled"
+   through Internet mail), where the non-textual information would
+   definitely become useful again.
+
+
+
+
+Freed & Borenstein          Standards Track                     [Page 3]
+
+RFC 2045                Internet Message Bodies            November 1996
+
+
+   This document describes several mechanisms that combine to solve most
+   of these problems without introducing any serious incompatibilities
+   with the existing world of RFC 822 mail.  In particular, it
+   describes:
+
+    (1)   A MIME-Version header field, which uses a version
+          number to declare a message to be conformant with MIME
+          and allows mail processing agents to distinguish
+          between such messages and those generated by older or
+          non-conformant software, which are presumed to lack
+          such a field.
+
+    (2)   A Content-Type header field, generalized from RFC 1049,
+          which can be used to specify the media type and subtype
+          of data in the body of a message and to fully specify
+          the native representation (canonical form) of such
+          data.
+
+    (3)   A Content-Transfer-Encoding header field, which can be
+          used to specify both the encoding transformation that
+          was applied to the body and the domain of the result.
+          Encoding transformations other than the identity
+          transformation are usually applied to data in order to
+          allow it to pass through mail transport mechanisms
+          which may have data or character set limitations.
+
+    (4)   Two additional header fields that can be used to
+          further describe the data in a body, the Content-ID and
+          Content-Description header fields.
+
+   All of the header fields defined in this document are subject to the
+   general syntactic rules for header fields specified in RFC 822.  In
+   particular, all of these header fields except for Content-Disposition
+   can include RFC 822 comments, which have no semantic content and
+   should be ignored during MIME processing.
+
+   Finally, to specify and promote interoperability, RFC 2049 provides a
+   basic applicability statement for a subset of the above mechanisms
+   that defines a minimal level of "conformance" with this document.
+
+   HISTORICAL NOTE:  Several of the mechanisms described in this set of
+   documents may seem somewhat strange or even baroque at first reading.
+   It is important to note that compatibility with existing standards
+   AND robustness across existing practice were two of the highest
+   priorities of the working group that developed this set of documents.
+   In particular, compatibility was always favored over elegance.
+
+
+
+
+
+Freed & Borenstein          Standards Track                     [Page 4]
+
+RFC 2045                Internet Message Bodies            November 1996
+
+
+   Please refer to the current edition of the "Internet Official
+   Protocol Standards" for the standardization state and status of this
+   protocol.  RFC 822 and STD 3, RFC 1123 also provide essential
+   background for MIME since no conforming implementation of MIME can
+   violate them.  In addition, several other informational RFC documents
+   will be of interest to the MIME implementor, in particular RFC 1344,
+   RFC 1345, and RFC 1524.
+
+2.  Definitions, Conventions, and Generic BNF Grammar
+
+   Although the mechanisms specified in this set of documents are all
+   described in prose, most are also described formally in the augmented
+   BNF notation of RFC 822. Implementors will need to be familiar with
+   this notation in order to understand this set of documents, and are
+   referred to RFC 822 for a complete explanation of the augmented BNF
+   notation.
+
+   Some of the augmented BNF in this set of documents makes named
+   references to syntax rules defined in RFC 822.  A complete formal
+   grammar, then, is obtained by combining the collected grammar
+   appendices in each document in this set with the BNF of RFC 822 plus
+   the modifications to RFC 822 defined in RFC 1123 (which specifically
+   changes the syntax for `return', `date' and `mailbox').
+
+   All numeric and octet values are given in decimal notation in this
+   set of documents. All media type values, subtype values, and
+   parameter names as defined are case-insensitive.  However, parameter
+   values are case-sensitive unless otherwise specified for the specific
+   parameter.
+
+   FORMATTING NOTE:  Notes, such at this one, provide additional
+   nonessential information which may be skipped by the reader without
+   missing anything essential.  The primary purpose of these non-
+   essential notes is to convey information about the rationale of this
+   set of documents, or to place these documents in the proper
+   historical or evolutionary context.  Such information may in
+   particular be skipped by those who are focused entirely on building a
+   conformant implementation, but may be of use to those who wish to
+   understand why certain design choices were made.
+
+2.1.  CRLF
+
+   The term CRLF, in this set of documents, refers to the sequence of
+   octets corresponding to the two US-ASCII characters CR (decimal value
+   13) and LF (decimal value 10) which, taken together, in this order,
+   denote a line break in RFC 822 mail.
+
+
+
+
+
+Freed & Borenstein          Standards Track                     [Page 5]
+
+RFC 2045                Internet Message Bodies            November 1996
+
+
+2.2.  Character Set
+
+   The term "character set" is used in MIME to refer to a method of
+   converting a sequence of octets into a sequence of characters.  Note
+   that unconditional and unambiguous conversion in the other direction
+   is not required, in that not all characters may be representable by a
+   given character set and a character set may provide more than one
+   sequence of octets to represent a particular sequence of characters.
+
+   This definition is intended to allow various kinds of character
+   encodings, from simple single-table mappings such as US-ASCII to
+   complex table switching methods such as those that use ISO 2022's
+   techniques, to be used as character sets.  However, the definition
+   associated with a MIME character set name must fully specify the
+   mapping to be performed.  In particular, use of external profiling
+   information to determine the exact mapping is not permitted.
+
+   NOTE: The term "character set" was originally to describe such
+   straightforward schemes as US-ASCII and ISO-8859-1 which have a
+   simple one-to-one mapping from single octets to single characters.
+   Multi-octet coded character sets and switching techniques make the
+   situation more complex. For example, some communities use the term
+   "character encoding" for what MIME calls a "character set", while
+   using the phrase "coded character set" to denote an abstract mapping
+   from integers (not octets) to characters.
+
+2.3.  Message
+
+   The term "message", when not further qualified, means either a
+   (complete or "top-level") RFC 822 message being transferred on a
+   network, or a message encapsulated in a body of type "message/rfc822"
+   or "message/partial".
+
+2.4.  Entity
+
+   The term "entity", refers specifically to the MIME-defined header
+   fields and contents of either a message or one of the parts in the
+   body of a multipart entity.  The specification of such entities is
+   the essence of MIME.  Since the contents of an entity are often
+   called the "body", it makes sense to speak about the body of an
+   entity.  Any sort of field may be present in the header of an entity,
+   but only those fields whose names begin with "content-" actually have
+   any MIME-related meaning.  Note that this does NOT imply thay they
+   have no meaning at all -- an entity that is also a message has non-
+   MIME header fields whose meanings are defined by RFC 822.
+
+
+
+
+
+
+Freed & Borenstein          Standards Track                     [Page 6]
+
+RFC 2045                Internet Message Bodies            November 1996
+
+
+2.5.  Body Part
+
+   The term "body part" refers to an entity inside of a multipart
+   entity.
+
+2.6.  Body
+
+   The term "body", when not further qualified, means the body of an
+   entity, that is, the body of either a message or of a body part.
+
+   NOTE:  The previous four definitions are clearly circular.  This is
+   unavoidable, since the overall structure of a MIME message is indeed
+   recursive.
+
+2.7.  7bit Data
+
+   "7bit data" refers to data that is all represented as relatively
+   short lines with 998 octets or less between CRLF line separation
+   sequences [RFC-821].  No octets with decimal values greater than 127
+   are allowed and neither are NULs (octets with decimal value 0).  CR
+   (decimal value 13) and LF (decimal value 10) octets only occur as
+   part of CRLF line separation sequences.
+
+2.8.  8bit Data
+
+   "8bit data" refers to data that is all represented as relatively
+   short lines with 998 octets or less between CRLF line separation
+   sequences [RFC-821]), but octets with decimal values greater than 127
+   may be used.  As with "7bit data" CR and LF octets only occur as part
+   of CRLF line separation sequences and no NULs are allowed.
+
+2.9.  Binary Data
+
+   "Binary data" refers to data where any sequence of octets whatsoever
+   is allowed.
+
+2.10.  Lines
+
+   "Lines" are defined as sequences of octets separated by a CRLF
+   sequences.  This is consistent with both RFC 821 and RFC 822.
+   "Lines" only refers to a unit of data in a message, which may or may
+   not correspond to something that is actually displayed by a user
+   agent.
+
+
+
+
+
+
+
+
+Freed & Borenstein          Standards Track                     [Page 7]
+
+RFC 2045                Internet Message Bodies            November 1996
+
+
+3.  MIME Header Fields
+
+   MIME defines a number of new RFC 822 header fields that are used to
+   describe the content of a MIME entity.  These header fields occur in
+   at least two contexts:
+
+    (1)   As part of a regular RFC 822 message header.
+
+    (2)   In a MIME body part header within a multipart
+          construct.
+
+   The formal definition of these header fields is as follows:
+
+     entity-headers := [ content CRLF ]
+                       [ encoding CRLF ]
+                       [ id CRLF ]
+                       [ description CRLF ]
+                       *( MIME-extension-field CRLF )
+
+     MIME-message-headers := entity-headers
+                             fields
+                             version CRLF
+                             ; The ordering of the header
+                             ; fields implied by this BNF
+                             ; definition should be ignored.
+
+     MIME-part-headers := entity-headers
+                          [ fields ]
+                          ; Any field not beginning with
+                          ; "content-" can have no defined
+                          ; meaning and may be ignored.
+                          ; The ordering of the header
+                          ; fields implied by this BNF
+                          ; definition should be ignored.
+
+   The syntax of the various specific MIME header fields will be
+   described in the following sections.
+
+4.  MIME-Version Header Field
+
+   Since RFC 822 was published in 1982, there has really been only one
+   format standard for Internet messages, and there has been little
+   perceived need to declare the format standard in use.  This document
+   is an independent specification that complements RFC 822.  Although
+   the extensions in this document have been defined in such a way as to
+   be compatible with RFC 822, there are still circumstances in which it
+   might be desirable for a mail-processing agent to know whether a
+   message was composed with the new standard in mind.
+
+
+
+Freed & Borenstein          Standards Track                     [Page 8]
+
+RFC 2045                Internet Message Bodies            November 1996
+
+
+   Therefore, this document defines a new header field, "MIME-Version",
+   which is to be used to declare the version of the Internet message
+   body format standard in use.
+
+   Messages composed in accordance with this document MUST include such
+   a header field, with the following verbatim text:
+
+     MIME-Version: 1.0
+
+   The presence of this header field is an assertion that the message
+   has been composed in compliance with this document.
+
+   Since it is possible that a future document might extend the message
+   format standard again, a formal BNF is given for the content of the
+   MIME-Version field:
+
+     version := "MIME-Version" ":" 1*DIGIT "." 1*DIGIT
+
+   Thus, future format specifiers, which might replace or extend "1.0",
+   are constrained to be two integer fields, separated by a period.  If
+   a message is received with a MIME-version value other than "1.0", it
+   cannot be assumed to conform with this document.
+
+   Note that the MIME-Version header field is required at the top level
+   of a message.  It is not required for each body part of a multipart
+   entity.  It is required for the embedded headers of a body of type
+   "message/rfc822" or "message/partial" if and only if the embedded
+   message is itself claimed to be MIME-conformant.
+
+   It is not possible to fully specify how a mail reader that conforms
+   with MIME as defined in this document should treat a message that
+   might arrive in the future with some value of MIME-Version other than
+   "1.0".
+
+   It is also worth noting that version control for specific media types
+   is not accomplished using the MIME-Version mechanism.  In particular,
+   some formats (such as application/postscript) have version numbering
+   conventions that are internal to the media format.  Where such
+   conventions exist, MIME does nothing to supersede them.  Where no
+   such conventions exist, a MIME media type might use a "version"
+   parameter in the content-type field if necessary.
+
+
+
+
+
+
+
+
+
+
+Freed & Borenstein          Standards Track                     [Page 9]
+
+RFC 2045                Internet Message Bodies            November 1996
+
+
+   NOTE TO IMPLEMENTORS:  When checking MIME-Version values any RFC 822
+   comment strings that are present must be ignored.  In particular, the
+   following four MIME-Version fields are equivalent:
+
+     MIME-Version: 1.0
+
+     MIME-Version: 1.0 (produced by MetaSend Vx.x)
+
+     MIME-Version: (produced by MetaSend Vx.x) 1.0
+
+     MIME-Version: 1.(produced by MetaSend Vx.x)0
+
+   In the absence of a MIME-Version field, a receiving mail user agent
+   (whether conforming to MIME requirements or not) may optionally
+   choose to interpret the body of the message according to local
+   conventions.  Many such conventions are currently in use and it
+   should be noted that in practice non-MIME messages can contain just
+   about anything.
+
+   It is impossible to be certain that a non-MIME mail message is
+   actually plain text in the US-ASCII character set since it might well
+   be a message that, using some set of nonstandard local conventions
+   that predate MIME, includes text in another character set or non-
+   textual data presented in a manner that cannot be automatically
+   recognized (e.g., a uuencoded compressed UNIX tar file).
+
+5.  Content-Type Header Field
+
+   The purpose of the Content-Type field is to describe the data
+   contained in the body fully enough that the receiving user agent can
+   pick an appropriate agent or mechanism to present the data to the
+   user, or otherwise deal with the data in an appropriate manner. The
+   value in this field is called a media type.
+
+   HISTORICAL NOTE:  The Content-Type header field was first defined in
+   RFC 1049.  RFC 1049 used a simpler and less powerful syntax, but one
+   that is largely compatible with the mechanism given here.
+
+   The Content-Type header field specifies the nature of the data in the
+   body of an entity by giving media type and subtype identifiers, and
+   by providing auxiliary information that may be required for certain
+   media types.  After the media type and subtype names, the remainder
+   of the header field is simply a set of parameters, specified in an
+   attribute=value notation.  The ordering of parameters is not
+   significant.
+
+
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 10]
+
+RFC 2045                Internet Message Bodies            November 1996
+
+
+   In general, the top-level media type is used to declare the general
+   type of data, while the subtype specifies a specific format for that
+   type of data.  Thus, a media type of "image/xyz" is enough to tell a
+   user agent that the data is an image, even if the user agent has no
+   knowledge of the specific image format "xyz".  Such information can
+   be used, for example, to decide whether or not to show a user the raw
+   data from an unrecognized subtype -- such an action might be
+   reasonable for unrecognized subtypes of text, but not for
+   unrecognized subtypes of image or audio.  For this reason, registered
+   subtypes of text, image, audio, and video should not contain embedded
+   information that is really of a different type.  Such compound
+   formats should be represented using the "multipart" or "application"
+   types.
+
+   Parameters are modifiers of the media subtype, and as such do not
+   fundamentally affect the nature of the content.  The set of
+   meaningful parameters depends on the media type and subtype.  Most
+   parameters are associated with a single specific subtype.  However, a
+   given top-level media type may define parameters which are applicable
+   to any subtype of that type.  Parameters may be required by their
+   defining content type or subtype or they may be optional. MIME
+   implementations must ignore any parameters whose names they do not
+   recognize.
+
+   For example, the "charset" parameter is applicable to any subtype of
+   "text", while the "boundary" parameter is required for any subtype of
+   the "multipart" media type.
+
+   There are NO globally-meaningful parameters that apply to all media
+   types.  Truly global mechanisms are best addressed, in the MIME
+   model, by the definition of additional Content-* header fields.
+
+   An initial set of seven top-level media types is defined in RFC 2046.
+   Five of these are discrete types whose content is essentially opaque
+   as far as MIME processing is concerned.  The remaining two are
+   composite types whose contents require additional handling by MIME
+   processors.
+
+   This set of top-level media types is intended to be substantially
+   complete.  It is expected that additions to the larger set of
+   supported types can generally be accomplished by the creation of new
+   subtypes of these initial types.  In the future, more top-level types
+   may be defined only by a standards-track extension to this standard.
+   If another top-level type is to be used for any reason, it must be
+   given a name starting with "X-" to indicate its non-standard status
+   and to avoid a potential conflict with a future official name.
+
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 11]
+
+RFC 2045                Internet Message Bodies            November 1996
+
+
+5.1.  Syntax of the Content-Type Header Field
+
+   In the Augmented BNF notation of RFC 822, a Content-Type header field
+   value is defined as follows:
+
+     content := "Content-Type" ":" type "/" subtype
+                *(";" parameter)
+                ; Matching of media type and subtype
+                ; is ALWAYS case-insensitive.
+
+     type := discrete-type / composite-type
+
+     discrete-type := "text" / "image" / "audio" / "video" /
+                      "application" / extension-token
+
+     composite-type := "message" / "multipart" / extension-token
+
+     extension-token := ietf-token / x-token
+
+     ietf-token := <An extension token defined by a
+                    standards-track RFC and registered
+                    with IANA.>
+
+     x-token := <The two characters "X-" or "x-" followed, with
+                 no intervening white space, by any token>
+
+     subtype := extension-token / iana-token
+
+     iana-token := <A publicly-defined extension token. Tokens
+                    of this form must be registered with IANA
+                    as specified in RFC 2048.>
+
+     parameter := attribute "=" value
+
+     attribute := token
+                  ; Matching of attributes
+                  ; is ALWAYS case-insensitive.
+
+     value := token / quoted-string
+
+     token := 1*<any (US-ASCII) CHAR except SPACE, CTLs,
+                 or tspecials>
+
+     tspecials :=  "(" / ")" / "<" / ">" / "@" /
+                   "," / ";" / ":" / "\" / <">
+                   "/" / "[" / "]" / "?" / "="
+                   ; Must be in quoted-string,
+                   ; to use within parameter values
+
+
+
+Freed & Borenstein          Standards Track                    [Page 12]
+
+RFC 2045                Internet Message Bodies            November 1996
+
+
+   Note that the definition of "tspecials" is the same as the RFC 822
+   definition of "specials" with the addition of the three characters
+   "/", "?", and "=", and the removal of ".".
+
+   Note also that a subtype specification is MANDATORY -- it may not be
+   omitted from a Content-Type header field.  As such, there are no
+   default subtypes.
+
+   The type, subtype, and parameter names are not case sensitive.  For
+   example, TEXT, Text, and TeXt are all equivalent top-level media
+   types.  Parameter values are normally case sensitive, but sometimes
+   are interpreted in a case-insensitive fashion, depending on the
+   intended use.  (For example, multipart boundaries are case-sensitive,
+   but the "access-type" parameter for message/External-body is not
+   case-sensitive.)
+
+   Note that the value of a quoted string parameter does not include the
+   quotes.  That is, the quotation marks in a quoted-string are not a
+   part of the value of the parameter, but are merely used to delimit
+   that parameter value.  In addition, comments are allowed in
+   accordance with RFC 822 rules for structured header fields.  Thus the
+   following two forms
+
+     Content-type: text/plain; charset=us-ascii (Plain text)
+
+     Content-type: text/plain; charset="us-ascii"
+
+   are completely equivalent.
+
+   Beyond this syntax, the only syntactic constraint on the definition
+   of subtype names is the desire that their uses must not conflict.
+   That is, it would be undesirable to have two different communities
+   using "Content-Type: application/foobar" to mean two different
+   things.  The process of defining new media subtypes, then, is not
+   intended to be a mechanism for imposing restrictions, but simply a
+   mechanism for publicizing their definition and usage.  There are,
+   therefore, two acceptable mechanisms for defining new media subtypes:
+
+    (1)   Private values (starting with "X-") may be defined
+          bilaterally between two cooperating agents without
+          outside registration or standardization. Such values
+          cannot be registered or standardized.
+
+    (2)   New standard values should be registered with IANA as
+          described in RFC 2048.
+
+   The second document in this set, RFC 2046, defines the initial set of
+   media types for MIME.
+
+
+
+Freed & Borenstein          Standards Track                    [Page 13]
+
+RFC 2045                Internet Message Bodies            November 1996
+
+
+5.2.  Content-Type Defaults
+
+   Default RFC 822 messages without a MIME Content-Type header are taken
+   by this protocol to be plain text in the US-ASCII character set,
+   which can be explicitly specified as:
+
+     Content-type: text/plain; charset=us-ascii
+
+   This default is assumed if no Content-Type header field is specified.
+   It is also recommend that this default be assumed when a
+   syntactically invalid Content-Type header field is encountered. In
+   the presence of a MIME-Version header field and the absence of any
+   Content-Type header field, a receiving User Agent can also assume
+   that plain US-ASCII text was the sender's intent.  Plain US-ASCII
+   text may still be assumed in the absence of a MIME-Version or the
+   presence of an syntactically invalid Content-Type header field, but
+   the sender's intent might have been otherwise.
+
+6.  Content-Transfer-Encoding Header Field
+
+   Many media types which could be usefully transported via email are
+   represented, in their "natural" format, as 8bit character or binary
+   data.  Such data cannot be transmitted over some transfer protocols.
+   For example, RFC 821 (SMTP) restricts mail messages to 7bit US-ASCII
+   data with lines no longer than 1000 characters including any trailing
+   CRLF line separator.
+
+   It is necessary, therefore, to define a standard mechanism for
+   encoding such data into a 7bit short line format.  Proper labelling
+   of unencoded material in less restrictive formats for direct use over
+   less restrictive transports is also desireable.  This document
+   specifies that such encodings will be indicated by a new "Content-
+   Transfer-Encoding" header field.  This field has not been defined by
+   any previous standard.
+
+6.1.  Content-Transfer-Encoding Syntax
+
+   The Content-Transfer-Encoding field's value is a single token
+   specifying the type of encoding, as enumerated below.  Formally:
+
+     encoding := "Content-Transfer-Encoding" ":" mechanism
+
+     mechanism := "7bit" / "8bit" / "binary" /
+                  "quoted-printable" / "base64" /
+                  ietf-token / x-token
+
+   These values are not case sensitive -- Base64 and BASE64 and bAsE64
+   are all equivalent.  An encoding type of 7BIT requires that the body
+
+
+
+Freed & Borenstein          Standards Track                    [Page 14]
+
+RFC 2045                Internet Message Bodies            November 1996
+
+
+   is already in a 7bit mail-ready representation.  This is the default
+   value -- that is, "Content-Transfer-Encoding: 7BIT" is assumed if the
+   Content-Transfer-Encoding header field is not present.
+
+6.2.  Content-Transfer-Encodings Semantics
+
+   This single Content-Transfer-Encoding token actually provides two
+   pieces of information.  It specifies what sort of encoding
+   transformation the body was subjected to and hence what decoding
+   operation must be used to restore it to its original form, and it
+   specifies what the domain of the result is.
+
+   The transformation part of any Content-Transfer-Encodings specifies,
+   either explicitly or implicitly, a single, well-defined decoding
+   algorithm, which for any sequence of encoded octets either transforms
+   it to the original sequence of octets which was encoded, or shows
+   that it is illegal as an encoded sequence.  Content-Transfer-
+   Encodings transformations never depend on any additional external
+   profile information for proper operation. Note that while decoders
+   must produce a single, well-defined output for a valid encoding no
+   such restrictions exist for encoders: Encoding a given sequence of
+   octets to different, equivalent encoded sequences is perfectly legal.
+
+   Three transformations are currently defined: identity, the "quoted-
+   printable" encoding, and the "base64" encoding.  The domains are
+   "binary", "8bit" and "7bit".
+
+   The Content-Transfer-Encoding values "7bit", "8bit", and "binary" all
+   mean that the identity (i.e. NO) encoding transformation has been
+   performed.  As such, they serve simply as indicators of the domain of
+   the body data, and provide useful information about the sort of
+   encoding that might be needed for transmission in a given transport
+   system.  The terms "7bit data", "8bit data", and "binary data" are
+   all defined in Section 2.
+
+   The quoted-printable and base64 encodings transform their input from
+   an arbitrary domain into material in the "7bit" range, thus making it
+   safe to carry over restricted transports.  The specific definition of
+   the transformations are given below.
+
+   The proper Content-Transfer-Encoding label must always be used.
+   Labelling unencoded data containing 8bit characters as "7bit" is not
+   allowed, nor is labelling unencoded non-line-oriented data as
+   anything other than "binary" allowed.
+
+   Unlike media subtypes, a proliferation of Content-Transfer-Encoding
+   values is both undesirable and unnecessary.  However, establishing
+   only a single transformation into the "7bit" domain does not seem
+
+
+
+Freed & Borenstein          Standards Track                    [Page 15]
+
+RFC 2045                Internet Message Bodies            November 1996
+
+
+   possible.  There is a tradeoff between the desire for a compact and
+   efficient encoding of largely- binary data and the desire for a
+   somewhat readable encoding of data that is mostly, but not entirely,
+   7bit.  For this reason, at least two encoding mechanisms are
+   necessary: a more or less readable encoding (quoted-printable) and a
+   "dense" or "uniform" encoding (base64).
+
+   Mail transport for unencoded 8bit data is defined in RFC 1652.  As of
+   the initial publication of this document, there are no standardized
+   Internet mail transports for which it is legitimate to include
+   unencoded binary data in mail bodies.  Thus there are no
+   circumstances in which the "binary" Content-Transfer-Encoding is
+   actually valid in Internet mail.  However, in the event that binary
+   mail transport becomes a reality in Internet mail, or when MIME is
+   used in conjunction with any other binary-capable mail transport
+   mechanism, binary bodies must be labelled as such using this
+   mechanism.
+
+   NOTE: The five values defined for the Content-Transfer-Encoding field
+   imply nothing about the media type other than the algorithm by which
+   it was encoded or the transport system requirements if unencoded.
+
+6.3.  New Content-Transfer-Encodings
+
+   Implementors may, if necessary, define private Content-Transfer-
+   Encoding values, but must use an x-token, which is a name prefixed by
+   "X-", to indicate its non-standard status, e.g., "Content-Transfer-
+   Encoding: x-my-new-encoding".  Additional standardized Content-
+   Transfer-Encoding values must be specified by a standards-track RFC.
+   The requirements such specifications must meet are given in RFC 2048.
+   As such, all content-transfer-encoding namespace except that
+   beginning with "X-" is explicitly reserved to the IETF for future
+   use.
+
+   Unlike media types and subtypes, the creation of new Content-
+   Transfer-Encoding values is STRONGLY discouraged, as it seems likely
+   to hinder interoperability with little potential benefit
+
+6.4.  Interpretation and Use
+
+   If a Content-Transfer-Encoding header field appears as part of a
+   message header, it applies to the entire body of that message.  If a
+   Content-Transfer-Encoding header field appears as part of an entity's
+   headers, it applies only to the body of that entity.  If an entity is
+   of type "multipart" the Content-Transfer-Encoding is not permitted to
+   have any value other than "7bit", "8bit" or "binary".  Even more
+   severe restrictions apply to some subtypes of the "message" type.
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 16]
+
+RFC 2045                Internet Message Bodies            November 1996
+
+
+   It should be noted that most media types are defined in terms of
+   octets rather than bits, so that the mechanisms described here are
+   mechanisms for encoding arbitrary octet streams, not bit streams.  If
+   a bit stream is to be encoded via one of these mechanisms, it must
+   first be converted to an 8bit byte stream using the network standard
+   bit order ("big-endian"), in which the earlier bits in a stream
+   become the higher-order bits in a 8bit byte.  A bit stream not ending
+   at an 8bit boundary must be padded with zeroes. RFC 2046 provides a
+   mechanism for noting the addition of such padding in the case of the
+   application/octet-stream media type, which has a "padding" parameter.
+
+   The encoding mechanisms defined here explicitly encode all data in
+   US-ASCII.  Thus, for example, suppose an entity has header fields
+   such as:
+
+     Content-Type: text/plain; charset=ISO-8859-1
+     Content-transfer-encoding: base64
+
+   This must be interpreted to mean that the body is a base64 US-ASCII
+   encoding of data that was originally in ISO-8859-1, and will be in
+   that character set again after decoding.
+
+   Certain Content-Transfer-Encoding values may only be used on certain
+   media types.  In particular, it is EXPRESSLY FORBIDDEN to use any
+   encodings other than "7bit", "8bit", or "binary" with any composite
+   media type, i.e. one that recursively includes other Content-Type
+   fields.  Currently the only composite media types are "multipart" and
+   "message".  All encodings that are desired for bodies of type
+   multipart or message must be done at the innermost level, by encoding
+   the actual body that needs to be encoded.
+
+   It should also be noted that, by definition, if a composite entity
+   has a transfer-encoding value such as "7bit", but one of the enclosed
+   entities has a less restrictive value such as "8bit", then either the
+   outer "7bit" labelling is in error, because 8bit data are included,
+   or the inner "8bit" labelling placed an unnecessarily high demand on
+   the transport system because the actual included data were actually
+   7bit-safe.
+
+   NOTE ON ENCODING RESTRICTIONS:  Though the prohibition against using
+   content-transfer-encodings on composite body data may seem overly
+   restrictive, it is necessary to prevent nested encodings, in which
+   data are passed through an encoding algorithm multiple times, and
+   must be decoded multiple times in order to be properly viewed.
+   Nested encodings add considerable complexity to user agents:  Aside
+   from the obvious efficiency problems with such multiple encodings,
+   they can obscure the basic structure of a message.  In particular,
+   they can imply that several decoding operations are necessary simply
+
+
+
+Freed & Borenstein          Standards Track                    [Page 17]
+
+RFC 2045                Internet Message Bodies            November 1996
+
+
+   to find out what types of bodies a message contains.  Banning nested
+   encodings may complicate the job of certain mail gateways, but this
+   seems less of a problem than the effect of nested encodings on user
+   agents.
+
+   Any entity with an unrecognized Content-Transfer-Encoding must be
+   treated as if it has a Content-Type of "application/octet-stream",
+   regardless of what the Content-Type header field actually says.
+
+   NOTE ON THE RELATIONSHIP BETWEEN CONTENT-TYPE AND CONTENT-TRANSFER-
+   ENCODING: It may seem that the Content-Transfer-Encoding could be
+   inferred from the characteristics of the media that is to be encoded,
+   or, at the very least, that certain Content-Transfer-Encodings could
+   be mandated for use with specific media types.  There are several
+   reasons why this is not the case. First, given the varying types of
+   transports used for mail, some encodings may be appropriate for some
+   combinations of media types and transports but not for others.  (For
+   example, in an 8bit transport, no encoding would be required for text
+   in certain character sets, while such encodings are clearly required
+   for 7bit SMTP.)
+
+   Second, certain media types may require different types of transfer
+   encoding under different circumstances.  For example, many PostScript
+   bodies might consist entirely of short lines of 7bit data and hence
+   require no encoding at all.  Other PostScript bodies (especially
+   those using Level 2 PostScript's binary encoding mechanism) may only
+   be reasonably represented using a binary transport encoding.
+   Finally, since the Content-Type field is intended to be an open-ended
+   specification mechanism, strict specification of an association
+   between media types and encodings effectively couples the
+   specification of an application protocol with a specific lower-level
+   transport.  This is not desirable since the developers of a media
+   type should not have to be aware of all the transports in use and
+   what their limitations are.
+
+6.5.  Translating Encodings
+
+   The quoted-printable and base64 encodings are designed so that
+   conversion between them is possible.  The only issue that arises in
+   such a conversion is the handling of hard line breaks in quoted-
+   printable encoding output. When converting from quoted-printable to
+   base64 a hard line break in the quoted-printable form represents a
+   CRLF sequence in the canonical form of the data. It must therefore be
+   converted to a corresponding encoded CRLF in the base64 form of the
+   data.  Similarly, a CRLF sequence in the canonical form of the data
+   obtained after base64 decoding must be converted to a quoted-
+   printable hard line break, but ONLY when converting text data.
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 18]
+
+RFC 2045                Internet Message Bodies            November 1996
+
+
+6.6.  Canonical Encoding Model
+
+   There was some confusion, in the previous versions of this RFC,
+   regarding the model for when email data was to be converted to
+   canonical form and encoded, and in particular how this process would
+   affect the treatment of CRLFs, given that the representation of
+   newlines varies greatly from system to system, and the relationship
+   between content-transfer-encodings and character sets.  A canonical
+   model for encoding is presented in RFC 2049 for this reason.
+
+6.7.  Quoted-Printable Content-Transfer-Encoding
+
+   The Quoted-Printable encoding is intended to represent data that
+   largely consists of octets that correspond to printable characters in
+   the US-ASCII character set.  It encodes the data in such a way that
+   the resulting octets are unlikely to be modified by mail transport.
+   If the data being encoded are mostly US-ASCII text, the encoded form
+   of the data remains largely recognizable by humans.  A body which is
+   entirely US-ASCII may also be encoded in Quoted-Printable to ensure
+   the integrity of the data should the message pass through a
+   character-translating, and/or line-wrapping gateway.
+
+   In this encoding, octets are to be represented as determined by the
+   following rules:
+
+    (1)   (General 8bit representation) Any octet, except a CR or
+          LF that is part of a CRLF line break of the canonical
+          (standard) form of the data being encoded, may be
+          represented by an "=" followed by a two digit
+          hexadecimal representation of the octet's value.  The
+          digits of the hexadecimal alphabet, for this purpose,
+          are "0123456789ABCDEF".  Uppercase letters must be
+          used; lowercase letters are not allowed.  Thus, for
+          example, the decimal value 12 (US-ASCII form feed) can
+          be represented by "=0C", and the decimal value 61 (US-
+          ASCII EQUAL SIGN) can be represented by "=3D".  This
+          rule must be followed except when the following rules
+          allow an alternative encoding.
+
+    (2)   (Literal representation) Octets with decimal values of
+          33 through 60 inclusive, and 62 through 126, inclusive,
+          MAY be represented as the US-ASCII characters which
+          correspond to those octets (EXCLAMATION POINT through
+          LESS THAN, and GREATER THAN through TILDE,
+          respectively).
+
+    (3)   (White Space) Octets with values of 9 and 32 MAY be
+          represented as US-ASCII TAB (HT) and SPACE characters,
+
+
+
+Freed & Borenstein          Standards Track                    [Page 19]
+
+RFC 2045                Internet Message Bodies            November 1996
+
+
+          respectively, but MUST NOT be so represented at the end
+          of an encoded line.  Any TAB (HT) or SPACE characters
+          on an encoded line MUST thus be followed on that line
+          by a printable character.  In particular, an "=" at the
+          end of an encoded line, indicating a soft line break
+          (see rule #5) may follow one or more TAB (HT) or SPACE
+          characters.  It follows that an octet with decimal
+          value 9 or 32 appearing at the end of an encoded line
+          must be represented according to Rule #1.  This rule is
+          necessary because some MTAs (Message Transport Agents,
+          programs which transport messages from one user to
+          another, or perform a portion of such transfers) are
+          known to pad lines of text with SPACEs, and others are
+          known to remove "white space" characters from the end
+          of a line.  Therefore, when decoding a Quoted-Printable
+          body, any trailing white space on a line must be
+          deleted, as it will necessarily have been added by
+          intermediate transport agents.
+
+    (4)   (Line Breaks) A line break in a text body, represented
+          as a CRLF sequence in the text canonical form, must be
+          represented by a (RFC 822) line break, which is also a
+          CRLF sequence, in the Quoted-Printable encoding.  Since
+          the canonical representation of media types other than
+          text do not generally include the representation of
+          line breaks as CRLF sequences, no hard line breaks
+          (i.e. line breaks that are intended to be meaningful
+          and to be displayed to the user) can occur in the
+          quoted-printable encoding of such types.  Sequences
+          like "=0D", "=0A", "=0A=0D" and "=0D=0A" will routinely
+          appear in non-text data represented in quoted-
+          printable, of course.
+
+          Note that many implementations may elect to encode the
+          local representation of various content types directly
+          rather than converting to canonical form first,
+          encoding, and then converting back to local
+          representation.  In particular, this may apply to plain
+          text material on systems that use newline conventions
+          other than a CRLF terminator sequence.  Such an
+          implementation optimization is permissible, but only
+          when the combined canonicalization-encoding step is
+          equivalent to performing the three steps separately.
+
+    (5)   (Soft Line Breaks) The Quoted-Printable encoding
+          REQUIRES that encoded lines be no more than 76
+          characters long.  If longer lines are to be encoded
+          with the Quoted-Printable encoding, "soft" line breaks
+
+
+
+Freed & Borenstein          Standards Track                    [Page 20]
+
+RFC 2045                Internet Message Bodies            November 1996
+
+
+          must be used.  An equal sign as the last character on a
+          encoded line indicates such a non-significant ("soft")
+          line break in the encoded text.
+
+   Thus if the "raw" form of the line is a single unencoded line that
+   says:
+
+     Now's the time for all folk to come to the aid of their country.
+
+   This can be represented, in the Quoted-Printable encoding, as:
+
+     Now's the time =
+     for all folk to come=
+      to the aid of their country.
+
+   This provides a mechanism with which long lines are encoded in such a
+   way as to be restored by the user agent.  The 76 character limit does
+   not count the trailing CRLF, but counts all other characters,
+   including any equal signs.
+
+   Since the hyphen character ("-") may be represented as itself in the
+   Quoted-Printable encoding, care must be taken, when encapsulating a
+   quoted-printable encoded body inside one or more multipart entities,
+   to ensure that the boundary delimiter does not appear anywhere in the
+   encoded body.  (A good strategy is to choose a boundary that includes
+   a character sequence such as "=_" which can never appear in a
+   quoted-printable body.  See the definition of multipart messages in
+   RFC 2046.)
+
+   NOTE: The quoted-printable encoding represents something of a
+   compromise between readability and reliability in transport.  Bodies
+   encoded with the quoted-printable encoding will work reliably over
+   most mail gateways, but may not work perfectly over a few gateways,
+   notably those involving translation into EBCDIC.  A higher level of
+   confidence is offered by the base64 Content-Transfer-Encoding.  A way
+   to get reasonably reliable transport through EBCDIC gateways is to
+   also quote the US-ASCII characters
+
+     !"#$@[\]^`{|}~
+
+   according to rule #1.
+
+   Because quoted-printable data is generally assumed to be line-
+   oriented, it is to be expected that the representation of the breaks
+   between the lines of quoted-printable data may be altered in
+   transport, in the same manner that plain text mail has always been
+   altered in Internet mail when passing between systems with differing
+   newline conventions.  If such alterations are likely to constitute a
+
+
+
+Freed & Borenstein          Standards Track                    [Page 21]
+
+RFC 2045                Internet Message Bodies            November 1996
+
+
+   corruption of the data, it is probably more sensible to use the
+   base64 encoding rather than the quoted-printable encoding.
+
+   NOTE: Several kinds of substrings cannot be generated according to
+   the encoding rules for the quoted-printable content-transfer-
+   encoding, and hence are formally illegal if they appear in the output
+   of a quoted-printable encoder. This note enumerates these cases and
+   suggests ways to handle such illegal substrings if any are
+   encountered in quoted-printable data that is to be decoded.
+
+    (1)   An "=" followed by two hexadecimal digits, one or both
+          of which are lowercase letters in "abcdef", is formally
+          illegal. A robust implementation might choose to
+          recognize them as the corresponding uppercase letters.
+
+    (2)   An "=" followed by a character that is neither a
+          hexadecimal digit (including "abcdef") nor the CR
+          character of a CRLF pair is illegal.  This case can be
+          the result of US-ASCII text having been included in a
+          quoted-printable part of a message without itself
+          having been subjected to quoted-printable encoding.  A
+          reasonable approach by a robust implementation might be
+          to include the "=" character and the following
+          character in the decoded data without any
+          transformation and, if possible, indicate to the user
+          that proper decoding was not possible at this point in
+          the data.
+
+    (3)   An "=" cannot be the ultimate or penultimate character
+          in an encoded object.  This could be handled as in case
+          (2) above.
+
+    (4)   Control characters other than TAB, or CR and LF as
+          parts of CRLF pairs, must not appear. The same is true
+          for octets with decimal values greater than 126.  If
+          found in incoming quoted-printable data by a decoder, a
+          robust implementation might exclude them from the
+          decoded data and warn the user that illegal characters
+          were discovered.
+
+    (5)   Encoded lines must not be longer than 76 characters,
+          not counting the trailing CRLF. If longer lines are
+          found in incoming, encoded data, a robust
+          implementation might nevertheless decode the lines, and
+          might report the erroneous encoding to the user.
+
+
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 22]
+
+RFC 2045                Internet Message Bodies            November 1996
+
+
+   WARNING TO IMPLEMENTORS:  If binary data is encoded in quoted-
+   printable, care must be taken to encode CR and LF characters as "=0D"
+   and "=0A", respectively.  In particular, a CRLF sequence in binary
+   data should be encoded as "=0D=0A".  Otherwise, if CRLF were
+   represented as a hard line break, it might be incorrectly decoded on
+   platforms with different line break conventions.
+
+   For formalists, the syntax of quoted-printable data is described by
+   the following grammar:
+
+     quoted-printable := qp-line *(CRLF qp-line)
+
+     qp-line := *(qp-segment transport-padding CRLF)
+                qp-part transport-padding
+
+     qp-part := qp-section
+                ; Maximum length of 76 characters
+
+     qp-segment := qp-section *(SPACE / TAB) "="
+                   ; Maximum length of 76 characters
+
+     qp-section := [*(ptext / SPACE / TAB) ptext]
+
+     ptext := hex-octet / safe-char
+
+     safe-char := <any octet with decimal value of 33 through
+                  60 inclusive, and 62 through 126>
+                  ; Characters not listed as "mail-safe" in
+                  ; RFC 2049 are also not recommended.
+
+     hex-octet := "=" 2(DIGIT / "A" / "B" / "C" / "D" / "E" / "F")
+                  ; Octet must be used for characters > 127, =,
+                  ; SPACEs or TABs at the ends of lines, and is
+                  ; recommended for any character not listed in
+                  ; RFC 2049 as "mail-safe".
+
+     transport-padding := *LWSP-char
+                          ; Composers MUST NOT generate
+                          ; non-zero length transport
+                          ; padding, but receivers MUST
+                          ; be able to handle padding
+                          ; added by message transports.
+
+   IMPORTANT:  The addition of LWSP between the elements shown in this
+   BNF is NOT allowed since this BNF does not specify a structured
+   header field.
+
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 23]
+
+RFC 2045                Internet Message Bodies            November 1996
+
+
+6.8.  Base64 Content-Transfer-Encoding
+
+   The Base64 Content-Transfer-Encoding is designed to represent
+   arbitrary sequences of octets in a form that need not be humanly
+   readable.  The encoding and decoding algorithms are simple, but the
+   encoded data are consistently only about 33 percent larger than the
+   unencoded data.  This encoding is virtually identical to the one used
+   in Privacy Enhanced Mail (PEM) applications, as defined in RFC 1421.
+
+   A 65-character subset of US-ASCII is used, enabling 6 bits to be
+   represented per printable character. (The extra 65th character, "=",
+   is used to signify a special processing function.)
+
+   NOTE:  This subset has the important property that it is represented
+   identically in all versions of ISO 646, including US-ASCII, and all
+   characters in the subset are also represented identically in all
+   versions of EBCDIC. Other popular encodings, such as the encoding
+   used by the uuencode utility, Macintosh binhex 4.0 [RFC-1741], and
+   the base85 encoding specified as part of Level 2 PostScript, do not
+   share these properties, and thus do not fulfill the portability
+   requirements a binary transport encoding for mail must meet.
+
+   The encoding process represents 24-bit groups of input bits as output
+   strings of 4 encoded characters.  Proceeding from left to right, a
+   24-bit input group is formed by concatenating 3 8bit input groups.
+   These 24 bits are then treated as 4 concatenated 6-bit groups, each
+   of which is translated into a single digit in the base64 alphabet.
+   When encoding a bit stream via the base64 encoding, the bit stream
+   must be presumed to be ordered with the most-significant-bit first.
+   That is, the first bit in the stream will be the high-order bit in
+   the first 8bit byte, and the eighth bit will be the low-order bit in
+   the first 8bit byte, and so on.
+
+   Each 6-bit group is used as an index into an array of 64 printable
+   characters.  The character referenced by the index is placed in the
+   output string.  These characters, identified in Table 1, below, are
+   selected so as to be universally representable, and the set excludes
+   characters with particular significance to SMTP (e.g., ".", CR, LF)
+   and to the multipart boundary delimiters defined in RFC 2046 (e.g.,
+   "-").
+
+
+
+
+
+
+
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 24]
+
+RFC 2045                Internet Message Bodies            November 1996
+
+
+                    Table 1: The Base64 Alphabet
+
+     Value Encoding  Value Encoding  Value Encoding  Value Encoding
+         0 A            17 R            34 i            51 z
+         1 B            18 S            35 j            52 0
+         2 C            19 T            36 k            53 1
+         3 D            20 U            37 l            54 2
+         4 E            21 V            38 m            55 3
+         5 F            22 W            39 n            56 4
+         6 G            23 X            40 o            57 5
+         7 H            24 Y            41 p            58 6
+         8 I            25 Z            42 q            59 7
+         9 J            26 a            43 r            60 8
+        10 K            27 b            44 s            61 9
+        11 L            28 c            45 t            62 +
+        12 M            29 d            46 u            63 /
+        13 N            30 e            47 v
+        14 O            31 f            48 w         (pad) =
+        15 P            32 g            49 x
+        16 Q            33 h            50 y
+
+   The encoded output stream must be represented in lines of no more
+   than 76 characters each.  All line breaks or other characters not
+   found in Table 1 must be ignored by decoding software.  In base64
+   data, characters other than those in Table 1, line breaks, and other
+   white space probably indicate a transmission error, about which a
+   warning message or even a message rejection might be appropriate
+   under some circumstances.
+
+   Special processing is performed if fewer than 24 bits are available
+   at the end of the data being encoded.  A full encoding quantum is
+   always completed at the end of a body.  When fewer than 24 input bits
+   are available in an input group, zero bits are added (on the right)
+   to form an integral number of 6-bit groups.  Padding at the end of
+   the data is performed using the "=" character.  Since all base64
+   input is an integral number of octets, only the following cases can
+   arise: (1) the final quantum of encoding input is an integral
+   multiple of 24 bits; here, the final unit of encoded output will be
+   an integral multiple of 4 characters with no "=" padding, (2) the
+   final quantum of encoding input is exactly 8 bits; here, the final
+   unit of encoded output will be two characters followed by two "="
+   padding characters, or (3) the final quantum of encoding input is
+   exactly 16 bits; here, the final unit of encoded output will be three
+   characters followed by one "=" padding character.
+
+   Because it is used only for padding at the end of the data, the
+   occurrence of any "=" characters may be taken as evidence that the
+   end of the data has been reached (without truncation in transit).  No
+
+
+
+Freed & Borenstein          Standards Track                    [Page 25]
+
+RFC 2045                Internet Message Bodies            November 1996
+
+
+   such assurance is possible, however, when the number of octets
+   transmitted was a multiple of three and no "=" characters are
+   present.
+
+   Any characters outside of the base64 alphabet are to be ignored in
+   base64-encoded data.
+
+   Care must be taken to use the proper octets for line breaks if base64
+   encoding is applied directly to text material that has not been
+   converted to canonical form.  In particular, text line breaks must be
+   converted into CRLF sequences prior to base64 encoding.  The
+   important thing to note is that this may be done directly by the
+   encoder rather than in a prior canonicalization step in some
+   implementations.
+
+   NOTE: There is no need to worry about quoting potential boundary
+   delimiters within base64-encoded bodies within multipart entities
+   because no hyphen characters are used in the base64 encoding.
+
+7.  Content-ID Header Field
+
+   In constructing a high-level user agent, it may be desirable to allow
+   one body to make reference to another.  Accordingly, bodies may be
+   labelled using the "Content-ID" header field, which is syntactically
+   identical to the "Message-ID" header field:
+
+     id := "Content-ID" ":" msg-id
+
+   Like the Message-ID values, Content-ID values must be generated to be
+   world-unique.
+
+   The Content-ID value may be used for uniquely identifying MIME
+   entities in several contexts, particularly for caching data
+   referenced by the message/external-body mechanism.  Although the
+   Content-ID header is generally optional, its use is MANDATORY in
+   implementations which generate data of the optional MIME media type
+   "message/external-body".  That is, each message/external-body entity
+   must have a Content-ID field to permit caching of such data.
+
+   It is also worth noting that the Content-ID value has special
+   semantics in the case of the multipart/alternative media type.  This
+   is explained in the section of RFC 2046 dealing with
+   multipart/alternative.
+
+
+
+
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 26]
+
+RFC 2045                Internet Message Bodies            November 1996
+
+
+8.  Content-Description Header Field
+
+   The ability to associate some descriptive information with a given
+   body is often desirable.  For example, it may be useful to mark an
+   "image" body as "a picture of the Space Shuttle Endeavor."  Such text
+   may be placed in the Content-Description header field.  This header
+   field is always optional.
+
+     description := "Content-Description" ":" *text
+
+   The description is presumed to be given in the US-ASCII character
+   set, although the mechanism specified in RFC 2047 may be used for
+   non-US-ASCII Content-Description values.
+
+9.  Additional MIME Header Fields
+
+   Future documents may elect to define additional MIME header fields
+   for various purposes.  Any new header field that further describes
+   the content of a message should begin with the string "Content-" to
+   allow such fields which appear in a message header to be
+   distinguished from ordinary RFC 822 message header fields.
+
+     MIME-extension-field := <Any RFC 822 header field which
+                              begins with the string
+                              "Content-">
+
+10.  Summary
+
+   Using the MIME-Version, Content-Type, and Content-Transfer-Encoding
+   header fields, it is possible to include, in a standardized way,
+   arbitrary types of data with RFC 822 conformant mail messages.  No
+   restrictions imposed by either RFC 821 or RFC 822 are violated, and
+   care has been taken to avoid problems caused by additional
+   restrictions imposed by the characteristics of some Internet mail
+   transport mechanisms (see RFC 2049).
+
+   The next document in this set, RFC 2046, specifies the initial set of
+   media types that can be labelled and transported using these headers.
+
+11.  Security Considerations
+
+   Security issues are discussed in the second document in this set, RFC
+   2046.
+
+
+
+
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 27]
+
+RFC 2045                Internet Message Bodies            November 1996
+
+
+12.  Authors' Addresses
+
+   For more information, the authors of this document are best contacted
+   via Internet mail:
+
+   Ned Freed
+   Innosoft International, Inc.
+   1050 East Garvey Avenue South
+   West Covina, CA 91790
+   USA
+
+   Phone: +1 818 919 3600
+   Fax:   +1 818 919 3614
+   EMail: ned@innosoft.com
+
+
+   Nathaniel S. Borenstein
+   First Virtual Holdings
+   25 Washington Avenue
+   Morristown, NJ 07960
+   USA
+
+   Phone: +1 201 540 8967
+   Fax:   +1 201 993 3032
+   EMail: nsb@nsb.fv.com
+
+
+   MIME is a result of the work of the Internet Engineering Task Force
+   Working Group on RFC 822 Extensions.  The chairman of that group,
+   Greg Vaudreuil, may be reached at:
+
+   Gregory M. Vaudreuil
+   Octel Network Services
+   17080 Dallas Parkway
+   Dallas, TX 75248-1905
+   USA
+
+   EMail: Greg.Vaudreuil@Octel.Com
+
+
+
+
+
+
+
+
+
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 28]
+
+RFC 2045                Internet Message Bodies            November 1996
+
+
+Appendix A -- Collected Grammar
+
+   This appendix contains the complete BNF grammar for all the syntax
+   specified by this document.
+
+   By itself, however, this grammar is incomplete.  It refers by name to
+   several syntax rules that are defined by RFC 822.  Rather than
+   reproduce those definitions here, and risk unintentional differences
+   between the two, this document simply refers the reader to RFC 822
+   for the remaining definitions. Wherever a term is undefined, it
+   refers to the RFC 822 definition.
+
+  attribute := token
+               ; Matching of attributes
+               ; is ALWAYS case-insensitive.
+
+  composite-type := "message" / "multipart" / extension-token
+
+  content := "Content-Type" ":" type "/" subtype
+             *(";" parameter)
+             ; Matching of media type and subtype
+             ; is ALWAYS case-insensitive.
+
+  description := "Content-Description" ":" *text
+
+  discrete-type := "text" / "image" / "audio" / "video" /
+                   "application" / extension-token
+
+  encoding := "Content-Transfer-Encoding" ":" mechanism
+
+  entity-headers := [ content CRLF ]
+                    [ encoding CRLF ]
+                    [ id CRLF ]
+                    [ description CRLF ]
+                    *( MIME-extension-field CRLF )
+
+  extension-token := ietf-token / x-token
+
+  hex-octet := "=" 2(DIGIT / "A" / "B" / "C" / "D" / "E" / "F")
+               ; Octet must be used for characters > 127, =,
+               ; SPACEs or TABs at the ends of lines, and is
+               ; recommended for any character not listed in
+               ; RFC 2049 as "mail-safe".
+
+  iana-token := <A publicly-defined extension token. Tokens
+                 of this form must be registered with IANA
+                 as specified in RFC 2048.>
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 29]
+
+RFC 2045                Internet Message Bodies            November 1996
+
+
+  ietf-token := <An extension token defined by a
+                 standards-track RFC and registered
+                 with IANA.>
+
+  id := "Content-ID" ":" msg-id
+
+  mechanism := "7bit" / "8bit" / "binary" /
+               "quoted-printable" / "base64" /
+               ietf-token / x-token
+
+  MIME-extension-field := <Any RFC 822 header field which
+                           begins with the string
+                           "Content-">
+
+  MIME-message-headers := entity-headers
+                          fields
+                          version CRLF
+                          ; The ordering of the header
+                          ; fields implied by this BNF
+                          ; definition should be ignored.
+
+  MIME-part-headers := entity-headers
+                       [fields]
+                       ; Any field not beginning with
+                       ; "content-" can have no defined
+                       ; meaning and may be ignored.
+                       ; The ordering of the header
+                       ; fields implied by this BNF
+                       ; definition should be ignored.
+
+  parameter := attribute "=" value
+
+  ptext := hex-octet / safe-char
+
+  qp-line := *(qp-segment transport-padding CRLF)
+             qp-part transport-padding
+
+  qp-part := qp-section
+             ; Maximum length of 76 characters
+
+  qp-section := [*(ptext / SPACE / TAB) ptext]
+
+  qp-segment := qp-section *(SPACE / TAB) "="
+                ; Maximum length of 76 characters
+
+  quoted-printable := qp-line *(CRLF qp-line)
+
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 30]
+
+RFC 2045                Internet Message Bodies            November 1996
+
+
+  safe-char := <any octet with decimal value of 33 through
+               60 inclusive, and 62 through 126>
+               ; Characters not listed as "mail-safe" in
+               ; RFC 2049 are also not recommended.
+
+  subtype := extension-token / iana-token
+
+  token := 1*<any (US-ASCII) CHAR except SPACE, CTLs,
+              or tspecials>
+
+  transport-padding := *LWSP-char
+                       ; Composers MUST NOT generate
+                       ; non-zero length transport
+                       ; padding, but receivers MUST
+                       ; be able to handle padding
+                       ; added by message transports.
+
+  tspecials :=  "(" / ")" / "<" / ">" / "@" /
+                "," / ";" / ":" / "\" / <">
+                "/" / "[" / "]" / "?" / "="
+                ; Must be in quoted-string,
+                ; to use within parameter values
+
+  type := discrete-type / composite-type
+
+  value := token / quoted-string
+
+  version := "MIME-Version" ":" 1*DIGIT "." 1*DIGIT
+
+  x-token := <The two characters "X-" or "x-" followed, with
+              no  intervening white space, by any token>
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 31]
+
diff -uNr gmime-1.90.0/rfc/rfc2046.txt gmime/rfc/rfc2046.txt
--- gmime-1.90.0/rfc/rfc2046.txt	Thu Jan  1 01:00:00 1970
+++ gmime/rfc/rfc2046.txt	Tue Oct 24 23:01:39 2000
@@ -0,0 +1,2467 @@
+
+
+
+
+
+
+Network Working Group                                          N. Freed
+Request for Comments: 2046                                     Innosoft
+Obsoletes: 1521, 1522, 1590                               N. Borenstein
+Category: Standards Track                                 First Virtual
+                                                          November 1996
+
+
+                 Multipurpose Internet Mail Extensions
+                            (MIME) Part Two:
+                              Media Types
+
+Status of this Memo
+
+   This document specifies an Internet standards track protocol for the
+   Internet community, and requests discussion and suggestions for
+   improvements.  Please refer to the current edition of the "Internet
+   Official Protocol Standards" (STD 1) for the standardization state
+   and status of this protocol.  Distribution of this memo is unlimited.
+
+Abstract
+
+   STD 11, RFC 822 defines a message representation protocol specifying
+   considerable detail about US-ASCII message headers, but which leaves
+   the message content, or message body, as flat US-ASCII text.  This
+   set of documents, collectively called the Multipurpose Internet Mail
+   Extensions, or MIME, redefines the format of messages to allow for
+
+    (1)   textual message bodies in character sets other than
+          US-ASCII,
+
+    (2)   an extensible set of different formats for non-textual
+          message bodies,
+
+    (3)   multi-part message bodies, and
+
+    (4)   textual header information in character sets other than
+          US-ASCII.
+
+   These documents are based on earlier work documented in RFC 934, STD
+   11, and RFC 1049, but extends and revises them.  Because RFC 822 said
+   so little about message bodies, these documents are largely
+   orthogonal to (rather than a revision of) RFC 822.
+
+   The initial document in this set, RFC 2045, specifies the various
+   headers used to describe the structure of MIME messages. This second
+   document defines the general structure of the MIME media typing
+   system and defines an initial set of media types. The third document,
+   RFC 2047, describes extensions to RFC 822 to allow non-US-ASCII text
+
+
+
+Freed & Borenstein          Standards Track                     [Page 1]
+
+RFC 2046                      Media Types                  November 1996
+
+
+   data in Internet mail header fields. The fourth document, RFC 2048,
+   specifies various IANA registration procedures for MIME-related
+   facilities.  The fifth and final document, RFC 2049, describes MIME
+   conformance criteria as well as providing some illustrative examples
+   of MIME message formats, acknowledgements, and the bibliography.
+
+   These documents are revisions of RFCs 1521 and 1522, which themselves
+   were revisions of RFCs 1341 and 1342.  An appendix in RFC 2049
+   describes differences and changes from previous versions.
+
+Table of Contents
+
+   1. Introduction .........................................    3
+   2. Definition of a Top-Level Media Type .................    4
+   3. Overview Of The Initial Top-Level Media Types ........    4
+   4. Discrete Media Type Values ...........................    6
+   4.1 Text Media Type .....................................    6
+   4.1.1 Representation of Line Breaks .....................    7
+   4.1.2 Charset Parameter .................................    7
+   4.1.3 Plain Subtype .....................................   11
+   4.1.4 Unrecognized Subtypes .............................   11
+   4.2 Image Media Type ....................................   11
+   4.3 Audio Media Type ....................................   11
+   4.4 Video Media Type ....................................   12
+   4.5 Application Media Type ..............................   12
+   4.5.1 Octet-Stream Subtype ..............................   13
+   4.5.2 PostScript Subtype ................................   14
+   4.5.3 Other Application Subtypes ........................   17
+   5. Composite Media Type Values ..........................   17
+   5.1 Multipart Media Type ................................   17
+   5.1.1 Common Syntax .....................................   19
+   5.1.2 Handling Nested Messages and Multiparts ...........   24
+   5.1.3 Mixed Subtype .....................................   24
+   5.1.4 Alternative Subtype ...............................   24
+   5.1.5 Digest Subtype ....................................   26
+   5.1.6 Parallel Subtype ..................................   27
+   5.1.7 Other Multipart Subtypes ..........................   28
+   5.2 Message Media Type ..................................   28
+   5.2.1 RFC822 Subtype ....................................   28
+   5.2.2 Partial Subtype ...................................   29
+   5.2.2.1 Message Fragmentation and Reassembly ............   30
+   5.2.2.2 Fragmentation and Reassembly Example ............   31
+   5.2.3 External-Body Subtype .............................   33
+   5.2.4 Other Message Subtypes ............................   40
+   6. Experimental Media Type Values .......................   40
+   7. Summary ..............................................   41
+   8. Security Considerations ..............................   41
+   9. Authors' Addresses ...................................   42
+
+
+
+Freed & Borenstein          Standards Track                     [Page 2]
+
+RFC 2046                      Media Types                  November 1996
+
+
+   A. Collected Grammar ....................................   43
+
+1.  Introduction
+
+   The first document in this set, RFC 2045, defines a number of header
+   fields, including Content-Type. The Content-Type field is used to
+   specify the nature of the data in the body of a MIME entity, by
+   giving media type and subtype identifiers, and by providing auxiliary
+   information that may be required for certain media types.  After the
+   type and subtype names, the remainder of the header field is simply a
+   set of parameters, specified in an attribute/value notation.  The
+   ordering of parameters is not significant.
+
+   In general, the top-level media type is used to declare the general
+   type of data, while the subtype specifies a specific format for that
+   type of data.  Thus, a media type of "image/xyz" is enough to tell a
+   user agent that the data is an image, even if the user agent has no
+   knowledge of the specific image format "xyz".  Such information can
+   be used, for example, to decide whether or not to show a user the raw
+   data from an unrecognized subtype -- such an action might be
+   reasonable for unrecognized subtypes of "text", but not for
+   unrecognized subtypes of "image" or "audio".  For this reason,
+   registered subtypes of "text", "image", "audio", and "video" should
+   not contain embedded information that is really of a different type.
+   Such compound formats should be represented using the "multipart" or
+   "application" types.
+
+   Parameters are modifiers of the media subtype, and as such do not
+   fundamentally affect the nature of the content.  The set of
+   meaningful parameters depends on the media type and subtype.  Most
+   parameters are associated with a single specific subtype.  However, a
+   given top-level media type may define parameters which are applicable
+   to any subtype of that type.  Parameters may be required by their
+   defining media type or subtype or they may be optional.  MIME
+   implementations must also ignore any parameters whose names they do
+   not recognize.
+
+   MIME's Content-Type header field and media type mechanism has been
+   carefully designed to be extensible, and it is expected that the set
+   of media type/subtype pairs and their associated parameters will grow
+   significantly over time.  Several other MIME facilities, such as
+   transfer encodings and "message/external-body" access types, are
+   likely to have new values defined over time.  In order to ensure that
+   the set of such values is developed in an orderly, well-specified,
+   and public manner, MIME sets up a registration process which uses the
+   Internet Assigned Numbers Authority (IANA) as a central registry for
+   MIME's various areas of extensibility.  The registration process for
+   these areas is described in a companion document, RFC 2048.
+
+
+
+Freed & Borenstein          Standards Track                     [Page 3]
+
+RFC 2046                      Media Types                  November 1996
+
+
+   The initial seven standard top-level media type are defined and
+   described in the remainder of this document.
+
+2.  Definition of a Top-Level Media Type
+
+   The definition of a top-level media type consists of:
+
+    (1)   a name and a description of the type, including
+          criteria for whether a particular type would qualify
+          under that type,
+
+    (2)   the names and definitions of parameters, if any, which
+          are defined for all subtypes of that type (including
+          whether such parameters are required or optional),
+
+    (3)   how a user agent and/or gateway should handle unknown
+          subtypes of this type,
+
+    (4)   general considerations on gatewaying entities of this
+          top-level type, if any, and
+
+    (5)   any restrictions on content-transfer-encodings for
+          entities of this top-level type.
+
+3.  Overview Of The Initial Top-Level Media Types
+
+   The five discrete top-level media types are:
+
+    (1)   text -- textual information.  The subtype "plain" in
+          particular indicates plain text containing no
+          formatting commands or directives of any sort. Plain
+          text is intended to be displayed "as-is". No special
+          software is required to get the full meaning of the
+          text, aside from support for the indicated character
+          set. Other subtypes are to be used for enriched text in
+          forms where application software may enhance the
+          appearance of the text, but such software must not be
+          required in order to get the general idea of the
+          content.  Possible subtypes of "text" thus include any
+          word processor format that can be read without
+          resorting to software that understands the format.  In
+          particular, formats that employ embeddded binary
+          formatting information are not considered directly
+          readable. A very simple and portable subtype,
+          "richtext", was defined in RFC 1341, with a further
+          revision in RFC 1896 under the name "enriched".
+
+
+
+
+
+Freed & Borenstein          Standards Track                     [Page 4]
+
+RFC 2046                      Media Types                  November 1996
+
+
+    (2)   image -- image data.  "Image" requires a display device
+          (such as a graphical display, a graphics printer, or a
+          FAX machine) to view the information. An initial
+          subtype is defined for the widely-used image format
+          JPEG. .  subtypes are defined for two widely-used image
+          formats, jpeg and gif.
+
+    (3)   audio -- audio data.  "Audio" requires an audio output
+          device (such as a speaker or a telephone) to "display"
+          the contents.  An initial subtype "basic" is defined in
+          this document.
+
+    (4)   video -- video data.  "Video" requires the capability
+          to display moving images, typically including
+          specialized hardware and software.  An initial subtype
+          "mpeg" is defined in this document.
+
+    (5)   application -- some other kind of data, typically
+          either uninterpreted binary data or information to be
+          processed by an application.  The subtype "octet-
+          stream" is to be used in the case of uninterpreted
+          binary data, in which case the simplest recommended
+          action is to offer to write the information into a file
+          for the user.  The "PostScript" subtype is also defined
+          for the transport of PostScript material.  Other
+          expected uses for "application" include spreadsheets,
+          data for mail-based scheduling systems, and languages
+          for "active" (computational) messaging, and word
+          processing formats that are not directly readable.
+          Note that security considerations may exist for some
+          types of application data, most notably
+          "application/PostScript" and any form of active
+          messaging.  These issues are discussed later in this
+          document.
+
+   The two composite top-level media types are:
+
+    (1)   multipart -- data consisting of multiple entities of
+          independent data types.  Four subtypes are initially
+          defined, including the basic "mixed" subtype specifying
+          a generic mixed set of parts, "alternative" for
+          representing the same data in multiple formats,
+          "parallel" for parts intended to be viewed
+          simultaneously, and "digest" for multipart entities in
+          which each part has a default type of "message/rfc822".
+
+
+
+
+
+
+Freed & Borenstein          Standards Track                     [Page 5]
+
+RFC 2046                      Media Types                  November 1996
+
+
+    (2)   message -- an encapsulated message.  A body of media
+          type "message" is itself all or a portion of some kind
+          of message object.  Such objects may or may not in turn
+          contain other entities.  The "rfc822" subtype is used
+          when the encapsulated content is itself an RFC 822
+          message.  The "partial" subtype is defined for partial
+          RFC 822 messages, to permit the fragmented transmission
+          of bodies that are thought to be too large to be passed
+          through transport facilities in one piece.  Another
+          subtype, "external-body", is defined for specifying
+          large bodies by reference to an external data source.
+
+   It should be noted that the list of media type values given here may
+   be augmented in time, via the mechanisms described above, and that
+   the set of subtypes is expected to grow substantially.
+
+4.  Discrete Media Type Values
+
+   Five of the seven initial media type values refer to discrete bodies.
+   The content of these types must be handled by non-MIME mechanisms;
+   they are opaque to MIME processors.
+
+4.1.  Text Media Type
+
+   The "text" media type is intended for sending material which is
+   principally textual in form.  A "charset" parameter may be used to
+   indicate the character set of the body text for "text" subtypes,
+   notably including the subtype "text/plain", which is a generic
+   subtype for plain text.  Plain text does not provide for or allow
+   formatting commands, font attribute specifications, processing
+   instructions, interpretation directives, or content markup.  Plain
+   text is seen simply as a linear sequence of characters, possibly
+   interrupted by line breaks or page breaks.  Plain text may allow the
+   stacking of several characters in the same position in the text.
+   Plain text in scripts like Arabic and Hebrew may also include
+   facilitites that allow the arbitrary mixing of text segments with
+   opposite writing directions.
+
+   Beyond plain text, there are many formats for representing what might
+   be known as "rich text".  An interesting characteristic of many such
+   representations is that they are to some extent readable even without
+   the software that interprets them.  It is useful, then, to
+   distinguish them, at the highest level, from such unreadable data as
+   images, audio, or text represented in an unreadable form. In the
+   absence of appropriate interpretation software, it is reasonable to
+   show subtypes of "text" to the user, while it is not reasonable to do
+   so with most nontextual data. Such formatted textual data should be
+   represented using subtypes of "text".
+
+
+
+Freed & Borenstein          Standards Track                     [Page 6]
+
+RFC 2046                      Media Types                  November 1996
+
+
+4.1.1.  Representation of Line Breaks
+
+   The canonical form of any MIME "text" subtype MUST always represent a
+   line break as a CRLF sequence.  Similarly, any occurrence of CRLF in
+   MIME "text" MUST represent a line break.  Use of CR and LF outside of
+   line break sequences is also forbidden.
+
+   This rule applies regardless of format or character set or sets
+   involved.
+
+   NOTE: The proper interpretation of line breaks when a body is
+   displayed depends on the media type. In particular, while it is
+   appropriate to treat a line break as a transition to a new line when
+   displaying a "text/plain" body, this treatment is actually incorrect
+   for other subtypes of "text" like "text/enriched" [RFC-1896].
+   Similarly, whether or not line breaks should be added during display
+   operations is also a function of the media type. It should not be
+   necessary to add any line breaks to display "text/plain" correctly,
+   whereas proper display of "text/enriched" requires the appropriate
+   addition of line breaks.
+
+   NOTE: Some protocols defines a maximum line length.  E.g. SMTP [RFC-
+   821] allows a maximum of 998 octets before the next CRLF sequence.
+   To be transported by such protocols, data which includes too long
+   segments without CRLF sequences must be encoded with a suitable
+   content-transfer-encoding.
+
+4.1.2.  Charset Parameter
+
+   A critical parameter that may be specified in the Content-Type field
+   for "text/plain" data is the character set.  This is specified with a
+   "charset" parameter, as in:
+
+     Content-type: text/plain; charset=iso-8859-1
+
+   Unlike some other parameter values, the values of the charset
+   parameter are NOT case sensitive.  The default character set, which
+   must be assumed in the absence of a charset parameter, is US-ASCII.
+
+   The specification for any future subtypes of "text" must specify
+   whether or not they will also utilize a "charset" parameter, and may
+   possibly restrict its values as well.  For other subtypes of "text"
+   than "text/plain", the semantics of the "charset" parameter should be
+   defined to be identical to those specified here for "text/plain",
+   i.e., the body consists entirely of characters in the given charset.
+   In particular, definers of future "text" subtypes should pay close
+   attention to the implications of multioctet character sets for their
+   subtype definitions.
+
+
+
+Freed & Borenstein          Standards Track                     [Page 7]
+
+RFC 2046                      Media Types                  November 1996
+
+
+   The charset parameter for subtypes of "text" gives a name of a
+   character set, as "character set" is defined in RFC 2045.  The rules
+   regarding line breaks detailed in the previous section must also be
+   observed -- a character set whose definition does not conform to
+   these rules cannot be used in a MIME "text" subtype.
+
+   An initial list of predefined character set names can be found at the
+   end of this section.  Additional character sets may be registered
+   with IANA.
+
+   Other media types than subtypes of "text" might choose to employ the
+   charset parameter as defined here, but with the CRLF/line break
+   restriction removed.  Therefore, all character sets that conform to
+   the general definition of "character set" in RFC 2045 can be
+   registered for MIME use.
+
+   Note that if the specified character set includes 8-bit characters
+   and such characters are used in the body, a Content-Transfer-Encoding
+   header field and a corresponding encoding on the data are required in
+   order to transmit the body via some mail transfer protocols, such as
+   SMTP [RFC-821].
+
+   The default character set, US-ASCII, has been the subject of some
+   confusion and ambiguity in the past.  Not only were there some
+   ambiguities in the definition, there have been wide variations in
+   practice.  In order to eliminate such ambiguity and variations in the
+   future, it is strongly recommended that new user agents explicitly
+   specify a character set as a media type parameter in the Content-Type
+   header field. "US-ASCII" does not indicate an arbitrary 7-bit
+   character set, but specifies that all octets in the body must be
+   interpreted as characters according to the US-ASCII character set.
+   National and application-oriented versions of ISO 646 [ISO-646] are
+   usually NOT identical to US-ASCII, and in that case their use in
+   Internet mail is explicitly discouraged.  The omission of the ISO 646
+   character set from this document is deliberate in this regard.  The
+   character set name of "US-ASCII" explicitly refers to the character
+   set defined in ANSI X3.4-1986 [US- ASCII].  The new international
+   reference version (IRV) of the 1991 edition of ISO 646 is identical
+   to US-ASCII.  The character set name "ASCII" is reserved and must not
+   be used for any purpose.
+
+   NOTE: RFC 821 explicitly specifies "ASCII", and references an earlier
+   version of the American Standard.  Insofar as one of the purposes of
+   specifying a media type and character set is to permit the receiver
+   to unambiguously determine how the sender intended the coded message
+   to be interpreted, assuming anything other than "strict ASCII" as the
+   default would risk unintentional and incompatible changes to the
+   semantics of messages now being transmitted.  This also implies that
+
+
+
+Freed & Borenstein          Standards Track                     [Page 8]
+
+RFC 2046                      Media Types                  November 1996
+
+
+   messages containing characters coded according to other versions of
+   ISO 646 than US-ASCII and the 1991 IRV, or using code-switching
+   procedures (e.g., those of ISO 2022), as well as 8bit or multiple
+   octet character encodings MUST use an appropriate character set
+   specification to be consistent with MIME.
+
+   The complete US-ASCII character set is listed in ANSI X3.4- 1986.
+   Note that the control characters including DEL (0-31, 127) have no
+   defined meaning in apart from the combination CRLF (US-ASCII values
+   13 and 10) indicating a new line.  Two of the characters have de
+   facto meanings in wide use: FF (12) often means "start subsequent
+   text on the beginning of a new page"; and TAB or HT (9) often (though
+   not always) means "move the cursor to the next available column after
+   the current position where the column number is a multiple of 8
+   (counting the first column as column 0)."  Aside from these
+   conventions, any use of the control characters or DEL in a body must
+   either occur
+
+    (1)   because a subtype of text other than "plain"
+          specifically assigns some additional meaning, or
+
+    (2)   within the context of a private agreement between the
+          sender and recipient. Such private agreements are
+          discouraged and should be replaced by the other
+          capabilities of this document.
+
+   NOTE: An enormous proliferation of character sets exist beyond US-
+   ASCII.  A large number of partially or totally overlapping character
+   sets is NOT a good thing.  A SINGLE character set that can be used
+   universally for representing all of the world's languages in Internet
+   mail would be preferrable.  Unfortunately, existing practice in
+   several communities seems to point to the continued use of multiple
+   character sets in the near future.  A small number of standard
+   character sets are, therefore, defined for Internet use in this
+   document.
+
+   The defined charset values are:
+
+    (1)   US-ASCII -- as defined in ANSI X3.4-1986 [US-ASCII].
+
+    (2)   ISO-8859-X -- where "X" is to be replaced, as
+          necessary, for the parts of ISO-8859 [ISO-8859].  Note
+          that the ISO 646 character sets have deliberately been
+          omitted in favor of their 8859 replacements, which are
+          the designated character sets for Internet mail.  As of
+          the publication of this document, the legitimate values
+          for "X" are the digits 1 through 10.
+
+
+
+
+Freed & Borenstein          Standards Track                     [Page 9]
+
+RFC 2046                      Media Types                  November 1996
+
+
+   Characters in the range 128-159 has no assigned meaning in ISO-8859-
+   X.  Characters with values below 128 in ISO-8859-X have the same
+   assigned meaning as they do in US-ASCII.
+
+   Part 6 of ISO 8859 (Latin/Arabic alphabet) and part 8 (Latin/Hebrew
+   alphabet) includes both characters for which the normal writing
+   direction is right to left and characters for which it is left to
+   right, but do not define a canonical ordering method for representing
+   bi-directional text.  The charset values "ISO-8859-6" and "ISO-8859-
+   8", however, specify that the visual method is used [RFC-1556].
+
+   All of these character sets are used as pure 7bit or 8bit sets
+   without any shift or escape functions.  The meaning of shift and
+   escape sequences in these character sets is not defined.
+
+   The character sets specified above are the ones that were relatively
+   uncontroversial during the drafting of MIME.  This document does not
+   endorse the use of any particular character set other than US-ASCII,
+   and recognizes that the future evolution of world character sets
+   remains unclear.
+
+   Note that the character set used, if anything other than US- ASCII,
+   must always be explicitly specified in the Content-Type field.
+
+   No character set name other than those defined above may be used in
+   Internet mail without the publication of a formal specification and
+   its registration with IANA, or by private agreement, in which case
+   the character set name must begin with "X-".
+
+   Implementors are discouraged from defining new character sets unless
+   absolutely necessary.
+
+   The "charset" parameter has been defined primarily for the purpose of
+   textual data, and is described in this section for that reason.
+   However, it is conceivable that non-textual data might also wish to
+   specify a charset value for some purpose, in which case the same
+   syntax and values should be used.
+
+   In general, composition software should always use the "lowest common
+   denominator" character set possible.  For example, if a body contains
+   only US-ASCII characters, it SHOULD be marked as being in the US-
+   ASCII character set, not ISO-8859-1, which, like all the ISO-8859
+   family of character sets, is a superset of US-ASCII.  More generally,
+   if a widely-used character set is a subset of another character set,
+   and a body contains only characters in the widely-used subset, it
+   should be labelled as being in that subset.  This will increase the
+   chances that the recipient will be able to view the resulting entity
+   correctly.
+
+
+
+Freed & Borenstein          Standards Track                    [Page 10]
+
+RFC 2046                      Media Types                  November 1996
+
+
+4.1.3.  Plain Subtype
+
+   The simplest and most important subtype of "text" is "plain".  This
+   indicates plain text that does not contain any formatting commands or
+   directives. Plain text is intended to be displayed "as-is", that is,
+   no interpretation of embedded formatting commands, font attribute
+   specifications, processing instructions, interpretation directives,
+   or content markup should be necessary for proper display.  The
+   default media type of "text/plain; charset=us-ascii" for Internet
+   mail describes existing Internet practice.  That is, it is the type
+   of body defined by RFC 822.
+
+   No other "text" subtype is defined by this document.
+
+4.1.4.  Unrecognized Subtypes
+
+   Unrecognized subtypes of "text" should be treated as subtype "plain"
+   as long as the MIME implementation knows how to handle the charset.
+   Unrecognized subtypes which also specify an unrecognized charset
+   should be treated as "application/octet- stream".
+
+4.2.  Image Media Type
+
+   A media type of "image" indicates that the body contains an image.
+   The subtype names the specific image format.  These names are not
+   case sensitive. An initial subtype is "jpeg" for the JPEG format
+   using JFIF encoding [JPEG].
+
+   The list of "image" subtypes given here is neither exclusive nor
+   exhaustive, and is expected to grow as more types are registered with
+   IANA, as described in RFC 2048.
+
+   Unrecognized subtypes of "image" should at a miniumum be treated as
+   "application/octet-stream".  Implementations may optionally elect to
+   pass subtypes of "image" that they do not specifically recognize to a
+   secure and robust general-purpose image viewing application, if such
+   an application is available.
+
+   NOTE: Using of a generic-purpose image viewing application this way
+   inherits the security problems of the most dangerous type supported
+   by the application.
+
+4.3.  Audio Media Type
+
+   A media type of "audio" indicates that the body contains audio data.
+   Although there is not yet a consensus on an "ideal" audio format for
+   use with computers, there is a pressing need for a format capable of
+   providing interoperable behavior.
+
+
+
+Freed & Borenstein          Standards Track                    [Page 11]
+
+RFC 2046                      Media Types                  November 1996
+
+
+   The initial subtype of "basic" is specified to meet this requirement
+   by providing an absolutely minimal lowest common denominator audio
+   format.  It is expected that richer formats for higher quality and/or
+   lower bandwidth audio will be defined by a later document.
+
+   The content of the "audio/basic" subtype is single channel audio
+   encoded using 8bit ISDN mu-law [PCM] at a sample rate of 8000 Hz.
+
+   Unrecognized subtypes of "audio" should at a miniumum be treated as
+   "application/octet-stream".  Implementations may optionally elect to
+   pass subtypes of "audio" that they do not specifically recognize to a
+   robust general-purpose audio playing application, if such an
+   application is available.
+
+4.4.  Video Media Type
+
+   A media type of "video" indicates that the body contains a time-
+   varying-picture image, possibly with color and coordinated sound.
+   The term 'video' is used in its most generic sense, rather than with
+   reference to any particular technology or format, and is not meant to
+   preclude subtypes such as animated drawings encoded compactly.  The
+   subtype "mpeg" refers to video coded according to the MPEG standard
+   [MPEG].
+
+   Note that although in general this document strongly discourages the
+   mixing of multiple media in a single body, it is recognized that many
+   so-called video formats include a representation for synchronized
+   audio, and this is explicitly permitted for subtypes of "video".
+
+   Unrecognized subtypes of "video" should at a minumum be treated as
+   "application/octet-stream".  Implementations may optionally elect to
+   pass subtypes of "video" that they do not specifically recognize to a
+   robust general-purpose video display application, if such an
+   application is available.
+
+4.5.  Application Media Type
+
+   The "application" media type is to be used for discrete data which do
+   not fit in any of the other categories, and particularly for data to
+   be processed by some type of application program.  This is
+   information which must be processed by an application before it is
+   viewable or usable by a user.  Expected uses for the "application"
+   media type include file transfer, spreadsheets, data for mail-based
+   scheduling systems, and languages for "active" (computational)
+   material.  (The latter, in particular, can pose security problems
+   which must be understood by implementors, and are considered in
+   detail in the discussion of the "application/PostScript" media type.)
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 12]
+
+RFC 2046                      Media Types                  November 1996
+
+
+   For example, a meeting scheduler might define a standard
+   representation for information about proposed meeting dates.  An
+   intelligent user agent would use this information to conduct a dialog
+   with the user, and might then send additional material based on that
+   dialog.  More generally, there have been several "active" messaging
+   languages developed in which programs in a suitably specialized
+   language are transported to a remote location and automatically run
+   in the recipient's environment.
+
+   Such applications may be defined as subtypes of the "application"
+   media type. This document defines two subtypes:
+
+   octet-stream, and PostScript.
+
+   The subtype of "application" will often be either the name or include
+   part of the name of the application for which the data are intended.
+   This does not mean, however, that any application program name may be
+   used freely as a subtype of "application".
+
+4.5.1.  Octet-Stream Subtype
+
+   The "octet-stream" subtype is used to indicate that a body contains
+   arbitrary binary data.  The set of currently defined parameters is:
+
+    (1)   TYPE -- the general type or category of binary data.
+          This is intended as information for the human recipient
+          rather than for any automatic processing.
+
+    (2)   PADDING -- the number of bits of padding that were
+          appended to the bit-stream comprising the actual
+          contents to produce the enclosed 8bit byte-oriented
+          data.  This is useful for enclosing a bit-stream in a
+          body when the total number of bits is not a multiple of
+          8.
+
+   Both of these parameters are optional.
+
+   An additional parameter, "CONVERSIONS", was defined in RFC 1341 but
+   has since been removed.  RFC 1341 also defined the use of a "NAME"
+   parameter which gave a suggested file name to be used if the data
+   were to be written to a file.  This has been deprecated in
+   anticipation of a separate Content-Disposition header field, to be
+   defined in a subsequent RFC.
+
+   The recommended action for an implementation that receives an
+   "application/octet-stream" entity is to simply offer to put the data
+   in a file, with any Content-Transfer-Encoding undone, or perhaps to
+   use it as input to a user-specified process.
+
+
+
+Freed & Borenstein          Standards Track                    [Page 13]
+
+RFC 2046                      Media Types                  November 1996
+
+
+   To reduce the danger of transmitting rogue programs, it is strongly
+   recommended that implementations NOT implement a path-search
+   mechanism whereby an arbitrary program named in the Content-Type
+   parameter (e.g., an "interpreter=" parameter) is found and executed
+   using the message body as input.
+
+4.5.2.  PostScript Subtype
+
+   A media type of "application/postscript" indicates a PostScript
+   program.  Currently two variants of the PostScript language are
+   allowed; the original level 1 variant is described in [POSTSCRIPT]
+   and the more recent level 2 variant is described in [POSTSCRIPT2].
+
+   PostScript is a registered trademark of Adobe Systems, Inc.  Use of
+   the MIME media type "application/postscript" implies recognition of
+   that trademark and all the rights it entails.
+
+   The PostScript language definition provides facilities for internal
+   labelling of the specific language features a given program uses.
+   This labelling, called the PostScript document structuring
+   conventions, or DSC, is very general and provides substantially more
+   information than just the language level.  The use of document
+   structuring conventions, while not required, is strongly recommended
+   as an aid to interoperability.  Documents which lack proper
+   structuring conventions cannot be tested to see whether or not they
+   will work in a given environment.  As such, some systems may assume
+   the worst and refuse to process unstructured documents.
+
+   The execution of general-purpose PostScript interpreters entails
+   serious security risks, and implementors are discouraged from simply
+   sending PostScript bodies to "off- the-shelf" interpreters.  While it
+   is usually safe to send PostScript to a printer, where the potential
+   for harm is greatly constrained by typical printer environments,
+   implementors should consider all of the following before they add
+   interactive display of PostScript bodies to their MIME readers.
+
+   The remainder of this section outlines some, though probably not all,
+   of the possible problems with the transport of PostScript entities.
+
+    (1)   Dangerous operations in the PostScript language
+          include, but may not be limited to, the PostScript
+          operators "deletefile", "renamefile", "filenameforall",
+          and "file".  "File" is only dangerous when applied to
+          something other than standard input or output.
+          Implementations may also define additional nonstandard
+          file operators; these may also pose a threat to
+          security. "Filenameforall", the wildcard file search
+          operator, may appear at first glance to be harmless.
+
+
+
+Freed & Borenstein          Standards Track                    [Page 14]
+
+RFC 2046                      Media Types                  November 1996
+
+
+          Note, however, that this operator has the potential to
+          reveal information about what files the recipient has
+          access to, and this information may itself be
+          sensitive.  Message senders should avoid the use of
+          potentially dangerous file operators, since these
+          operators are quite likely to be unavailable in secure
+          PostScript implementations.  Message receiving and
+          displaying software should either completely disable
+          all potentially dangerous file operators or take
+          special care not to delegate any special authority to
+          their operation.  These operators should be viewed as
+          being done by an outside agency when interpreting
+          PostScript documents.  Such disabling and/or checking
+          should be done completely outside of the reach of the
+          PostScript language itself; care should be taken to
+          insure that no method exists for re-enabling full-
+          function versions of these operators.
+
+    (2)   The PostScript language provides facilities for exiting
+          the normal interpreter, or server, loop.  Changes made
+          in this "outer" environment are customarily retained
+          across documents, and may in some cases be retained
+          semipermanently in nonvolatile memory.  The operators
+          associated with exiting the interpreter loop have the
+          potential to interfere with subsequent document
+          processing.  As such, their unrestrained use
+          constitutes a threat of service denial.  PostScript
+          operators that exit the interpreter loop include, but
+          may not be limited to, the exitserver and startjob
+          operators.  Message sending software should not
+          generate PostScript that depends on exiting the
+          interpreter loop to operate, since the ability to exit
+          will probably be unavailable in secure PostScript
+          implementations.  Message receiving and displaying
+          software should completely disable the ability to make
+          retained changes to the PostScript environment by
+          eliminating or disabling the "startjob" and
+          "exitserver" operations.  If these operations cannot be
+          eliminated or completely disabled the password
+          associated with them should at least be set to a hard-
+          to-guess value.
+
+    (3)   PostScript provides operators for setting system-wide
+          and device-specific parameters.  These parameter
+          settings may be retained across jobs and may
+          potentially pose a threat to the correct operation of
+          the interpreter.  The PostScript operators that set
+          system and device parameters include, but may not be
+
+
+
+Freed & Borenstein          Standards Track                    [Page 15]
+
+RFC 2046                      Media Types                  November 1996
+
+
+          limited to, the "setsystemparams" and "setdevparams"
+          operators.  Message sending software should not
+          generate PostScript that depends on the setting of
+          system or device parameters to operate correctly.  The
+          ability to set these parameters will probably be
+          unavailable in secure PostScript implementations.
+          Message receiving and displaying software should
+          disable the ability to change system and device
+          parameters.  If these operators cannot be completely
+          disabled the password associated with them should at
+          least be set to a hard-to-guess value.
+
+    (4)   Some PostScript implementations provide nonstandard
+          facilities for the direct loading and execution of
+          machine code.  Such facilities are quite obviously open
+          to substantial abuse.  Message sending software should
+          not make use of such features.  Besides being totally
+          hardware-specific, they are also likely to be
+          unavailable in secure implementations of PostScript.
+          Message receiving and displaying software should not
+          allow such operators to be used if they exist.
+
+    (5)   PostScript is an extensible language, and many, if not
+          most, implementations of it provide a number of their
+          own extensions.  This document does not deal with such
+          extensions explicitly since they constitute an unknown
+          factor.  Message sending software should not make use
+          of nonstandard extensions; they are likely to be
+          missing from some implementations.  Message receiving
+          and displaying software should make sure that any
+          nonstandard PostScript operators are secure and don't
+          present any kind of threat.
+
+    (6)   It is possible to write PostScript that consumes huge
+          amounts of various system resources.  It is also
+          possible to write PostScript programs that loop
+          indefinitely.  Both types of programs have the
+          potential to cause damage if sent to unsuspecting
+          recipients.  Message-sending software should avoid the
+          construction and dissemination of such programs, which
+          is antisocial.  Message receiving and displaying
+          software should provide appropriate mechanisms to abort
+          processing after a reasonable amount of time has
+          elapsed. In addition, PostScript interpreters should be
+          limited to the consumption of only a reasonable amount
+          of any given system resource.
+
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 16]
+
+RFC 2046                      Media Types                  November 1996
+
+
+    (7)   It is possible to include raw binary information inside
+          PostScript in various forms.  This is not recommended
+          for use in Internet mail, both because it is not
+          supported by all PostScript interpreters and because it
+          significantly complicates the use of a MIME Content-
+          Transfer-Encoding.  (Without such binary, PostScript
+          may typically be viewed as line-oriented data.  The
+          treatment of CRLF sequences becomes extremely
+          problematic if binary and line-oriented data are mixed
+          in a single Postscript data stream.)
+
+    (8)   Finally, bugs may exist in some PostScript interpreters
+          which could possibly be exploited to gain unauthorized
+          access to a recipient's system.  Apart from noting this
+          possibility, there is no specific action to take to
+          prevent this, apart from the timely correction of such
+          bugs if any are found.
+
+4.5.3.  Other Application Subtypes
+
+   It is expected that many other subtypes of "application" will be
+   defined in the future.  MIME implementations must at a minimum treat
+   any unrecognized subtypes as being equivalent to "application/octet-
+   stream".
+
+5.  Composite Media Type Values
+
+   The remaining two of the seven initial Content-Type values refer to
+   composite entities.  Composite entities are handled using MIME
+   mechanisms -- a MIME processor typically handles the body directly.
+
+5.1.  Multipart Media Type
+
+   In the case of multipart entities, in which one or more different
+   sets of data are combined in a single body, a "multipart" media type
+   field must appear in the entity's header.  The body must then contain
+   one or more body parts, each preceded by a boundary delimiter line,
+   and the last one followed by a closing boundary delimiter line.
+   After its boundary delimiter line, each body part then consists of a
+   header area, a blank line, and a body area.  Thus a body part is
+   similar to an RFC 822 message in syntax, but different in meaning.
+
+   A body part is an entity and hence is NOT to be interpreted as
+   actually being an RFC 822 message.  To begin with, NO header fields
+   are actually required in body parts.  A body part that starts with a
+   blank line, therefore, is allowed and is a body part for which all
+   default values are to be assumed.  In such a case, the absence of a
+   Content-Type header usually indicates that the corresponding body has
+
+
+
+Freed & Borenstein          Standards Track                    [Page 17]
+
+RFC 2046                      Media Types                  November 1996
+
+
+   a content-type of "text/plain; charset=US-ASCII".
+
+   The only header fields that have defined meaning for body parts are
+   those the names of which begin with "Content-".  All other header
+   fields may be ignored in body parts.  Although they should generally
+   be retained if at all possible, they may be discarded by gateways if
+   necessary.  Such other fields are permitted to appear in body parts
+   but must not be depended on.  "X-" fields may be created for
+   experimental or private purposes, with the recognition that the
+   information they contain may be lost at some gateways.
+
+   NOTE:  The distinction between an RFC 822 message and a body part is
+   subtle, but important.  A gateway between Internet and X.400 mail,
+   for example, must be able to tell the difference between a body part
+   that contains an image and a body part that contains an encapsulated
+   message, the body of which is a JPEG image.  In order to represent
+   the latter, the body part must have "Content-Type: message/rfc822",
+   and its body (after the blank line) must be the encapsulated message,
+   with its own "Content-Type: image/jpeg" header field.  The use of
+   similar syntax facilitates the conversion of messages to body parts,
+   and vice versa, but the distinction between the two must be
+   understood by implementors.  (For the special case in which parts
+   actually are messages, a "digest" subtype is also defined.)
+
+   As stated previously, each body part is preceded by a boundary
+   delimiter line that contains the boundary delimiter.  The boundary
+   delimiter MUST NOT appear inside any of the encapsulated parts, on a
+   line by itself or as the prefix of any line.  This implies that it is
+   crucial that the composing agent be able to choose and specify a
+   unique boundary parameter value that does not contain the boundary
+   parameter value of an enclosing multipart as a prefix.
+
+   All present and future subtypes of the "multipart" type must use an
+   identical syntax.  Subtypes may differ in their semantics, and may
+   impose additional restrictions on syntax, but must conform to the
+   required syntax for the "multipart" type.  This requirement ensures
+   that all conformant user agents will at least be able to recognize
+   and separate the parts of any multipart entity, even those of an
+   unrecognized subtype.
+
+   As stated in the definition of the Content-Transfer-Encoding field
+   [RFC 2045], no encoding other than "7bit", "8bit", or "binary" is
+   permitted for entities of type "multipart".  The "multipart" boundary
+   delimiters and header fields are always represented as 7bit US-ASCII
+   in any case (though the header fields may encode non-US-ASCII header
+   text as per RFC 2047) and data within the body parts can be encoded
+   on a part-by-part basis, with Content-Transfer-Encoding fields for
+   each appropriate body part.
+
+
+
+Freed & Borenstein          Standards Track                    [Page 18]
+
+RFC 2046                      Media Types                  November 1996
+
+
+5.1.1.  Common Syntax
+
+   This section defines a common syntax for subtypes of "multipart".
+   All subtypes of "multipart" must use this syntax.  A simple example
+   of a multipart message also appears in this section.  An example of a
+   more complex multipart message is given in RFC 2049.
+
+   The Content-Type field for multipart entities requires one parameter,
+   "boundary". The boundary delimiter line is then defined as a line
+   consisting entirely of two hyphen characters ("-", decimal value 45)
+   followed by the boundary parameter value from the Content-Type header
+   field, optional linear whitespace, and a terminating CRLF.
+
+   NOTE:  The hyphens are for rough compatibility with the earlier RFC
+   934 method of message encapsulation, and for ease of searching for
+   the boundaries in some implementations.  However, it should be noted
+   that multipart messages are NOT completely compatible with RFC 934
+   encapsulations; in particular, they do not obey RFC 934 quoting
+   conventions for embedded lines that begin with hyphens.  This
+   mechanism was chosen over the RFC 934 mechanism because the latter
+   causes lines to grow with each level of quoting.  The combination of
+   this growth with the fact that SMTP implementations sometimes wrap
+   long lines made the RFC 934 mechanism unsuitable for use in the event
+   that deeply-nested multipart structuring is ever desired.
+
+   WARNING TO IMPLEMENTORS:  The grammar for parameters on the Content-
+   type field is such that it is often necessary to enclose the boundary
+   parameter values in quotes on the Content-type line.  This is not
+   always necessary, but never hurts. Implementors should be sure to
+   study the grammar carefully in order to avoid producing invalid
+   Content-type fields.  Thus, a typical "multipart" Content-Type header
+   field might look like this:
+
+     Content-Type: multipart/mixed; boundary=gc0p4Jq0M2Yt08j34c0p
+
+   But the following is not valid:
+
+     Content-Type: multipart/mixed; boundary=gc0pJq0M:08jU534c0p
+
+   (because of the colon) and must instead be represented as
+
+     Content-Type: multipart/mixed; boundary="gc0pJq0M:08jU534c0p"
+
+   This Content-Type value indicates that the content consists of one or
+   more parts, each with a structure that is syntactically identical to
+   an RFC 822 message, except that the header area is allowed to be
+   completely empty, and that the parts are each preceded by the line
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 19]
+
+RFC 2046                      Media Types                  November 1996
+
+
+     --gc0pJq0M:08jU534c0p
+
+   The boundary delimiter MUST occur at the beginning of a line, i.e.,
+   following a CRLF, and the initial CRLF is considered to be attached
+   to the boundary delimiter line rather than part of the preceding
+   part.  The boundary may be followed by zero or more characters of
+   linear whitespace. It is then terminated by either another CRLF and
+   the header fields for the next part, or by two CRLFs, in which case
+   there are no header fields for the next part.  If no Content-Type
+   field is present it is assumed to be "message/rfc822" in a
+   "multipart/digest" and "text/plain" otherwise.
+
+   NOTE:  The CRLF preceding the boundary delimiter line is conceptually
+   attached to the boundary so that it is possible to have a part that
+   does not end with a CRLF (line  break).  Body parts that must be
+   considered to end with line breaks, therefore, must have two CRLFs
+   preceding the boundary delimiter line, the first of which is part of
+   the preceding body part, and the second of which is part of the
+   encapsulation boundary.
+
+   Boundary delimiters must not appear within the encapsulated material,
+   and must be no longer than 70 characters, not counting the two
+   leading hyphens.
+
+   The boundary delimiter line following the last body part is a
+   distinguished delimiter that indicates that no further body parts
+   will follow.  Such a delimiter line is identical to the previous
+   delimiter lines, with the addition of two more hyphens after the
+   boundary parameter value.
+
+     --gc0pJq0M:08jU534c0p--
+
+   NOTE TO IMPLEMENTORS:  Boundary string comparisons must compare the
+   boundary value with the beginning of each candidate line.  An exact
+   match of the entire candidate line is not required; it is sufficient
+   that the boundary appear in its entirety following the CRLF.
+
+   There appears to be room for additional information prior to the
+   first boundary delimiter line and following the final boundary
+   delimiter line.  These areas should generally be left blank, and
+   implementations must ignore anything that appears before the first
+   boundary delimiter line or after the last one.
+
+   NOTE:  These "preamble" and "epilogue" areas are generally not used
+   because of the lack of proper typing of these parts and the lack of
+   clear semantics for handling these areas at gateways, particularly
+   X.400 gateways.  However, rather than leaving the preamble area
+   blank, many MIME implementations have found this to be a convenient
+
+
+
+Freed & Borenstein          Standards Track                    [Page 20]
+
+RFC 2046                      Media Types                  November 1996
+
+
+   place to insert an explanatory note for recipients who read the
+   message with pre-MIME software, since such notes will be ignored by
+   MIME-compliant software.
+
+   NOTE:  Because boundary delimiters must not appear in the body parts
+   being encapsulated, a user agent must exercise care to choose a
+   unique boundary parameter value.  The boundary parameter value in the
+   example above could have been the result of an algorithm designed to
+   produce boundary delimiters with a very low probability of already
+   existing in the data to be encapsulated without having to prescan the
+   data.  Alternate algorithms might result in more "readable" boundary
+   delimiters for a recipient with an old user agent, but would require
+   more attention to the possibility that the boundary delimiter might
+   appear at the beginning of some line in the encapsulated part.  The
+   simplest boundary delimiter line possible is something like "---",
+   with a closing boundary delimiter line of "-----".
+
+   As a very simple example, the following multipart message has two
+   parts, both of them plain text, one of them explicitly typed and one
+   of them implicitly typed:
+
+     From: Nathaniel Borenstein <nsb@bellcore.com>
+     To: Ned Freed <ned@innosoft.com>
+     Date: Sun, 21 Mar 1993 23:56:48 -0800 (PST)
+     Subject: Sample message
+     MIME-Version: 1.0
+     Content-type: multipart/mixed; boundary="simple boundary"
+
+     This is the preamble.  It is to be ignored, though it
+     is a handy place for composition agents to include an
+     explanatory note to non-MIME conformant readers.
+
+     --simple boundary
+
+     This is implicitly typed plain US-ASCII text.
+     It does NOT end with a linebreak.
+     --simple boundary
+     Content-type: text/plain; charset=us-ascii
+
+     This is explicitly typed plain US-ASCII text.
+     It DOES end with a linebreak.
+
+     --simple boundary--
+
+     This is the epilogue.  It is also to be ignored.
+
+
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 21]
+
+RFC 2046                      Media Types                  November 1996
+
+
+   The use of a media type of "multipart" in a body part within another
+   "multipart" entity is explicitly allowed.  In such cases, for obvious
+   reasons, care must be taken to ensure that each nested "multipart"
+   entity uses a different boundary delimiter.  See RFC 2049 for an
+   example of nested "multipart" entities.
+
+   The use of the "multipart" media type with only a single body part
+   may be useful in certain contexts, and is explicitly permitted.
+
+   NOTE: Experience has shown that a "multipart" media type with a
+   single body part is useful for sending non-text media types.  It has
+   the advantage of providing the preamble as a place to include
+   decoding instructions.  In addition, a number of SMTP gateways move
+   or remove the MIME headers, and a clever MIME decoder can take a good
+   guess at multipart boundaries even in the absence of the Content-Type
+   header and thereby successfully decode the message.
+
+   The only mandatory global parameter for the "multipart" media type is
+   the boundary parameter, which consists of 1 to 70 characters from a
+   set of characters known to be very robust through mail gateways, and
+   NOT ending with white space. (If a boundary delimiter line appears to
+   end with white space, the white space must be presumed to have been
+   added by a gateway, and must be deleted.)  It is formally specified
+   by the following BNF:
+
+     boundary := 0*69<bchars> bcharsnospace
+
+     bchars := bcharsnospace / " "
+
+     bcharsnospace := DIGIT / ALPHA / "'" / "(" / ")" /
+                      "+" / "_" / "," / "-" / "." /
+                      "/" / ":" / "=" / "?"
+
+   Overall, the body of a "multipart" entity may be specified as
+   follows:
+
+     dash-boundary := "--" boundary
+                      ; boundary taken from the value of
+                      ; boundary parameter of the
+                      ; Content-Type field.
+
+     multipart-body := [preamble CRLF]
+                       dash-boundary transport-padding CRLF
+                       body-part *encapsulation
+                       close-delimiter transport-padding
+                       [CRLF epilogue]
+
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 22]
+
+RFC 2046                      Media Types                  November 1996
+
+
+     transport-padding := *LWSP-char
+                          ; Composers MUST NOT generate
+                          ; non-zero length transport
+                          ; padding, but receivers MUST
+                          ; be able to handle padding
+                          ; added by message transports.
+
+     encapsulation := delimiter transport-padding
+                      CRLF body-part
+
+     delimiter := CRLF dash-boundary
+
+     close-delimiter := delimiter "--"
+
+     preamble := discard-text
+
+     epilogue := discard-text
+
+     discard-text := *(*text CRLF) *text
+                     ; May be ignored or discarded.
+
+     body-part := MIME-part-headers [CRLF *OCTET]
+                  ; Lines in a body-part must not start
+                  ; with the specified dash-boundary and
+                  ; the delimiter must not appear anywhere
+                  ; in the body part.  Note that the
+                  ; semantics of a body-part differ from
+                  ; the semantics of a message, as
+                  ; described in the text.
+
+     OCTET := <any 0-255 octet value>
+
+   IMPORTANT:  The free insertion of linear-white-space and RFC 822
+   comments between the elements shown in this BNF is NOT allowed since
+   this BNF does not specify a structured header field.
+
+   NOTE:  In certain transport enclaves, RFC 822 restrictions such as
+   the one that limits bodies to printable US-ASCII characters may not
+   be in force. (That is, the transport domains may exist that resemble
+   standard Internet mail transport as specified in RFC 821 and assumed
+   by RFC 822, but without certain restrictions.) The relaxation of
+   these restrictions should be construed as locally extending the
+   definition of bodies, for example to include octets outside of the
+   US-ASCII range, as long as these extensions are supported by the
+   transport and adequately documented in the Content- Transfer-Encoding
+   header field.  However, in no event are headers (either message
+   headers or body part headers) allowed to contain anything other than
+   US-ASCII characters.
+
+
+
+Freed & Borenstein          Standards Track                    [Page 23]
+
+RFC 2046                      Media Types                  November 1996
+
+
+   NOTE:  Conspicuously missing from the "multipart" type is a notion of
+   structured, related body parts. It is recommended that those wishing
+   to provide more structured or integrated multipart messaging
+   facilities should define subtypes of multipart that are syntactically
+   identical but define relationships between the various parts. For
+   example, subtypes of multipart could be defined that include a
+   distinguished part which in turn is used to specify the relationships
+   between the other parts, probably referring to them by their
+   Content-ID field.  Old implementations will not recognize the new
+   subtype if this approach is used, but will treat it as
+   multipart/mixed and will thus be able to show the user the parts that
+   are recognized.
+
+5.1.2.  Handling Nested Messages and Multiparts
+
+   The "message/rfc822" subtype defined in a subsequent section of this
+   document has no terminating condition other than running out of data.
+   Similarly, an improperly truncated "multipart" entity may not have
+   any terminating boundary marker, and can turn up operationally due to
+   mail system malfunctions.
+
+   It is essential that such entities be handled correctly when they are
+   themselves imbedded inside of another "multipart" structure.  MIME
+   implementations are therefore required to recognize outer level
+   boundary markers at ANY level of inner nesting.  It is not sufficient
+   to only check for the next expected marker or other terminating
+   condition.
+
+5.1.3.  Mixed Subtype
+
+   The "mixed" subtype of "multipart" is intended for use when the body
+   parts are independent and need to be bundled in a particular order.
+   Any "multipart" subtypes that an implementation does not recognize
+   must be treated as being of subtype "mixed".
+
+5.1.4.  Alternative Subtype
+
+   The "multipart/alternative" type is syntactically identical to
+   "multipart/mixed", but the semantics are different.  In particular,
+   each of the body parts is an "alternative" version of the same
+   information.
+
+   Systems should recognize that the content of the various parts are
+   interchangeable.  Systems should choose the "best" type based on the
+   local environment and references, in some cases even through user
+   interaction.  As with "multipart/mixed", the order of body parts is
+   significant.  In this case, the alternatives appear in an order of
+   increasing faithfulness to the original content.  In general, the
+
+
+
+Freed & Borenstein          Standards Track                    [Page 24]
+
+RFC 2046                      Media Types                  November 1996
+
+
+   best choice is the LAST part of a type supported by the recipient
+   system's local environment.
+
+   "Multipart/alternative" may be used, for example, to send a message
+   in a fancy text format in such a way that it can easily be displayed
+   anywhere:
+
+     From: Nathaniel Borenstein <nsb@bellcore.com>
+     To: Ned Freed <ned@innosoft.com>
+     Date: Mon, 22 Mar 1993 09:41:09 -0800 (PST)
+     Subject: Formatted text mail
+     MIME-Version: 1.0
+     Content-Type: multipart/alternative; boundary=boundary42
+
+     --boundary42
+     Content-Type: text/plain; charset=us-ascii
+
+       ... plain text version of message goes here ...
+
+     --boundary42
+     Content-Type: text/enriched
+
+       ... RFC 1896 text/enriched version of same message
+           goes here ...
+
+     --boundary42
+     Content-Type: application/x-whatever
+
+       ... fanciest version of same message goes here ...
+
+     --boundary42--
+
+   In this example, users whose mail systems understood the
+   "application/x-whatever" format would see only the fancy version,
+   while other users would see only the enriched or plain text version,
+   depending on the capabilities of their system.
+
+   In general, user agents that compose "multipart/alternative" entities
+   must place the body parts in increasing order of preference, that is,
+   with the preferred format last.  For fancy text, the sending user
+   agent should put the plainest format first and the richest format
+   last.  Receiving user agents should pick and display the last format
+   they are capable of displaying.  In the case where one of the
+   alternatives is itself of type "multipart" and contains unrecognized
+   sub-parts, the user agent may choose either to show that alternative,
+   an earlier alternative, or both.
+
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 25]
+
+RFC 2046                      Media Types                  November 1996
+
+
+   NOTE: From an implementor's perspective, it might seem more sensible
+   to reverse this ordering, and have the plainest alternative last.
+   However, placing the plainest alternative first is the friendliest
+   possible option when "multipart/alternative" entities are viewed
+   using a non-MIME-conformant viewer.  While this approach does impose
+   some burden on conformant MIME viewers, interoperability with older
+   mail readers was deemed to be more important in this case.
+
+   It may be the case that some user agents, if they can recognize more
+   than one of the formats, will prefer to offer the user the choice of
+   which format to view.  This makes sense, for example, if a message
+   includes both a nicely- formatted image version and an easily-edited
+   text version.  What is most critical, however, is that the user not
+   automatically be shown multiple versions of the same data.  Either
+   the user should be shown the last recognized version or should be
+   given the choice.
+
+   THE SEMANTICS OF CONTENT-ID IN MULTIPART/ALTERNATIVE:  Each part of a
+   "multipart/alternative" entity represents the same data, but the
+   mappings between the two are not necessarily without information
+   loss.  For example, information is lost when translating ODA to
+   PostScript or plain text.  It is recommended that each part should
+   have a different Content-ID value in the case where the information
+   content of the two parts is not identical.  And when the information
+   content is identical -- for example, where several parts of type
+   "message/external-body" specify alternate ways to access the
+   identical data -- the same Content-ID field value should be used, to
+   optimize any caching mechanisms that might be present on the
+   recipient's end.  However, the Content-ID values used by the parts
+   should NOT be the same Content-ID value that describes the
+   "multipart/alternative" as a whole, if there is any such Content-ID
+   field.  That is, one Content-ID value will refer to the
+   "multipart/alternative" entity, while one or more other Content-ID
+   values will refer to the parts inside it.
+
+5.1.5.  Digest Subtype
+
+   This document defines a "digest" subtype of the "multipart" Content-
+   Type.  This type is syntactically identical to "multipart/mixed", but
+   the semantics are different.  In particular, in a digest, the default
+   Content-Type value for a body part is changed from "text/plain" to
+   "message/rfc822".  This is done to allow a more readable digest
+   format that is largely compatible (except for the quoting convention)
+   with RFC 934.
+
+   Note: Though it is possible to specify a Content-Type value for a
+   body part in a digest which is other than "message/rfc822", such as a
+   "text/plain" part containing a description of the material in the
+
+
+
+Freed & Borenstein          Standards Track                    [Page 26]
+
+RFC 2046                      Media Types                  November 1996
+
+
+   digest, actually doing so is undesireble. The "multipart/digest"
+   Content-Type is intended to be used to send collections of messages.
+   If a "text/plain" part is needed, it should be included as a seperate
+   part of a "multipart/mixed" message.
+
+   A digest in this format might, then, look something like this:
+
+     From: Moderator-Address
+     To: Recipient-List
+     Date: Mon, 22 Mar 1994 13:34:51 +0000
+     Subject: Internet Digest, volume 42
+     MIME-Version: 1.0
+     Content-Type: multipart/mixed;
+                   boundary="---- main boundary ----"
+
+     ------ main boundary ----
+
+       ...Introductory text or table of contents...
+
+     ------ main boundary ----
+     Content-Type: multipart/digest;
+                   boundary="---- next message ----"
+
+     ------ next message ----
+
+     From: someone-else
+     Date: Fri, 26 Mar 1993 11:13:32 +0200
+     Subject: my opinion
+
+       ...body goes here ...
+
+     ------ next message ----
+
+     From: someone-else-again
+     Date: Fri, 26 Mar 1993 10:07:13 -0500
+     Subject: my different opinion
+
+       ... another body goes here ...
+
+     ------ next message ------
+
+     ------ main boundary ------
+
+5.1.6.  Parallel Subtype
+
+   This document defines a "parallel" subtype of the "multipart"
+   Content-Type.  This type is syntactically identical to
+   "multipart/mixed", but the semantics are different.  In particular,
+
+
+
+Freed & Borenstein          Standards Track                    [Page 27]
+
+RFC 2046                      Media Types                  November 1996
+
+
+   in a parallel entity, the order of body parts is not significant.
+
+   A common presentation of this type is to display all of the parts
+   simultaneously on hardware and software that are capable of doing so.
+   However, composing agents should be aware that many mail readers will
+   lack this capability and will show the parts serially in any event.
+
+5.1.7.  Other Multipart Subtypes
+
+   Other "multipart" subtypes are expected in the future.  MIME
+   implementations must in general treat unrecognized subtypes of
+   "multipart" as being equivalent to "multipart/mixed".
+
+5.2.  Message Media Type
+
+   It is frequently desirable, in sending mail, to encapsulate another
+   mail message.  A special media type, "message", is defined to
+   facilitate this.  In particular, the "rfc822" subtype of "message" is
+   used to encapsulate RFC 822 messages.
+
+   NOTE:  It has been suggested that subtypes of "message" might be
+   defined for forwarded or rejected messages.  However, forwarded and
+   rejected messages can be handled as multipart messages in which the
+   first part contains any control or descriptive information, and a
+   second part, of type "message/rfc822", is the forwarded or rejected
+   message.  Composing rejection and forwarding messages in this manner
+   will preserve the type information on the original message and allow
+   it to be correctly presented to the recipient, and hence is strongly
+   encouraged.
+
+   Subtypes of "message" often impose restrictions on what encodings are
+   allowed.  These restrictions are described in conjunction with each
+   specific subtype.
+
+   Mail gateways, relays, and other mail handling agents are commonly
+   known to alter the top-level header of an RFC 822 message.  In
+   particular, they frequently add, remove, or reorder header fields.
+   These operations are explicitly forbidden for the encapsulated
+   headers embedded in the bodies of messages of type "message."
+
+5.2.1.  RFC822 Subtype
+
+   A media type of "message/rfc822" indicates that the body contains an
+   encapsulated message, with the syntax of an RFC 822 message.
+   However, unlike top-level RFC 822 messages, the restriction that each
+   "message/rfc822" body must include a "From", "Date", and at least one
+   destination header is removed and replaced with the requirement that
+   at least one of "From", "Subject", or "Date" must be present.
+
+
+
+Freed & Borenstein          Standards Track                    [Page 28]
+
+RFC 2046                      Media Types                  November 1996
+
+
+   It should be noted that, despite the use of the numbers "822", a
+   "message/rfc822" entity isn't restricted to material in strict
+   conformance to RFC822, nor are the semantics of "message/rfc822"
+   objects restricted to the semantics defined in RFC822. More
+   specifically, a "message/rfc822" message could well be a News article
+   or a MIME message.
+
+   No encoding other than "7bit", "8bit", or "binary" is permitted for
+   the body of a "message/rfc822" entity.  The message header fields are
+   always US-ASCII in any case, and data within the body can still be
+   encoded, in which case the Content-Transfer-Encoding header field in
+   the encapsulated message will reflect this.  Non-US-ASCII text in the
+   headers of an encapsulated message can be specified using the
+   mechanisms described in RFC 2047.
+
+5.2.2.  Partial Subtype
+
+   The "partial" subtype is defined to allow large entities to be
+   delivered as several separate pieces of mail and automatically
+   reassembled by a receiving user agent.  (The concept is similar to IP
+   fragmentation and reassembly in the basic Internet Protocols.)  This
+   mechanism can be used when intermediate transport agents limit the
+   size of individual messages that can be sent.  The media type
+   "message/partial" thus indicates that the body contains a fragment of
+   a larger entity.
+
+   Because data of type "message" may never be encoded in base64 or
+   quoted-printable, a problem might arise if "message/partial" entities
+   are constructed in an environment that supports binary or 8bit
+   transport.  The problem is that the binary data would be split into
+   multiple "message/partial" messages, each of them requiring binary
+   transport.  If such messages were encountered at a gateway into a
+   7bit transport environment, there would be no way to properly encode
+   them for the 7bit world, aside from waiting for all of the fragments,
+   reassembling the inner message, and then encoding the reassembled
+   data in base64 or quoted-printable.  Since it is possible that
+   different fragments might go through different gateways, even this is
+   not an acceptable solution.  For this reason, it is specified that
+   entities of type "message/partial" must always have a content-
+   transfer-encoding of 7bit (the default).  In particular, even in
+   environments that support binary or 8bit transport, the use of a
+   content- transfer-encoding of "8bit" or "binary" is explicitly
+   prohibited for MIME entities of type "message/partial". This in turn
+   implies that the inner message must not use "8bit" or "binary"
+   encoding.
+
+
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 29]
+
+RFC 2046                      Media Types                  November 1996
+
+
+   Because some message transfer agents may choose to automatically
+   fragment large messages, and because such agents may use very
+   different fragmentation thresholds, it is possible that the pieces of
+   a partial message, upon reassembly, may prove themselves to comprise
+   a partial message.  This is explicitly permitted.
+
+   Three parameters must be specified in the Content-Type field of type
+   "message/partial":  The first, "id", is a unique identifier, as close
+   to a world-unique identifier as possible, to be used to match the
+   fragments together. (In general, the identifier is essentially a
+   message-id; if placed in double quotes, it can be ANY message-id, in
+   accordance with the BNF for "parameter" given in RFC 2045.)  The
+   second, "number", an integer, is the fragment number, which indicates
+   where this fragment fits into the sequence of fragments.  The third,
+   "total", another integer, is the total number of fragments.  This
+   third subfield is required on the final fragment, and is optional
+   (though encouraged) on the earlier fragments.  Note also that these
+   parameters may be given in any order.
+
+   Thus, the second piece of a 3-piece message may have either of the
+   following header fields:
+
+     Content-Type: Message/Partial; number=2; total=3;
+                   id="oc=jpbe0M2Yt4s@thumper.bellcore.com"
+
+     Content-Type: Message/Partial;
+                   id="oc=jpbe0M2Yt4s@thumper.bellcore.com";
+                   number=2
+
+   But the third piece MUST specify the total number of fragments:
+
+     Content-Type: Message/Partial; number=3; total=3;
+                   id="oc=jpbe0M2Yt4s@thumper.bellcore.com"
+
+   Note that fragment numbering begins with 1, not 0.
+
+   When the fragments of an entity broken up in this manner are put
+   together, the result is always a complete MIME entity, which may have
+   its own Content-Type header field, and thus may contain any other
+   data type.
+
+5.2.2.1.  Message Fragmentation and Reassembly
+
+   The semantics of a reassembled partial message must be those of the
+   "inner" message, rather than of a message containing the inner
+   message.  This makes it possible, for example, to send a large audio
+   message as several partial messages, and still have it appear to the
+   recipient as a simple audio message rather than as an encapsulated
+
+
+
+Freed & Borenstein          Standards Track                    [Page 30]
+
+RFC 2046                      Media Types                  November 1996
+
+
+   message containing an audio message.  That is, the encapsulation of
+   the message is considered to be "transparent".
+
+   When generating and reassembling the pieces of a "message/partial"
+   message, the headers of the encapsulated message must be merged with
+   the headers of the enclosing entities.  In this process the following
+   rules must be observed:
+
+    (1)   Fragmentation agents must split messages at line
+          boundaries only. This restriction is imposed because
+          splits at points other than the ends of lines in turn
+          depends on message transports being able to preserve
+          the semantics of messages that don't end with a CRLF
+          sequence. Many transports are incapable of preserving
+          such semantics.
+
+    (2)   All of the header fields from the initial enclosing
+          message, except those that start with "Content-" and
+          the specific header fields "Subject", "Message-ID",
+          "Encrypted", and "MIME-Version", must be copied, in
+          order, to the new message.
+
+    (3)   The header fields in the enclosed message which start
+          with "Content-", plus the "Subject", "Message-ID",
+          "Encrypted", and "MIME-Version" fields, must be
+          appended, in order, to the header fields of the new
+          message.  Any header fields in the enclosed message
+          which do not start with "Content-" (except for the
+          "Subject", "Message-ID", "Encrypted", and "MIME-
+          Version" fields) will be ignored and dropped.
+
+    (4)   All of the header fields from the second and any
+          subsequent enclosing messages are discarded by the
+          reassembly process.
+
+5.2.2.2.  Fragmentation and Reassembly Example
+
+   If an audio message is broken into two pieces, the first piece might
+   look something like this:
+
+     X-Weird-Header-1: Foo
+     From: Bill@host.com
+     To: joe@otherhost.com
+     Date: Fri, 26 Mar 1993 12:59:38 -0500 (EST)
+     Subject: Audio mail (part 1 of 2)
+     Message-ID: <id1@host.com>
+     MIME-Version: 1.0
+     Content-type: message/partial; id="ABC@host.com";
+
+
+
+Freed & Borenstein          Standards Track                    [Page 31]
+
+RFC 2046                      Media Types                  November 1996
+
+
+                   number=1; total=2
+
+     X-Weird-Header-1: Bar
+     X-Weird-Header-2: Hello
+     Message-ID: <anotherid@foo.com>
+     Subject: Audio mail
+     MIME-Version: 1.0
+     Content-type: audio/basic
+     Content-transfer-encoding: base64
+
+       ... first half of encoded audio data goes here ...
+
+   and the second half might look something like this:
+
+     From: Bill@host.com
+     To: joe@otherhost.com
+     Date: Fri, 26 Mar 1993 12:59:38 -0500 (EST)
+     Subject: Audio mail (part 2 of 2)
+     MIME-Version: 1.0
+     Message-ID: <id2@host.com>
+     Content-type: message/partial;
+                   id="ABC@host.com"; number=2; total=2
+
+       ... second half of encoded audio data goes here ...
+
+   Then, when the fragmented message is reassembled, the resulting
+   message to be displayed to the user should look something like this:
+
+     X-Weird-Header-1: Foo
+     From: Bill@host.com
+     To: joe@otherhost.com
+     Date: Fri, 26 Mar 1993 12:59:38 -0500 (EST)
+     Subject: Audio mail
+     Message-ID: <anotherid@foo.com>
+     MIME-Version: 1.0
+     Content-type: audio/basic
+     Content-transfer-encoding: base64
+
+       ... first half of encoded audio data goes here ...
+       ... second half of encoded audio data goes here ...
+
+   The inclusion of a "References" field in the headers of the second
+   and subsequent pieces of a fragmented message that references the
+   Message-Id on the previous piece may be of benefit to mail readers
+   that understand and track references.  However, the generation of
+   such "References" fields is entirely optional.
+
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 32]
+
+RFC 2046                      Media Types                  November 1996
+
+
+   Finally, it should be noted that the "Encrypted" header field has
+   been made obsolete by Privacy Enhanced Messaging (PEM) [RFC-1421,
+   RFC-1422, RFC-1423, RFC-1424], but the rules above are nevertheless
+   believed to describe the correct way to treat it if it is encountered
+   in the context of conversion to and from "message/partial" fragments.
+
+5.2.3.  External-Body Subtype
+
+   The external-body subtype indicates that the actual body data are not
+   included, but merely referenced.  In this case, the parameters
+   describe a mechanism for accessing the external data.
+
+   When a MIME entity is of type "message/external-body", it consists of
+   a header, two consecutive CRLFs, and the message header for the
+   encapsulated message.  If another pair of consecutive CRLFs appears,
+   this of course ends the message header for the encapsulated message.
+   However, since the encapsulated message's body is itself external, it
+   does NOT appear in the area that follows.  For example, consider the
+   following message:
+
+     Content-type: message/external-body;
+                   access-type=local-file;
+                   name="/u/nsb/Me.jpeg"
+
+     Content-type: image/jpeg
+     Content-ID: <id42@guppylake.bellcore.com>
+     Content-Transfer-Encoding: binary
+
+     THIS IS NOT REALLY THE BODY!
+
+   The area at the end, which might be called the "phantom body", is
+   ignored for most external-body messages.  However, it may be used to
+   contain auxiliary information for some such messages, as indeed it is
+   when the access-type is "mail- server".  The only access-type defined
+   in this document that uses the phantom body is "mail-server", but
+   other access-types may be defined in the future in other
+   specifications that use this area.
+
+   The encapsulated headers in ALL "message/external-body" entities MUST
+   include a Content-ID header field to give a unique identifier by
+   which to reference the data.  This identifier may be used for caching
+   mechanisms, and for recognizing the receipt of the data when the
+   access-type is "mail-server".
+
+   Note that, as specified here, the tokens that describe external-body
+   data, such as file names and mail server commands, are required to be
+   in the US-ASCII character set.
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 33]
+
+RFC 2046                      Media Types                  November 1996
+
+
+   If this proves problematic in practice, a new mechanism may be
+   required as a future extension to MIME, either as newly defined
+   access-types for "message/external-body" or by some other mechanism.
+
+   As with "message/partial", MIME entities of type "message/external-
+   body" MUST have a content-transfer-encoding of 7bit (the default).
+   In particular, even in environments that support binary or 8bit
+   transport, the use of a content- transfer-encoding of "8bit" or
+   "binary" is explicitly prohibited for entities of type
+   "message/external-body".
+
+5.2.3.1.  General External-Body Parameters
+
+   The parameters that may be used with any "message/external- body"
+   are:
+
+    (1)   ACCESS-TYPE -- A word indicating the supported access
+          mechanism by which the file or data may be obtained.
+          This word is not case sensitive.  Values include, but
+          are not limited to, "FTP", "ANON-FTP", "TFTP", "LOCAL-
+          FILE", and "MAIL-SERVER".  Future values, except for
+          experimental values beginning with "X-", must be
+          registered with IANA, as described in RFC 2048.
+          This parameter is unconditionally mandatory and MUST be
+          present on EVERY "message/external-body".
+
+    (2)   EXPIRATION -- The date (in the RFC 822 "date-time"
+          syntax, as extended by RFC 1123 to permit 4 digits in
+          the year field) after which the existence of the
+          external data is not guaranteed.  This parameter may be
+          used with ANY access-type and is ALWAYS optional.
+
+    (3)   SIZE -- The size (in octets) of the data.  The intent
+          of this parameter is to help the recipient decide
+          whether or not to expend the necessary resources to
+          retrieve the external data.  Note that this describes
+          the size of the data in its canonical form, that is,
+          before any Content-Transfer-Encoding has been applied
+          or after the data have been decoded.  This parameter
+          may be used with ANY access-type and is ALWAYS
+          optional.
+
+    (4)   PERMISSION -- A case-insensitive field that indicates
+          whether or not it is expected that clients might also
+          attempt to overwrite the data.  By default, or if
+          permission is "read", the assumption is that they are
+          not, and that if the data is retrieved once, it is
+          never needed again.  If PERMISSION is "read-write",
+
+
+
+Freed & Borenstein          Standards Track                    [Page 34]
+
+RFC 2046                      Media Types                  November 1996
+
+
+          this assumption is invalid, and any local copy must be
+          considered no more than a cache.  "Read" and "Read-
+          write" are the only defined values of permission.  This
+          parameter may be used with ANY access-type and is
+          ALWAYS optional.
+
+   The precise semantics of the access-types defined here are described
+   in the sections that follow.
+
+5.2.3.2.  The 'ftp' and 'tftp' Access-Types
+
+   An access-type of FTP or TFTP indicates that the message body is
+   accessible as a file using the FTP [RFC-959] or TFTP [RFC- 783]
+   protocols, respectively.  For these access-types, the following
+   additional parameters are mandatory:
+
+    (1)   NAME -- The name of the file that contains the actual
+          body data.
+
+    (2)   SITE -- A machine from which the file may be obtained,
+          using the given protocol.  This must be a fully
+          qualified domain name, not a nickname.
+
+    (3)   Before any data are retrieved, using FTP, the user will
+          generally need to be asked to provide a login id and a
+          password for the machine named by the site parameter.
+          For security reasons, such an id and password are not
+          specified as content-type parameters, but must be
+          obtained from the user.
+
+   In addition, the following parameters are optional:
+
+    (1)   DIRECTORY -- A directory from which the data named by
+          NAME should be retrieved.
+
+    (2)   MODE -- A case-insensitive string indicating the mode
+          to be used when retrieving the information.  The valid
+          values for access-type "TFTP" are "NETASCII", "OCTET",
+          and "MAIL", as specified by the TFTP protocol [RFC-
+          783].  The valid values for access-type "FTP" are
+          "ASCII", "EBCDIC", "IMAGE", and "LOCALn" where "n" is a
+          decimal integer, typically 8.  These correspond to the
+          representation types "A" "E" "I" and "L n" as specified
+          by the FTP protocol [RFC-959].  Note that "BINARY" and
+          "TENEX" are not valid values for MODE and that "OCTET"
+          or "IMAGE" or "LOCAL8" should be used instead.  IF MODE
+          is not specified, the  default value is "NETASCII" for
+          TFTP and "ASCII" otherwise.
+
+
+
+Freed & Borenstein          Standards Track                    [Page 35]
+
+RFC 2046                      Media Types                  November 1996
+
+
+5.2.3.3.  The 'anon-ftp' Access-Type
+
+   The "anon-ftp" access-type is identical to the "ftp" access type,
+   except that the user need not be asked to provide a name and password
+   for the specified site.  Instead, the ftp protocol will be used with
+   login "anonymous" and a password that corresponds to the user's mail
+   address.
+
+5.2.3.4.  The 'local-file' Access-Type
+
+   An access-type of "local-file" indicates that the actual body is
+   accessible as a file on the local machine.  Two additional parameters
+   are defined for this access type:
+
+    (1)   NAME -- The name of the file that contains the actual
+          body data.  This parameter is mandatory for the
+          "local-file" access-type.
+
+    (2)   SITE -- A domain specifier for a machine or set of
+          machines that are known to have access to the data
+          file.  This optional parameter is used to describe the
+          locality of reference for the data, that is, the site
+          or sites at which the file is expected to be visible.
+          Asterisks may be used for wildcard matching to a part
+          of a domain name, such as "*.bellcore.com", to indicate
+          a set of machines on which the data should be directly
+          visible, while a single asterisk may be used to
+          indicate a file that is expected to be universally
+          available, e.g., via a global file system.
+
+5.2.3.5.  The 'mail-server' Access-Type
+
+   The "mail-server" access-type indicates that the actual body is
+   available from a mail server.  Two additional parameters are defined
+   for this access-type:
+
+    (1)   SERVER -- The addr-spec of the mail server from which
+          the actual body data can be obtained.  This parameter
+          is mandatory for the "mail-server" access-type.
+
+    (2)   SUBJECT -- The subject that is to be used in the mail
+          that is sent to obtain the data.  Note that keying mail
+          servers on Subject lines is NOT recommended, but such
+          mail servers are known to exist.  This is an optional
+          parameter.
+
+
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 36]
+
+RFC 2046                      Media Types                  November 1996
+
+
+   Because mail servers accept a variety of syntaxes, some of which is
+   multiline, the full command to be sent to a mail server is not
+   included as a parameter in the content-type header field.  Instead,
+   it is provided as the "phantom body" when the media type is
+   "message/external-body" and the access-type is mail-server.
+
+   Note that MIME does not define a mail server syntax.  Rather, it
+   allows the inclusion of arbitrary mail server commands in the phantom
+   body.  Implementations must include the phantom body in the body of
+   the message it sends to the mail server address to retrieve the
+   relevant data.
+
+   Unlike other access-types, mail-server access is asynchronous and
+   will happen at an unpredictable time in the future.  For this reason,
+   it is important that there be a mechanism by which the returned data
+   can be matched up with the original "message/external-body" entity.
+   MIME mail servers must use the same Content-ID field on the returned
+   message that was used in the original "message/external-body"
+   entities, to facilitate such matching.
+
+5.2.3.6.  External-Body Security Issues
+
+   "Message/external-body" entities give rise to two important security
+   issues:
+
+    (1)   Accessing data via a "message/external-body" reference
+          effectively results in the message recipient performing
+          an operation that was specified by the message
+          originator.  It is therefore possible for the message
+          originator to trick a recipient into doing something
+          they would not have done otherwise.  For example, an
+          originator could specify a action that attempts
+          retrieval of material that the recipient is not
+          authorized to obtain, causing the recipient to
+          unwittingly violate some security policy.  For this
+          reason, user agents capable of resolving external
+          references must always take steps to describe the
+          action they are to take to the recipient and ask for
+          explicit permisssion prior to performing it.
+
+          The 'mail-server' access-type is particularly
+          vulnerable, in that it causes the recipient to send a
+          new message whose contents are specified by the
+          original message's originator.  Given the potential for
+          abuse, any such request messages that are constructed
+          should contain a clear indication that they were
+          generated automatically (e.g. in a Comments: header
+          field) in an attempt to resolve a MIME
+
+
+
+Freed & Borenstein          Standards Track                    [Page 37]
+
+RFC 2046                      Media Types                  November 1996
+
+
+          "message/external-body" reference.
+
+    (2)   MIME will sometimes be used in environments that
+          provide some guarantee of message integrity and
+          authenticity.  If present, such guarantees may apply
+          only to the actual direct content of messages -- they
+          may or may not apply to data accessed through MIME's
+          "message/external-body" mechanism.  In particular, it
+          may be possible to subvert certain access mechanisms
+          even when the messaging system itself is secure.
+
+          It should be noted that this problem exists either with
+          or without the availabilty of MIME mechanisms.  A
+          casual reference to an FTP site containing a document
+          in the text of a secure message brings up similar
+          issues -- the only difference is that MIME provides for
+          automatic retrieval of such material, and users may
+          place unwarranted trust is such automatic retrieval
+          mechanisms.
+
+5.2.3.7.  Examples and Further Explanations
+
+   When the external-body mechanism is used in conjunction with the
+   "multipart/alternative" media type it extends the functionality of
+   "multipart/alternative" to include the case where the same entity is
+   provided in the same format but via different accces mechanisms.
+   When this is done the originator of the message must order the parts
+   first in terms of preferred formats and then by preferred access
+   mechanisms.  The recipient's viewer should then evaluate the list
+   both in terms of format and access mechanisms.
+
+   With the emerging possibility of very wide-area file systems, it
+   becomes very hard to know in advance the set of machines where a file
+   will and will not be accessible directly from the file system.
+   Therefore it may make sense to provide both a file name, to be tried
+   directly, and the name of one or more sites from which the file is
+   known to be accessible.  An implementation can try to retrieve remote
+   files using FTP or any other protocol, using anonymous file retrieval
+   or prompting the user for the necessary name and password.  If an
+   external body is accessible via multiple mechanisms, the sender may
+   include multiple entities of type "message/external-body" within the
+   body parts of an enclosing "multipart/alternative" entity.
+
+   However, the external-body mechanism is not intended to be limited to
+   file retrieval, as shown by the mail-server access-type.  Beyond
+   this, one can imagine, for example, using a video server for external
+   references to video clips.
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 38]
+
+RFC 2046                      Media Types                  November 1996
+
+
+   The embedded message header fields which appear in the body of the
+   "message/external-body" data must be used to declare the media type
+   of the external body if it is anything other than plain US-ASCII
+   text, since the external body does not have a header section to
+   declare its type.  Similarly, any Content-transfer-encoding other
+   than "7bit" must also be declared here.  Thus a complete
+   "message/external-body" message, referring to an object in PostScript
+   format, might look like this:
+
+     From: Whomever
+     To: Someone
+     Date: Whenever
+     Subject: whatever
+     MIME-Version: 1.0
+     Message-ID: <id1@host.com>
+     Content-Type: multipart/alternative; boundary=42
+     Content-ID: <id001@guppylake.bellcore.com>
+
+     --42
+     Content-Type: message/external-body; name="BodyFormats.ps";
+                   site="thumper.bellcore.com"; mode="image";
+                   access-type=ANON-FTP; directory="pub";
+                   expiration="Fri, 14 Jun 1991 19:13:14 -0400 (EDT)"
+
+     Content-type: application/postscript
+     Content-ID: <id42@guppylake.bellcore.com>
+
+     --42
+     Content-Type: message/external-body; access-type=local-file;
+                   name="/u/nsb/writing/rfcs/RFC-MIME.ps";
+                   site="thumper.bellcore.com";
+                   expiration="Fri, 14 Jun 1991 19:13:14 -0400 (EDT)"
+
+     Content-type: application/postscript
+     Content-ID: <id42@guppylake.bellcore.com>
+
+     --42
+     Content-Type: message/external-body;
+                   access-type=mail-server
+                   server="listserv@bogus.bitnet";
+                   expiration="Fri, 14 Jun 1991 19:13:14 -0400 (EDT)"
+
+     Content-type: application/postscript
+     Content-ID: <id42@guppylake.bellcore.com>
+
+     get RFC-MIME.DOC
+
+     --42--
+
+
+
+Freed & Borenstein          Standards Track                    [Page 39]
+
+RFC 2046                      Media Types                  November 1996
+
+
+   Note that in the above examples, the default Content-transfer-
+   encoding of "7bit" is assumed for the external postscript data.
+
+   Like the "message/partial" type, the "message/external-body" media
+   type is intended to be transparent, that is, to convey the data type
+   in the external body rather than to convey a message with a body of
+   that type.  Thus the headers on the outer and inner parts must be
+   merged using the same rules as for "message/partial".  In particular,
+   this means that the Content-type and Subject fields are overridden,
+   but the From field is preserved.
+
+   Note that since the external bodies are not transported along with
+   the external body reference, they need not conform to transport
+   limitations that apply to the reference itself. In particular,
+   Internet mail transports may impose 7bit and line length limits, but
+   these do not automatically apply to binary external body references.
+   Thus a Content-Transfer-Encoding is not generally necessary, though
+   it is permitted.
+
+   Note that the body of a message of type "message/external-body" is
+   governed by the basic syntax for an RFC 822 message.  In particular,
+   anything before the first consecutive pair of CRLFs is header
+   information, while anything after it is body information, which is
+   ignored for most access-types.
+
+5.2.4.  Other Message Subtypes
+
+   MIME implementations must in general treat unrecognized subtypes of
+   "message" as being equivalent to "application/octet-stream".
+
+   Future subtypes of "message" intended for use with email should be
+   restricted to "7bit" encoding. A type other than "message" should be
+   used if restriction to "7bit" is not possible.
+
+6.  Experimental Media Type Values
+
+   A media type value beginning with the characters "X-" is a private
+   value, to be used by consenting systems by mutual agreement.  Any
+   format without a rigorous and public definition must be named with an
+   "X-" prefix, and publicly specified values shall never begin with
+   "X-".  (Older versions of the widely used Andrew system use the "X-
+   BE2" name, so new systems should probably choose a different name.)
+
+   In general, the use of "X-" top-level types is strongly discouraged.
+   Implementors should invent subtypes of the existing types whenever
+   possible. In many cases, a subtype of "application" will be more
+   appropriate than a new top-level type.
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 40]
+
+RFC 2046                      Media Types                  November 1996
+
+
+7.  Summary
+
+   The five discrete media types provide provide a standardized
+   mechanism for tagging entities as "audio", "image", or several other
+   kinds of data. The composite "multipart" and "message" media types
+   allow mixing and hierarchical structuring of entities of different
+   types in a single message. A distinguished parameter syntax allows
+   further specification of data format details, particularly the
+   specification of alternate character sets.  Additional optional
+   header fields provide mechanisms for certain extensions deemed
+   desirable by many implementors. Finally, a number of useful media
+   types are defined for general use by consenting user agents, notably
+   "message/partial" and "message/external-body".
+
+9.  Security Considerations
+
+   Security issues are discussed in the context of the
+   "application/postscript" type, the "message/external-body" type, and
+   in RFC 2048.  Implementors should pay special attention to the
+   security implications of any media types that can cause the remote
+   execution of any actions in the recipient's environment.  In such
+   cases, the discussion of the "application/postscript" type may serve
+   as a model for considering other media types with remote execution
+   capabilities.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 41]
+
+RFC 2046                      Media Types                  November 1996
+
+
+9.  Authors' Addresses
+
+   For more information, the authors of this document are best contacted
+   via Internet mail:
+
+   Ned Freed
+   Innosoft International, Inc.
+   1050 East Garvey Avenue South
+   West Covina, CA 91790
+   USA
+
+   Phone: +1 818 919 3600
+   Fax:   +1 818 919 3614
+   EMail: ned@innosoft.com
+
+
+   Nathaniel S. Borenstein
+   First Virtual Holdings
+   25 Washington Avenue
+   Morristown, NJ 07960
+   USA
+
+   Phone: +1 201 540 8967
+   Fax:   +1 201 993 3032
+   EMail: nsb@nsb.fv.com
+
+
+   MIME is a result of the work of the Internet Engineering Task Force
+   Working Group on RFC 822 Extensions.  The chairman of that group,
+   Greg Vaudreuil, may be reached at:
+
+   Gregory M. Vaudreuil
+   Octel Network Services
+   17080 Dallas Parkway
+   Dallas, TX 75248-1905
+   USA
+
+   EMail: Greg.Vaudreuil@Octel.Com
+
+
+
+
+
+
+
+
+
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 42]
+
+RFC 2046                      Media Types                  November 1996
+
+
+Appendix A -- Collected Grammar
+
+   This appendix contains the complete BNF grammar for all the syntax
+   specified by this document.
+
+   By itself, however, this grammar is incomplete.  It refers by name to
+   several syntax rules that are defined by RFC 822.  Rather than
+   reproduce those definitions here, and risk unintentional differences
+   between the two, this document simply refers the reader to RFC 822
+   for the remaining definitions. Wherever a term is undefined, it
+   refers to the RFC 822 definition.
+
+     boundary := 0*69<bchars> bcharsnospace
+
+     bchars := bcharsnospace / " "
+
+     bcharsnospace := DIGIT / ALPHA / "'" / "(" / ")" /
+                      "+" / "_" / "," / "-" / "." /
+                      "/" / ":" / "=" / "?"
+
+     body-part := <"message" as defined in RFC 822, with all
+                   header fields optional, not starting with the
+                   specified dash-boundary, and with the
+                   delimiter not occurring anywhere in the
+                   body part.  Note that the semantics of a
+                   part differ from the semantics of a message,
+                   as described in the text.>
+
+     close-delimiter := delimiter "--"
+
+     dash-boundary := "--" boundary
+                      ; boundary taken from the value of
+                      ; boundary parameter of the
+                      ; Content-Type field.
+
+     delimiter := CRLF dash-boundary
+
+     discard-text := *(*text CRLF)
+                     ; May be ignored or discarded.
+
+     encapsulation := delimiter transport-padding
+                      CRLF body-part
+
+     epilogue := discard-text
+
+     multipart-body := [preamble CRLF]
+                       dash-boundary transport-padding CRLF
+                       body-part *encapsulation
+
+
+
+Freed & Borenstein          Standards Track                    [Page 43]
+
+RFC 2046                      Media Types                  November 1996
+
+
+                       close-delimiter transport-padding
+                       [CRLF epilogue]
+
+     preamble := discard-text
+
+     transport-padding := *LWSP-char
+                          ; Composers MUST NOT generate
+                          ; non-zero length transport
+                          ; padding, but receivers MUST
+                          ; be able to handle padding
+                          ; added by message transports.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 44]
+
diff -uNr gmime-1.90.0/rfc/rfc2047.txt gmime/rfc/rfc2047.txt
--- gmime-1.90.0/rfc/rfc2047.txt	Thu Jan  1 01:00:00 1970
+++ gmime/rfc/rfc2047.txt	Tue Oct 24 23:01:39 2000
@@ -0,0 +1,843 @@
+
+
+
+
+
+
+Network Working Group                                           K. Moore
+Request for Comments: 2047                       University of Tennessee
+Obsoletes: 1521, 1522, 1590                                November 1996
+Category: Standards Track
+
+
+        MIME (Multipurpose Internet Mail Extensions) Part Three:
+              Message Header Extensions for Non-ASCII Text
+
+Status of this Memo
+
+   This document specifies an Internet standards track protocol for the
+   Internet community, and requests discussion and suggestions for
+   improvements.  Please refer to the current edition of the "Internet
+   Official Protocol Standards" (STD 1) for the standardization state
+   and status of this protocol.  Distribution of this memo is unlimited.
+
+Abstract
+
+   STD 11, RFC 822, defines a message representation protocol specifying
+   considerable detail about US-ASCII message headers, and leaves the
+   message content, or message body, as flat US-ASCII text.  This set of
+   documents, collectively called the Multipurpose Internet Mail
+   Extensions, or MIME, redefines the format of messages to allow for
+
+   (1) textual message bodies in character sets other than US-ASCII,
+
+   (2) an extensible set of different formats for non-textual message
+       bodies,
+
+   (3) multi-part message bodies, and
+
+   (4) textual header information in character sets other than US-ASCII.
+
+   These documents are based on earlier work documented in RFC 934, STD
+   11, and RFC 1049, but extends and revises them.  Because RFC 822 said
+   so little about message bodies, these documents are largely
+   orthogonal to (rather than a revision of) RFC 822.
+
+   This particular document is the third document in the series.  It
+   describes extensions to RFC 822 to allow non-US-ASCII text data in
+   Internet mail header fields.
+
+
+
+
+
+
+
+
+
+Moore                       Standards Track                     [Page 1]
+
+RFC 2047               Message Header Extensions           November 1996
+
+
+   Other documents in this series include:
+
+   + RFC 2045, which specifies the various headers used to describe
+     the structure of MIME messages.
+
+   + RFC 2046, which defines the general structure of the MIME media
+     typing system and defines an initial set of media types,
+
+   + RFC 2048, which specifies various IANA registration procedures
+     for MIME-related facilities, and
+
+   + RFC 2049, which describes MIME conformance criteria and
+     provides some illustrative examples of MIME message formats,
+     acknowledgements, and the bibliography.
+
+   These documents are revisions of RFCs 1521, 1522, and 1590, which
+   themselves were revisions of RFCs 1341 and 1342.  An appendix in RFC
+   2049 describes differences and changes from previous versions.
+
+1. Introduction
+
+   RFC 2045 describes a mechanism for denoting textual body parts which
+   are coded in various character sets, as well as methods for encoding
+   such body parts as sequences of printable US-ASCII characters.  This
+   memo describes similar techniques to allow the encoding of non-ASCII
+   text in various portions of a RFC 822 [2] message header, in a manner
+   which is unlikely to confuse existing message handling software.
+
+   Like the encoding techniques described in RFC 2045, the techniques
+   outlined here were designed to allow the use of non-ASCII characters
+   in message headers in a way which is unlikely to be disturbed by the
+   quirks of existing Internet mail handling programs.  In particular,
+   some mail relaying programs are known to (a) delete some message
+   header fields while retaining others, (b) rearrange the order of
+   addresses in To or Cc fields, (c) rearrange the (vertical) order of
+   header fields, and/or (d) "wrap" message headers at different places
+   than those in the original message.  In addition, some mail reading
+   programs are known to have difficulty correctly parsing message
+   headers which, while legal according to RFC 822, make use of
+   backslash-quoting to "hide" special characters such as "<", ",", or
+   ":", or which exploit other infrequently-used features of that
+   specification.
+
+   While it is unfortunate that these programs do not correctly
+   interpret RFC 822 headers, to "break" these programs would cause
+   severe operational problems for the Internet mail system.  The
+   extensions described in this memo therefore do not rely on little-
+   used features of RFC 822.
+
+
+
+Moore                       Standards Track                     [Page 2]
+
+RFC 2047               Message Header Extensions           November 1996
+
+
+   Instead, certain sequences of "ordinary" printable ASCII characters
+   (known as "encoded-words") are reserved for use as encoded data.  The
+   syntax of encoded-words is such that they are unlikely to
+   "accidentally" appear as normal text in message headers.
+   Furthermore, the characters used in encoded-words are restricted to
+   those which do not have special meanings in the context in which the
+   encoded-word appears.
+
+   Generally, an "encoded-word" is a sequence of printable ASCII
+   characters that begins with "=?", ends with "?=", and has two "?"s in
+   between.  It specifies a character set and an encoding method, and
+   also includes the original text encoded as graphic ASCII characters,
+   according to the rules for that encoding method.
+
+   A mail composer that implements this specification will provide a
+   means of inputting non-ASCII text in header fields, but will
+   translate these fields (or appropriate portions of these fields) into
+   encoded-words before inserting them into the message header.
+
+   A mail reader that implements this specification will recognize
+   encoded-words when they appear in certain portions of the message
+   header.  Instead of displaying the encoded-word "as is", it will
+   reverse the encoding and display the original text in the designated
+   character set.
+
+NOTES
+
+   This memo relies heavily on notation and terms defined RFC 822 and
+   RFC 2045.  In particular, the syntax for the ABNF used in this memo
+   is defined in RFC 822, as well as many of the terminal or nonterminal
+   symbols from RFC 822 are used in the grammar for the header
+   extensions defined here.  Among the symbols defined in RFC 822 and
+   referenced in this memo are: 'addr-spec', 'atom', 'CHAR', 'comment',
+   'CTLs', 'ctext', 'linear-white-space', 'phrase', 'quoted-pair'.
+   'quoted-string', 'SPACE', and 'word'.  Successful implementation of
+   this protocol extension requires careful attention to the RFC 822
+   definitions of these terms.
+
+   When the term "ASCII" appears in this memo, it refers to the "7-Bit
+   American Standard Code for Information Interchange", ANSI X3.4-1986.
+   The MIME charset name for this character set is "US-ASCII".  When not
+   specifically referring to the MIME charset name, this document uses
+   the term "ASCII", both for brevity and for consistency with RFC 822.
+   However, implementors are warned that the character set name must be
+   spelled "US-ASCII" in MIME message and body part headers.
+
+
+
+
+
+
+Moore                       Standards Track                     [Page 3]
+
+RFC 2047               Message Header Extensions           November 1996
+
+
+   This memo specifies a protocol for the representation of non-ASCII
+   text in message headers.  It specifically DOES NOT define any
+   translation between "8-bit headers" and pure ASCII headers, nor is
+   any such translation assumed to be possible.
+
+2. Syntax of encoded-words
+
+   An 'encoded-word' is defined by the following ABNF grammar.  The
+   notation of RFC 822 is used, with the exception that white space
+   characters MUST NOT appear between components of an 'encoded-word'.
+
+   encoded-word = "=?" charset "?" encoding "?" encoded-text "?="
+
+   charset = token    ; see section 3
+
+   encoding = token   ; see section 4
+
+   token = 1*<Any CHAR except SPACE, CTLs, and especials>
+
+   especials = "(" / ")" / "<" / ">" / "@" / "," / ";" / ":" / "
+               <"> / "/" / "[" / "]" / "?" / "." / "="
+
+   encoded-text = 1*<Any printable ASCII character other than "?"
+                     or SPACE>
+                  ; (but see "Use of encoded-words in message
+                  ; headers", section 5)
+
+   Both 'encoding' and 'charset' names are case-independent.  Thus the
+   charset name "ISO-8859-1" is equivalent to "iso-8859-1", and the
+   encoding named "Q" may be spelled either "Q" or "q".
+
+   An 'encoded-word' may not be more than 75 characters long, including
+   'charset', 'encoding', 'encoded-text', and delimiters.  If it is
+   desirable to encode more text than will fit in an 'encoded-word' of
+   75 characters, multiple 'encoded-word's (separated by CRLF SPACE) may
+   be used.
+
+   While there is no limit to the length of a multiple-line header
+   field, each line of a header field that contains one or more
+   'encoded-word's is limited to 76 characters.
+
+   The length restrictions are included both to ease interoperability
+   through internetwork mail gateways, and to impose a limit on the
+   amount of lookahead a header parser must employ (while looking for a
+   final ?= delimiter) before it can decide whether a token is an
+   "encoded-word" or something else.
+
+
+
+
+
+Moore                       Standards Track                     [Page 4]
+
+RFC 2047               Message Header Extensions           November 1996
+
+
+   IMPORTANT: 'encoded-word's are designed to be recognized as 'atom's
+   by an RFC 822 parser.  As a consequence, unencoded white space
+   characters (such as SPACE and HTAB) are FORBIDDEN within an
+   'encoded-word'.  For example, the character sequence
+
+      =?iso-8859-1?q?this is some text?=
+
+   would be parsed as four 'atom's, rather than as a single 'atom' (by
+   an RFC 822 parser) or 'encoded-word' (by a parser which understands
+   'encoded-words').  The correct way to encode the string "this is some
+   text" is to encode the SPACE characters as well, e.g.
+
+      =?iso-8859-1?q?this=20is=20some=20text?=
+
+   The characters which may appear in 'encoded-text' are further
+   restricted by the rules in section 5.
+
+3. Character sets
+
+   The 'charset' portion of an 'encoded-word' specifies the character
+   set associated with the unencoded text.  A 'charset' can be any of
+   the character set names allowed in an MIME "charset" parameter of a
+   "text/plain" body part, or any character set name registered with
+   IANA for use with the MIME text/plain content-type.
+
+   Some character sets use code-switching techniques to switch between
+   "ASCII mode" and other modes.  If unencoded text in an 'encoded-word'
+   contains a sequence which causes the charset interpreter to switch
+   out of ASCII mode, it MUST contain additional control codes such that
+   ASCII mode is again selected at the end of the 'encoded-word'.  (This
+   rule applies separately to each 'encoded-word', including adjacent
+   'encoded-word's within a single header field.)
+
+   When there is a possibility of using more than one character set to
+   represent the text in an 'encoded-word', and in the absence of
+   private agreements between sender and recipients of a message, it is
+   recommended that members of the ISO-8859-* series be used in
+   preference to other character sets.
+
+4. Encodings
+
+   Initially, the legal values for "encoding" are "Q" and "B".  These
+   encodings are described below.  The "Q" encoding is recommended for
+   use when most of the characters to be encoded are in the ASCII
+   character set; otherwise, the "B" encoding should be used.
+   Nevertheless, a mail reader which claims to recognize 'encoded-word's
+   MUST be able to accept either encoding for any character set which it
+   supports.
+
+
+
+Moore                       Standards Track                     [Page 5]
+
+RFC 2047               Message Header Extensions           November 1996
+
+
+   Only a subset of the printable ASCII characters may be used in
+   'encoded-text'.  Space and tab characters are not allowed, so that
+   the beginning and end of an 'encoded-word' are obvious.  The "?"
+   character is used within an 'encoded-word' to separate the various
+   portions of the 'encoded-word' from one another, and thus cannot
+   appear in the 'encoded-text' portion.  Other characters are also
+   illegal in certain contexts.  For example, an 'encoded-word' in a
+   'phrase' preceding an address in a From header field may not contain
+   any of the "specials" defined in RFC 822.  Finally, certain other
+   characters are disallowed in some contexts, to ensure reliability for
+   messages that pass through internetwork mail gateways.
+
+   The "B" encoding automatically meets these requirements.  The "Q"
+   encoding allows a wide range of printable characters to be used in
+   non-critical locations in the message header (e.g., Subject), with
+   fewer characters available for use in other locations.
+
+4.1. The "B" encoding
+
+   The "B" encoding is identical to the "BASE64" encoding defined by RFC
+   2045.
+
+4.2. The "Q" encoding
+
+   The "Q" encoding is similar to the "Quoted-Printable" content-
+   transfer-encoding defined in RFC 2045.  It is designed to allow text
+   containing mostly ASCII characters to be decipherable on an ASCII
+   terminal without decoding.
+
+   (1) Any 8-bit value may be represented by a "=" followed by two
+       hexadecimal digits.  For example, if the character set in use
+       were ISO-8859-1, the "=" character would thus be encoded as
+       "=3D", and a SPACE by "=20".  (Upper case should be used for
+       hexadecimal digits "A" through "F".)
+
+   (2) The 8-bit hexadecimal value 20 (e.g., ISO-8859-1 SPACE) may be
+       represented as "_" (underscore, ASCII 95.).  (This character may
+       not pass through some internetwork mail gateways, but its use
+       will greatly enhance readability of "Q" encoded data with mail
+       readers that do not support this encoding.)  Note that the "_"
+       always represents hexadecimal 20, even if the SPACE character
+       occupies a different code position in the character set in use.
+
+   (3) 8-bit values which correspond to printable ASCII characters other
+       than "=", "?", and "_" (underscore), MAY be represented as those
+       characters.  (But see section 5 for restrictions.)  In
+       particular, SPACE and TAB MUST NOT be represented as themselves
+       within encoded words.
+
+
+
+Moore                       Standards Track                     [Page 6]
+
+RFC 2047               Message Header Extensions           November 1996
+
+
+5. Use of encoded-words in message headers
+
+   An 'encoded-word' may appear in a message header or body part header
+   according to the following rules:
+
+(1) An 'encoded-word' may replace a 'text' token (as defined by RFC 822)
+    in any Subject or Comments header field, any extension message
+    header field, or any MIME body part field for which the field body
+    is defined as '*text'.  An 'encoded-word' may also appear in any
+    user-defined ("X-") message or body part header field.
+
+    Ordinary ASCII text and 'encoded-word's may appear together in the
+    same header field.  However, an 'encoded-word' that appears in a
+    header field defined as '*text' MUST be separated from any adjacent
+    'encoded-word' or 'text' by 'linear-white-space'.
+
+(2) An 'encoded-word' may appear within a 'comment' delimited by "(" and
+    ")", i.e., wherever a 'ctext' is allowed.  More precisely, the RFC
+    822 ABNF definition for 'comment' is amended as follows:
+
+    comment = "(" *(ctext / quoted-pair / comment / encoded-word) ")"
+
+    A "Q"-encoded 'encoded-word' which appears in a 'comment' MUST NOT
+    contain the characters "(", ")" or "
+    'encoded-word' that appears in a 'comment' MUST be separated from
+    any adjacent 'encoded-word' or 'ctext' by 'linear-white-space'.
+
+    It is important to note that 'comment's are only recognized inside
+    "structured" field bodies.  In fields whose bodies are defined as
+    '*text', "(" and ")" are treated as ordinary characters rather than
+    comment delimiters, and rule (1) of this section applies.  (See RFC
+    822, sections 3.1.2 and 3.1.3)
+
+(3) As a replacement for a 'word' entity within a 'phrase', for example,
+    one that precedes an address in a From, To, or Cc header.  The ABNF
+    definition for 'phrase' from RFC 822 thus becomes:
+
+    phrase = 1*( encoded-word / word )
+
+    In this case the set of characters that may be used in a "Q"-encoded
+    'encoded-word' is restricted to: <upper and lower case ASCII
+    letters, decimal digits, "!", "*", "+", "-", "/", "=", and "_"
+    (underscore, ASCII 95.)>.  An 'encoded-word' that appears within a
+    'phrase' MUST be separated from any adjacent 'word', 'text' or
+    'special' by 'linear-white-space'.
+
+
+
+
+
+
+Moore                       Standards Track                     [Page 7]
+
+RFC 2047               Message Header Extensions           November 1996
+
+
+   These are the ONLY locations where an 'encoded-word' may appear.  In
+   particular:
+
+   + An 'encoded-word' MUST NOT appear in any portion of an 'addr-spec'.
+
+   + An 'encoded-word' MUST NOT appear within a 'quoted-string'.
+
+   + An 'encoded-word' MUST NOT be used in a Received header field.
+
+   + An 'encoded-word' MUST NOT be used in parameter of a MIME
+     Content-Type or Content-Disposition field, or in any structured
+     field body except within a 'comment' or 'phrase'.
+
+   The 'encoded-text' in an 'encoded-word' must be self-contained;
+   'encoded-text' MUST NOT be continued from one 'encoded-word' to
+   another.  This implies that the 'encoded-text' portion of a "B"
+   'encoded-word' will be a multiple of 4 characters long; for a "Q"
+   'encoded-word', any "=" character that appears in the 'encoded-text'
+   portion will be followed by two hexadecimal characters.
+
+   Each 'encoded-word' MUST encode an integral number of octets.  The
+   'encoded-text' in each 'encoded-word' must be well-formed according
+   to the encoding specified; the 'encoded-text' may not be continued in
+   the next 'encoded-word'.  (For example, "=?charset?Q?=?=
+   =?charset?Q?AB?=" would be illegal, because the two hex digits "AB"
+   must follow the "=" in the same 'encoded-word'.)
+
+   Each 'encoded-word' MUST represent an integral number of characters.
+   A multi-octet character may not be split across adjacent 'encoded-
+   word's.
+
+   Only printable and white space character data should be encoded using
+   this scheme.  However, since these encoding schemes allow the
+   encoding of arbitrary octet values, mail readers that implement this
+   decoding should also ensure that display of the decoded data on the
+   recipient's terminal will not cause unwanted side-effects.
+
+   Use of these methods to encode non-textual data (e.g., pictures or
+   sounds) is not defined by this memo.  Use of 'encoded-word's to
+   represent strings of purely ASCII characters is allowed, but
+   discouraged.  In rare cases it may be necessary to encode ordinary
+   text that looks like an 'encoded-word'.
+
+
+
+
+
+
+
+
+
+Moore                       Standards Track                     [Page 8]
+
+RFC 2047               Message Header Extensions           November 1996
+
+
+6. Support of 'encoded-word's by mail readers
+
+6.1. Recognition of 'encoded-word's in message headers
+
+   A mail reader must parse the message and body part headers according
+   to the rules in RFC 822 to correctly recognize 'encoded-word's.
+
+   'encoded-word's are to be recognized as follows:
+
+   (1) Any message or body part header field defined as '*text', or any
+       user-defined header field, should be parsed as follows: Beginning
+       at the start of the field-body and immediately following each
+       occurrence of 'linear-white-space', each sequence of up to 75
+       printable characters (not containing any 'linear-white-space')
+       should be examined to see if it is an 'encoded-word' according to
+       the syntax rules in section 2.  Any other sequence of printable
+       characters should be treated as ordinary ASCII text.
+
+   (2) Any header field not defined as '*text' should be parsed
+       according to the syntax rules for that header field.  However,
+       any 'word' that appears within a 'phrase' should be treated as an
+       'encoded-word' if it meets the syntax rules in section 2.
+       Otherwise it should be treated as an ordinary 'word'.
+
+   (3) Within a 'comment', any sequence of up to 75 printable characters
+       (not containing 'linear-white-space'), that meets the syntax
+       rules in section 2, should be treated as an 'encoded-word'.
+       Otherwise it should be treated as normal comment text.
+
+   (4) A MIME-Version header field is NOT required to be present for
+       'encoded-word's to be interpreted according to this
+       specification.  One reason for this is that the mail reader is
+       not expected to parse the entire message header before displaying
+       lines that may contain 'encoded-word's.
+
+6.2. Display of 'encoded-word's
+
+   Any 'encoded-word's so recognized are decoded, and if possible, the
+   resulting unencoded text is displayed in the original character set.
+
+   NOTE: Decoding and display of encoded-words occurs *after* a
+   structured field body is parsed into tokens.  It is therefore
+   possible to hide 'special' characters in encoded-words which, when
+   displayed, will be indistinguishable from 'special' characters in the
+   surrounding text.  For this and other reasons, it is NOT generally
+   possible to translate a message header containing 'encoded-word's to
+   an unencoded form which can be parsed by an RFC 822 mail reader.
+
+
+
+
+Moore                       Standards Track                     [Page 9]
+
+RFC 2047               Message Header Extensions           November 1996
+
+
+   When displaying a particular header field that contains multiple
+   'encoded-word's, any 'linear-white-space' that separates a pair of
+   adjacent 'encoded-word's is ignored.  (This is to allow the use of
+   multiple 'encoded-word's to represent long strings of unencoded text,
+   without having to separate 'encoded-word's where spaces occur in the
+   unencoded text.)
+
+   In the event other encodings are defined in the future, and the mail
+   reader does not support the encoding used, it may either (a) display
+   the 'encoded-word' as ordinary text, or (b) substitute an appropriate
+   message indicating that the text could not be decoded.
+
+   If the mail reader does not support the character set used, it may
+   (a) display the 'encoded-word' as ordinary text (i.e., as it appears
+   in the header), (b) make a "best effort" to display using such
+   characters as are available, or (c) substitute an appropriate message
+   indicating that the decoded text could not be displayed.
+
+   If the character set being used employs code-switching techniques,
+   display of the encoded text implicitly begins in "ASCII mode".  In
+   addition, the mail reader must ensure that the output device is once
+   again in "ASCII mode" after the 'encoded-word' is displayed.
+
+6.3. Mail reader handling of incorrectly formed 'encoded-word's
+
+   It is possible that an 'encoded-word' that is legal according to the
+   syntax defined in section 2, is incorrectly formed according to the
+   rules for the encoding being used.   For example:
+
+   (1) An 'encoded-word' which contains characters which are not legal
+       for a particular encoding (for example, a "-" in the "B"
+       encoding, or a SPACE or HTAB in either the "B" or "Q" encoding),
+       is incorrectly formed.
+
+   (2) Any 'encoded-word' which encodes a non-integral number of
+       characters or octets is incorrectly formed.
+
+   A mail reader need not attempt to display the text associated with an
+   'encoded-word' that is incorrectly formed.  However, a mail reader
+   MUST NOT prevent the display or handling of a message because an
+   'encoded-word' is incorrectly formed.
+
+7. Conformance
+
+   A mail composing program claiming compliance with this specification
+   MUST ensure that any string of non-white-space printable ASCII
+   characters within a '*text' or '*ctext' that begins with "=?" and
+   ends with "?=" be a valid 'encoded-word'.  ("begins" means: at the
+
+
+
+Moore                       Standards Track                    [Page 10]
+
+RFC 2047               Message Header Extensions           November 1996
+
+
+   start of the field-body, immediately following 'linear-white-space',
+   or immediately following a "(" for an 'encoded-word' within '*ctext';
+   "ends" means: at the end of the field-body, immediately preceding
+   'linear-white-space', or immediately preceding a ")" for an
+   'encoded-word' within '*ctext'.)  In addition, any 'word' within a
+   'phrase' that begins with "=?" and ends with "?=" must be a valid
+   'encoded-word'.
+
+   A mail reading program claiming compliance with this specification
+   must be able to distinguish 'encoded-word's from 'text', 'ctext', or
+   'word's, according to the rules in section 6, anytime they appear in
+   appropriate places in message headers.  It must support both the "B"
+   and "Q" encodings for any character set which it supports.  The
+   program must be able to display the unencoded text if the character
+   set is "US-ASCII".  For the ISO-8859-* character sets, the mail
+   reading program must at least be able to display the characters which
+   are also in the ASCII set.
+
+8. Examples
+
+   The following are examples of message headers containing 'encoded-
+   word's:
+
+   From: =?US-ASCII?Q?Keith_Moore?= <moore@cs.utk.edu>
+   To: =?ISO-8859-1?Q?Keld_J=F8rn_Simonsen?= <keld@dkuug.dk>
+   CC: =?ISO-8859-1?Q?Andr=E9?= Pirard <PIRARD@vm1.ulg.ac.be>
+   Subject: =?ISO-8859-1?B?SWYgeW91IGNhbiByZWFkIHRoaXMgeW8=?=
+    =?ISO-8859-2?B?dSB1bmRlcnN0YW5kIHRoZSBleGFtcGxlLg==?=
+
+      Note: In the first 'encoded-word' of the Subject field above, the
+      last "=" at the end of the 'encoded-text' is necessary because each
+      'encoded-word' must be self-contained (the "=" character completes a
+      group of 4 base64 characters representing 2 octets).  An additional
+      octet could have been encoded in the first 'encoded-word' (so that
+      the encoded-word would contain an exact multiple of 3 encoded
+      octets), except that the second 'encoded-word' uses a different
+      'charset' than the first one.
+
+   From: =?ISO-8859-1?Q?Olle_J=E4rnefors?= <ojarnef@admin.kth.se>
+   To: ietf-822@dimacs.rutgers.edu, ojarnef@admin.kth.se
+   Subject: Time for ISO 10646?
+
+   To: Dave Crocker <dcrocker@mordor.stanford.edu>
+   Cc: ietf-822@dimacs.rutgers.edu, paf@comsol.se
+   From: =?ISO-8859-1?Q?Patrik_F=E4ltstr=F6m?= <paf@nada.kth.se>
+   Subject: Re: RFC-HDR care and feeding
+
+
+
+
+
+Moore                       Standards Track                    [Page 11]
+
+RFC 2047               Message Header Extensions           November 1996
+
+
+   From: Nathaniel Borenstein <nsb@thumper.bellcore.com>
+         (=?iso-8859-8?b?7eXs+SDv4SDp7Oj08A==?=)
+   To: Greg Vaudreuil <gvaudre@NRI.Reston.VA.US>, Ned Freed
+      <ned@innosoft.com>, Keith Moore <moore@cs.utk.edu>
+   Subject: Test of new header generator
+   MIME-Version: 1.0
+   Content-type: text/plain; charset=ISO-8859-1
+
+   The following examples illustrate how text containing 'encoded-word's
+   which appear in a structured field body.  The rules are slightly
+   different for fields defined as '*text' because "(" and ")" are not
+   recognized as 'comment' delimiters.  [Section 5, paragraph (1)].
+
+   In each of the following examples, if the same sequence were to occur
+   in a '*text' field, the "displayed as" form would NOT be treated as
+   encoded words, but be identical to the "encoded form".  This is
+   because each of the encoded-words in the following examples is
+   adjacent to a "(" or ")" character.
+
+   encoded form                                displayed as
+   ---------------------------------------------------------------------
+   (=?ISO-8859-1?Q?a?=)                        (a)
+
+   (=?ISO-8859-1?Q?a?= b)                      (a b)
+
+           Within a 'comment', white space MUST appear between an
+           'encoded-word' and surrounding text.  [Section 5,
+           paragraph (2)].  However, white space is not needed between
+           the initial "(" that begins the 'comment', and the
+           'encoded-word'.
+
+
+   (=?ISO-8859-1?Q?a?= =?ISO-8859-1?Q?b?=)     (ab)
+
+           White space between adjacent 'encoded-word's is not
+           displayed.
+
+   (=?ISO-8859-1?Q?a?=  =?ISO-8859-1?Q?b?=)    (ab)
+
+        Even multiple SPACEs between 'encoded-word's are ignored
+        for the purpose of display.
+
+   (=?ISO-8859-1?Q?a?=                         (ab)
+       =?ISO-8859-1?Q?b?=)
+
+           Any amount of linear-space-white between 'encoded-word's,
+           even if it includes a CRLF followed by one or more SPACEs,
+           is ignored for the purposes of display.
+
+
+
+Moore                       Standards Track                    [Page 12]
+
+RFC 2047               Message Header Extensions           November 1996
+
+
+   (=?ISO-8859-1?Q?a_b?=)                      (a b)
+
+           In order to cause a SPACE to be displayed within a portion
+           of encoded text, the SPACE MUST be encoded as part of the
+           'encoded-word'.
+
+   (=?ISO-8859-1?Q?a?= =?ISO-8859-2?Q?_b?=)    (a b)
+
+           In order to cause a SPACE to be displayed between two strings
+           of encoded text, the SPACE MAY be encoded as part of one of
+           the 'encoded-word's.
+
+9. References
+
+   [RFC 822] Crocker, D., "Standard for the Format of ARPA Internet Text
+       Messages", STD 11, RFC 822, UDEL, August 1982.
+
+   [RFC 2049] Borenstein, N., and N. Freed, "Multipurpose Internet Mail
+       Extensions (MIME) Part Five: Conformance Criteria and Examples",
+       RFC 2049, November 1996.
+
+   [RFC 2045] Borenstein, N., and N. Freed, "Multipurpose Internet Mail
+       Extensions (MIME) Part One: Format of Internet Message Bodies",
+       RFC 2045, November 1996.
+
+   [RFC 2046] Borenstein N., and N. Freed, "Multipurpose Internet Mail
+       Extensions (MIME) Part Two: Media Types", RFC 2046,
+       November 1996.
+
+   [RFC 2048] Freed, N., Klensin, J., and J. Postel, "Multipurpose
+       Internet Mail Extensions (MIME) Part Four: Registration
+       Procedures", RFC 2048, November 1996.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Moore                       Standards Track                    [Page 13]
+
+RFC 2047               Message Header Extensions           November 1996
+
+
+10. Security Considerations
+
+   Security issues are not discussed in this memo.
+
+11. Acknowledgements
+
+   The author wishes to thank Nathaniel Borenstein, Issac Chan, Lutz
+   Donnerhacke, Paul Eggert, Ned Freed, Andreas M. Kirchwitz, Olle
+   Jarnefors, Mike Rosin, Yutaka Sato, Bart Schaefer, and Kazuhiko
+   Yamamoto, for their helpful advice, insightful comments, and
+   illuminating questions in response to earlier versions of this
+   specification.
+
+12. Author's Address
+
+   Keith Moore
+   University of Tennessee
+   107 Ayres Hall
+   Knoxville TN 37996-1301
+
+   EMail: moore@cs.utk.edu
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Moore                       Standards Track                    [Page 14]
+
+RFC 2047               Message Header Extensions           November 1996
+
+
+Appendix - changes since RFC 1522 (in no particular order)
+
+   + explicitly state that the MIME-Version is not requried to use
+     'encoded-word's.
+
+   + add explicit note that SPACEs and TABs are not allowed within
+     'encoded-word's, explaining that an 'encoded-word' must look like an
+     'atom' to an RFC822 parser.values, to be precise).
+
+   + add examples from Olle Jarnefors (thanks!) which illustrate how
+     encoded-words with adjacent linear-white-space are displayed.
+
+   + explicitly list terms defined in RFC822 and referenced in this memo
+
+   + fix transcription typos that caused one or two lines and a couple of
+     characters to disappear in the resulting text, due to nroff quirks.
+
+   + clarify that encoded-words are allowed in '*text' fields in both
+     RFC822 headers and MIME body part headers, but NOT as parameter
+     values.
+
+   + clarify the requirement to switch back to ASCII within the encoded
+     portion of an 'encoded-word', for any charset that uses code switching
+     sequences.
+
+   + add a note about 'encoded-word's being delimited by "(" and ")"
+     within a comment, but not in a *text (how bizarre!).
+
+   + fix the Andre Pirard example to get rid of the trailing "_" after
+     the =E9.  (no longer needed post-1342).
+
+   + clarification: an 'encoded-word' may appear immediately following
+     the initial "(" or immediately before the final ")" that delimits a
+     comment, not just adjacent to "(" and ")" *within* *ctext.
+
+   + add a note to explain that a "B" 'encoded-word' will always have a
+     multiple of 4 characters in the 'encoded-text' portion.
+
+   + add note about the "=" in the examples
+
+   + note that processing of 'encoded-word's occurs *after* parsing, and
+     some of the implications thereof.
+
+   + explicitly state that you can't expect to translate between
+     1522 and either vanilla 822 or so-called "8-bit headers".
+
+   + explicitly state that 'encoded-word's are not valid within a
+     'quoted-string'.
+
+
+
+Moore                       Standards Track                    [Page 15]
+
diff -uNr gmime-1.90.0/rfc/rfc2048.txt gmime/rfc/rfc2048.txt
--- gmime-1.90.0/rfc/rfc2048.txt	Thu Jan  1 01:00:00 1970
+++ gmime/rfc/rfc2048.txt	Tue Dec  5 07:39:10 2000
@@ -0,0 +1,1179 @@
+
+
+
+
+
+
+Network Working Group                                           N. Freed
+Request for Comments: 2048                                      Innosoft
+BCP: 13                                                       J. Klensin
+Obsoletes: 1521, 1522, 1590                                          MCI
+Category: Best Current Practice                                J. Postel
+                                                                     ISI
+                                                           November 1996
+
+
+                 Multipurpose Internet Mail Extensions
+                           (MIME) Part Four:
+                        Registration Procedures
+
+Status of this Memo
+
+   This document specifies an Internet Best Current Practices for the
+   Internet Community, and requests discussion and suggestions for
+   improvements.  Distribution of this memo is unlimited.
+
+Abstract
+
+   STD 11, RFC 822, defines a message representation protocol specifying
+   considerable detail about US-ASCII message headers, and leaves the
+   message content, or message body, as flat US-ASCII text.  This set of
+   documents, collectively called the Multipurpose Internet Mail
+   Extensions, or MIME, redefines the format of messages to allow for
+
+    (1)   textual message bodies in character sets other than
+          US-ASCII,
+
+    (2)   an extensible set of different formats for non-textual
+          message bodies,
+
+    (3)   multi-part message bodies, and
+
+    (4)   textual header information in character sets other than
+          US-ASCII.
+
+   These documents are based on earlier work documented in RFC 934, STD
+   11, and RFC 1049, but extends and revises them.  Because RFC 822 said
+   so little about message bodies, these documents are largely
+   orthogonal to (rather than a revision of) RFC 822.
+
+
+
+
+
+
+
+
+
+Freed, et. al.           Best Current Practice                  [Page 1]
+
+RFC 2048              MIME Registration Procedures         November 1996
+
+
+   This fourth document, RFC 2048, specifies various IANA registration
+   procedures for the following MIME facilities:
+
+    (1)   media types,
+
+    (2)   external body access types,
+
+    (3)   content-transfer-encodings.
+
+   Registration of character sets for use in MIME is covered elsewhere
+   and is no longer addressed by this document.
+
+   These documents are revisions of RFCs 1521 and 1522, which themselves
+   were revisions of RFCs 1341 and 1342.  An appendix in RFC 2049
+   describes differences and changes from previous versions.
+
+Table of Contents
+
+   1. Introduction .........................................    3
+   2. Media Type Registration ..............................    4
+   2.1 Registration Trees and Subtype Names ................    4
+   2.1.1 IETF Tree .........................................    4
+   2.1.2 Vendor Tree .......................................    4
+   2.1.3 Personal or Vanity Tree ...........................    5
+   2.1.4 Special `x.' Tree .................................    5
+   2.1.5 Additional Registration Trees .....................    6
+   2.2 Registration Requirements ...........................    6
+   2.2.1 Functionality Requirement .........................    6
+   2.2.2 Naming Requirements ...............................    6
+   2.2.3 Parameter Requirements ............................    7
+   2.2.4 Canonicalization and Format Requirements ..........    7
+   2.2.5 Interchange Recommendations .......................    8
+   2.2.6 Security Requirements .............................    8
+   2.2.7 Usage and Implementation Non-requirements .........    9
+   2.2.8 Publication Requirements ..........................   10
+   2.2.9 Additional Information ............................   10
+   2.3 Registration Procedure ..............................   11
+   2.3.1 Present the Media Type to the Community for  Review   11
+   2.3.2 IESG Approval .....................................   12
+   2.3.3 IANA Registration .................................   12
+   2.4 Comments on Media Type Registrations ................   12
+   2.5 Location of Registered Media Type List ..............   12
+   2.6 IANA Procedures for Registering Media Types .........   12
+   2.7 Change Control ......................................   13
+   2.8 Registration Template ...............................   14
+   3. External Body Access Types ...........................   14
+   3.1 Registration Requirements ...........................   15
+   3.1.1 Naming Requirements ...............................   15
+
+
+
+Freed, et. al.           Best Current Practice                  [Page 2]
+
+RFC 2048              MIME Registration Procedures         November 1996
+
+
+   3.1.2 Mechanism Specification Requirements ..............   15
+   3.1.3 Publication Requirements ..........................   15
+   3.1.4 Security Requirements .............................   15
+   3.2 Registration Procedure ..............................   15
+   3.2.1 Present the Access Type to the Community ..........   16
+   3.2.2 Access Type Reviewer ..............................   16
+   3.2.3 IANA Registration .................................   16
+   3.3 Location of Registered Access Type List .............   16
+   3.4 IANA Procedures for Registering Access Types ........   16
+   4. Transfer Encodings ...................................   17
+   4.1 Transfer Encoding Requirements ......................   17
+   4.1.1 Naming Requirements ...............................   17
+   4.1.2 Algorithm Specification Requirements ..............   18
+   4.1.3 Input Domain Requirements .........................   18
+   4.1.4 Output Range Requirements .........................   18
+   4.1.5 Data Integrity and Generality Requirements ........   18
+   4.1.6 New Functionality Requirements ....................   18
+   4.2 Transfer Encoding Definition Procedure ..............   19
+   4.3 IANA Procedures for Transfer Encoding Registration...   19
+   4.4 Location of Registered Transfer Encodings List ......   19
+   5. Authors' Addresses ...................................   20
+   A. Grandfathered Media Types ............................   21
+
+1.  Introduction
+
+   Recent Internet protocols have been carefully designed to be easily
+   extensible in certain areas.  In particular, MIME [RFC 2045] is an
+   open-ended framework and can accommodate additional object types,
+   character sets, and access methods without any changes to the basic
+   protocol.  A registration process is needed, however, to ensure that
+   the set of such values is developed in an orderly, well-specified,
+   and public manner.
+
+   This document defines registration procedures which use the Internet
+   Assigned Numbers Authority (IANA) as a central registry for such
+   values.
+
+   Historical Note: The registration process for media types was
+   initially defined in the context of the asynchronous Internet mail
+   environment.  In this mail environment there is a need to limit the
+   number of possible media types to increase the likelihood of
+   interoperability when the capabilities of the remote mail system are
+   not known.  As media types are used in new environments, where the
+   proliferation of media types is not a hindrance to interoperability,
+   the original procedure was excessively restrictive and had to be
+   generalized.
+
+
+
+
+
+Freed, et. al.           Best Current Practice                  [Page 3]
+
+RFC 2048              MIME Registration Procedures         November 1996
+
+
+2.  Media Type Registration
+
+   Registration of a new media type or types starts with the
+   construction of a registration proposal.  Registration may occur in
+   several different registration trees, which have different
+   requirements as discussed below.  In general, the new registration
+   proposal is circulated and reviewed in a fashion appropriate to the
+   tree involved.  The media type is then registered if the proposal is
+   acceptable.  The following sections describe the requirements and
+   procedures used for each of the different registration trees.
+
+2.1.  Registration Trees and Subtype Names
+
+   In order to increase the efficiency and flexibility of the
+   registration process, different structures of subtype names may be
+   registered to accomodate the different natural requirements for,
+   e.g., a subtype that will be recommended for wide support and
+   implementation by the Internet Community or a subtype that is used to
+   move files associated with proprietary software.  The following
+   subsections define registration "trees", distinguished by the use of
+   faceted names (e.g., names of the form "tree.subtree...type").  Note
+   that some media types defined prior to this document do not conform
+   to the naming conventions described below.  See Appendix A for a
+   discussion of them.
+
+2.1.1.  IETF Tree
+
+   The IETF tree is intended for types of general interest to the
+   Internet Community. Registration in the IETF tree requires approval
+   by the IESG and publication of the media type registration as some
+   form of RFC.
+
+   Media types in the IETF tree are normally denoted by names that are
+   not explicitly faceted, i.e., do not contain period (".", full stop)
+   characters.
+
+   The "owner" of a media type registration in the IETF tree is assumed
+   to be the IETF itself.  Modification or alteration of the
+   specification requires the same level of processing (e.g.  standards
+   track) required for the initial registration.
+
+2.1.2.  Vendor Tree
+
+   The vendor tree is used for media types associated with commercially
+   available products.  "Vendor" or "producer" are construed as
+   equivalent and very broadly in this context.
+
+
+
+
+
+Freed, et. al.           Best Current Practice                  [Page 4]
+
+RFC 2048              MIME Registration Procedures         November 1996
+
+
+   A registration may be placed in the vendor tree by anyone who has
+   need to interchange files associated with the particular product.
+   However, the registration formally belongs to the vendor or
+   organization producing the software or file format.  Changes to the
+   specification will be made at their request, as discussed in
+   subsequent sections.
+
+   Registrations in the vendor tree will be distinguished by the leading
+   facet "vnd.".  That may be followed, at the discretion of the
+   registration, by either a media type name from a well-known producer
+   (e.g., "vnd.mudpie") or by an IANA-approved designation of the
+   producer's name which is then followed by a media type or product
+   designation (e.g., vnd.bigcompany.funnypictures).
+
+   While public exposure and review of media types to be registered in
+   the vendor tree is not required, using the ietf-types list for review
+   is strongly encouraged to improve the quality of those
+   specifications. Registrations in the vendor tree may be submitted
+   directly to the IANA.
+
+2.1.3.  Personal or Vanity Tree
+
+   Registrations for media types created experimentally or as part of
+   products that are not distributed commercially may be registered in
+   the personal or vanity tree.  The registrations are distinguished by
+   the leading facet "prs.".
+
+   The owner of "personal" registrations and associated specifications
+   is the person or entity making the registration, or one to whom
+   responsibility has been transferred as described below.
+
+   While public exposure and review of media types to be registered in
+   the personal tree is not required, using the ietf-types list for
+   review is strongly encouraged to improve the quality of those
+   specifications.  Registrations in the personl tree may be submitted
+   directly to the IANA.
+
+2.1.4.  Special `x.' Tree
+
+   For convenience and symmetry with this registration scheme, media
+   type names with "x." as the first facet may be used for the same
+   purposes for which names starting in "x-" are normally used.  These
+   types are unregistered, experimental, and should be used only with
+   the active agreement of the parties exchanging them.
+
+
+
+
+
+
+
+Freed, et. al.           Best Current Practice                  [Page 5]
+
+RFC 2048              MIME Registration Procedures         November 1996
+
+
+   However, with the simplified registration procedures described above
+   for vendor and personal trees, it should rarely, if ever, be
+   necessary to use unregistered experimental types, and as such use of
+   both "x-" and "x." forms is discouraged.
+
+2.1.5.  Additional Registration Trees
+
+   From time to time and as required by the community, the IANA may,
+   with the advice and consent of the IESG, create new top-level
+   registration trees.  It is explicitly assumed that these trees may be
+   created for external registration and management by well-known
+   permanent bodies, such as scientific societies for media types
+   specific to the sciences they cover.  In general, the quality of
+   review of specifications for one of these additional registration
+   trees is expected to be equivalent to that which IETF would give to
+   registrations in its own tree. Establishment of these new trees will
+   be announced through RFC publication approved by the IESG.
+
+2.2.  Registration Requirements
+
+   Media type registration proposals are all expected to conform to
+   various requirements laid out in the following sections.  Note that
+   requirement specifics sometimes vary depending on the registration
+   tree, again as detailed in the following sections.
+
+2.2.1.  Functionality Requirement
+
+   Media types must function as an actual media format: Registration of
+   things that are better thought of as a transfer encoding, as a
+   character set, or as a collection of separate entities of another
+   type, is not allowed.  For example, although applications exist to
+   decode the base64 transfer encoding [RFC 2045], base64 cannot be
+   registered as a media type.
+
+   This requirement applies regardless of the registration tree
+   involved.
+
+2.2.2.  Naming Requirements
+
+   All registered media types must be assigned MIME type and subtype
+   names. The combination of these names then serves to uniquely
+   identify the media type and the format of the subtype name identifies
+   the registration tree.
+
+   The choice of top-level type name must take the nature of media type
+   involved into account. For example, media normally used for
+   representing still images should be a subtype of the image content
+   type, whereas media capable of representing audio information belongs
+
+
+
+Freed, et. al.           Best Current Practice                  [Page 6]
+
+RFC 2048              MIME Registration Procedures         November 1996
+
+
+   under the audio content type. See RFC 2046 for additional information
+   on the basic set of top-level types and their characteristics.
+
+   New subtypes of top-level types must conform to the restrictions of
+   the top-level type, if any. For example, all subtypes of the
+   multipart content type must use the same encapsulation syntax.
+
+   In some cases a new media type may not "fit" under any currently
+   defined top-level content type. Such cases are expected to be quite
+   rare. However, if such a case arises a new top-level type can be
+   defined to accommodate it. Such a definition must be done via
+   standards-track RFC; no other mechanism can be used to define
+   additional top-level content types.
+
+   These requirements apply regardless of the registration tree
+   involved.
+
+2.2.3.  Parameter Requirements
+
+   Media types may elect to use one or more MIME content type
+   parameters, or some parameters may be automatically made available to
+   the media type by virtue of being a subtype of a content type that
+   defines a set of parameters applicable to any of its subtypes.  In
+   either case, the names, values, and meanings of any parameters must
+   be fully specified when a media type is registered in the IETF tree,
+   and should be specified as completely as possible when media types
+   are registered in the vendor or personal trees.
+
+   New parameters must not be defined as a way to introduce new
+   functionality in types registered in the IETF tree, although new
+   parameters may be added to convey additional information that does
+   not otherwise change existing functionality.  An example of this
+   would be a "revision" parameter to indicate a revision level of an
+   external specification such as JPEG.  Similar behavior is encouraged
+   for media types registered in the vendor or personal trees but is not
+   required.
+
+2.2.4.  Canonicalization and Format Requirements
+
+   All registered media types must employ a single, canonical data
+   format, regardless of registration tree.
+
+   A precise and openly available specification of the format of each
+   media type is required for all types registered in the IETF tree and
+   must at a minimum be referenced by, if it isn't actually included in,
+   the media type registration proposal itself.
+
+
+
+
+
+Freed, et. al.           Best Current Practice                  [Page 7]
+
+RFC 2048              MIME Registration Procedures         November 1996
+
+
+   The specifications of format and processing particulars may or may
+   not be publically available for media types registered in the vendor
+   tree, and such registration proposals are explicitly permitted to
+   include only a specification of which software and version produce or
+   process such media types.  References to or inclusion of format
+   specifications in registration proposals is encouraged but not
+   required.
+
+   Format specifications are still required for registration in the
+   personal tree, but may be either published as RFCs or otherwise
+   deposited with IANA. The deposited specifications will meet the same
+   criteria as those required to register a well-known TCP port and, in
+   particular, need not be made public.
+
+   Some media types involve the use of patented technology.  The
+   registration of media types involving patented technology is
+   specifically permitted.  However, the restrictions set forth in RFC
+   1602 on the use of patented technology in standards-track protocols
+   must be respected when the specification of a media type is part of a
+   standards-track protocol.
+
+2.2.5.  Interchange Recommendations
+
+   Media types should, whenever possible, interoperate across as many
+   systems and applications as possible. However, some media types will
+   inevitably have problems interoperating across different platforms.
+   Problems with different versions, byte ordering, and specifics of
+   gateway handling can and will arise.
+
+   Universal interoperability of media types is not required, but known
+   interoperability issues should be identified whenever possible.
+   Publication of a media type does not require an exhaustive review of
+   interoperability, and the interoperability considerations section is
+   subject to continuing evaluation.
+
+   These recommendations apply regardless of the registration tree
+   involved.
+
+2.2.6.  Security Requirements
+
+   An analysis of security issues is required for for all types
+   registered in the IETF Tree.  (This is in accordance with the basic
+   requirements for all IETF protocols.) A similar analysis for media
+   types registered in the vendor or personal trees is encouraged but
+   not required.  However, regardless of what security analysis has or
+   has not been done, all descriptions of security issues must be as
+   accurate as possible regardless of registration tree.  In particular,
+   a statement that there are "no security issues associated with this
+
+
+
+Freed, et. al.           Best Current Practice                  [Page 8]
+
+RFC 2048              MIME Registration Procedures         November 1996
+
+
+   type" must not be confused with "the security issues associates with
+   this type have not been assessed".
+
+   There is absolutely no requirement that media types registered in any
+   tree be secure or completely free from risks.  Nevertheless, all
+   known security risks must be identified in the registration of a
+   media type, again regardless of registration tree.
+
+   The security considerations section of all registrations is subject
+   to continuing evaluation and modification, and in particular may be
+   extended by use of the "comments on media types" mechanism described
+   in subsequent sections.
+
+   Some of the issues that should be looked at in a security analysis of
+   a media type are:
+
+    (1)   Complex media types may include provisions for
+          directives that institute actions on a recipient's
+          files or other resources.  In many cases provision is
+          made for originators to specify arbitrary actions in an
+          unrestricted fashion which may then have devastating
+          effects.  See the registration of the
+          application/postscript media type in RFC 2046 for
+          an example of such directives and how to handle them.
+
+    (2)   Complex media types may include provisions for
+          directives that institute actions which, while not
+          directly harmful to the recipient, may result in
+          disclosure of information that either facilitates a
+          subsequent attack or else violates a recipient's
+          privacy in some way.  Again, the registration of the
+          application/postscript media type illustrates how such
+          directives can be handled.
+
+    (3)   A media type might be targeted for applications that
+          require some sort of security assurance but not provide
+          the necessary security mechanisms themselves. For
+          example, a media type could be defined for storage of
+          confidential medical information which in turn requires
+          an external confidentiality service.
+
+2.2.7.  Usage and Implementation Non-requirements
+
+   In the asynchronous mail environment, where information on the
+   capabilities of the remote mail agent is frequently not available to
+   the sender, maximum interoperability is attained by restricting the
+   number of media types used to those "common" formats expected to be
+   widely implemented.  This was asserted in the past as a reason to
+
+
+
+Freed, et. al.           Best Current Practice                  [Page 9]
+
+RFC 2048              MIME Registration Procedures         November 1996
+
+
+   limit the number of possible media types and resulted in a
+   registration process with a significant hurdle and delay for those
+   registering media types.
+
+   However, the need for "common" media types does not require limiting
+   the registration of new media types. If a limited set of media types
+   is recommended for a particular application, that should be asserted
+   by a separate applicability statement specific for the application
+   and/or environment.
+
+   As such, universal support and implementation of a media type is NOT
+   a requirement for registration.  If, however, a media type is
+   explicitly intended for limited use, this should be noted in its
+   registration.
+
+2.2.8.  Publication Requirements
+
+   Proposals for media types registered in the IETF tree must be
+   published as RFCs. RFC publication of vendor and personal media type
+   proposals is encouraged but not required. In all cases IANA will
+   retain copies of all media type proposals and "publish" them as part
+   of the media types registration tree itself.
+
+   Other than in the IETF tree, the registration of a data type does not
+   imply endorsement, approval, or recommendation by IANA or IETF or
+   even certification that the specification is adequate.  To become
+   Internet Standards, protocol, data objects, or whatever must go
+   through the IETF standards process.  This is too difficult and too
+   lengthy a process for the convenient registration of media types.
+
+   The IETF tree exists for media types that do require require a
+   substantive review and approval process with the vendor and personal
+   trees exist for those that do not. It is expected that applicability
+   statements for particular applications will be published from time to
+   time that recommend implementation of, and support for, media types
+   that have proven particularly useful in those contexts.
+
+   As discussed above, registration of a top-level type requires
+   standards-track processing and, hence, RFC publication.
+
+2.2.9.  Additional Information
+
+   Various sorts of optional information may be included in the
+   specification of a media type if it is available:
+
+    (1)   Magic number(s) (length, octet values). Magic numbers
+          are byte sequences that are always present and thus can
+          be used to identify entities as being of a given media
+
+
+
+Freed, et. al.           Best Current Practice                 [Page 10]
+
+RFC 2048              MIME Registration Procedures         November 1996
+
+
+          type.
+
+    (2)   File extension(s) commonly used on one or more
+          platforms to indicate that some file containing a given
+          type of media.
+
+    (3)   Macintosh File Type code(s) (4 octets) used to label
+          files containing a given type of media.
+
+   Such information is often quite useful to implementors and if
+   available should be provided.
+
+2.3.  Registration Procedure
+
+   The following procedure has been implemented by the IANA for review
+   and approval of new media types.  This is not a formal standards
+   process, but rather an administrative procedure intended to allow
+   community comment and sanity checking without excessive time delay.
+   For registration in the IETF tree, the normal IETF processes should
+   be followed, treating posting of an internet-draft and announcement
+   on the ietf-types list (as described in the next subsection) as a
+   first step.  For registrations in the vendor or personal tree, the
+   initial review step described below may be omitted and the type
+   registered directly by submitting the template and an explanation
+   directly to IANA (at iana@iana.org).  However, authors of vendor or
+   personal media type specifications are encouraged to seek community
+   review and comment whenever that is feasible.
+
+2.3.1.  Present the Media Type to the Community for Review
+
+   Send a proposed media type registration to the "ietf-types@iana.org"
+   mailing list for a two week review period.  This mailing list has
+   been established for the purpose of reviewing proposed media and
+   access types. Proposed media types are not formally registered and
+   must not be used; the "x-" prefix specified in RFC 2045 can be used
+   until registration is complete.
+
+   The intent of the public posting is to solicit comments and feedback
+   on the choice of type/subtype name, the unambiguity of the references
+   with respect to versions and external profiling information, and a
+   review of any interoperability or security considerations. The
+   submitter may submit a revised registration, or withdraw the
+   registration completely, at any time.
+
+
+
+
+
+
+
+
+Freed, et. al.           Best Current Practice                 [Page 11]
+
+RFC 2048              MIME Registration Procedures         November 1996
+
+
+2.3.2.  IESG Approval
+
+   Media types registered in the IETF tree must be submitted to the IESG
+   for approval.
+
+2.3.3.  IANA Registration
+
+   Provided that the media type meets the requirements for media types
+   and has obtained approval that is necessary, the author may submit
+   the registration request to the IANA, which will register the media
+   type and make the media type registration available to the community.
+
+2.4.  Comments on Media Type Registrations
+
+   Comments on registered media types may be submitted by members of the
+   community to IANA.  These comments will be passed on to the "owner"
+   of the media type if possible.  Submitters of comments may request
+   that their comment be attached to the media type registration itself,
+   and if IANA approves of this the comment will be made accessible in
+   conjunction with the type registration itself.
+
+2.5.  Location of Registered Media Type List
+
+   Media type registrations will be posted in the anonymous FTP
+   directory "ftp://ftp.isi.edu/in-notes/iana/assignments/media-types/"
+   and all registered media types will be listed in the periodically
+   issued "Assigned Numbers" RFC [currently STD 2, RFC 1700].  The media
+   type description and other supporting material may also be published
+   as an Informational RFC by sending it to "rfc-editor@isi.edu" (please
+   follow the instructions to RFC authors [RFC-1543]).
+
+2.6.  IANA Procedures for Registering Media Types
+
+   The IANA will only register media types in the IETF tree in response
+   to a communication from the IESG stating that a given registration
+   has been approved. Vendor and personal types will be registered by
+   the IANA automatically and without any formal review as long as the
+   following minimal conditions are met:
+
+    (1)   Media types must function as an actual media format.
+          In particular, character sets and transfer encodings
+          may not be registered as media types.
+
+    (2)   All media types must have properly formed type and
+          subtype names. All type names must be defined by a
+          standards-track RFC. All subtype names must be unique,
+          must conform to the MIME grammar for such names, and
+          must contain the proper tree prefix.
+
+
+
+Freed, et. al.           Best Current Practice                 [Page 12]
+
+RFC 2048              MIME Registration Procedures         November 1996
+
+
+    (3)   Types registered in the personal tree must either
+          provide a format specification or a pointer to one.
+
+    (4)   Any security considerations given must not be obviously
+          bogus. (It is neither possible nor necessary for the
+          IANA to conduct a comprehensive security review of
+          media type registrations.  Nevertheless, IANA has the
+          authority to identify obviously incompetent material
+          and exclude it.)
+
+2.7.  Change Control
+
+   Once a media type has been published by IANA, the author may request
+   a change to its definition. The descriptions of the different
+   registration trees above designate the "owners" of each type of
+   registration. The change request follows the same procedure as the
+   registration request:
+
+    (1)   Publish the revised template on the ietf-types list.
+
+    (2)   Leave at least two weeks for comments.
+
+    (3)   Publish using IANA after formal review if required.
+
+   Changes should be requested only when there are serious omission or
+   errors in the published specification. When review is required, a
+   change request may be denied if it renders entities that were valid
+   under the previous definition invalid under the new definition.
+
+   The owner of a content type may pass responsibility for the content
+   type to another person or agency by informing IANA and the ietf-types
+   list; this can be done without discussion or review.
+
+   The IESG may reassign responsibility for a media type. The most
+   common case of this will be to enable changes to be made to types
+   where the author of the registration has died, moved out of contact
+   or is otherwise unable to make changes that are important to the
+   community.
+
+   Media type registrations may not be deleted; media types which are no
+   longer believed appropriate for use can be declared OBSOLETE by a
+   change to their "intended use" field; such media types will be
+   clearly marked in the lists published by IANA.
+
+
+
+
+
+
+
+
+Freed, et. al.           Best Current Practice                 [Page 13]
+
+RFC 2048              MIME Registration Procedures         November 1996
+
+
+2.8.  Registration Template
+
+     To: ietf-types@iana.org
+     Subject: Registration of MIME media type XXX/YYY
+
+     MIME media type name:
+
+     MIME subtype name:
+
+     Required parameters:
+
+     Optional parameters:
+
+     Encoding considerations:
+
+     Security considerations:
+
+     Interoperability considerations:
+
+     Published specification:
+
+     Applications which use this media type:
+
+     Additional information:
+
+       Magic number(s):
+       File extension(s):
+       Macintosh File Type Code(s):
+
+     Person & email address to contact for further information:
+
+     Intended usage:
+
+     (One of COMMON, LIMITED USE or OBSOLETE)
+
+     Author/Change controller:
+
+     (Any other information that the author deems interesting may be
+     added below this line.)
+
+3.  External Body Access Types
+
+   RFC 2046 defines the message/external-body media type, whereby a MIME
+   entity can act as pointer to the actual body data in lieu of
+   including the data directly in the entity body. Each
+   message/external-body reference specifies an access type, which
+   determines the mechanism used to retrieve the actual body data. RFC
+   2046 defines an initial set of access types, but allows for the
+
+
+
+Freed, et. al.           Best Current Practice                 [Page 14]
+
+RFC 2048              MIME Registration Procedures         November 1996
+
+
+   registration of additional access types to accommodate new retrieval
+   mechanisms.
+
+3.1.  Registration Requirements
+
+   New access type specifications must conform to a number of
+   requirements as described below.
+
+3.1.1.  Naming Requirements
+
+   Each access type must have a unique name.  This name appears in the
+   access-type parameter in the message/external-body content-type
+   header field, and must conform to MIME content type parameter syntax.
+
+3.1.2.  Mechanism Specification Requirements
+
+   All of the protocols, transports, and procedures used by a given
+   access type must be described, either in the specification of the
+   access type itself or in some other publicly available specification,
+   in sufficient detail for the access type to be implemented by any
+   competent implementor.  Use of secret and/or proprietary methods in
+   access types are expressly prohibited. The restrictions imposed by
+   RFC 1602 on the standardization of patented algorithms must be
+   respected as well.
+
+3.1.3.  Publication Requirements
+
+   All access types must be described by an RFC. The RFC may be
+   informational rather than standards-track, although standard-track
+   review and approval are encouraged for all access types.
+
+3.1.4.  Security Requirements
+
+   Any known security issues that arise from the use of the access type
+   must be completely and fully described. It is not required that the
+   access type be secure or that it be free from risks, but that the
+   known risks be identified.  Publication of a new access type does not
+   require an exhaustive security review, and the security
+   considerations section is subject to continuing evaluation.
+   Additional security considerations should be addressed by publishing
+   revised versions of the access type specification.
+
+3.2.  Registration Procedure
+
+   Registration of a new access type starts with the construction of a
+   draft of an RFC.
+
+
+
+
+
+Freed, et. al.           Best Current Practice                 [Page 15]
+
+RFC 2048              MIME Registration Procedures         November 1996
+
+
+3.2.1.  Present the Access Type to the Community
+
+   Send a proposed access type specification to the "ietf-
+   types@iana.org" mailing list for a two week review period.  This
+   mailing list has been established for the purpose of reviewing
+   proposed access and media types.  Proposed access types are not
+   formally registered and must not be used.
+
+   The intent of the public posting is to solicit comments and feedback
+   on the access type specification and a review of any security
+   considerations.
+
+3.2.2.  Access Type Reviewer
+
+   When the two week period has passed, the access type reviewer, who is
+   appointed by the IETF Applications Area Director, either forwards the
+   request to iana@isi.edu, or rejects it because of significant
+   objections raised on the list.
+
+   Decisions made by the reviewer must be posted to the ietf-types
+   mailing list within 14 days. Decisions made by the reviewer may be
+   appealed to the IESG.
+
+3.2.3.  IANA Registration
+
+   Provided that the access type has either passed review or has been
+   successfully appealed to the IESG, the IANA will register the access
+   type and make the registration available to the community. The
+   specification of the access type must also be published as an RFC.
+   Informational RFCs are published by sending them to "rfc-
+   editor@isi.edu" (please follow the instructions to RFC authors [RFC-
+   1543]).
+
+3.3.  Location of Registered Access Type List
+
+   Access type registrations will be posted in the anonymous FTP
+   directory "ftp://ftp.isi.edu/in-notes/iana/assignments/access-types/"
+   and all registered access types will be listed in the periodically
+   issued "Assigned Numbers" RFC [currently RFC-1700].
+
+3.4.  IANA Procedures for Registering Access Types
+
+   The identity of the access type reviewer is communicated to the IANA
+   by the IESG.  The IANA then only acts in response to access type
+   definitions that either are approved by the access type reviewer and
+   forwarded by the reviewer to the IANA for registration, or in
+   response to a communication from the IESG that an access type
+   definition appeal has overturned the access type reviewer's ruling.
+
+
+
+Freed, et. al.           Best Current Practice                 [Page 16]
+
+RFC 2048              MIME Registration Procedures         November 1996
+
+
+4.  Transfer Encodings
+
+   Transfer encodings are tranformations applied to MIME media types
+   after conversion to the media type's canonical form.  Transfer
+   encodings are used for several purposes:
+
+    (1)   Many transports, especially message transports, can
+          only handle data consisting of relatively short lines
+          of text. There can also be severe restrictions on what
+          characters can be used in these lines of text -- some
+          transports are restricted to a small subset of US-ASCII
+          and others cannot handle certain character sequences.
+          Transfer encodings are used to transform binary data
+          into textual form that can survive such transports.
+          Examples of this sort of transfer encoding include the
+          base64 and quoted-printable transfer encodings defined
+          in RFC 2045.
+
+    (2)   Image, audio, video, and even application entities are
+          sometimes quite large. Compression algorithms are often
+          quite effective in reducing the size of large entities.
+          Transfer encodings can be used to apply general-purpose
+          non-lossy compression algorithms to MIME entities.
+
+    (3)   Transport encodings can be defined as a means of
+          representing existing encoding formats in a MIME
+          context.
+
+   IMPORTANT:  The standardization of a large numbers of different
+   transfer encodings is seen as a significant barrier to widespread
+   interoperability and is expressely discouraged.  Nevertheless, the
+   following procedure has been defined to provide a means of defining
+   additional transfer encodings, should standardization actually be
+   justified.
+
+4.1.  Transfer Encoding Requirements
+
+   Transfer encoding specifications must conform to a number of
+   requirements as described below.
+
+4.1.1.  Naming Requirements
+
+   Each transfer encoding must have a unique name.  This name appears in
+   the Content-Transfer-Encoding header field and must conform to the
+   syntax of that field.
+
+
+
+
+
+
+Freed, et. al.           Best Current Practice                 [Page 17]
+
+RFC 2048              MIME Registration Procedures         November 1996
+
+
+4.1.2.  Algorithm Specification Requirements
+
+   All of the algorithms used in a transfer encoding (e.g.  conversion
+   to printable form, compression) must be described in their entirety
+   in the transfer encoding specification.  Use of secret and/or
+   proprietary algorithms in standardized transfer encodings are
+   expressly prohibited. The restrictions imposed by RFC 1602 on the
+   standardization of patented algorithms must be respected as well.
+
+4.1.3.  Input Domain Requirements
+
+   All transfer encodings must be applicable to an arbitrary sequence of
+   octets of any length.  Dependence on particular input forms is not
+   allowed.
+
+   It should be noted that the 7bit and 8bit encodings do not conform to
+   this requirement. Aside from the undesireability of having
+   specialized encodings, the intent here is to forbid the addition of
+   additional encodings along the lines of 7bit and 8bit.
+
+4.1.4.  Output Range Requirements
+
+   There is no requirement that a particular tranfer encoding produce a
+   particular form of encoded output.  However, the output format for
+   each transfer encoding must be fully and completely documented.  In
+   particular, each specification must clearly state whether the output
+   format always lies within the confines of 7bit data, 8bit data, or is
+   simply pure binary data.
+
+4.1.5.  Data Integrity and Generality Requirements
+
+   All transfer encodings must be fully invertible on any platform; it
+   must be possible for anyone to recover the original data by
+   performing the corresponding decoding operation.  Note that this
+   requirement effectively excludes all forms of lossy compression as
+   well as all forms of encryption from use as a transfer encoding.
+
+4.1.6.  New Functionality Requirements
+
+   All transfer encodings must provide some sort of new functionality.
+   Some degree of functionality overlap with previously defined transfer
+   encodings is acceptable, but any new transfer encoding must also
+   offer something no other transfer encoding provides.
+
+
+
+
+
+
+
+
+Freed, et. al.           Best Current Practice                 [Page 18]
+
+RFC 2048              MIME Registration Procedures         November 1996
+
+
+4.2.  Transfer Encoding Definition Procedure
+
+   Definition of a new transfer encoding starts with the construction of
+   a draft of a standards-track RFC.  The RFC must define the transfer
+   encoding precisely and completely, and must also provide substantial
+   justification for defining and standardizing a new transfer encoding.
+   This specification must then be presented to the IESG for
+   consideration.  The IESG can
+
+    (1)   reject the specification outright as being
+          inappropriate for standardization,
+
+    (2)   approve the formation of an IETF working group to work
+          on the specification in accordance with IETF
+          procedures, or,
+
+    (3)   accept the specification as-is and put it directly on
+          the standards track.
+
+   Transfer encoding specifications on the standards track follow normal
+   IETF rules for standards track documents.  A transfer encoding is
+   considered to be defined and available for use once it is on the
+   standards track.
+
+4.3.  IANA Procedures for Transfer Encoding Registration
+
+   There is no need for a special procedure for registering Transfer
+   Encodings with the IANA. All legitimate transfer encoding
+   registrations must appear as a standards-track RFC, so it is the
+   IESG's responsibility to notify the IANA when a new transfer encoding
+   has been approved.
+
+4.4.  Location of Registered Transfer Encodings List
+
+   Transfer encoding registrations will be posted in the anonymous FTP
+   directory "ftp://ftp.isi.edu/in-notes/iana/assignments/transfer-
+   encodings/" and all registered transfer encodings will be listed in
+   the periodically issued "Assigned Numbers" RFC [currently RFC-1700].
+
+
+
+
+
+
+
+
+
+
+
+
+
+Freed, et. al.           Best Current Practice                 [Page 19]
+
+RFC 2048              MIME Registration Procedures         November 1996
+
+
+5.  Authors' Addresses
+
+   For more information, the authors of this document are best
+   contacted via Internet mail:
+
+   Ned Freed
+   Innosoft International, Inc.
+   1050 East Garvey Avenue South
+   West Covina, CA 91790
+   USA
+
+   Phone: +1 818 919 3600
+   Fax:   +1 818 919 3614
+   EMail: ned@innosoft.com
+
+
+   John Klensin
+   MCI
+   2100 Reston Parkway
+   Reston, VA 22091
+
+   Phone: +1 703 715-7361
+   Fax:   +1 703 715-7436
+   EMail: klensin@mci.net
+
+
+   Jon Postel
+   USC/Information Sciences Institute
+   4676 Admiralty Way
+   Marina del Rey, CA  90292
+   USA
+
+
+   Phone: +1 310 822 1511
+   Fax:   +1 310 823 6714
+   EMail: Postel@ISI.EDU
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Freed, et. al.           Best Current Practice                 [Page 20]
+
+RFC 2048              MIME Registration Procedures         November 1996
+
+
+Appendix A -- Grandfathered Media Types
+
+   A number of media types, registered prior to 1996, would, if
+   registered under the guidelines in this document, be placed into
+   either the vendor or personal trees.  Reregistration of those types
+   to reflect the appropriate trees is encouraged, but not required.
+   Ownership and change control principles outlined in this document
+   apply to those types as if they had been registered in the trees
+   described
+   bedi
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Freed, et. al.           Best Current Practice                 [Page 21]
+
diff -uNr gmime-1.90.0/rfc/rfc2049.txt gmime/rfc/rfc2049.txt
--- gmime-1.90.0/rfc/rfc2049.txt	Thu Jan  1 01:00:00 1970
+++ gmime/rfc/rfc2049.txt	Tue Dec  5 07:39:10 2000
@@ -0,0 +1,1347 @@
+
+
+
+
+
+
+Network Working Group                                          N. Freed
+Request for Comments: 2049                                     Innosoft
+Obsoletes: 1521, 1522, 1590                               N. Borenstein
+Category: Standards Track                                 First Virtual
+                                                          November 1996
+
+
+                 Multipurpose Internet Mail Extensions
+                           (MIME) Part Five:
+                   Conformance Criteria and Examples
+
+Status of this Memo
+
+   This document specifies an Internet standards track protocol for the
+   Internet community, and requests discussion and suggestions for
+   improvements.  Please refer to the current edition of the "Internet
+   Official Protocol Standards" (STD 1) for the standardization state
+   and status of this protocol.  Distribution of this memo is unlimited.
+
+Abstract
+
+   STD 11, RFC 822, defines a message representation protocol specifying
+   considerable detail about US-ASCII message headers, and leaves the
+   message content, or message body, as flat US-ASCII text.  This set of
+   documents, collectively called the Multipurpose Internet Mail
+   Extensions, or MIME, redefines the format of messages to allow for
+
+    (1)   textual message bodies in character sets other than
+          US-ASCII,
+
+    (2)   an extensible set of different formats for non-textual
+          message bodies,
+
+    (3)   multi-part message bodies, and
+
+    (4)   textual header information in character sets other than
+          US-ASCII.
+
+   These documents are based on earlier work documented in RFC 934, STD
+   11, and RFC 1049, but extends and revises them.  Because RFC 822 said
+   so little about message bodies, these documents are largely
+   orthogonal to (rather than a revision of) RFC 822.
+
+   The initial document in this set, RFC 2045, specifies the various
+   headers used to describe the structure of MIME messages. The second
+   document defines the general structure of the MIME media typing
+   system and defines an initial set of media types.  The third
+   document, RFC 2047, describes extensions to RFC 822 to allow non-US-
+
+
+
+Freed & Borenstein          Standards Track                     [Page 1]
+
+RFC 2049                    MIME Conformance               November 1996
+
+
+   ASCII text data in Internet mail header fields. The fourth document,
+   RFC 2048, specifies various IANA registration procedures for MIME-
+   related facilities. This fifth and final document describes MIME
+   conformance criteria as well as providing some illustrative examples
+   of MIME message formats, acknowledgements, and the bibliography.
+
+   These documents are revisions of RFCs 1521, 1522, and 1590, which
+   themselves were revisions of RFCs 1341 and 1342.  Appendix B of this
+   document describes differences and changes from previous versions.
+
+Table of Contents
+
+   1. Introduction ..........................................    2
+   2. MIME Conformance ......................................    2
+   3. Guidelines for Sending Email Data .....................    6
+   4. Canonical Encoding Model ..............................    9
+   5. Summary ...............................................   12
+   6. Security Considerations ...............................   12
+   7. Authors' Addresses ....................................   12
+   8. Acknowledgements ......................................   13
+   A. A Complex Multipart Example ...........................   15
+   B. Changes from RFC 1521, 1522, and 1590 .................   16
+   C. References ............................................   20
+
+1.  Introduction
+
+   The first and second documents in this set define MIME header fields
+   and the initial set of MIME media types.  The third document
+   describes extensions to RFC822 formats to allow for character sets
+   other than US-ASCII.  This document describes what portions  of MIME
+   must be supported by a conformant MIME implementation. It also
+   describes various pitfalls of contemporary messaging systems as well
+   as the canonical encoding model MIME is based on.
+
+2.  MIME Conformance
+
+   The mechanisms described in these documents are open-ended.  It is
+   definitely not expected that all implementations will support all
+   available media types, nor that they will all share the same
+   extensions.  In order to promote interoperability, however, it is
+   useful to define the concept of "MIME-conformance" to define a
+   certain level of implementation that allows the useful interworking
+   of messages with content that differs from US-ASCII text.  In this
+   section, we specify the requirements for such conformance.
+
+
+
+
+
+
+
+Freed & Borenstein          Standards Track                     [Page 2]
+
+RFC 2049                    MIME Conformance               November 1996
+
+
+   A mail user agent that is MIME-conformant MUST:
+
+    (1)   Always generate a "MIME-Version: 1.0" header field in
+          any message it creates.
+
+    (2)   Recognize the Content-Transfer-Encoding header field
+          and decode all received data encoded by either quoted-
+          printable or base64 implementations.  The identity
+          transformations 7bit, 8bit, and binary must also be
+          recognized.
+
+          Any non-7bit data that is sent without encoding must be
+          properly labelled with a content-transfer-encoding of
+          8bit or binary, as appropriate.  If the underlying
+          transport does not support 8bit or binary (as SMTP
+          [RFC-821] does not), the sender is required to both
+          encode and label data using an appropriate Content-
+          Transfer-Encoding such as quoted-printable or base64.
+
+    (3)   Must treat any unrecognized Content-Transfer-Encoding
+          as if it had a Content-Type of "application/octet-
+          stream", regardless of whether or not the actual
+          Content-Type is recognized.
+
+    (4)   Recognize and interpret the Content-Type header field,
+          and avoid showing users raw data with a Content-Type
+          field other than text.  Implementations  must be able
+          to send at least text/plain messages, with the
+          character set specified with the charset parameter if
+          it is not US-ASCII.
+
+    (5)   Ignore any content type parameters whose names they do
+          not recognize.
+
+    (6)   Explicitly handle the following media type values, to
+          at least the following extents:
+
+          Text:
+
+            -- Recognize and display "text" mail with the
+            character set "US-ASCII."
+
+            -- Recognize other character sets at least to the
+            extent of being able to inform the user about what
+            character set the message uses.
+
+
+
+
+
+
+Freed & Borenstein          Standards Track                     [Page 3]
+
+RFC 2049                    MIME Conformance               November 1996
+
+
+            -- Recognize the "ISO-8859-*" character sets to the
+            extent of being able to display those characters that
+            are common to ISO-8859-* and US-ASCII, namely all
+            characters represented by octet values 1-127.
+
+            -- For unrecognized subtypes in a known character
+            set, show or offer to show the user the "raw" version
+            of the data after conversion of the content from
+            canonical form to local form.
+
+            -- Treat material in an unknown character set as if
+            it were "application/octet-stream".
+
+          Image, audio, and video:
+
+            -- At a minumum provide facilities to treat any
+            unrecognized subtypes as if they were
+            "application/octet-stream".
+
+          Application:
+
+            -- Offer the ability to remove either of the quoted-
+            printable or base64 encodings defined in this
+            document if they were used and put the resulting
+            information in a user file.
+
+          Multipart:
+
+            -- Recognize the mixed subtype.  Display all relevant
+            information on the message level and the body part
+            header level and then display or offer to display
+            each of the body parts individually.
+
+            -- Recognize the "alternative" subtype, and avoid
+            showing the user redundant parts of
+            multipart/alternative mail.
+
+            -- Recognize the "multipart/digest" subtype,
+            specifically using "message/rfc822" rather than
+            "text/plain" as the default media type for body parts
+            inside "multipart/digest" entities.
+
+            -- Treat any unrecognized subtypes as if they were
+            "mixed".
+
+
+
+
+
+
+
+Freed & Borenstein          Standards Track                     [Page 4]
+
+RFC 2049                    MIME Conformance               November 1996
+
+
+          Message:
+
+            -- Recognize and display at least the RFC822 message
+            encapsulation (message/rfc822) in such a way as to
+            preserve any recursive structure, that is, displaying
+            or offering to display the encapsulated data in
+            accordance with its media type.
+
+            -- Treat any unrecognized subtypes as if they were
+            "application/octet-stream".
+
+    (7)   Upon encountering any unrecognized Content-Type field,
+          an implementation must treat it as if it had a media
+          type of "application/octet-stream" with no parameter
+          sub-arguments.  How such data are handled is up to an
+          implementation, but likely options for handling such
+          unrecognized data include offering the user to write it
+          into a file (decoded from its mail transport format) or
+          offering the user to name a program to which the
+          decoded data should be passed as input.
+
+    (8)   Conformant user agents are required, if they provide
+          non-standard support for non-MIME messages employing
+          character sets other than US-ASCII, to do so on
+          received messages only. Conforming user agents must not
+          send non-MIME messages containing anything other than
+          US-ASCII text.
+
+          In particular, the use of non-US-ASCII text in mail
+          messages without a MIME-Version field is strongly
+          discouraged as it impedes interoperability when sending
+          messages between regions with different localization
+          conventions. Conforming user agents MUST include proper
+          MIME labelling when sending anything other than plain
+          text in the US-ASCII character set.
+
+          In addition, non-MIME user agents should be upgraded if
+          at all possible to include appropriate MIME header
+          information in the messages they send even if nothing
+          else in MIME is supported.  This upgrade will have
+          little, if any, effect on non-MIME recipients and will
+          aid MIME in correctly displaying such messages.  It
+          also provides a smooth transition path to eventual
+          adoption of other MIME capabilities.
+
+    (9)   Conforming user agents must ensure that any string of
+          non-white-space printable US-ASCII characters within a
+          "*text" or "*ctext" that begins with "=?" and ends with
+
+
+
+Freed & Borenstein          Standards Track                     [Page 5]
+
+RFC 2049                    MIME Conformance               November 1996
+
+
+          "?=" be a valid encoded-word.  ("begins" means: At the
+          start of the field-body or immediately following
+          linear-white-space; "ends" means: At the end of the
+          field-body or immediately preceding linear-white-
+          space.) In addition, any "word" within a "phrase" that
+          begins with "=?" and ends with "?=" must be a valid
+          encoded-word.
+
+    (10)  Conforming user agents must be able to distinguish
+          encoded-words from "text", "ctext", or "word"s,
+          according to the rules in section 4, anytime they
+          appear in appropriate places in message headers.  It
+          must support both the "B" and "Q" encodings for any
+          character set which it supports.  The program must be
+          able to display the unencoded text if the character set
+          is "US-ASCII".  For the ISO-8859-* character sets, the
+          mail reading program must at least be able to display
+          the characters which are also in the US-ASCII set.
+
+   A user agent that meets the above conditions is said to be MIME-
+   conformant.  The meaning of this phrase is that it is assumed to be
+   "safe" to send virtually any kind of properly-marked data to users of
+   such mail systems, because such systems will at least be able to
+   treat the data as undifferentiated binary, and will not simply splash
+   it onto the screen of unsuspecting users.
+
+   There is another sense in which it is always "safe" to send data in a
+   format that is MIME-conformant, which is that such data will not
+   break or be broken by any known systems that are conformant with RFC
+   821 and RFC 822.  User agents that are MIME-conformant have the
+   additional guarantee that the user will not be shown data that were
+   never intended to be viewed as text.
+
+3.  Guidelines for Sending Email Data
+
+   Internet email is not a perfect, homogeneous system.  Mail may become
+   corrupted at several stages in its travel to a final destination.
+   Specifically, email sent throughout the Internet may travel across
+   many networking technologies. Many networking and mail technologies
+   do not support the full functionality possible in the SMTP transport
+   environment.  Mail traversing these systems is likely to be modified
+   in order that it can be transported.
+
+   There exist many widely-deployed non-conformant MTAs in the Internet.
+   These MTAs, speaking the SMTP protocol, alter messages on the fly to
+   take advantage of the internal data structure of the hosts they are
+   implemented on, or are just plain broken.
+
+
+
+
+Freed & Borenstein          Standards Track                     [Page 6]
+
+RFC 2049                    MIME Conformance               November 1996
+
+
+   The following guidelines may be useful to anyone devising a data
+   format (media type) that is supposed to survive the widest range of
+   networking technologies and known broken MTAs unscathed.  Note that
+   anything encoded in the base64 encoding will satisfy these rules, but
+   that some well-known mechanisms, notably the UNIX uuencode facility,
+   will not.  Note also that anything encoded in the Quoted-Printable
+   encoding will survive most gateways intact, but possibly not some
+   gateways to systems that use the EBCDIC character set.
+
+    (1)   Under some circumstances the encoding used for data may
+          change as part of normal gateway or user agent
+          operation.  In particular, conversion from base64 to
+          quoted-printable and vice versa may be necessary.  This
+          may result in the confusion of CRLF sequences with line
+          breaks in text bodies.  As such, the persistence of
+          CRLF as something other than a line break must not be
+          relied on.
+
+    (2)   Many systems may elect to represent and store text data
+          using local newline conventions.  Local newline
+          conventions may not match the RFC822 CRLF convention --
+          systems are known that use plain CR, plain LF, CRLF, or
+          counted records.  The result is that isolated CR and LF
+          characters are not well tolerated in general; they may
+          be lost or converted to delimiters on some systems, and
+          hence must not be relied on.
+
+    (3)   The transmission of NULs (US-ASCII value 0) is
+          problematic in Internet mail.  (This is largely the
+          result of NULs being used as a termination character by
+          many of the standard runtime library routines in the C
+          programming language.) The practice of using NULs as
+          termination characters is so entrenched now that
+          messages should not rely on them being preserved.
+
+    (4)   TAB (HT) characters may be misinterpreted or may be
+          automatically converted to variable numbers of spaces.
+          This is unavoidable in some environments, notably those
+          not based on the US-ASCII character set.  Such
+          conversion is STRONGLY DISCOURAGED, but it may occur,
+          and mail formats must not rely on the persistence of
+          TAB (HT) characters.
+
+    (5)   Lines longer than 76 characters may be wrapped or
+          truncated in some environments.  Line wrapping or line
+          truncation imposed by mail transports is STRONGLY
+          DISCOURAGED, but unavoidable in some cases.
+          Applications which require long lines must somehow
+
+
+
+Freed & Borenstein          Standards Track                     [Page 7]
+
+RFC 2049                    MIME Conformance               November 1996
+
+
+          differentiate between soft and hard line breaks.  (A
+          simple way to do this is to use the quoted-printable
+          encoding.)
+
+    (6)   Trailing "white space" characters (SPACE, TAB (HT)) on
+          a line may be discarded by some transport agents, while
+          other transport agents may pad lines with these
+          characters so that all lines in a mail file are of
+          equal length.  The persistence of trailing white space,
+          therefore, must not be relied on.
+
+    (7)   Many mail domains use variations on the US-ASCII
+          character set, or use character sets such as EBCDIC
+          which contain most but not all of the US-ASCII
+          characters.  The correct translation of characters not
+          in the "invariant" set cannot be depended on across
+          character converting gateways.  For example, this
+          situation is a problem when sending uuencoded
+          information across BITNET, an EBCDIC system.  Similar
+          problems can occur without crossing a gateway, since
+          many Internet hosts use character sets other than US-
+          ASCII internally.  The definition of Printable Strings
+          in X.400 adds further restrictions in certain special
+          cases.  In particular, the only characters that are
+          known to be consistent across all gateways are the 73
+          characters that correspond to the upper and lower case
+          letters A-Z and a-z, the 10 digits 0-9, and the
+          following eleven special characters:
+
+            "'"  (US-ASCII decimal value 39)
+            "("  (US-ASCII decimal value 40)
+            ")"  (US-ASCII decimal value 41)
+            "+"  (US-ASCII decimal value 43)
+            ","  (US-ASCII decimal value 44)
+            "-"  (US-ASCII decimal value 45)
+            "."  (US-ASCII decimal value 46)
+            "/"  (US-ASCII decimal value 47)
+            ":"  (US-ASCII decimal value 58)
+            "="  (US-ASCII decimal value 61)
+            "?"  (US-ASCII decimal value 63)
+
+          A maximally portable mail representation will confine
+          itself to relatively short lines of text in which the
+          only meaningful characters are taken from this set of
+          73 characters.  The base64 encoding follows this rule.
+
+    (8)   Some mail transport agents will corrupt data that
+          includes certain literal strings.  In particular, a
+
+
+
+Freed & Borenstein          Standards Track                     [Page 8]
+
+RFC 2049                    MIME Conformance               November 1996
+
+
+          period (".") alone on a line is known to be corrupted
+          by some (incorrect) SMTP implementations, and a line
+          that starts with the five characters "From " (the fifth
+          character is a SPACE) are commonly corrupted as well.
+          A careful composition agent can prevent these
+          corruptions by encoding the data (e.g., in the quoted-
+          printable encoding using "=46rom " in place of "From "
+          at the start of a line, and "=2E" in place of "." alone
+          on a line).
+
+   Please note that the above list is NOT a list of recommended
+   practices for MTAs.  RFC 821 MTAs are prohibited from altering the
+   character of white space or wrapping long lines.  These BAD and
+   invalid practices are known to occur on established networks, and
+   implementations should be robust in dealing with the bad effects they
+   can cause.
+
+4.  Canonical Encoding Model
+
+   There was some confusion, in earlier versions of these documents,
+   regarding the model for when email data was to be converted to
+   canonical form and encoded, and in particular how this process would
+   affect the treatment of CRLFs, given that the representation of
+   newlines varies greatly from system to system.  For this reason, a
+   canonical model for encoding is presented below.
+
+   The process of composing a MIME entity can be modeled as being done
+   in a number of steps.  Note that these steps are roughly similar to
+   those steps used in PEM [RFC-1421] and are performed for each
+   "innermost level" body:
+
+    (1)   Creation of local form.
+
+          The body to be transmitted is created in the system's
+          native format.  The native character set is used and,
+          where appropriate, local end of line conventions are
+          used as well.  The body may be a UNIX-style text file,
+          or a Sun raster image, or a VMS indexed file, or audio
+          data in a system-dependent format stored only in
+          memory, or anything else that corresponds to the local
+          model for the representation of some form of
+          information.  Fundamentally, the data is created in the
+          "native" form that corresponds to the type specified by
+          the media type.
+
+
+
+
+
+
+
+Freed & Borenstein          Standards Track                     [Page 9]
+
+RFC 2049                    MIME Conformance               November 1996
+
+
+    (2)   Conversion to canonical form.
+
+          The entire body, including "out-of-band" information
+          such as record lengths and possibly file attribute
+          information, is converted to a universal canonical
+          form.  The specific media type of the body as well as
+          its associated attributes dictate the nature of the
+          canonical form that is used.  Conversion to the proper
+          canonical form may involve character set conversion,
+          transformation of audio data, compression, or various
+          other operations specific to the various media types.
+          If character set conversion is involved, however, care
+          must be taken to understand the semantics of the media
+          type, which may have strong implications for any
+          character set conversion, e.g. with regard to
+          syntactically meaningful characters in a text subtype
+          other than "plain".
+
+          For example, in the case of text/plain data, the text
+          must be converted to a supported character set and
+          lines must be delimited with CRLF delimiters in
+          accordance with RFC 822.  Note that the restriction on
+          line lengths implied by RFC 822 is eliminated if the
+          next step employs either quoted-printable or base64
+          encoding.
+
+    (3)   Apply transfer encoding.
+
+          A Content-Transfer-Encoding appropriate for this body
+          is applied.  Note that there is no fixed relationship
+          between the media type and the transfer encoding.  In
+          particular, it may be appropriate to base the choice of
+          base64 or quoted-printable on character frequency
+          counts which are specific to a given instance of a
+          body.
+
+    (4)   Insertion into entity.
+
+          The encoded body is inserted into a MIME entity with
+          appropriate headers. The entity is then inserted into
+          the body of a higher-level entity (message or
+          multipart) as needed.
+
+   Conversion from entity form to local form is accomplished by
+   reversing these steps. Note that reversal of these steps may produce
+   differing results since there is no guarantee that the original and
+   final local forms are the same.
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 10]
+
+RFC 2049                    MIME Conformance               November 1996
+
+
+   It is vital to note that these steps are only a model; they are
+   specifically NOT a blueprint for how an actual system would be built.
+   In particular, the model fails to account for two common designs:
+
+    (1)   In many cases the conversion to a canonical form prior
+          to encoding will be subsumed into the encoder itself,
+          which understands local formats directly.  For example,
+          the local newline convention for text bodies might be
+          carried through to the encoder itself along with
+          knowledge of what that format is.
+
+    (2)   The output of the encoders may have to pass through one
+          or more additional steps prior to being transmitted as
+          a message.  As such, the output of the encoder may not
+          be conformant with the formats specified by RFC 822.
+          In particular, once again it may be appropriate for the
+          converter's output to be expressed using local newline
+          conventions rather than using the standard RFC 822 CRLF
+          delimiters.
+
+   Other implementation variations are conceivable as well.  The vital
+   aspect of this discussion is that, in spite of any optimizations,
+   collapsings of required steps, or insertion of additional processing,
+   the resulting messages must be consistent with those produced by the
+   model described here.  For example, a message with the following
+   header fields:
+
+     Content-type: text/foo; charset=bar
+     Content-Transfer-Encoding: base64
+
+   must be first represented in the text/foo form, then (if necessary)
+   represented in the "bar" character set, and finally transformed via
+   the base64 algorithm into a mail-safe form.
+
+   NOTE: Some confusion has been caused by systems that represent
+   messages in a format which uses local newline conventions which
+   differ from the RFC822 CRLF convention.  It is important to note that
+   these formats are not canonical RFC822/MIME.  These formats are
+   instead *encodings* of RFC822, where CRLF sequences in the canonical
+   representation of the message are encoded as the local newline
+   convention.  Note that formats which encode CRLF sequences as, for
+   example, LF are not capable of representing MIME messages containing
+   binary data which contains LF octets not part of CRLF line separation
+   sequences.
+
+
+
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 11]
+
+RFC 2049                    MIME Conformance               November 1996
+
+
+5.  Summary
+
+   This document defines what is meant by MIME Conformance. It also
+   details various problems known to exist in the Internet email system
+   and how to use MIME to overcome them. Finally, it describes MIME's
+   canonical encoding model.
+
+6.  Security Considerations
+
+   Security issues are discussed in the second document in this set, RFC
+   2046.
+
+7.  Authors' Addresses
+
+   For more information, the authors of this document are best contacted
+   via Internet mail:
+
+   Ned Freed
+   Innosoft International, Inc.
+   1050 East Garvey Avenue South
+   West Covina, CA 91790
+   USA
+
+   Phone: +1 818 919 3600
+   Fax:   +1 818 919 3614
+   EMail: ned@innosoft.com
+
+   Nathaniel S. Borenstein
+   First Virtual Holdings
+   25 Washington Avenue
+   Morristown, NJ 07960
+   USA
+
+   Phone: +1 201 540 8967
+   Fax:   +1 201 993 3032
+   EMail: nsb@nsb.fv.com
+
+   MIME is a result of the work of the Internet Engineering Task Force
+   Working Group on RFC 822 Extensions.  The chairman of that group,
+   Greg Vaudreuil, may be reached at:
+
+   Gregory M. Vaudreuil
+   Octel Network Services
+   17080 Dallas Parkway
+   Dallas, TX 75248-1905
+   USA
+
+   EMail: Greg.Vaudreuil@Octel.Com
+
+
+
+Freed & Borenstein          Standards Track                    [Page 12]
+
+RFC 2049                    MIME Conformance               November 1996
+
+
+8.  Acknowledgements
+
+   This document is the result of the collective effort of a large
+   number of people, at several IETF meetings, on the IETF-SMTP and
+   IETF-822 mailing lists, and elsewhere.  Although any enumeration
+   seems doomed to suffer from egregious omissions, the following are
+   among the many contributors to this effort:
+
+     Harald Tveit Alvestrand       Marc Andreessen
+     Randall Atkinson              Bob Braden
+     Philippe Brandon              Brian Capouch
+     Kevin Carosso                 Uhhyung Choi
+     Peter Clitherow               Dave Collier-Brown
+     Cristian Constantinof         John Coonrod
+     Mark Crispin                  Dave Crocker
+     Stephen Crocker               Terry Crowley
+     Walt Daniels                  Jim Davis
+     Frank Dawson                  Axel Deininger
+     Hitoshi Doi                   Kevin Donnelly
+     Steve Dorner                  Keith Edwards
+     Chris Eich                    Dana S. Emery
+     Johnny Eriksson               Craig Everhart
+     Patrik Faltstrom              Erik E. Fair
+     Roger Fajman                  Alain Fontaine
+     Martin Forssen                James M. Galvin
+     Stephen Gildea                Philip Gladstone
+     Thomas Gordon                 Keld Simonsen
+     Terry Gray                    Phill Gross
+     James Hamilton                David Herron
+     Mark Horton                   Bruce Howard
+     Bill Janssen                  Olle Jarnefors
+     Risto Kankkunen               Phil Karn
+     Alan Katz                     Tim Kehres
+     Neil Katin                    Steve Kille
+     Kyuho Kim                     Anders Klemets
+     John Klensin                  Valdis Kletniek
+     Jim Knowles                   Stev Knowles
+     Bob Kummerfeld                Pekka Kytolaakso
+     Stellan Lagerstrom            Vincent Lau
+     Timo Lehtinen                 Donald Lindsay
+     Warner Losh                   Carlyn Lowery
+     Laurence Lundblade            Charles Lynn
+     John R. MacMillan             Larry Masinter
+     Rick McGowan                  Michael J. McInerny
+     Leo Mclaughlin                Goli Montaser-Kohsari
+     Tom Moore                     John Gardiner Myers
+     Erik Naggum                   Mark Needleman
+     Chris Newman                  John Noerenberg
+
+
+
+Freed & Borenstein          Standards Track                    [Page 13]
+
+RFC 2049                    MIME Conformance               November 1996
+
+
+     Mats Ohrman                   Julian Onions
+     Michael Patton                David J. Pepper
+     Erik van der Poel             Blake C. Ramsdell
+     Christer Romson               Luc Rooijakkers
+     Marshall T. Rose              Jonathan Rosenberg
+     Guido van Rossum              Jan Rynning
+     Harri Salminen                Michael Sanderson
+     Yutaka Sato                   Markku Savela
+     Richard Alan Schafer          Masahiro Sekiguchi
+     Mark Sherman                  Bob Smart
+     Peter Speck                   Henry Spencer
+     Einar Stefferud               Michael Stein
+     Klaus Steinberger             Peter Svanberg
+     James Thompson                Steve Uhler
+     Stuart Vance                  Peter Vanderbilt
+     Greg Vaudreuil                Ed Vielmetti
+     Larry W. Virden               Ryan Waldron
+     Rhys Weatherly                Jay Weber
+     Dave Wecker                   Wally Wedel
+     Sven-Ove Westberg             Brian Wideen
+     John Wobus                    Glenn Wright
+     Rayan Zachariassen            David Zimmerman
+
+   The authors apologize for any omissions from this list, which are
+   certainly unintentional.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 14]
+
+RFC 2049                    MIME Conformance               November 1996
+
+
+Appendix A -- A Complex Multipart Example
+
+   What follows is the outline of a complex multipart message.  This
+   message contains five parts that are to be displayed serially:  two
+   introductory plain text objects, an embedded multipart message, a
+   text/enriched object, and a closing encapsulated text message in a
+   non-ASCII character set.  The embedded multipart message itself
+   contains two objects to be displayed in parallel, a picture and an
+   audio fragment.
+
+     MIME-Version: 1.0
+     From: Nathaniel Borenstein <nsb@nsb.fv.com>
+     To: Ned Freed <ned@innosoft.com>
+     Date: Fri, 07 Oct 1994 16:15:05 -0700 (PDT)
+     Subject: A multipart example
+     Content-Type: multipart/mixed;
+                   boundary=unique-boundary-1
+
+     This is the preamble area of a multipart message.
+     Mail readers that understand multipart format
+     should ignore this preamble.
+
+     If you are reading this text, you might want to
+     consider changing to a mail reader that understands
+     how to properly display multipart messages.
+
+     --unique-boundary-1
+
+       ... Some text appears here ...
+
+     [Note that the blank between the boundary and the start
+      of the text in this part means no header fields were
+      given and this is text in the US-ASCII character set.
+      It could have been done with explicit typing as in the
+      next part.]
+
+     --unique-boundary-1
+     Content-type: text/plain; charset=US-ASCII
+
+     This could have been part of the previous part, but
+     illustrates explicit versus implicit typing of body
+     parts.
+
+     --unique-boundary-1
+     Content-Type: multipart/parallel; boundary=unique-boundary-2
+
+     --unique-boundary-2
+     Content-Type: audio/basic
+
+
+
+Freed & Borenstein          Standards Track                    [Page 15]
+
+RFC 2049                    MIME Conformance               November 1996
+
+
+     Content-Transfer-Encoding: base64
+
+       ... base64-encoded 8000 Hz single-channel
+           mu-law-format audio data goes here ...
+
+     --unique-boundary-2
+     Content-Type: image/jpeg
+     Content-Transfer-Encoding: base64
+
+       ... base64-encoded image data goes here ...
+
+     --unique-boundary-2--
+
+     --unique-boundary-1
+     Content-type: text/enriched
+
+     This is <bold><italic>enriched.</italic></bold>
+     <smaller>as defined in RFC 1896</smaller>
+
+     Isn't it
+     <bigger><bigger>cool?</bigger></bigger>
+
+     --unique-boundary-1
+     Content-Type: message/rfc822
+
+     From: (mailbox in US-ASCII)
+     To: (address in US-ASCII)
+     Subject: (subject in US-ASCII)
+     Content-Type: Text/plain; charset=ISO-8859-1
+     Content-Transfer-Encoding: Quoted-printable
+
+       ... Additional text in ISO-8859-1 goes here ...
+
+     --unique-boundary-1--
+
+Appendix B -- Changes from RFC 1521, 1522, and 1590
+
+   These documents are a revision of RFC 1521, 1522, and 1590.  For the
+   convenience of those familiar with the earlier documents, the changes
+   from those documents are summarized in this appendix.  For further
+   history, note that Appendix H in RFC 1521 specified how that document
+   differed from its predecessor, RFC 1341.
+
+    (1)   This document has been completely reformatted and split
+          into multiple documents.  This was done to improve the
+          quality of the plain text version of this document,
+          which is required to be the reference copy.
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 16]
+
+RFC 2049                    MIME Conformance               November 1996
+
+
+    (2)   BNF describing the overall structure of MIME object
+          headers has been added. This is a documentation change
+          only -- the underlying syntax has not changed in any
+          way.
+
+    (3)   The specific BNF for the seven media types in MIME has
+          been removed.  This BNF was incorrect, incomplete, amd
+          inconsistent with the type-indendependent BNF.  And
+          since the type-independent BNF already fully specifies
+          the syntax of the various MIME headers, the type-
+          specific BNF was, in the final analysis, completely
+          unnecessary and caused more problems than it solved.
+
+    (4)   The more specific "US-ASCII" character set name has
+          replaced the use of the informal term ASCII in many
+          parts of these documents.
+
+    (5)   The informal concept of a primary subtype has been
+          removed.
+
+    (6)   The term "object" was being used inconsistently.  The
+          definition of this term has been clarified, along with
+          the related terms "body", "body part", and "entity",
+          and usage has been corrected where appropriate.
+
+    (7)   The BNF for the multipart media type has been
+          rearranged to make it clear that the CRLF preceeding
+          the boundary marker is actually part of the marker
+          itself rather than the preceeding body part.
+
+    (8)   The prose and BNF describing the multipart media type
+          have been changed to make it clear that the body parts
+          within a multipart object MUST NOT contain any lines
+          beginning with the boundary parameter string.
+
+    (9)   In the rules on reassembling "message/partial" MIME
+          entities, "Subject" is added to the list of headers to
+          take from the inner message, and the example is
+          modified to clarify this point.
+
+    (10)  "Message/partial" fragmenters are restricted to
+          splitting MIME objects only at line boundaries.
+
+    (11)  In the discussion of the application/postscript type,
+          an additional paragraph has been added warning about
+          possible interoperability problems caused by embedding
+          of binary data inside a PostScript MIME entity.
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 17]
+
+RFC 2049                    MIME Conformance               November 1996
+
+
+    (12)  Added a clarifying note to the basic syntax rules for
+          the Content-Type header field to make it clear that the
+          following two forms:
+
+            Content-type: text/plain; charset=us-ascii (comment)
+
+            Content-type: text/plain; charset="us-ascii"
+
+          are completely equivalent.
+
+    (13)  The following sentence has been removed from the
+          discussion of the MIME-Version header: "However,
+          conformant software is encouraged to check the version
+          number and at least warn the user if an unrecognized
+          MIME-version is encountered."
+
+    (14)  A typo was fixed that said "application/external-body"
+          instead of "message/external-body".
+
+    (15)  The definition of a character set has been reorganized
+          to make the requirements clearer.
+
+    (16)  The definition of the "image/gif" media type has been
+          moved to a separate document. This change was made
+          because of potential conflicts with IETF rules
+          governing the standardization of patented technology.
+
+    (17)  The definitions of "7bit" and "8bit" have been
+          tightened so that use of bare CR, LF can only be used
+          as end-of-line sequences.  The document also no longer
+          requires that NUL characters be preserved, which brings
+          MIME into alignment with real-world implementations.
+
+    (18)  The definition of canonical text in MIME has been
+          tightened so that line breaks must be represented by a
+          CRLF sequence.  CR and LF characters are not allowed
+          outside of this usage.  The definition of quoted-
+          printable encoding has been altered accordingly.
+
+    (19)  The definition of the quoted-printable encoding now
+          includes a number of suggestions for how quoted-
+          printable encoders might best handle improperly encoded
+          material.
+
+    (20)  Prose was added to clarify the use of the "7bit",
+          "8bit", and "binary" transfer-encodings on multipart or
+          message entities encapsulating "8bit" or "binary" data.
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 18]
+
+RFC 2049                    MIME Conformance               November 1996
+
+
+    (21)  In the section on MIME Conformance, "multipart/digest"
+          support was added to the list of requirements for
+          minimal MIME conformance.  Also, the requirement for
+          "message/rfc822" support were strengthened to clarify
+          the importance of recognizing recursive structure.
+
+    (22)  The various restrictions on subtypes of "message" are
+          now specified entirely on a subtype by subtype basis.
+
+    (23)  The definition of "message/rfc822" was changed to
+          indicate that at least one of the "From", "Subject", or
+          "Date" headers must be present.
+
+    (24)  The required handling of unrecognized subtypes as
+          "application/octet-stream" has been made more explicit
+          in both the type definitions sections and the
+          conformance guidelines.
+
+    (25)  Examples using text/richtext were changed to
+          text/enriched.
+
+    (26)  The BNF definition of subtype has been changed to make
+          it clear that either an IANA registered subtype or a
+          nonstandard "X-" subtype must be used in a Content-Type
+          header field.
+
+    (27)  MIME media types that are simply registered for use and
+          those that are standardized by the IETF are now
+          distinguished in the MIME BNF.
+
+    (28)  All of the various MIME registration procedures have
+          been extensively revised. IANA registration procedures
+          for character sets have been moved to a separate
+          document that is no included in this set of documents.
+
+    (29)  The use of escape and shift mechanisms in the US-ASCII
+          and ISO-8859-X character sets these documents define
+          have been clarified: Such mechanisms should never be
+          used in conjunction with these character sets and their
+          effect if they are used is undefined.
+
+    (30)  The definition of the AFS access-type for
+          message/external-body has been removed.
+
+    (31)  The handling of the combination of
+          multipart/alternative and message/external-body is now
+          specifically addressed.
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 19]
+
+RFC 2049                    MIME Conformance               November 1996
+
+
+    (32)  Security issues specific to message/external-body are
+          now discussed in some detail.
+
+Appendix C -- References
+
+   [ATK]
+        Borenstein, Nathaniel S., Multimedia Applications
+        Development with the Andrew Toolkit, Prentice-Hall, 1990.
+
+   [ISO-2022]
+        International Standard -- Information Processing --
+        Character Code Structure and Extension Techniques,
+        ISO/IEC 2022:1994, 4th ed.
+
+   [ISO-8859]
+        International Standard -- Information Processing -- 8-bit
+        Single-Byte Coded Graphic Character Sets
+        - Part 1: Latin Alphabet No. 1, ISO 8859-1:1987, 1st ed.
+        - Part 2: Latin Alphabet No. 2, ISO 8859-2:1987, 1st ed.
+        - Part 3: Latin Alphabet No. 3, ISO 8859-3:1988, 1st ed.
+        - Part 4: Latin Alphabet No. 4, ISO 8859-4:1988, 1st ed.
+        - Part 5: Latin/Cyrillic Alphabet, ISO 8859-5:1988, 1st
+        ed.
+        - Part 6: Latin/Arabic Alphabet, ISO 8859-6:1987, 1st ed.
+        - Part 7: Latin/Greek Alphabet, ISO 8859-7:1987, 1st ed.
+        - Part 8: Latin/Hebrew Alphabet, ISO 8859-8:1988, 1st ed.
+        - Part 9: Latin Alphabet No. 5, ISO/IEC 8859-9:1989, 1st
+        ed.
+        International Standard -- Information Technology -- 8-bit
+        Single-Byte Coded Graphic Character Sets
+        - Part 10: Latin Alphabet No. 6, ISO/IEC 8859-10:1992,
+        1st ed.
+
+   [ISO-646]
+        International Standard -- Information Technology -- ISO
+        7-bit Coded Character Set for Information Interchange,
+        ISO 646:1991, 3rd ed..
+
+   [JPEG]
+        JPEG Draft Standard ISO 10918-1 CD.
+
+   [MPEG]
+        Video Coding Draft Standard ISO 11172 CD, ISO
+        IEC/JTC1/SC2/WG11 (Motion Picture Experts Group), May,
+        1991.
+
+
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 20]
+
+RFC 2049                    MIME Conformance               November 1996
+
+
+   [PCM]
+        CCITT, Fascicle III.4 - Recommendation G.711, "Pulse Code
+        Modulation (PCM) of Voice Frequencies", Geneva, 1972.
+
+   [POSTSCRIPT]
+        Adobe Systems, Inc., PostScript Language Reference
+        Manual, Addison-Wesley, 1985.
+
+   [POSTSCRIPT2]
+        Adobe Systems, Inc., PostScript Language Reference
+        Manual, Addison-Wesley, Second Ed., 1990.
+
+   [RFC-783]
+        Sollins, K.R., "TFTP Protocol (revision 2)", RFC-783,
+        MIT, June 1981.
+
+   [RFC-821]
+        Postel, J.B., "Simple Mail Transfer Protocol", STD 10,
+        RFC 821, USC/Information Sciences Institute, August 1982.
+
+   [RFC-822]
+        Crocker, D., "Standard for the Format of ARPA Internet
+        Text Messages", STD 11, RFC 822, UDEL, August 1982.
+
+   [RFC-934]
+        Rose, M. and E. Stefferud, "Proposed Standard for Message
+        Encapsulation", RFC 934, Delaware and NMA, January 1985.
+
+   [RFC-959]
+        Postel, J. and J. Reynolds, "File Transfer Protocol", STD
+        9, RFC 959, USC/Information Sciences Institute, October
+        1985.
+
+   [RFC-1049]
+        Sirbu, M., "Content-Type Header Field for Internet
+        Messages", RFC 1049, CMU, March 1988.
+
+   [RFC-1154]
+        Robinson, D., and R. Ullmann, "Encoding Header Field for
+        Internet Messages", RFC 1154, Prime Computer, Inc., April
+        1990.
+
+   [RFC-1341]
+        Borenstein, N., and N.  Freed, "MIME (Multipurpose
+        Internet Mail Extensions): Mechanisms for Specifying and
+        Describing the Format of Internet Message Bodies", RFC
+        1341, Bellcore, Innosoft, June 1992.
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 21]
+
+RFC 2049                    MIME Conformance               November 1996
+
+
+   [RFC-1342]
+        Moore, K., "Representation of Non-Ascii Text in Internet
+        Message Headers", RFC 1342, University of Tennessee, June
+        1992.
+
+   [RFC-1344]
+        Borenstein, N., "Implications of MIME for Internet Mail
+        Gateways", RFC 1344, Bellcore, June 1992.
+
+   [RFC-1345]
+        Simonsen, K., "Character Mnemonics & Character Sets", RFC
+        1345, Rationel Almen Planlaegning, June 1992.
+
+   [RFC-1421]
+        Linn, J., "Privacy Enhancement for Internet Electronic
+        Mail:  Part I -- Message Encryption and Authentication
+        Procedures", RFC 1421, IAB IRTF PSRG, IETF PEM WG,
+        February 1993.
+
+   [RFC-1422]
+        Kent, S., "Privacy Enhancement for Internet Electronic
+        Mail:  Part II -- Certificate-Based Key Management", RFC
+        1422, IAB IRTF PSRG, IETF PEM WG, February 1993.
+
+   [RFC-1423]
+        Balenson, D., "Privacy Enhancement for Internet
+        Electronic Mail:  Part III -- Algorithms, Modes, and
+        Identifiers",  IAB IRTF PSRG, IETF PEM WG, February 1993.
+
+   [RFC-1424]
+        Kaliski, B., "Privacy Enhancement for Internet Electronic
+        Mail:  Part IV -- Key Certification and Related
+        Services", IAB IRTF PSRG, IETF PEM WG, February 1993.
+
+   [RFC-1521]
+        Borenstein, N., and Freed, N., "MIME (Multipurpose
+        Internet Mail Extensions): Mechanisms for Specifying and
+        Describing the Format of Internet Message Bodies", RFC
+        1521, Bellcore, Innosoft, September, 1993.
+
+   [RFC-1522]
+        Moore, K., "Representation of Non-ASCII Text in Internet
+        Message Headers", RFC 1522, University of Tennessee,
+        September 1993.
+
+
+
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 22]
+
+RFC 2049                    MIME Conformance               November 1996
+
+
+   [RFC-1524]
+        Borenstein, N., "A User Agent Configuration Mechanism for
+        Multimedia Mail Format Information", RFC 1524, Bellcore,
+        September 1993.
+
+   [RFC-1543]
+        Postel, J., "Instructions to RFC Authors", RFC 1543,
+        USC/Information Sciences Institute, October 1993.
+
+   [RFC-1556]
+        Nussbacher, H., "Handling of Bi-directional Texts in
+        MIME", RFC 1556, Israeli Inter-University Computer
+        Center, December 1993.
+
+   [RFC-1590]
+        Postel, J., "Media Type Registration Procedure", RFC
+        1590, USC/Information Sciences Institute, March 1994.
+
+   [RFC-1602]
+        Internet Architecture Board, Internet Engineering
+        Steering Group, Huitema, C., Gross, P., "The Internet
+        Standards Process -- Revision 2", March 1994.
+
+   [RFC-1652]
+        Klensin, J., (WG Chair), Freed, N., (Editor), Rose, M.,
+        Stefferud, E., and Crocker, D., "SMTP Service Extension
+        for 8bit-MIME transport", RFC 1652, United Nations
+        University, Innosoft, Dover Beach Consulting, Inc.,
+        Network Management Associates, Inc., The Branch Office,
+        March 1994.
+
+   [RFC-1700]
+        Reynolds, J. and J. Postel, "Assigned Numbers", STD 2,
+        RFC 1700, USC/Information Sciences Institute, October
+        1994.
+
+   [RFC-1741]
+        Faltstrom, P., Crocker, D., and Fair, E., "MIME Content
+        Type for BinHex Encoded Files", December 1994.
+
+   [RFC-1896]
+        Resnick, P., and A. Walker, "The text/enriched MIME
+        Content-type", RFC 1896, February, 1996.
+
+
+
+
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 23]
+
+RFC 2049                    MIME Conformance               November 1996
+
+
+   [RFC-2045]
+        Freed, N., and and N. Borenstein, "Multipurpose Internet Mail
+        Extensions (MIME) Part One: Format of Internet Message
+        Bodies", RFC 2045, Innosoft, First Virtual Holdings,
+        November 1996.
+
+   [RFC-2046]
+        Freed, N., and N. Borenstein, "Multipurpose Internet Mail
+        Extensions (MIME) Part Two: Media Types", RFC 2046,
+        Innosoft, First Virtual Holdings, November 1996.
+
+   [RFC-2047]
+        Moore, K., "Multipurpose Internet Mail Extensions (MIME)
+        Part Three: Representation of Non-ASCII Text in Internet
+        Message Headers", RFC 2047, University of
+        Tennessee, November 1996.
+
+   [RFC-2048]
+        Freed, N., Klensin, J., and J. Postel, "Multipurpose
+        Internet Mail Extensions (MIME) Part Four: MIME
+        Registration Procedures", RFC 2048, Innosoft, MCI,
+        ISI, November 1996.
+
+   [RFC-2049]
+        Freed, N. and N. Borenstein, "Multipurpose Internet Mail
+        Extensions (MIME) Part Five: Conformance Criteria and
+        Examples", RFC 2049 (this document), Innosoft, First
+        Virtual Holdings, November 1996.
+
+   [US-ASCII]
+        Coded Character Set -- 7-Bit American Standard Code for
+        Information Interchange, ANSI X3.4-1986.
+
+   [X400]
+        Schicker, Pietro, "Message Handling Systems, X.400",
+        Message Handling Systems and Distributed Applications, E.
+        Stefferud, O-j. Jacobsen, and P. Schicker, eds., North-
+        Holland, 1989, pp. 3-41.
+
+
+
+
+
+
+
+
+
+
+
+
+
+Freed & Borenstein          Standards Track                    [Page 24]
+
diff -uNr gmime-1.90.0/rfc/rfc2183.txt gmime/rfc/rfc2183.txt
--- gmime-1.90.0/rfc/rfc2183.txt	Thu Jan  1 01:00:00 1970
+++ gmime/rfc/rfc2183.txt	Tue Oct 24 23:01:40 2000
@@ -0,0 +1,675 @@
+
+
+
+
+
+
+Network Working Group                                          R. Troost
+Request for Comments: 2183                           New Century Systems
+Updates: 1806                                                  S. Dorner
+Category: Standards Track                          QUALCOMM Incorporated
+                                                        K. Moore, Editor
+                                                 University of Tennessee
+                                                             August 1997
+
+
+               Communicating Presentation Information in
+                           Internet Messages:
+                  The Content-Disposition Header Field
+
+Status of this Memo
+
+   This document specifies an Internet standards track protocol for the
+   Internet community, and requests discussion and suggestions for
+   improvements.  Please refer to the current edition of the "Internet
+   Official Protocol Standards" (STD 1) for the standardization state
+   and status of this protocol.  Distribution of this memo is unlimited.
+
+Abstract
+
+   This memo provides a mechanism whereby messages conforming to the
+   MIME specifications [RFC 2045, RFC 2046, RFC 2047, RFC 2048, RFC
+   2049] can convey presentational information.  It specifies the
+   "Content-Disposition" header field, which is optional and valid for
+   any MIME entity ("message" or "body part").  Two values for this
+   header field are described in this memo; one for the ordinary linear
+   presentation of the body part, and another to facilitate the use of
+   mail to transfer files.  It is expected that more values will be
+   defined in the future, and procedures are defined for extending this
+    set of values.
+
+   This document is intended as an extension to MIME.  As such, the
+   reader is assumed to be familiar with the MIME specifications, and
+   [RFC 822].  The information presented herein supplements but does not
+   replace that found in those documents.
+
+   This document is a revision to the Experimental protocol defined in
+   RFC 1806.  As compared to RFC 1806, this document contains minor
+   editorial updates, adds new parameters needed to support the File
+   Transfer Body Part, and references a separate specification for the
+   handling of non-ASCII and/or very long parameter values.
+
+
+
+
+
+
+
+Troost, et. al.             Standards Track                     [Page 1]
+
+RFC 2183                  Content-Disposition                August 1997
+
+
+1.  Introduction
+
+   MIME specifies a standard format for encapsulating multiple pieces of
+   data into a single Internet message. That document does not address
+   the issue of presentation styles; it provides a framework for the
+   interchange of message content, but leaves presentation issues solely
+   in the hands of mail user agent (MUA) implementors.
+
+   Two common ways of presenting multipart electronic messages are as a
+   main document with a list of separate attachments, and as a single
+   document with the various parts expanded (displayed) inline. The
+   display of an attachment is generally construed to require positive
+   action on the part of the recipient, while inline message components
+   are displayed automatically when the message is viewed. A mechanism
+   is needed to allow the sender to transmit this sort of presentational
+   information to the recipient; the Content-Disposition header provides
+   this mechanism, allowing each component of a message to be tagged
+   with an indication of its desired presentation semantics.
+
+   Tagging messages in this manner will often be sufficient for basic
+   message formatting. However, in many cases a more powerful and
+   flexible approach will be necessary. The definition of such
+   approaches is beyond the scope of this memo; however, such approaches
+   can benefit from additional Content-Disposition values and
+   parameters, to be defined at a later date.
+
+   In addition to allowing the sender to specify the presentational
+   disposition of a message component, it is desirable to allow her to
+   indicate a default archival disposition; a filename. The optional
+   "filename" parameter provides for this.  Further, the creation-date,
+   modification-date, and read-date parameters allow preservation of
+   those file attributes when the file is transmitted over MIME email.
+
+   NB: The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD,
+   SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL, when they appear in this
+   document, are to be interpreted as described in [RFC 2119].
+
+2.  The Content-Disposition Header Field
+
+   Content-Disposition is an optional header field. In its absence, the
+   MUA may use whatever presentation method it deems suitable.
+
+   It is desirable to keep the set of possible disposition types small
+   and well defined, to avoid needless complexity. Even so, evolving
+   usage will likely require the definition of additional disposition
+   types or parameters, so the set of disposition values is extensible;
+   see below.
+
+
+
+
+Troost, et. al.             Standards Track                     [Page 2]
+
+RFC 2183                  Content-Disposition                August 1997
+
+
+   In the extended BNF notation of [RFC 822], the Content-Disposition
+   header field is defined as follows:
+
+     disposition := "Content-Disposition" ":"
+                    disposition-type
+                    *(";" disposition-parm)
+
+     disposition-type := "inline"
+                       / "attachment"
+                       / extension-token
+                       ; values are not case-sensitive
+
+     disposition-parm := filename-parm
+                       / creation-date-parm
+                       / modification-date-parm
+                       / read-date-parm
+                       / size-parm
+                       / parameter
+
+     filename-parm := "filename" "=" value
+
+     creation-date-parm := "creation-date" "=" quoted-date-time
+
+     modification-date-parm := "modification-date" "=" quoted-date-time
+
+     read-date-parm := "read-date" "=" quoted-date-time
+
+     size-parm := "size" "=" 1*DIGIT
+
+     quoted-date-time := quoted-string
+                      ; contents MUST be an RFC 822 `date-time'
+                      ; numeric timezones (+HHMM or -HHMM) MUST be used
+
+
+
+   NOTE ON PARAMETER VALUE LENGHTS: A short (length <= 78 characters)
+   parameter value containing only non-`tspecials' characters SHOULD be
+   represented as a single `token'.  A short parameter value containing
+   only ASCII characters, but including `tspecials' characters, SHOULD
+   be represented as `quoted-string'.  Parameter values longer than 78
+   characters, or which contain non-ASCII characters, MUST be encoded as
+   specified in [RFC 2184].
+
+   `Extension-token', `parameter', `tspecials' and `value' are defined
+   according to [RFC 2045] (which references [RFC 822] in the definition
+   of some of these tokens).  `quoted-string' and `DIGIT' are defined in
+   [RFC 822].
+
+
+
+
+Troost, et. al.             Standards Track                     [Page 3]
+
+RFC 2183                  Content-Disposition                August 1997
+
+
+2.1  The Inline Disposition Type
+
+   A bodypart should be marked `inline' if it is intended to be
+   displayed automatically upon display of the message.  Inline
+   bodyparts should be presented in the order in which they occur,
+   subject to the normal semantics of multipart messages.
+
+2.2  The Attachment Disposition Type
+
+   Bodyparts can be designated `attachment' to indicate that they are
+   separate from the main body of the mail message, and that their
+   display should not be automatic, but contingent upon some further
+   action of the user.  The MUA might instead present the user of a
+   bitmap terminal with an iconic representation of the attachments, or,
+   on character terminals, with a list of attachments from which the
+   user could select for viewing or storage.
+
+2.3  The Filename Parameter
+
+   The sender may want to suggest a filename to be used if the entity is
+   detached and stored in a separate file. If the receiving MUA writes
+   the entity to a file, the suggested filename should be used as a
+   basis for the actual filename, where possible.
+
+   It is important that the receiving MUA not blindly use the suggested
+   filename.  The suggested filename SHOULD be checked (and possibly
+   changed) to see that it conforms to local filesystem conventions,
+   does not overwrite an existing file, and does not present a security
+   problem (see Security Considerations below).
+
+   The receiving MUA SHOULD NOT respect any directory path information
+   that may seem to be present in the filename parameter.  The filename
+   should be treated as a terminal component only.  Portable
+   specification of directory paths might possibly be done in the future
+   via a separate Content-Disposition parameter, but no provision is
+   made for it in this draft.
+
+   Current [RFC 2045] grammar restricts parameter values (and hence
+   Content-Disposition filenames) to US-ASCII.  We recognize the great
+   desirability of allowing arbitrary character sets in filenames, but
+   it is beyond the scope of this document to define the necessary
+   mechanisms.  We expect that the basic [RFC 1521] `value'
+   specification will someday be amended to allow use of non-US-ASCII
+   characters, at which time the same mechanism should be used in the
+   Content-Disposition filename parameter.
+
+
+
+
+
+
+Troost, et. al.             Standards Track                     [Page 4]
+
+RFC 2183                  Content-Disposition                August 1997
+
+
+   Beyond the limitation to US-ASCII, the sending MUA may wish to bear
+   in mind the limitations of common filesystems.  Many have severe
+   length and character set restrictions.  Short alphanumeric filenames
+   are least likely to require modification by the receiving system.
+
+   The presence of the filename parameter does not force an
+   implementation to write the entity to a separate file. It is
+   perfectly acceptable for implementations to leave the entity as part
+   of the normal mail stream unless the user requests otherwise. As a
+   consequence, the parameter may be used on any MIME entity, even
+   `inline' ones. These will not normally be written to files, but the
+   parameter could be used to provide a filename if the receiving user
+   should choose to write the part to a file.
+
+2.4 The Creation-Date parameter
+
+   The creation-date parameter MAY be used to indicate the date at which
+   the file was created.  If this parameter is included, the paramter
+   value MUST be a quoted-string which contains a representation of the
+   creation date of the file in [RFC 822] `date-time' format.
+
+   UNIX and POSIX implementors are cautioned that the `st_ctime' file
+   attribute of the `stat' structure is not the creation time of the
+   file; it is thus not appropriate as a source for the creation-date
+   parameter value.
+
+2.5 The Modification-Date parameter
+
+   The modification-date parameter MAY be used to indicate the date at
+   which the file was last modified.  If the modification-date parameter
+   is included, the paramter value MUST be a quoted-string which
+   contains a representation of the last modification date of the file
+   in [RFC 822] `date-time' format.
+
+2.6 The Read-Date parameter
+
+   The read-date parameter MAY be used to indicate the date at which the
+   file was last read.  If the read-date parameter is included, the
+   parameter value MUST be a quoted-string which contains a
+   representation of the last-read date of the file in [RFC 822] `date-
+   time' format.
+
+2.7 The Size parameter
+
+   The size parameter indicates an approximate size of the file in
+   octets.  It can be used, for example, to pre-allocate space before
+   attempting to store the file, or to determine whether enough space
+   exists.
+
+
+
+Troost, et. al.             Standards Track                     [Page 5]
+
+RFC 2183                  Content-Disposition                August 1997
+
+
+2.8  Future Extensions and Unrecognized Disposition Types
+
+   In the likely event that new parameters or disposition types are
+   needed, they should be registered with the Internet Assigned Numbers
+   Authority (IANA), in the manner specified in Section 9 of this memo.
+
+   Once new disposition types and parameters are defined, there is of
+   course the likelihood that implementations will see disposition types
+   and parameters they do not understand.  Furthermore, since x-tokens
+   are allowed, implementations may also see entirely unregistered
+   disposition types and parameters.
+
+   Unrecognized parameters should be ignored. Unrecognized disposition
+   types should be treated as `attachment'. The choice of `attachment'
+   for unrecognized types is made because a sender who goes to the
+   trouble of producing a Content-Disposition header with a new
+   disposition type is more likely aiming for something more elaborate
+   than inline presentation.
+
+   Unless noted otherwise in the definition of a parameter, Content-
+   Disposition parameters are valid for all dispositions.  (In contrast
+   to MIME content-type parameters, which are defined on a per-content-
+   type basis.) Thus, for example, the `filename' parameter still means
+   the name of the file to which the part should be written, even if the
+   disposition itself is unrecognized.
+
+2.9  Content-Disposition and Multipart
+
+   If a Content-Disposition header is used on a multipart body part, it
+   applies to the multipart as a whole, not the individual subparts.
+   The disposition types of the subparts do not need to be consulted
+   until the multipart itself is presented.  When the multipart is
+   displayed, then the dispositions of the subparts should be respected.
+
+   If the `inline' disposition is used, the multipart should be
+   displayed as normal; however, an `attachment' subpart should require
+   action from the user to display.
+
+   If the `attachment' disposition is used, presentation of the
+   multipart should not proceed without explicit user action.  Once the
+   user has chosen to display the multipart, the individual subpart
+   dispositions should be consulted to determine how to present the
+   subparts.
+
+
+
+
+
+
+
+
+Troost, et. al.             Standards Track                     [Page 6]
+
+RFC 2183                  Content-Disposition                August 1997
+
+
+2.10  Content-Disposition and the Main Message
+
+   It is permissible to use Content-Disposition on the main body of an
+   [RFC 822] message.
+
+3.  Examples
+
+   Here is a an example of a body part containing a JPEG image that is
+   intended to be viewed by the user immediately:
+
+        Content-Type: image/jpeg
+        Content-Disposition: inline
+        Content-Description: just a small picture of me
+
+         <jpeg data>
+
+   The following body part contains a JPEG image that should be
+   displayed to the user only if the user requests it. If the JPEG is
+   written to a file, the file should be named "genome.jpg".  The
+   recipient's user might also choose to set the last-modified date of
+   the stored file to date in the modification-date parameter:
+
+        Content-Type: image/jpeg
+        Content-Disposition: attachment; filename=genome.jpeg;
+          modification-date="Wed, 12 Feb 1997 16:29:51 -0500";
+        Content-Description: a complete map of the human genome
+
+        <jpeg data>
+
+   The following is an example of the use of the `attachment'
+   disposition with a multipart body part.  The user should see text-
+   part-1 immediately, then take some action to view multipart-2.  After
+   taking action to view multipart-2, the user will see text-part-2
+   right away, and be required to take action to view jpeg-1.  Subparts
+   are indented for clarity; they would not be so indented in a real
+   message.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Troost, et. al.             Standards Track                     [Page 7]
+
+RFC 2183                  Content-Disposition                August 1997
+
+
+        Content-Type: multipart/mixed; boundary=outer
+        Content-Description: multipart-1
+
+        --outer
+          Content-Type: text/plain
+          Content-Disposition: inline
+          Content-Description: text-part-1
+
+          Some text goes here
+
+        --outer
+          Content-Type: multipart/mixed; boundary=inner
+          Content-Disposition: attachment
+          Content-Description: multipart-2
+
+          --inner
+            Content-Type: text/plain
+            Content-Disposition: inline
+            Content-Description: text-part-2
+
+            Some more text here.
+
+          --inner
+            Content-Type: image/jpeg
+            Content-Disposition: attachment
+            Content-Description: jpeg-1
+
+            <jpeg data>
+          --inner--
+        --outer--
+
+4.  Summary
+
+   Content-Disposition takes one of two values, `inline' and
+   `attachment'.  `Inline' indicates that the entity should be
+   immediately displayed to the user, whereas `attachment' means that
+   the user should take additional action to view the entity.
+
+   The `filename' parameter can be used to suggest a filename for
+   storing the bodypart, if the user wishes to store it in an external
+   file.
+
+
+
+
+
+
+
+
+
+
+Troost, et. al.             Standards Track                     [Page 8]
+
+RFC 2183                  Content-Disposition                August 1997
+
+
+5.  Security Considerations
+
+   There are security issues involved any time users exchange data.
+   While these are not to be minimized, neither does this memo change
+   the status quo in that regard, except in one instance.
+
+   Since this memo provides a way for the sender to suggest a filename,
+   a receiving MUA must take care that the sender's suggested filename
+   does not represent a hazard. Using UNIX as an example, some hazards
+   would be:
+
+   +    Creating startup files (e.g., ".login").
+
+   +    Creating or overwriting system files (e.g., "/etc/passwd").
+
+   +    Overwriting any existing file.
+
+   +    Placing executable files into any command search path
+        (e.g., "~/bin/more").
+
+   +    Sending the file to a pipe (e.g., "| sh").
+
+   In general, the receiving MUA should not name or place the file such
+   that it will get interpreted or executed without the user explicitly
+   initiating the action.
+
+   It is very important to note that this is not an exhaustive list; it
+   is intended as a small set of examples only.  Implementors must be
+   alert to the potential hazards on their target systems.
+
+6.  References
+
+   [RFC 2119]
+        Bradner, S., "Key words for use in RFCs to Indicate Requirement
+        Levels", RFC 2119, March 1997.
+
+   [RFC 2184]
+        Freed, N. and K. Moore, "MIME Parameter value and Encoded Words:
+        Character Sets, Lanaguage, and Continuations", RFC 2184, August
+        1997.
+
+   [RFC 2045]
+        Freed, N. and N. Borenstein, "MIME (Multipurpose Internet Mail
+        Extensions) Part One: Format of Internet Message Bodies", RFC
+        2045, December 1996.
+
+
+
+
+
+
+Troost, et. al.             Standards Track                     [Page 9]
+
+RFC 2183                  Content-Disposition                August 1997
+
+
+   [RFC 2046]
+        Freed, N. and N. Borenstein, "MIME (Multipurpose Internet Mail
+        Extensions) Part Two: Media Types", RFC 2046, December 1996.
+
+   [RFC 2047]
+        Moore, K., "MIME (Multipurpose Internet Mail Extensions) Part
+        Three: Message Header Extensions for non-ASCII Text", RFC 2047,
+        December 1996.
+
+   [RFC 2048]
+        Freed, N., Klensin, J. and J. Postel, "MIME (Multipurpose
+        Internet Mail Extensions) Part Four: Registration Procedures",
+        RFC 2048, December 1996.
+
+   [RFC 2049]
+        Freed, N. and N. Borenstein, "MIME (Multipurpose Internet Mail
+        Extensions) Part Five: Conformance Criteria and Examples", RFC
+        2049, December 1996.
+
+   [RFC 822]
+        Crocker, D., "Standard for the Format of ARPA Internet Text
+        Messages", STD 11, RFC 822, UDEL, August 1982.
+
+7.  Acknowledgements
+
+   We gratefully acknowledge the help these people provided during the
+   preparation of this draft:
+
+        Nathaniel Borenstein
+        Ned Freed
+        Keith Moore
+        Dave Crocker
+        Dan Pritchett
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Troost, et. al.             Standards Track                    [Page 10]
+
+RFC 2183                  Content-Disposition                August 1997
+
+
+8.  Authors' Addresses
+
+   You should blame the editor of this version of the document for any
+   changes since RFC 1806:
+
+        Keith Moore
+        Department of Computer Science
+        University of Tennessee, Knoxville
+        107 Ayres Hall
+        Knoxville TN  37996-1301
+        USA
+
+        Phone: +1 (423) 974-5067
+        Fax: +1 (423) 974-8296
+        Email: moore@cs.utk.edu
+
+
+        The authors of RFC 1806 are:
+
+        Rens Troost
+        New Century Systems
+        324 East 41st Street #804
+        New York, NY, 10017 USA
+
+        Phone: +1 (212) 557-2050
+        Fax: +1 (212) 557-2049
+        EMail: rens@century.com
+
+
+        Steve Dorner
+        QUALCOMM Incorporated
+        6455 Lusk Boulevard
+        San Diego, CA 92121
+        USA
+
+        EMail: sdorner@qualcomm.com
+
+
+9. Registration of New Content-Disposition Values and Parameters
+
+   New Content-Disposition values (besides "inline" and "attachment")
+   may be defined only by Internet standards-track documents, or in
+   Experimental documents approved by the Internet Engineering Steering
+   Group.
+
+
+
+
+
+
+
+Troost, et. al.             Standards Track                    [Page 11]
+
+RFC 2183                  Content-Disposition                August 1997
+
+
+   New content-disposition parameters may be registered by supplying the
+   information in the following template and sending it via electronic
+   mail to IANA@IANA.ORG:
+
+     To: IANA@IANA.ORG
+     Subject: Registration of new Content-Disposition parameter
+
+     Content-Disposition parameter name:
+
+     Allowable values for this parameter:
+          (If the parameter can only assume a small number of values,
+          list each of those values.  Otherwise, describe the values
+          that the parameter can assume.)
+     Description:
+          (What is the purpose of this parameter and how is it used?)
+
+10. Changes since RFC 1806
+
+   The following changes have been made since the earlier version of
+   this document, published in RFC 1806 as an Experimental protocol:
+
+   +    Updated references to MIME documents.  In some cases this
+        involved substituting a reference to one of the current MIME
+        RFCs for a reference to RFC 1521; in other cases, a reference to
+        RFC 1521 was simply replaced with the word "MIME".
+
+   +    Added  a section on registration procedures, since none of the
+        procedures in RFC 2048 seemed to be appropriate.
+
+   +    Added new parameter types: creation-date, modification-date,
+        read-date, and size.
+
+
+   +    Incorporated a reference to draft-freed-pvcsc-* for encoding
+        long or non-ASCII parameter values.
+
+   +    Added reference to RFC 2119 to define MUST, SHOULD, etc.
+        keywords.
+
+
+
+
+
+
+
+
+
+
+
+
+
+Troost, et. al.             Standards Track                    [Page 12]
+
diff -uNr gmime-1.90.0/rfc/rfc2184.txt gmime/rfc/rfc2184.txt
--- gmime-1.90.0/rfc/rfc2184.txt	Thu Jan  1 01:00:00 1970
+++ gmime/rfc/rfc2184.txt	Mon Nov 19 02:48:28 2001
@@ -0,0 +1,507 @@
+
+
+
+
+
+
+Network Working Group                                         N. Freed
+Request for Comments: 2184                                    Innosoft
+Updates: 2045, 2047, 2183                                     K. Moore
+Category: Standards Track                      University of Tennessee
+                                                           August 1997
+
+
+           MIME Parameter Value and Encoded Word Extensions:
+              Character Sets, Languages, and Continuations
+
+Status of this Memo
+
+   This document specifies an Internet standards track protocol for the
+   Internet community, and requests discussion and suggestions for
+   improvements.  Please refer to the current edition of the "Internet
+   Official Protocol Standards" (STD 1) for the standardization state
+   and status of this protocol.  Distribution of this memo is unlimited.
+
+1.  Abstract
+
+   This memo defines extensions to the RFC 2045 media type and RFC 2183
+   disposition parameter value mechanisms to provide
+
+    (1)   a means to specify parameter values in character sets
+          other than US-ASCII,
+
+    (2)   to specify the language to be used should the value be
+          displayed, and
+
+    (3)   a continuation mechanism for long parameter values to
+          avoid problems with header line wrapping.
+
+   This memo also defines an extension to the encoded words defined in
+   RFC 2047 to allow the specification of the language to be used for
+   display as well as the character set.
+
+2.  Introduction
+
+   The Multipurpose Internet Mail Extensions, or MIME [RFC-2045, RFC-
+   2046, RFC-2047, RFC-2048, RFC-2049], define a message format that
+   allows for
+
+    (1)   textual message bodies in character sets other than
+          US-ASCII,
+
+    (2)   non-textual message bodies,
+
+    (3)   multi-part message bodies, and
+
+
+
+Freed & Moore               Standards Track                     [Page 1]
+
+RFC 2184    MIME Parameter Value and Encoded Word Extensions August 1997
+
+
+    (4)   textual header information in character sets other than
+          US-ASCII.
+
+   MIME is now widely deployed and is used by a variety of Internet
+   protocols, including, of course, Internet email.  However, MIME's
+   success has resulted in the need for additional mechanisms that were
+   not provided in the original protocol specification.
+
+   In particular, existing MIME mechanisms provide for named media type
+   (content-type field) parameters as well as named disposition
+   (content-disposition field).  A MIME media type may specify any
+   number of parameters associated with all of its subtypes, and any
+   specific subtype may specify additional parameters for its own use. A
+   MIME disposition value may specify any number of associated
+   parameters, the most important of which is probably the attachment
+   disposition's filename parameter.
+
+   These parameter names and values end up appearing in the content-type
+   and content-disposition header fields in Internet email.  This
+   inherently imposes three crucial limitations:
+
+    (1)   Lines in Internet email header fields are folded according to
+          RFC 822 folding rules.  This makes long parameter values
+          problematic.
+
+    (2)   MIME headers, like the RFC 822 headers they often appear in,
+          are limited to 7bit US-ASCII, and the encoded-word mechanisms
+          of RFC 2047 are not available to parameter values.  This makes
+          it impossible to have parameter values in character sets other
+          than US-ASCII without specifying some sort of private per-
+          parameter encoding.
+
+    (3)   It has recently become clear that character set information
+          is not sufficient to properly display some sorts of
+          information -- language information is also needed [RFC-2130].
+          For example, support for handicapped users may require reading
+          text string aloud. The language the text is written in is
+          needed for this to be done correctly.  Some parameter values
+          may need to be displayed, hence there is a need to allow for
+          the inclusion of language information.
+
+   The last problem on this list is also an issue for the encoded words
+   defined by RFC 2047, as encoded words are intended primarily for
+   display purposes.
+
+
+
+
+
+
+
+Freed & Moore               Standards Track                     [Page 2]
+
+RFC 2184    MIME Parameter Value and Encoded Word Extensions August 1997
+
+
+   This document defines extensions that address all of these
+   limitations. All of these extensions are implemented in a fashion
+   that is completely compatible at a syntactic level with existing MIME
+   implementations. In addition, the extensions are designed to have as
+   little impact as possible on existing uses of MIME.
+
+   IMPORTANT NOTE: These mechanisms end up being somewhat gibbous when
+   they actually are used. As such, use of these mechanisms should not
+   be used lightly; they should be reserved for situations where a real
+   need for them exists.
+
+2.1.  Requirements notation
+
+   This document occasionally uses terms that appear in capital letters.
+   When the terms "MUST", "SHOULD", "MUST NOT", "SHOULD NOT", and "MAY"
+   appear capitalized, they are being used to indicate particular
+   requirements of this specification. A discussion of the meanings of
+   these terms appears in [RFC-2119].
+
+
+3.  Parameter Value Continuations
+
+   Long MIME media type or disposition parameter values do not interact
+   well with header line wrapping conventions.  In particular, proper
+   header line wrapping depends on there being places where linear
+   whitespace (LWSP) is allowed, which may or may not be present in a
+   parameter value, and even if present may not be recognizable as such
+   since specific knowledge of parameter value syntax may not be
+   available to the agent doing the line wrapping. The result is that
+   long parameter values may end up getting truncated or otherwise
+   damaged by incorrect line wrapping implementations.
+
+   A mechanism is therefore needed to break up parameter values into
+   smaller units that are amenable to line wrapping. Any such mechanism
+   MUST be compatible with existing MIME processors. This means that
+
+    (1)   the mechanism MUST NOT change the syntax of MIME media
+          type and disposition lines, and
+
+    (2)   the mechanism MUST NOT depend on parameter ordering
+          since MIME states that parameters are not order sensitive.
+          Note that while MIME does prohibit modification of MIME
+          headers during transport, it is still possible that parameters
+          will be reordered when user agent level processing is done.
+
+
+
+
+
+
+
+Freed & Moore               Standards Track                     [Page 3]
+
+RFC 2184    MIME Parameter Value and Encoded Word Extensions August 1997
+
+
+   The obvious solution, then, is to use multiple parameters to contain
+   a single parameter value and to use some kind of distinguished name
+   to indicate when this is being done.  And this obvious solution is
+   exactly what is specified here: The asterisk character ("*") followed
+   by a decimal count is employed to indicate that multiple parameters
+   are being used to encapsulate a single parameter value.  The count
+   starts at 0 and increments by 1 for each subsequent section of the
+   parameter value.  Decimal values are used and neither leading zeroes
+   nor gaps in the sequence are allowed.
+
+   The original parameter value is recovered by concatenating the
+   various sections of the parameter, in order.  For example, the
+   content-type field
+
+     Content-Type: message/external-body; access-type=URL;
+      URL*0="ftp://";
+      URL*1="cs.utk.edu/pub/moore/bulk-mailer/bulk-mailer.tar"
+
+   is semantically identical to
+
+     Content-Type: message/external-body; access-type=URL;
+      URL="ftp://cs.utk.edu/pub/moore/bulk-mailer/bulk-mailer.tar"
+
+   Note that quotes around parameter values are part of the value
+   syntax; they are NOT part of the value itself.  Furthermore, it is
+   explicitly permitted to have a mixture of quoted and unquoted
+   continuation fields.
+
+4.  Parameter Value Character Set and Language Information
+
+   Some parameter values may need to be qualified with character set or
+   language information.  It is clear that a distinguished parameter
+   name is needed to identify when this information is present along
+   with a specific syntax for the information in the value itself.  In
+   addition, a lightweight encoding mechanism is needed to accomodate 8
+   bit information in parameter values.
+
+   Asterisks ("*") are reused to provide the indicator that language and
+   character set information is present and encoding is being used. A
+   single quote ("'") is used to delimit the character set and language
+   information at the beginning of the parameter value. Percent signs
+   ("%") are used as the encoding flag, which agrees with RFC 2047.
+
+
+
+
+
+
+
+
+
+Freed & Moore               Standards Track                     [Page 4]
+
+RFC 2184    MIME Parameter Value and Encoded Word Extensions August 1997
+
+
+   Specifically, an asterisk at the end of a parameter name acts as an
+   indicator that character set and language information may appear at
+   the beginning of the parameter value. A single quote is used to
+   separate the character set, language, and actual value information in
+   the parameter value string, and an percent sign is used to flag
+   octets encoded in hexadecimal.  For example:
+
+     Content-Type: application/x-stuff;
+      title*=us-ascii'en-us'This%20is%20%2A%2A%2Afun%2A%2A%2A
+
+   Note that it is perfectly permissible to leave either the character
+   set or language field blank.  Note also that the single quote
+   delimiters MUST be present even when one of the field values is
+   omitted.  This is done when either character set, language, or both
+   are not relevant to the parameter value at hand.  This MUST NOT be
+   done in order to indicate a default character set or language --
+   parameter field definitions MUST NOT assign a default character set
+   or lanugage.
+
+4.1.  Combining Character Set, Language, and Parameter Continuations
+
+   Character set and language information may be combined with the
+   parameter continuation mechanism. For example:
+
+   Content-Type: application/x-stuff
+    title*1*=us-ascii'en'This%20is%20even%20more%20
+    title*2*=%2A%2A%2Afun%2A%2A%2A%20
+    title*3="isn't it!"
+
+   Note that:
+
+    (1)   Language and character set information only appear at
+          the beginning of a given parameter value.
+
+    (2)   Continuations do not provide a facility for using more
+          than one character set or language in the same parameter
+          value.
+
+    (3)   A value presented using multiple continuations may
+          contain a mixture of encoded and unencoded segments.
+
+    (4)   The first segment of a continuation MUST be encoded if
+          language and character set information are given.
+
+    (5)   If the first segment of a continued parameter value is
+          encoded the language and character set field delimiters MUST
+          be present even when the fields are left blank.
+
+
+
+
+Freed & Moore               Standards Track                     [Page 5]
+
+RFC 2184    MIME Parameter Value and Encoded Word Extensions August 1997
+
+
+5.  Language specification in Encoded Words
+
+   RFC 2047 provides support for non-US-ASCII character sets in RFC 822
+   message header comments, phrases, and any unstructured text field.
+   This is done by defining an encoded word construct which can appear
+   in any of these places.  Given that these are fields intended for
+   display, it is sometimes necessary to associate language information
+   with encoded words as well as just the character set.  This
+   specification extends the definition of an encoded word to allow the
+   inclusion of such information.  This is simply done by suffixing the
+   character set specification with an asterisk followed by the language
+   tag.  For example:
+
+        From: =?US-ASCII*EN?Q?Keith_Moore?= <moore@cs.utk.edu>
+
+6.  IMAP4 Handling of Parameter Values
+
+   IMAP4 [RFC-2060] servers SHOULD decode parameter value continuations
+   when generating the BODY and BODYSTRUCTURE fetch attributes.
+
+7.  Modifications to MIME ABNF
+
+   The ABNF for MIME parameter values given in RFC 2045 is:
+
+   parameter := attribute "=" value
+
+   attribute := token
+                ; Matching of attributes
+                ; is ALWAYS case-insensitive.
+
+   This specification changes this ABNF to:
+
+   parameter := regular-parameter / extended-parameter
+
+   regular-parameter := regular-parameter-name "=" value
+
+   regular-parameter-name := attribute [section]
+
+   attribute := 1*attribute-char
+
+   attribute-char := <any (US-ASCII) CHAR except SPACE, CTLs,
+                     "*", "'", "%", or tspecials>
+
+   section := initial-section / other-sections
+
+   initial-section := "*1"
+
+
+
+
+
+Freed & Moore               Standards Track                     [Page 6]
+
+RFC 2184    MIME Parameter Value and Encoded Word Extensions August 1997
+
+
+   other-sections := "*" (("2" / "3" / "4" / "5" /
+                           "6" / "7" / "8" / "9") *DIGIT) /
+                          ("1" 1*DIGIT))
+
+   extended-parameter := (extended-initial-name "="
+                          extended-value) /
+                         (extended-other-names "="
+                          extended-other-values)
+
+   extended-initial-name := attribute [initial-section] "*"
+
+   extended-other-names := attribute other-sections "*"
+
+   extended-initial-value := [charset] "'" [language] "'"
+                             extended-other-values
+
+   extended-other-values := *(ext-octet / attribute-char)
+
+   ext-octet := "%" 2(DIGIT / "A" / "B" / "C" / "D" / "E" / "F")
+
+   charset := <registered character set name>
+
+   language := <registered language tag [RFC-1766]>
+
+   The ABNF given in RFC 2047 for encoded-words is:
+
+   encoded-word := "=?" charset "?" encoding "?" encoded-text "?="
+
+   This specification changes this ABNF to:
+
+   encoded-word := "=?" charset ["*" language] "?" encoded-text "?="
+
+
+8.  Character sets which allow specification of language
+
+   In the future it is likely that some character sets will provide
+   facilities for inline language labelling. Such facilities are
+   inherently more flexible than those defined here as they allow for
+   language switching in the middle of a string.
+
+   If and when such facilities are developed they SHOULD be used in
+   preference to the language labelling facilities specified here. Note
+   that all the mechanisms defined here allow for the omission of
+   language labels so as to be able to accomodate this possible future
+   usage.
+
+
+
+
+
+
+Freed & Moore               Standards Track                     [Page 7]
+
+RFC 2184    MIME Parameter Value and Encoded Word Extensions August 1997
+
+
+9.  Security Considerations
+
+   This RFC does not discuss security issues and is not believed to
+   raise any security issues not already endemic in electronic mail and
+   present in fully conforming implementations of MIME.
+
+10.  References
+
+   [RFC-822]
+      Crocker, D., "Standard for the Format of ARPA Internet Text
+      Messages", STD 11, RFC 822, August 1982.
+
+   [RFC-1766]
+      Alvestrand, H., "Tags for the Identification of Languages", RFC
+      1766, March 1995.
+
+   [RFC-2045]
+      Freed, N. and Borenstein, N., "Multipurpose Internet Mail
+      Extensions (MIME) Part One: Format of Internet Message Bodies",
+      RFC 2045, Innosoft, First Virtual Holdings, December 1996.
+
+   [RFC-2046]
+      Freed, N. and Borenstein, N., "Multipurpose Internet Mail
+      Extensions (MIME) Part Two: Media Types", RFC 2046, Innosoft,
+      First Virtual Holdings, December 1996.
+
+   [RFC-2047]
+      Moore, K., "Multipurpose Internet Mail Extensions (MIME) Part
+      Three: Representation of Non-ASCII Text in Internet Message
+      Headers", RFC 2047, University of Tennessee, December 1996.
+
+   [RFC-2048]
+      Freed, N., Klensin, J., Postel, J., "Multipurpose Internet Mail
+      Extensions (MIME) Part Four: MIME Registration Procedures", RFC
+      2048, Innosoft, MCI, ISI, December 1996.
+
+   [RFC-2049]
+      Freed, N. and Borenstein, N., "Multipurpose Internet Mail
+      Extensions (MIME) Part Five: Conformance Criteria and Examples",
+      RFC 2049, Innosoft, FIrst Virtual Holdings, December 1996.
+
+   [RFC-2060]
+      Crispin, M., "Internet Message Access Protocol - Version 4rev1",
+      RFC 2060, December 1996.
+
+   [RFC-2119]
+      Bradner, S., "Key words for use in RFCs to Indicate Requirement
+      Levels", RFC 2119, March 1997.
+
+
+
+Freed & Moore               Standards Track                     [Page 8]
+
+RFC 2184    MIME Parameter Value and Encoded Word Extensions August 1997
+
+
+   [RFC-2130]
+      Weider, C., Preston, C., Simonsen, K., Alvestrand, H., Atkinson,
+      R., Crispin, M., Svanberg, P., "Report from the IAB Character Set
+      Workshop", RFC 2130, April 1997.
+
+   [RFC-2183]
+      Troost, R., Dorner, S., and Moore, K., "Communicating Presentation
+      Information in Internet Messages:  The Content-Disposition
+      Header", RFC 2183, August 1997.
+
+11.  Authors' Addresses
+
+   Ned Freed
+   Innosoft International, Inc.
+   1050 East Garvey Avenue South
+   West Covina, CA 91790
+   USA
+    tel: +1 818 919 3600           fax: +1 818 919 3614
+    email: ned@innosoft.com
+
+   Keith Moore
+   Computer Science Dept.
+   University of Tennessee
+   107 Ayres Hall
+   Knoxville, TN 37996-1301
+   USA
+    email: moore@cs.utk.edu
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Freed & Moore               Standards Track                     [Page 9]
+
diff -uNr gmime-1.90.0/rfc/rfc2231.txt gmime/rfc/rfc2231.txt
--- gmime-1.90.0/rfc/rfc2231.txt	Thu Jan  1 01:00:00 1970
+++ gmime/rfc/rfc2231.txt	Mon Nov 19 02:48:28 2001
@@ -0,0 +1,563 @@
+
+
+
+
+
+
+Network Working Group                                         N. Freed
+Request for Comments: 2231                                    Innosoft
+Updates: 2045, 2047, 2183                                     K. Moore
+Obsoletes: 2184                                University of Tennessee
+Category: Standards Track                                November 1997
+
+
+           MIME Parameter Value and Encoded Word Extensions:
+              Character Sets, Languages, and Continuations
+
+
+Status of this Memo
+
+   This document specifies an Internet standards track protocol for the
+   Internet community, and requests discussion and suggestions for
+   improvements.  Please refer to the current edition of the "Internet
+   Official Protocol Standards" (STD 1) for the standardization state
+   and status of this protocol.  Distribution of this memo is unlimited.
+
+Copyright Notice
+
+   Copyright (C) The Internet Society (1997).  All Rights Reserved.
+
+1.  Abstract
+
+   This memo defines extensions to the RFC 2045 media type and RFC 2183
+   disposition parameter value mechanisms to provide
+
+    (1)   a means to specify parameter values in character sets
+          other than US-ASCII,
+
+    (2)   to specify the language to be used should the value be
+          displayed, and
+
+    (3)   a continuation mechanism for long parameter values to
+          avoid problems with header line wrapping.
+
+   This memo also defines an extension to the encoded words defined in
+   RFC 2047 to allow the specification of the language to be used for
+   display as well as the character set.
+
+2.  Introduction
+
+   The Multipurpose Internet Mail Extensions, or MIME [RFC-2045, RFC-
+   2046, RFC-2047, RFC-2048, RFC-2049], define a message format that
+   allows for:
+
+
+
+
+
+Freed & Moore               Standards Track                     [Page 1]
+
+RFC 2231         MIME Value and Encoded Word Extensions    November 1997
+
+
+    (1)   textual message bodies in character sets other than
+          US-ASCII,
+
+    (2)   non-textual message bodies,
+
+    (3)   multi-part message bodies, and
+
+    (4)   textual header information in character sets other than
+          US-ASCII.
+
+   MIME is now widely deployed and is used by a variety of Internet
+   protocols, including, of course, Internet email.  However, MIME's
+   success has resulted in the need for additional mechanisms that were
+   not provided in the original protocol specification.
+
+   In particular, existing MIME mechanisms provide for named media type
+   (content-type field) parameters as well as named disposition
+   (content-disposition field).  A MIME media type may specify any
+   number of parameters associated with all of its subtypes, and any
+   specific subtype may specify additional parameters for its own use. A
+   MIME disposition value may specify any number of associated
+   parameters, the most important of which is probably the attachment
+   disposition's filename parameter.
+
+   These parameter names and values end up appearing in the content-type
+   and content-disposition header fields in Internet email.  This
+   inherently imposes three crucial limitations:
+
+    (1)   Lines in Internet email header fields are folded
+          according to RFC 822 folding rules.  This makes long
+          parameter values problematic.
+
+    (2)   MIME headers, like the RFC 822 headers they often
+          appear in, are limited to 7bit US-ASCII, and the
+          encoded-word mechanisms of RFC 2047 are not available
+          to parameter values.  This makes it impossible to have
+          parameter values in character sets other than US-ASCII
+          without specifying some sort of private per-parameter
+          encoding.
+
+    (3)   It has recently become clear that character set
+          information is not sufficient to properly display some
+          sorts of information -- language information is also
+          needed [RFC-2130].  For example, support for
+          handicapped users may require reading text string
+
+
+
+
+
+
+Freed & Moore               Standards Track                     [Page 2]
+
+RFC 2231         MIME Value and Encoded Word Extensions    November 1997
+
+
+          aloud. The language the text is written in is needed
+          for this to be done correctly.  Some parameter values
+          may need to be displayed, hence there is a need to
+          allow for the inclusion of language information.
+
+   The last problem on this list is also an issue for the encoded words
+   defined by RFC 2047, as encoded words are intended primarily for
+   display purposes.
+
+   This document defines extensions that address all of these
+   limitations. All of these extensions are implemented in a fashion
+   that is completely compatible at a syntactic level with existing MIME
+   implementations. In addition, the extensions are designed to have as
+   little impact as possible on existing uses of MIME.
+
+   IMPORTANT NOTE:  These mechanisms end up being somewhat gibbous when
+   they actually are used. As such, these mechanisms should not be used
+   lightly; they should be reserved for situations where a real need for
+   them exists.
+
+2.1.  Requirements notation
+
+   This document occasionally uses terms that appear in capital letters.
+   When the terms "MUST", "SHOULD", "MUST NOT", "SHOULD NOT", and "MAY"
+   appear capitalized, they are being used to indicate particular
+   requirements of this specification. A discussion of the meanings of
+   these terms appears in [RFC- 2119].
+
+3.  Parameter Value Continuations
+
+   Long MIME media type or disposition parameter values do not interact
+   well with header line wrapping conventions.  In particular, proper
+   header line wrapping depends on there being places where linear
+   whitespace (LWSP) is allowed, which may or may not be present in a
+   parameter value, and even if present may not be recognizable as such
+   since specific knowledge of parameter value syntax may not be
+   available to the agent doing the line wrapping. The result is that
+   long parameter values may end up getting truncated or otherwise
+   damaged by incorrect line wrapping implementations.
+
+   A mechanism is therefore needed to break up parameter values into
+   smaller units that are amenable to line wrapping. Any such mechanism
+   MUST be compatible with existing MIME processors. This means that
+
+    (1)   the mechanism MUST NOT change the syntax of MIME media
+          type and disposition lines, and
+
+
+
+
+
+Freed & Moore               Standards Track                     [Page 3]
+
+RFC 2231         MIME Value and Encoded Word Extensions    November 1997
+
+
+    (2)   the mechanism MUST NOT depend on parameter ordering
+          since MIME states that parameters are not order
+          sensitive.  Note that while MIME does prohibit
+          modification of MIME headers during transport, it is
+          still possible that parameters will be reordered when
+          user agent level processing is done.
+
+   The obvious solution, then, is to use multiple parameters to contain
+   a single parameter value and to use some kind of distinguished name
+   to indicate when this is being done.  And this obvious solution is
+   exactly what is specified here: The asterisk character ("*") followed
+   by a decimal count is employed to indicate that multiple parameters
+   are being used to encapsulate a single parameter value.  The count
+   starts at 0 and increments by 1 for each subsequent section of the
+   parameter value.  Decimal values are used and neither leading zeroes
+   nor gaps in the sequence are allowed.
+
+   The original parameter value is recovered by concatenating the
+   various sections of the parameter, in order.  For example, the
+   content-type field
+
+        Content-Type: message/external-body; access-type=URL;
+         URL*0="ftp://";
+         URL*1="cs.utk.edu/pub/moore/bulk-mailer/bulk-mailer.tar"
+
+   is semantically identical to
+
+        Content-Type: message/external-body; access-type=URL;
+          URL="ftp://cs.utk.edu/pub/moore/bulk-mailer/bulk-mailer.tar"
+
+   Note that quotes around parameter values are part of the value
+   syntax; they are NOT part of the value itself.  Furthermore, it is
+   explicitly permitted to have a mixture of quoted and unquoted
+   continuation fields.
+
+4.  Parameter Value Character Set and Language Information
+
+   Some parameter values may need to be qualified with character set or
+   language information.  It is clear that a distinguished parameter
+   name is needed to identify when this information is present along
+   with a specific syntax for the information in the value itself.  In
+   addition, a lightweight encoding mechanism is needed to accommodate 8
+   bit information in parameter values.
+
+
+
+
+
+
+
+
+Freed & Moore               Standards Track                     [Page 4]
+
+RFC 2231         MIME Value and Encoded Word Extensions    November 1997
+
+
+   Asterisks ("*") are reused to provide the indicator that language and
+   character set information is present and encoding is being used. A
+   single quote ("'") is used to delimit the character set and language
+   information at the beginning of the parameter value. Percent signs
+   ("%") are used as the encoding flag, which agrees with RFC 2047.
+
+   Specifically, an asterisk at the end of a parameter name acts as an
+   indicator that character set and language information may appear at
+   the beginning of the parameter value. A single quote is used to
+   separate the character set, language, and actual value information in
+   the parameter value string, and an percent sign is used to flag
+   octets encoded in hexadecimal.  For example:
+
+        Content-Type: application/x-stuff;
+         title*=us-ascii'en-us'This%20is%20%2A%2A%2Afun%2A%2A%2A
+
+   Note that it is perfectly permissible to leave either the character
+   set or language field blank.  Note also that the single quote
+   delimiters MUST be present even when one of the field values is
+   omitted.  This is done when either character set, language, or both
+   are not relevant to the parameter value at hand.  This MUST NOT be
+   done in order to indicate a default character set or language --
+   parameter field definitions MUST NOT assign a default character set
+   or language.
+
+4.1.  Combining Character Set, Language, and Parameter Continuations
+
+   Character set and language information may be combined with the
+   parameter continuation mechanism. For example:
+
+   Content-Type: application/x-stuff
+    title*0*=us-ascii'en'This%20is%20even%20more%20
+    title*1*=%2A%2A%2Afun%2A%2A%2A%20
+    title*2="isn't it!"
+
+   Note that:
+
+    (1)   Language and character set information only appear at
+          the beginning of a given parameter value.
+
+    (2)   Continuations do not provide a facility for using more
+          than one character set or language in the same
+          parameter value.
+
+    (3)   A value presented using multiple continuations may
+          contain a mixture of encoded and unencoded segments.
+
+
+
+
+
+Freed & Moore               Standards Track                     [Page 5]
+
+RFC 2231         MIME Value and Encoded Word Extensions    November 1997
+
+
+    (4)   The first segment of a continuation MUST be encoded if
+          language and character set information are given.
+
+    (5)   If the first segment of a continued parameter value is
+          encoded the language and character set field delimiters
+          MUST be present even when the fields are left blank.
+
+5.  Language specification in Encoded Words
+
+   RFC 2047 provides support for non-US-ASCII character sets in RFC 822
+   message header comments, phrases, and any unstructured text field.
+   This is done by defining an encoded word construct which can appear
+   in any of these places.  Given that these are fields intended for
+   display, it is sometimes necessary to associate language information
+   with encoded words as well as just the character set.  This
+   specification extends the definition of an encoded word to allow the
+   inclusion of such information.  This is simply done by suffixing the
+   character set specification with an asterisk followed by the language
+   tag.  For example:
+
+          From: =?US-ASCII*EN?Q?Keith_Moore?= <moore@cs.utk.edu>
+
+6.  IMAP4 Handling of Parameter Values
+
+   IMAP4 [RFC-2060] servers SHOULD decode parameter value continuations
+   when generating the BODY and BODYSTRUCTURE fetch attributes.
+
+7.  Modifications to MIME ABNF
+
+   The ABNF for MIME parameter values given in RFC 2045 is:
+
+   parameter := attribute "=" value
+
+   attribute := token
+                ; Matching of attributes
+                ; is ALWAYS case-insensitive.
+
+   This specification changes this ABNF to:
+
+   parameter := regular-parameter / extended-parameter
+
+   regular-parameter := regular-parameter-name "=" value
+
+   regular-parameter-name := attribute [section]
+
+   attribute := 1*attribute-char
+
+
+
+
+
+Freed & Moore               Standards Track                     [Page 6]
+
+RFC 2231         MIME Value and Encoded Word Extensions    November 1997
+
+
+   attribute-char := <any (US-ASCII) CHAR except SPACE, CTLs,
+                     "*", "'", "%", or tspecials>
+
+   section := initial-section / other-sections
+
+   initial-section := "*0"
+
+   other-sections := "*" ("1" / "2" / "3" / "4" / "5" /
+                          "6" / "7" / "8" / "9") *DIGIT)
+
+   extended-parameter := (extended-initial-name "="
+                          extended-value) /
+                         (extended-other-names "="
+                          extended-other-values)
+
+   extended-initial-name := attribute [initial-section] "*"
+
+   extended-other-names := attribute other-sections "*"
+
+   extended-initial-value := [charset] "'" [language] "'"
+                             extended-other-values
+
+   extended-other-values := *(ext-octet / attribute-char)
+
+   ext-octet := "%" 2(DIGIT / "A" / "B" / "C" / "D" / "E" / "F")
+
+   charset := <registered character set name>
+
+   language := <registered language tag [RFC-1766]>
+
+   The ABNF given in RFC 2047 for encoded-words is:
+
+   encoded-word := "=?" charset "?" encoding "?" encoded-text "?="
+
+   This specification changes this ABNF to:
+
+   encoded-word := "=?" charset ["*" language] "?" encoded-text "?="
+
+8.  Character sets which allow specification of language
+
+   In the future it is likely that some character sets will provide
+   facilities for inline language labeling. Such facilities are
+   inherently more flexible than those defined here as they allow for
+   language switching in the middle of a string.
+
+
+
+
+
+
+
+Freed & Moore               Standards Track                     [Page 7]
+
+RFC 2231         MIME Value and Encoded Word Extensions    November 1997
+
+
+   If and when such facilities are developed they SHOULD be used in
+   preference to the language labeling facilities specified here. Note
+   that all the mechanisms defined here allow for the omission of
+   language labels so as to be able to accommodate this possible future
+   usage.
+
+9.  Security Considerations
+
+   This RFC does not discuss security issues and is not believed to
+   raise any security issues not already endemic in electronic mail and
+   present in fully conforming implementations of MIME.
+
+10.  References
+
+   [RFC-822]
+        Crocker, D., "Standard for the Format of ARPA Internet
+        Text Messages", STD 11, RFC 822 August 1982.
+
+   [RFC-1766]
+        Alvestrand, H., "Tags for the Identification of
+        Languages", RFC 1766, March 1995.
+
+   [RFC-2045]
+        Freed, N., and N. Borenstein, "Multipurpose Internet Mail
+        Extensions (MIME) Part One: Format of Internet Message
+        Bodies", RFC 2045, December 1996.
+
+   [RFC-2046]
+        Freed, N. and N. Borenstein, "Multipurpose Internet Mail
+        Extensions (MIME) Part Two: Media Types", RFC 2046,
+        December 1996.
+
+   [RFC-2047]
+        Moore, K., "Multipurpose Internet Mail Extensions (MIME)
+        Part Three: Representation of Non-ASCII Text in Internet
+        Message Headers", RFC 2047, December 1996.
+
+   [RFC-2048]
+        Freed, N., Klensin, J. and J. Postel, "Multipurpose
+        Internet Mail Extensions (MIME) Part Four: MIME
+        Registration Procedures", RFC 2048, December 1996.
+
+   [RFC-2049]
+        Freed, N. and N. Borenstein, "Multipurpose Internet Mail
+        Extensions (MIME) Part Five: Conformance Criteria and
+        Examples", RFC 2049, December 1996.
+
+
+
+
+
+Freed & Moore               Standards Track                     [Page 8]
+
+RFC 2231         MIME Value and Encoded Word Extensions    November 1997
+
+
+   [RFC-2060]
+        Crispin, M., "Internet Message Access Protocol - Version
+        4rev1", RFC 2060, December 1996.
+
+   [RFC-2119]
+        Bradner, S., "Key words for use in RFCs to Indicate
+        Requirement Levels", RFC 2119, March 1997.
+
+   [RFC-2130]
+        Weider, C., Preston, C., Simonsen, K., Alvestrand, H.,
+        Atkinson, R., Crispin, M., and P. Svanberg, "Report from the
+        IAB Character Set Workshop", RFC 2130, April 1997.
+
+   [RFC-2183]
+        Troost, R., Dorner, S. and K. Moore, "Communicating
+        Presentation Information in Internet Messages:  The
+        Content-Disposition Header", RFC 2183, August 1997.
+
+11.  Authors' Addresses
+
+   Ned Freed
+   Innosoft International, Inc.
+   1050 Lakes Drive
+   West Covina, CA 91790
+   USA
+
+   Phone: +1 626 919 3600
+   Fax:   +1 626 919 3614
+   EMail: ned.freed@innosoft.com
+
+
+   Keith Moore
+   Computer Science Dept.
+   University of Tennessee
+   107 Ayres Hall
+   Knoxville, TN 37996-1301
+   USA
+
+   EMail: moore@cs.utk.edu
+
+
+
+
+
+
+
+
+
+
+
+
+Freed & Moore               Standards Track                     [Page 9]
+
+RFC 2231         MIME Value and Encoded Word Extensions    November 1997
+
+
+12.  Full Copyright Statement
+
+   Copyright (C) The Internet Society (1997).  All Rights Reserved.
+
+   This document and translations of it may be copied and furnished to
+   others, and derivative works that comment on or otherwise explain it
+   or assist in its implementation may be prepared, copied, published
+   and distributed, in whole or in part, without restriction of any
+   kind, provided that the above copyright notice and this paragraph are
+   included on all such copies and derivative works.  However, this
+   document itself may not be modified in any way, such as by removing
+   the copyright notice or references to the Internet Society or other
+   Internet organizations, except as needed for the purpose of
+   developing Internet standards in which case the procedures for
+   copyrights defined in the Internet Standards process must be
+   followed, or as required to translate it into languages other than
+   English.
+
+   The limited permissions granted above are perpetual and will not be
+   revoked by the Internet Society or its successors or assigns.
+
+   This document and the information contained herein is provided on an
+   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
+   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
+   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
+   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
+   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Freed & Moore               Standards Track                    [Page 10]
+
diff -uNr gmime-1.90.0/rfc/rfc2268.txt gmime/rfc/rfc2268.txt
--- gmime-1.90.0/rfc/rfc2268.txt	Thu Jan  1 01:00:00 1970
+++ gmime/rfc/rfc2268.txt	Mon Jun  3 05:44:17 2002
@@ -0,0 +1,619 @@
+
+
+
+
+
+
+Network Working Group                                          R. Rivest
+Request for Comments: 2268           MIT Laboratory for Computer Science
+Category: Informational                      and RSA Data Security, Inc.
+                                                              March 1998
+
+
+            A Description of the RC2(r) Encryption Algorithm
+
+Status of this Memo
+
+   This memo provides information for the Internet community.  It does
+   not specify an Internet standard of any kind.  Distribution of this
+   memo is unlimited.
+
+Copyright Notice
+
+   Copyright (C) The Internet Society (1998).  All Rights Reserved.
+
+1. Introduction
+
+   This memo is an RSA Laboratories Technical Note.  It is meant for
+   informational use by the Internet community.
+
+   This memo describes a conventional (secret-key) block encryption
+   algorithm, called RC2, which may be considered as a proposal for a
+   DES replacement. The input and output block sizes are 64 bits each.
+   The key size is variable, from one byte up to 128 bytes, although the
+   current implementation uses eight bytes.
+
+   The algorithm is designed to be easy to implement on 16-bit
+   microprocessors. On an IBM AT, the encryption runs about twice as
+   fast as DES (assuming that key expansion has been done).
+
+1.1 Algorithm description
+
+   We use the term "word" to denote a 16-bit quantity. The symbol + will
+   denote twos-complement addition. The symbol & will denote the bitwise
+   "and" operation. The term XOR will denote the bitwise "exclusive-or"
+   operation. The symbol ~ will denote bitwise complement.  The symbol ^
+   will denote the exponentiation operation.  The term MOD will denote
+   the modulo operation.
+
+   There are three separate algorithms involved:
+
+     Key expansion. This takes a (variable-length) input key and
+     produces an expanded key consisting of 64 words K[0],...,K[63].
+
+
+
+
+
+Rivest                       Informational                      [Page 1]
+
+RFC 2268              RC2(r) Encryption Algorithm             March 1998
+
+
+     Encryption. This takes a 64-bit input quantity stored in words
+     R[0], ..., R[3] and encrypts it "in place" (the result is left in
+     R[0], ..., R[3]).
+
+     Decryption. The inverse operation to encryption.
+
+2. Key expansion
+
+   Since we will be dealing with eight-bit byte operations as well as
+   16-bit word operations, we will use two alternative notations
+
+   for referring to the key buffer:
+
+        For word operations, we will refer to the positions of the
+             buffer as K[0], ..., K[63]; each K[i] is a 16-bit word.
+
+        For byte operations,  we will refer to the key buffer as
+             L[0], ..., L[127]; each L[i] is an eight-bit byte.
+
+   These are alternative views of the same data buffer. At all times it
+   will be true that
+
+                       K[i] = L[2*i] + 256*L[2*i+1].
+
+   (Note that the low-order byte of each K word is given before the
+   high-order byte.)
+
+   We will assume that exactly T bytes of key are supplied, for some T
+   in the range 1 <= T <= 128. (Our current implementation uses T = 8.)
+   However, regardless of T, the algorithm has a maximum effective key
+   length in bits, denoted T1. That is, the search space is 2^(8*T), or
+   2^T1, whichever is smaller.
+
+   The purpose of the key-expansion algorithm is to modify the key
+   buffer so that each bit of the expanded key depends in a complicated
+   way on every bit of the supplied input key.
+
+   The key expansion algorithm begins by placing the supplied T-byte key
+   into bytes L[0], ..., L[T-1] of the key buffer.
+
+   The key expansion algorithm then computes the effective key length in
+   bytes T8 and a mask TM based on the effective key length in bits T1.
+   It uses the following operations:
+
+   T8 = (T1+7)/8;
+   TM = 255 MOD 2^(8 + T1 - 8*T8);
+
+   Thus TM has its 8 - (8*T8 - T1) least significant bits set.
+
+
+
+Rivest                       Informational                      [Page 2]
+
+RFC 2268              RC2(r) Encryption Algorithm             March 1998
+
+
+   For example, with an effective key length of 64 bits, T1 = 64, T8 = 8
+   and TM = 0xff.  With an effective key length of 63 bits, T1 = 63, T8
+   = 8 and TM = 0x7f.
+
+   Here PITABLE[0], ..., PITABLE[255] is an array of "random" bytes
+   based on the digits of PI = 3.14159... . More precisely, the array
+   PITABLE is a random permutation of the values 0, ..., 255. Here is
+   the PITABLE in hexadecimal notation:
+
+        0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f
+   00: d9 78 f9 c4 19 dd b5 ed 28 e9 fd 79 4a a0 d8 9d
+   10: c6 7e 37 83 2b 76 53 8e 62 4c 64 88 44 8b fb a2
+   20: 17 9a 59 f5 87 b3 4f 13 61 45 6d 8d 09 81 7d 32
+   30: bd 8f 40 eb 86 b7 7b 0b f0 95 21 22 5c 6b 4e 82
+   40: 54 d6 65 93 ce 60 b2 1c 73 56 c0 14 a7 8c f1 dc
+   50: 12 75 ca 1f 3b be e4 d1 42 3d d4 30 a3 3c b6 26
+   60: 6f bf 0e da 46 69 07 57 27 f2 1d 9b bc 94 43 03
+   70: f8 11 c7 f6 90 ef 3e e7 06 c3 d5 2f c8 66 1e d7
+   80: 08 e8 ea de 80 52 ee f7 84 aa 72 ac 35 4d 6a 2a
+   90: 96 1a d2 71 5a 15 49 74 4b 9f d0 5e 04 18 a4 ec
+   a0: c2 e0 41 6e 0f 51 cb cc 24 91 af 50 a1 f4 70 39
+   b0: 99 7c 3a 85 23 b8 b4 7a fc 02 36 5b 25 55 97 31
+   c0: 2d 5d fa 98 e3 8a 92 ae 05 df 29 10 67 6c ba c9
+   d0: d3 00 e6 cf e1 9e a8 2c 63 16 01 3f 58 e2 89 a9
+   e0: 0d 38 34 1b ab 33 ff b0 bb 48 0c 5f b9 b1 cd 2e
+   f0: c5 f3 db 47 e5 a5 9c 77 0a a6 20 68 fe 7f c1 ad
+
+   The key expansion operation consists of the following two loops and
+   intermediate step:
+
+   for i = T, T+1, ..., 127 do
+     L[i] = PITABLE[L[i-1] + L[i-T]];
+
+   L[128-T8] = PITABLE[L[128-T8] & TM];
+
+   for i = 127-T8, ..., 0 do
+     L[i] = PITABLE[L[i+1] XOR L[i+T8]];
+
+   (In the first loop, the addition of L[i-1] and L[i-T] is performed
+   modulo 256.)
+
+   The "effective key" consists of the values L[128-T8],..., L[127].
+   The intermediate step's bitwise "and" operation reduces the search
+   space for L[128-T8] so that the effective number of key bits is T1.
+   The expanded key depends only on the effective key bits, regardless
+
+
+
+
+
+
+Rivest                       Informational                      [Page 3]
+
+RFC 2268              RC2(r) Encryption Algorithm             March 1998
+
+
+   of the supplied key K. Since the expanded key is not itself modified
+   during encryption or decryption, as a pragmatic matter one can expand
+   the key just once when encrypting or decrypting a large block of
+   data.
+
+3. Encryption algorithm
+
+   The encryption operation is defined in terms of primitive "mix" and
+   "mash" operations.
+
+   Here the expression "x rol k" denotes the 16-bit word x rotated left
+   by k bits, with the bits shifted out the top end entering the bottom
+   end.
+
+3.1 Mix up R[i]
+
+   The primitive "Mix up R[i]" operation is defined as follows, where
+   s[0] is 1, s[1] is 2, s[2] is 3, and s[3] is 5, and where the indices
+   of the array R are always to be considered "modulo 4," so that R[i-1]
+   refers to R[3] if i is 0 (these values are
+
+   "wrapped around" so that R always has a subscript in the range 0 to 3
+   inclusive):
+
+   R[i] = R[i] + K[j] + (R[i-1] & R[i-2]) + ((~R[i-1]) & R[i-3]);
+   j = j + 1;
+   R[i] = R[i] rol s[i];
+
+   In words: The next key word K[j] is added to R[i], and j is advanced.
+   Then R[i-1] is used to create a "composite" word which is added to
+   R[i]. The composite word is identical with R[i-2] in those positions
+   where R[i-1] is one, and identical to R[i-3] in those positions where
+   R[i-1] is zero. Then R[i] is rotated left by s[i] bits (bits rotated
+   out the left end of R[i] are brought back in at the right). Here j is
+   a "global" variable so that K[j] is always the first key word in the
+   expanded key which has not yet been used in a "mix" operation.
+
+3.2 Mixing round
+
+   A "mixing round" consists of the following operations:
+
+   Mix up R[0]
+   Mix up R[1]
+   Mix up R[2]
+   Mix up R[3]
+
+
+
+
+
+
+Rivest                       Informational                      [Page 4]
+
+RFC 2268              RC2(r) Encryption Algorithm             March 1998
+
+
+3.3 Mash R[i]
+
+   The primitive "Mash R[i]" operation is defined as follows (using the
+   previous conventions regarding subscripts for R):
+
+   R[i] = R[i] + K[R[i-1] & 63];
+
+   In words: R[i] is "mashed" by adding to it one of the words of the
+   expanded key. The key word to be used is determined by looking at the
+   low-order six bits of R[i-1], and using that as an index into the key
+   array K.
+
+3.4 Mashing round
+
+   A "mashing round" consists of:
+
+   Mash R[0]
+   Mash R[1]
+   Mash R[2]
+   Mash R[3]
+
+3.5 Encryption operation
+
+   The entire encryption operation can now be described as follows. Here
+   j is a global integer variable which is affected by the mixing
+   operations.
+
+        1. Initialize words R[0], ..., R[3] to contain the
+           64-bit input value.
+
+        2. Expand the key, so that words K[0], ..., K[63] become
+           defined.
+
+        3. Initialize j to zero.
+
+        4. Perform five mixing rounds.
+
+        5. Perform one mashing round.
+
+        6. Perform six mixing rounds.
+
+        7. Perform one mashing round.
+
+        8. Perform five mixing rounds.
+
+   Note that each mixing round uses four key words, and that there are
+   16 mixing rounds altogether, so that each key word is used exactly
+
+
+
+
+Rivest                       Informational                      [Page 5]
+
+RFC 2268              RC2(r) Encryption Algorithm             March 1998
+
+
+   once in a mixing round. The mashing rounds will refer to up to eight
+   of the key words in a data-dependent manner. (There may be
+   repetitions, and the actual set of words referred to will vary from
+   encryption to encryption.)
+
+4. Decryption algorithm
+
+   The decryption operation is defined in terms of primitive operations
+   that undo the "mix" and "mash" operations of the encryption
+   algorithm. They are named "r-mix" and "r-mash" (r- denotes the
+   reverse operation).
+
+   Here the expression "x ror k" denotes the 16-bit word x rotated right
+   by k bits, with the bits shifted out the bottom end entering the top
+   end.
+
+4.1 R-Mix up R[i]
+
+   The primitive "R-Mix up R[i]" operation is defined as follows, where
+   s[0] is 1, s[1] is 2, s[2] is 3, and s[3] is 5, and where the indices
+   of the array R are always to be considered "modulo 4," so that R[i-1]
+   refers to R[3] if i is 0 (these values are "wrapped around" so that R
+   always has a subscript in the range 0 to 3 inclusive):
+
+   R[i] = R[i] ror s[i];
+   R[i] = R[i] - K[j] - (R[i-1] & R[i-2]) - ((~R[i-1]) & R[i-3]);
+   j = j - 1;
+
+   In words: R[i] is rotated right by s[i] bits (bits rotated out the
+   right end of R[i] are brought back in at the left). Here j is a
+   "global" variable so that K[j] is always the key word with greatest
+   index in the expanded key which has not yet been used in a "r-mix"
+   operation. The key word K[j] is subtracted from R[i], and j is
+   decremented. R[i-1] is used to create a "composite" word which is
+   subtracted from R[i].  The composite word is identical with R[i-2] in
+   those positions where R[i-1] is one, and identical to R[i-3] in those
+   positions where R[i-1] is zero.
+
+4.2 R-Mixing round
+
+   An "r-mixing round" consists of the following operations:
+
+   R-Mix up R[3]
+   R-Mix up R[2]
+   R-Mix up R[1]
+   R-Mix up R[0]
+
+
+
+
+
+Rivest                       Informational                      [Page 6]
+
+RFC 2268              RC2(r) Encryption Algorithm             March 1998
+
+
+4.3 R-Mash R[i]
+
+   The primitive "R-Mash R[i]" operation is defined as follows (using
+   the previous conventions regarding subscripts for R):
+
+   R[i] = R[i] - K[R[i-1] & 63];
+
+   In words: R[i] is "r-mashed" by subtracting from it one of the words
+   of the expanded key. The key word to be used is determined by looking
+   at the low-order six bits of R[i-1], and using that as an index into
+   the key array K.
+
+4.4 R-Mashing round
+
+   An "r-mashing round" consists of:
+
+   R-Mash R[3]
+   R-Mash R[2]
+   R-Mash R[1]
+   R-Mash R[0]
+
+4.5 Decryption operation
+
+   The entire decryption operation can now be described as follows.
+   Here j is a global integer variable which is affected by the mixing
+   operations.
+
+        1. Initialize words R[0], ..., R[3] to contain the 64-bit
+           ciphertext value.
+
+        2. Expand the key, so that words K[0], ..., K[63] become
+           defined.
+
+        3. Initialize j to 63.
+
+        4. Perform five r-mixing rounds.
+
+        5. Perform one r-mashing round.
+
+        6. Perform six r-mixing rounds.
+
+        7. Perform one r-mashing round.
+
+        8. Perform five r-mixing rounds.
+
+5. Test vectors
+
+   Test vectors for encryption with RC2 are provided below.
+
+
+
+Rivest                       Informational                      [Page 7]
+
+RFC 2268              RC2(r) Encryption Algorithm             March 1998
+
+
+   All quantities are given in hexadecimal notation.
+
+   Key length (bytes) = 8
+   Effective key length (bits) = 63
+   Key = 00000000 00000000
+   Plaintext = 00000000 00000000
+   Ciphertext = ebb773f9 93278eff
+
+   Key length (bytes) = 8
+   Effective key length (bits) = 64
+   Key = ffffffff ffffffff
+   Plaintext = ffffffff ffffffff
+   Ciphertext = 278b27e4 2e2f0d49
+
+   Key length (bytes) = 8
+   Effective key length (bits) = 64
+   Key = 30000000 00000000
+   Plaintext = 10000000 00000001
+   Ciphertext = 30649edf 9be7d2c2
+
+   Key length (bytes) = 1
+   Effective key length (bits) = 64
+   Key = 88
+   Plaintext = 00000000 00000000
+   Ciphertext = 61a8a244 adacccf0
+
+   Key length (bytes) = 7
+   Effective key length (bits) = 64
+   Key = 88bca90e 90875a
+   Plaintext = 00000000 00000000
+   Ciphertext = 6ccf4308 974c267f
+
+   Key length (bytes) = 16
+   Effective key length (bits) = 64
+   Key = 88bca90e 90875a7f 0f79c384 627bafb2
+   Plaintext = 00000000 00000000
+   Ciphertext = 1a807d27 2bbe5db1
+
+   Key length (bytes) = 16
+   Effective key length (bits) = 128
+   Key = 88bca90e 90875a7f 0f79c384 627bafb2
+   Plaintext = 00000000 00000000
+   Ciphertext = 2269552a b0f85ca6
+
+   Key length (bytes) = 33
+   Effective key length (bits) = 129
+   Key = 88bca90e 90875a7f 0f79c384 627bafb2 16f80a6f 85920584
+         c42fceb0 be255daf 1e
+
+
+
+Rivest                       Informational                      [Page 8]
+
+RFC 2268              RC2(r) Encryption Algorithm             March 1998
+
+
+   Plaintext = 00000000 00000000
+   Ciphertext = 5b78d3a4 3dfff1f1
+
+6. RC2 Algorithm Object Identifier
+
+   The Object Identifier for RC2 in cipher block chaining mode is
+
+   rc2CBC OBJECT IDENTIFIER
+     ::= {iso(1) member-body(2) US(840) rsadsi(113549)
+          encryptionAlgorithm(3) 2}
+
+   RC2-CBC takes parameters
+
+   RC2-CBCParameter ::= CHOICE {
+     iv IV,
+     params SEQUENCE {
+       version RC2Version,
+       iv IV
+     }
+   }
+
+   where
+
+   IV ::= OCTET STRING -- 8 octets
+   RC2Version ::= INTEGER -- 1-1024
+
+   RC2 in CBC mode has two parameters: an 8-byte initialization vector
+   (IV) and a version number in the range 1-1024 which specifies in a
+   roundabout manner the number of effective key bits to be used for the
+   RC2 encryption/decryption.
+
+   The correspondence between effective key bits and version number is
+   as follows:
+
+   1. If the number EKB of effective key bits is in the range 1-255,
+      then the version number is given by Table[EKB], where the 256-byte
+      translation table Table[] is specified below. Table[] specifies a
+      permutation on the numbers 0-255; note that it is not the same
+      table that appears in the key expansion phase of RC2.
+
+   2. If the number EKB of effective key bits is in the range
+      256-1024, then the version number is simply EKB.
+
+      The default number of effective key bits for RC2 is 32. If RC2-CBC
+      is being performed with 32 effective key bits, the parameters
+      should be supplied as a simple IV, rather than as a SEQUENCE
+      containing a version and an IV.
+
+
+
+
+Rivest                       Informational                      [Page 9]
+
+RFC 2268              RC2(r) Encryption Algorithm             March 1998
+
+
+        0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f
+
+   00: bd 56 ea f2 a2 f1 ac 2a b0 93 d1 9c 1b 33 fd d0
+   10: 30 04 b6 dc 7d df 32 4b f7 cb 45 9b 31 bb 21 5a
+   20: 41 9f e1 d9 4a 4d 9e da a0 68 2c c3 27 5f 80 36
+   30: 3e ee fb 95 1a fe ce a8 34 a9 13 f0 a6 3f d8 0c
+   40: 78 24 af 23 52 c1 67 17 f5 66 90 e7 e8 07 b8 60
+   50: 48 e6 1e 53 f3 92 a4 72 8c 08 15 6e 86 00 84 fa
+   60: f4 7f 8a 42 19 f6 db cd 14 8d 50 12 ba 3c 06 4e
+   70: ec b3 35 11 a1 88 8e 2b 94 99 b7 71 74 d3 e4 bf
+   80: 3a de 96 0e bc 0a ed 77 fc 37 6b 03 79 89 62 c6
+   90: d7 c0 d2 7c 6a 8b 22 a3 5b 05 5d 02 75 d5 61 e3
+   a0: 18 8f 55 51 ad 1f 0b 5e 85 e5 c2 57 63 ca 3d 6c
+   b0: b4 c5 cc 70 b2 91 59 0d 47 20 c8 4f 58 e0 01 e2
+   c0: 16 38 c4 6f 3b 0f 65 46 be 7e 2d 7b 82 f9 40 b5
+   d0: 1d 73 f8 eb 26 c7 87 97 25 54 b1 28 aa 98 9d a5
+   e0: 64 6d 7a d4 10 81 44 ef 49 d6 ae 2e dd 76 5c 2f
+   f0: a7 1c c9 09 69 9a 83 cf 29 39 b9 e9 4c ff 43 ab
+
+A. Intellectual Property Notice
+
+   RC2 is a registered trademark of RSA Data Security, Inc. RSA's
+   copyrighted RC2 software is available under license from RSA Data
+   Security, Inc.
+
+B. Author's Address
+
+   Ron Rivest
+   RSA Laboratories
+   100 Marine Parkway, #500
+   Redwood City, CA  94065  USA
+
+   Phone: (650) 595-7703
+   EMail: rsa-labs@rsa.com
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Rivest                       Informational                     [Page 10]
+
+RFC 2268              RC2(r) Encryption Algorithm             March 1998
+
+
+C.  Full Copyright Statement
+
+   Copyright (C) The Internet Society (1998).  All Rights Reserved.
+
+   This document and translations of it may be copied and furnished to
+   others, and derivative works that comment on or otherwise explain it
+   or assist in its implementation may be prepared, copied, published
+   and distributed, in whole or in part, without restriction of any
+   kind, provided that the above copyright notice and this paragraph are
+   included on all such copies and derivative works.  However, this
+   document itself may not be modified in any way, such as by removing
+   the copyright notice or references to the Internet Society or other
+   Internet organizations, except as needed for the purpose of
+   developing Internet standards in which case the procedures for
+   copyrights defined in the Internet Standards process must be
+   followed, or as required to translate it into languages other than
+   English.
+
+   The limited permissions granted above are perpetual and will not be
+   revoked by the Internet Society or its successors or assigns.
+
+   This document and the information contained herein is provided on an
+   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
+   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
+   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
+   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
+   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Rivest                       Informational                     [Page 11]
+
diff -uNr gmime-1.90.0/rfc/rfc2311.txt gmime/rfc/rfc2311.txt
--- gmime-1.90.0/rfc/rfc2311.txt	Thu Jan  1 01:00:00 1970
+++ gmime/rfc/rfc2311.txt	Tue Dec  5 07:39:10 2000
@@ -0,0 +1,2075 @@
+
+
+
+
+
+
+Network Working Group                                          S. Dusse
+Request for Comments: 2311                            RSA Data Security
+Category: Informational                                      P. Hoffman
+                                               Internet Mail Consortium
+                                                            B. Ramsdell
+                                                              Worldtalk
+                                                           L. Lundblade
+                                                               Qualcomm
+                                                               L. Repka
+                                                               Netscape
+                                                             March 1998
+
+
+                 S/MIME Version 2 Message Specification
+
+Status of this Memo
+
+   This memo provides information for the Internet community.  It does
+   not specify an Internet standard of any kind.  Distribution of this
+   memo is unlimited.
+
+Copyright Notice
+
+   Copyright (C) The Internet Society (1998).  All Rights Reserved.
+
+1. Introduction
+
+   S/MIME (Secure/Multipurpose Internet Mail Extensions) provides a
+   consistent way to send and receive secure MIME data. Based on the
+   popular Internet MIME standard, S/MIME provides the following
+   cryptographic security services for electronic messaging
+   applications: authentication, message integrity and non-repudiation
+   of origin (using digital signatures) and privacy and data security
+   (using encryption).
+
+   S/MIME can be used by traditional mail user agents (MUAs) to add
+   cryptographic security services to mail that is sent, and to
+   interpret cryptographic security services in mail that is received.
+   However, S/MIME is not restricted to mail; it can be used with any
+   transport mechanism that transports MIME data, such as HTTP. As such,
+   S/MIME takes advantage of the object-based features of MIME and
+   allows secure messages to be exchanged in mixed-transport systems.
+
+   Further, S/MIME can be used in automated message transfer agents that
+   use cryptographic security services that do not require any human
+   intervention, such as the signing of software-generated documents and
+   the encryption of FAX messages sent over the Internet.
+
+
+
+
+Dusse, et. al.               Informational                      [Page 1]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+   Please note: The information in this document is historical material
+   being published for the public record. It is not an IETF standard.
+   The use of the word "standard" in this document indicates a standard
+   for adopters of S/MIME version 2, not an IETF standard.
+
+1.1 Specification Overview
+
+   This document describes a protocol for adding cryptographic signature
+   and encryption services to MIME data. The MIME standard [MIME-SPEC]
+   provides a general structure for the content type of Internet
+   messages and allows extensions for new content type applications.
+
+   This memo defines how to create a MIME body part that has been
+   cryptographically enhanced according to PKCS #7 [PKCS-7]. This memo
+   also defines the application/pkcs7-mime MIME type that can be used to
+   transport those body parts. This memo also defines how to create
+   certification requests that conform to PKCS #10 [PKCS-10], and the
+   application/pkcs10 MIME type for transporting those requests.
+
+   This memo also discusses how to use the multipart/signed MIME type
+   defined in [MIME-SECURE] to transport S/MIME signed messages. This
+   memo also defines the application/pkcs7-signature MIME type, which is
+   also used to transport S/MIME signed messages. This specification is
+   compatible with PKCS #7 in that it uses the data types defined by
+   PKCS #7.
+
+   In order to create S/MIME messages, an agent has to follow
+   specifications in this memo, as well as some of the specifications
+   listed in the following documents:
+
+    - "PKCS #1: RSA Encryption", [PKCS-1]
+    - "PKCS #7: Cryptographic Message Syntax", [PKCS-7]
+    - "PKCS #10: Certification Request Syntax", [PKCS-10]
+
+   Throughout this memo, there are requirements and recommendations made
+   for how receiving agents handle incoming messages. There are separate
+   requirements and recommendations for how sending agents create
+   outgoing messages. In general, the best strategy is to "be liberal in
+   what you receive and conservative in what you send". Most of the
+   requirements are placed on the handling of incoming messages while
+   the recommendations are mostly on the creation of outgoing messages.
+
+   The separation for requirements on receiving agents and sending
+   agents also derives from the likelihood that there will be S/MIME
+   systems that involve software other than traditional Internet mail
+   clients. S/MIME can be used with any system that transports MIME
+
+
+
+
+
+Dusse, et. al.               Informational                      [Page 2]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+   data. An automated process that sends an encrypted message might not
+   be able to receive an encrypted message at all, for example. Thus,
+   the requirements and recommendations for the two types of agents are
+   listed separately when appropriate.
+
+1.2 Terminology
+
+   Throughout this memo, the terms MUST, MUST NOT, SHOULD, and SHOULD
+   NOT are used in capital letters. This conforms to the definitions in
+   [MUSTSHOULD].  [MUSTSHOULD] defines the use of these key words to
+   help make the intent of standards track documents as clear as
+   possible. The same key words are used in this document to help
+   implementors achieve interoperability.
+
+1.3 Definitions
+
+   For the purposes of this memo, the following definitions apply.
+
+   ASN.1: Abstract Syntax Notation One, as defined in CCITT X.208.
+
+   BER: Basic Encoding Rules for ASN.1, as defined in CCITT X.209.
+
+   Certificate: A type that binds an entity's distinguished name to a
+   public key with a digital signature.
+
+   DER: Distinguished Encoding Rules for ASN.1, as defined in CCITT
+   X.509.
+
+   7-bit data: Text data with lines less than 998 characters long, where
+   none of the characters have the 8th bit set, and there are no NULL
+   characters.  <CR> and <LF> occur only as part of a <CR><LF> end of
+   line delimiter.
+
+   8-bit data: Text data with lines less than 998 characters, and where
+   none of the characters are NULL characters. <CR> and <LF> occur only
+   as part of a <CR><LF> end of line delimiter.
+
+   Binary data: Arbitrary data.
+
+   Transfer Encoding: A reversible transformation made on data so 8-bit
+   or binary data may be sent via a channel that only transmits 7-bit
+   data.
+
+1.4 Compatibility with Prior Practice of S/MIME
+
+   Appendix C contains important information about how S/MIME agents
+   following this specification should act in order to have the greatest
+   interoperability with earlier implementations of S/MIME.
+
+
+
+Dusse, et. al.               Informational                      [Page 3]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+2. PKCS #7 Options
+
+   The PKCS #7 message format allows for a wide variety of options in
+   content and algorithm support. This section puts forth a number of
+   support requirements and recommendations in order to achieve a base
+   level of interoperability among all S/MIME implementations.
+
+2.1 DigestAlgorithmIdentifier
+
+   Receiving agents MUST support SHA-1 [SHA1] and MD5 [MD5].
+
+   Sending agents SHOULD use SHA-1.
+
+2.2 DigestEncryptionAlgorithmIdentifier
+
+   Receiving agents MUST support rsaEncryption, defined in [PKCS-1].
+   Receiving agents MUST support verification of signatures using RSA
+   public key sizes from 512 bits to 1024 bits.
+
+   Sending agents MUST support rsaEncryption. Outgoing messages are
+   signed with a user's private key. The size of the private key is
+   determined during key generation.
+
+2.3 KeyEncryptionAlgorithmIdentifier
+
+   Receiving agents MUST support rsaEncryption. Incoming encrypted
+   messages contain symmetric keys which are to be decrypted with a
+   user's private key.  The size of the private key is determined during
+   key generation.
+
+   Sending agents MUST support rsaEncryption. Sending agents MUST
+   support encryption of symmetric keys with RSA public keys at key
+   sizes from 512 bits to 1024 bits.
+
+2.4 General Syntax
+
+   The PKCS #7 defines six distinct content types: "data", "signedData",
+   "envelopedData", "signedAndEnvelopedData", "digestedData", and
+   "encryptedData". Receiving agents MUST support the "data",
+   "signedData" and "envelopedData" content types. Sending agents may or
+   may not send out any of the content types, depending on the services
+   that the agent supports.
+
+2.4.1 Data Content Type
+
+   Sending agents MUST use the "data" content type as the content within
+   other content types to indicate the message content which has had
+   security services applied to it.
+
+
+
+Dusse, et. al.               Informational                      [Page 4]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+2.4.2 SignedData Content Type
+
+   Sending agents MUST use the signedData content type to apply a
+   digital signature to a message or, in a degenerate case where there
+   is no signature information, to convey certificates.
+
+2.4.3 EnvelopedData Content Type
+
+   This content type is used to apply privacy protection to a message. A
+   sender needs to have access to a public key for each intended message
+   recipient to use this service. This content type does not provide
+   authentication.
+
+2.5 Attribute SignerInfo Type
+
+   The SignerInfo type allows the inclusion of unauthenticated and
+   authenticated attributes to be included along with a signature.
+
+   Receiving agents MUST be able to handle zero or one instance of each
+   of the signed attributes described in this section.
+
+   Sending agents SHOULD be able to generate one instance of each of the
+   signed attributes described in this section, and SHOULD include these
+   attributes in each signed message sent.
+
+   Additional attributes and values for these attributes may be defined
+   in the future. Receiving agents SHOULD handle attributes or values
+   that it does not recognize in a graceful manner.
+
+2.5.1 Signing-Time Attribute
+
+   The signing-time attribute is used to convey the time that a message
+   was signed. Until there are trusted timestamping services, the time
+   of signing will most likely be created by a message originator and
+   therefore is only as trustworthy as the originator.
+
+   Sending agents MUST encode signing time through the year 2049 as
+   UTCTime; signing times in 2050 or later MUST be encoded as
+   GeneralizedTime. Agents MUST interpret the year field (YY) as
+   follows: if YY is greater than or equal to 50, the year is
+   interpreted as 19YY; if YY is less than 50, the year is interpreted
+   as 20YY.
+
+2.5.2 S/MIME Capabilities Attribute
+
+   The S/MIME capabilities attribute includes signature algorithms (such
+   as "md5WithRSAEncryption"), symmetric algorithms (such as "DES-CBC"),
+   and key encipherment algorithms (such as "rsaEncryption"). It also
+
+
+
+Dusse, et. al.               Informational                      [Page 5]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+   includes a non-algorithm capability which is the preference for
+   signedData.  SMIMECapabilities was designed to be flexible and
+   extensible so that, in the future, a means of identifying other
+   capabilities and preferences such as certificates can be added in a
+   way that will not cause current clients to break.
+
+   The semantics of the S/MIME capabilites attribute specify a partial
+   list as to what the client announcing the SMIMECapabilites can
+   support. A client does not have to list every capability it supports,
+   and probably should not list all its capabilities so that the
+   capabilities list doesn't get too long. In an SMIMECapabilities
+   encoding, the OIDs are listed in order of their preference, but
+   SHOULD be logically separated along the lines of their categories
+   (signature algorithms, symmetric algorithms, key encipherment
+   algorithms, etc.)
+
+   The structure of  SMIMECapabilities was designed to facilitate simple
+   table lookups and binary comparisons in order to determine matches.
+   For instance, the DER-encoding for the SMIMECapability for DES EDE3
+   CBC MUST be identically encoded regardless of the implementation.
+
+   In the case of symmetric algorithms, the associated parameters for
+   the OID MUST specify all of the parameters necessary to differentiate
+   between two instances of the same algorithm. For instance, the number
+   of rounds and block size for RC5 must be specified in addition to the
+   key length.
+
+   There is a list of OIDs (the registered SMIMECapability list) that is
+   centrally maintained and is separate from this memo. The list of OIDs
+   is maintained by the Internet Mail Consortium at
+   <http://www.imc.org/ietf-smime/oids.html>.
+
+   The OIDs that correspond to algorithms SHOULD use the same OID as the
+   actual algorithm, except in the case where the algorithm usage is
+   ambiguous from the OID. For instance, in an earlier memo,
+   rsaEncryption was ambiguous because it could refer to either a
+   signature algorithm or a key encipherment algorithm. In the event
+   that an OID is ambiguous, it needs to be arbitrated by the maintainer
+   of the registered S/MIME capabilities list as to which type of
+   algorithm will use the OID, and a new OID MUST be allocated under the
+   smimeCapabilities OID to satisfy the other use of the OID.
+
+   The registered S/MIME capabilities list specifies the parameters for
+   OIDs that need them, most notably key lengths in the case of
+   variable-length symmetric ciphers. In the event that there are no
+   differentiating parameters for a particular OID, the parameters MUST
+   be omitted, and MUST NOT be encoded as NULL.
+
+
+
+
+Dusse, et. al.               Informational                      [Page 6]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+   Additional values for SMIMECapability may be defined in the future.
+   Receiving agents MUST handle a SMIMECapabilities object that has
+   values that it does not recognize in a graceful manner.
+
+2.6 ContentEncryptionAlgorithmIdentifier
+
+   Receiving agents MUST support decryption using the RC2 [RC2] or a
+   compatible algorithm at a key size of 40 bits, hereinafter called
+   "RC2/40".  Receiving agents SHOULD support decryption using DES EDE3
+   CBC, hereinafter called "tripleDES" [3DES] [DES].
+
+   Sending agents SHOULD support encryption with RC2/40 and tripleDES.
+
+2.6.1 Deciding Which Encryption Method To Use
+
+   When a sending agent creates an encrypted message, it has to decide
+   which type of encryption to use. The decision process involves using
+   information garnered from the capabilities lists included in messages
+   received from the recipient, as well as out-of-band information such
+   as private agreements, user preferences, legal restrictions, and so
+   on.
+
+   Section 2.5 defines a method by which a sending agent can optionally
+   announce, among other things, its decrypting capabilities in its
+   order of preference. The following method for processing and
+   remembering the encryption capabilities attribute in incoming signed
+   messages SHOULD be used.
+
+    - If the receiving agent has not yet created a list of capabilities
+      for the sender's public key, then, after verifying the signature
+      on the incoming message and checking the timestamp, the receiving
+      agent SHOULD create a new list containing at least the signing
+      time and the symmetric capabilities.
+
+    - If such a list already exists, the receiving agent SHOULD verify
+      that the signing time in the incoming message is greater than the
+      signing time stored in the list and that the signature is valid.
+      If so, the receiving agent SHOULD update both the signing time and
+      capabilities in the list. Values of the signing time that lie far
+      in the future (that is, a greater discrepancy than any reasonable
+      clock skew), or a capabilitie lists in messages whose signature
+      could not be verified, MUST NOT be accepted.
+
+   The list of capabilities SHOULD be stored for future use in creating
+   messages.
+
+   Before sending a message, the sending agent MUST decide whether it is
+   willing to use weak encryption for the particular data in the
+
+
+
+Dusse, et. al.               Informational                      [Page 7]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+   message. If the sending agent decides that weak encryption is
+   unacceptable for this data, then the sending agent MUST NOT use a
+   weak algorithm such as RC2/40.  The decision to use or not use weak
+   encryption overrides any other decision in this section about which
+   encryption algorithm to use.
+
+   Sections 2.6.2.1 through 2.6.2.4 describe the decisions a sending
+   agent SHOULD use in deciding which type of encryption should be
+   applied to a message. These rules are ordered, so the sending agent
+   SHOULD make its decision in the order given.
+
+2.6.2.1 Rule 1: Known Capabilities
+
+   If the sending agent has received a set of capabilities from the
+   recipient for the message the agent is about to encrypt, then the
+   sending agent SHOULD use that information by selecting the first
+   capability in the list (that is, the capability most preferred by the
+   intended recipient) for which the sending agent knows how to encrypt.
+   The sending agent SHOULD use one of the capabilities in the list if
+   the agent reasonably expects the recipient to be able to decrypt the
+   message.
+
+2.6.2.2 Rule 2: Unknown Capabilities, Known Use of Encryption
+
+   If:
+    - the sending agent has no knowledge of the encryption capabilities
+      of the recipient,
+    - and the sending agent has received at least one message from the
+      recipient,
+    - and the last encrypted message received from the recipient had a
+      trusted signature on it,
+   then the outgoing message SHOULD use the same encryption algorithm as
+   was used on the last signed and encrypted message received from the
+   recipient.
+
+2.6.2.3 Rule 3: Unknown Capabilities, Risk of Failed Decryption
+
+   If:
+    - the sending agent has no knowledge of the encryption capabilities
+      of the recipient,
+    - and the sending agent is willing to risk that the recipient may
+      not be able to decrypt the message,
+   then the sending agent SHOULD use tripleDES.
+
+
+
+
+
+
+
+
+Dusse, et. al.               Informational                      [Page 8]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+2.6.2.4 Rule 4: Unknown Capabilities, No Risk of Failed Decryption
+
+   If:
+    - the sending agent has no knowledge of the encryption capabilities
+      of the recipient,
+    - and the sending agent is not willing to risk that the recipient
+      may not be able to decrypt the message,
+   then the sending agent MUST use RC2/40.
+
+2.6.3 Choosing Weak Encryption
+
+   Like all algorithms that use 40 bit keys, RC2/40 is considered by
+   many to be weak encryption. A sending agent that is controlled by a
+   human SHOULD allow a human sender to determine the risks of sending
+   data using RC2/40 or a similarly weak encryption algorithm before
+   sending the data, and possibly allow the human to use a stronger
+   encryption method such as tripleDES.
+
+2.6.4 Multiple Recipients
+
+   If a sending agent is composing an encrypted message to a group of
+   recipients where the encryption capabilities of some of the
+   recipients do not overlap, the sending agent is forced to send more
+   than one message. It should be noted that if the sending agent
+   chooses to send a message encrypted with a strong algorithm, and then
+   send the same message encrypted with a weak algorithm, someone
+   watching the communications channel can decipher the contents of the
+   strongly-encrypted message simply by decrypting the weakly-encrypted
+   message.
+
+3. Creating S/MIME Messages
+
+   This section describes the S/MIME message formats and how they are
+   created.  S/MIME messages are a combination of MIME bodies and PKCS
+   objects. Several MIME types as well as several PKCS objects are used.
+   The data to be secured is always a canonical MIME entity. The MIME
+   entity and other data, such as certificates and algorithm
+   identifiers, are given to PKCS processing facilities which produces a
+   PKCS object. The PKCS object is then finally wrapped in MIME.
+
+   S/MIME provides one format for enveloped-only data, several formats
+   for signed-only data, and several formats for signed and enveloped
+   data.  Several formats are required to accommodate several
+   environments, in particular for signed messages. The criteria for
+   choosing among these formats are also described.
+
+   The reader of this section is expected to understand MIME as
+   described in [MIME-SPEC] and [MIME-SECURE].
+
+
+
+Dusse, et. al.               Informational                      [Page 9]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+3.1 Preparing the MIME Entity for Signing or Enveloping
+
+   S/MIME is used to secure MIME entities. A MIME entity may be a sub-
+   part, sub-parts of a message, or the whole message with all its sub-
+   parts. A MIME entity that is the whole message includes only the MIME
+   headers and MIME body, and does not include the RFC-822 headers. Note
+   that S/MIME can also be used to secure MIME entities used in
+   applications other than Internet mail.
+
+   The MIME entity that is secured and described in this section can be
+   thought of as the "inside" MIME entity. That is, it is the
+   "innermost" object in what is possibly a larger MIME message.
+   Processing "outside" MIME entities into PKCS #7 objects is described
+   in Section 3.2, 3.4 and elsewhere.
+
+   The procedure for preparing a MIME entity is given in [MIME-SPEC].
+   The same procedure is used here with some additional restrictions
+   when signing.  Description of the procedures from [MIME-SPEC] are
+   repeated here, but the reader should refer to that document for the
+   exact procedure. This section also describes additional requirements.
+
+   A single procedure is used for creating MIME entities that are to be
+   signed, enveloped, or both signed and enveloped. Some additional
+   steps are recommended to defend against known corruptions that can
+   occur during mail transport that are of particular importance for
+   clear-signing using the multipart/signed format. It is recommended
+   that these additional steps be performed on enveloped messages, or
+   signed and enveloped messages in order that the message can be
+   forwarded to any environment without modification.
+
+   These steps are descriptive rather than prescriptive. The implementor
+   is free to use any procedure as long as the result is the same.
+
+     Step 1. The MIME entity is prepared according to the local
+             conventions
+
+     Step 2. The leaf parts of the MIME entity are converted to
+             canonical form
+
+     Step 3. Appropriate transfer encoding is applied to the leaves of
+             the MIME entity
+
+   When an S/MIME message is received, the security services on the
+   message are removed, and the result is the MIME entity. That MIME
+   entity is typically passed to a MIME-capable user agent where, it is
+   further decoded and presented to the user or receiving application.
+
+
+
+
+
+Dusse, et. al.               Informational                     [Page 10]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+3.1.1 Canonicalization
+
+   Each MIME entity MUST be converted to a canonical form that is
+   uniquely and unambiguously representable in the environment where the
+   signature is created and the environment where the signature will be
+   verified. MIME entities MUST be canonicalized for enveloping as well
+   as signing.
+
+   The exact details of canonicalization depend on the actual MIME type
+   and subtype of an entity, and are not described here. Instead, the
+   standard for the particular MIME type should be consulted. For
+   example, canonicalization of type text/plain is different from
+   canonicalization of audio/basic. Other than text types, most types
+   have only one representation regardless of computing platform or
+   environment which can be considered their canonical representation.
+   In general, canonicalization will be performed by the sending agent
+   rather than the S/MIME implementation.
+
+   The most common and important canonicalization is for text, which is
+   often represented differently in different environments. MIME
+   entities of major type "text" must have both their line endings and
+   character set canonicalized. The line ending must be the pair of
+   characters <CR><LF>, and the charset should be a registered charset
+   [CHARSETS]. The details of the canonicalization are specified in
+   [MIME-SPEC]. The chosen charset SHOULD be named in the charset
+   parameter so that the receiving agent can unambiguously determine the
+   charset used.
+
+   Note that some charsets such as ISO-2022 have multiple
+   representations for the same characters. When preparing such text for
+   signing, the canonical representation specified for the charset MUST
+   be used.
+
+3.1.2 Transfer Encoding
+
+   When generating any of the secured MIME entities below, except the
+   signing using the multipart/signed format, no transfer encoding at
+   all is required.  S/MIME implementations MUST be able to deal with
+   binary MIME objects. If no Content-Transfer-Encoding header is
+   present, the transfer encoding should be considered 7BIT.
+
+   S/MIME implementations SHOULD however use transfer encoding described
+   in section 3.1.3 for all MIME entities they secure. The reason for
+   securing only 7-bit MIME entities, even for enveloped data that are
+   not exposed to the transport, is that it allows the MIME entity to be
+   handled in any environment without changing it. For example, a
+   trusted gateway might remove the envelope, but not the signature, of
+   a message, and then forward the signed message on to the end
+
+
+
+Dusse, et. al.               Informational                     [Page 11]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+   recipient so that they can verify the signatures directly. If the
+   transport internal to the site is not 8-bit clean, such as on a
+   wide-area network with a single mail gateway, verifying the signature
+   will not be possible unless the original MIME entity was only 7-bit
+   data.
+
+3.1.3 Transfer Encoding for Signing Using multipart/signed
+
+   If a multipart/signed entity is EVER to be transmitted over the
+   standard Internet SMTP infrastructure or other transport that is
+   constrained to 7-bit text, it MUST have transfer encoding applied so
+   that it is represented as 7-bit text. MIME entities that are 7-bit
+   data already need no transfer encoding. Entities such as 8-bit text
+   and binary data can be encoded with quoted-printable or base-64
+   transfer encoding.
+
+   The primary reason for the 7-bit requirement is that the Internet
+   mail transport infrastructure cannot guarantee transport of 8-bit or
+   binary data. Even though many segments of the transport
+   infrastructure now handle 8-bit and even binary data, it is sometimes
+   not possible to know whether the transport path is 8-bit clear. If a
+   mail message with 8-bit data were to encounter a message transfer
+   agent that can not transmit 8-bit or binary data, the agent has three
+   options, none of which are acceptable for a clear-signed message:
+    - The agent could change the transfer encoding; this would
+      invalidate the signature.
+    - The agent could transmit the data anyway, which would most likely
+      result in the 8th bit being corrupted; this too would invalidate
+      the signature.
+    - The agent could return the message to the sender.
+
+   [MIME-SECURE] prohibits an agent from changing the transfer encoding
+   of the first part of a multipart/signed message. If a compliant agent
+   that can not transmit 8-bit or binary data encounters a
+   multipart/signed message with 8-bit or binary data in the first part,
+   it would have to return the message to the sender as undeliverable.
+
+3.1.4 Sample Canonical MIME Entity
+
+   This example shows a multipart/mixed message with full transfer
+   encoding.  This message contains a text part and an attachment. The
+   sample message text includes characters that are not US-ASCII and
+   thus must be transfer encoded. Though not shown here, the end of each
+   line is <CR><LF>. The line ending of the MIME headers, the text, and
+   transfer encoded parts, all must be <CR><LF>.
+
+   Note that this example is not of an S/MIME message.
+
+
+
+
+Dusse, et. al.               Informational                     [Page 12]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+       Content-Type: multipart/mixed; boundary=bar
+
+       --bar
+       Content-Type: text/plain; charset=iso-8859-1
+       Content-Transfer-Encoding: quoted-printable
+
+       =A1Hola Michael!
+
+       How do you like the new S/MIME specification?
+
+       I agree. It's generally a good idea to encode lines that begin with
+       From=20because some mail transport agents will insert a greater-
+       than (>) sign, thus invalidating the signature.
+
+       Also, in some cases it might be desirable to encode any   =20
+       trailing whitespace that occurs on lines in order to ensure  =20
+       that the message signature is not invalidated when passing =20
+       a gateway that modifies such whitespace (like BITNET). =20
+
+       --bar
+       Content-Type: image/jpeg
+       Content-Transfer-Encoding: base64
+
+       iQCVAwUBMJrRF2N9oWBghPDJAQE9UQQAtl7LuRVndBjrk4EqYBIb3h5QXIX/LC//
+       jJV5bNvkZIGPIcEmI5iFd9boEgvpirHtIREEqLQRkYNoBActFBZmh9GC3C041WGq
+       uMbrbxc+nIs1TIKlA08rVi9ig/2Yh7LFrK5Ein57U/W72vgSxLhe/zhdfolT9Brn
+       HOxEa44b+EI=
+
+       --bar--
+
+3.2 The application/pkcs7-mime Type
+
+   The application/pkcs7-mime type is used to carry PKCS #7 objects of
+   several types including envelopedData and signedData. The details of
+   constructing these entities is described in subsequent sections. This
+   section describes the general characteristics of the
+   application/pkcs7-mime type.
+
+   This MIME type always carries a single PKCS #7 object. The PKCS #7
+   object must always be BER encoding of the ASN.1 syntax describing the
+   object. The contentInfo field of the carried PKCS #7 object always
+   contains a MIME entity that is prepared as described in section 3.1.
+   The contentInfo field must never be empty.
+
+   Since PKCS #7 objects are binary data, in most cases base-64 transfer
+   encoding is appropriate, in particular when used with SMTP transport.
+   The transfer encoding used depends on the transport through which the
+   object is to be sent, and is not a characteristic of the MIME type.
+
+
+
+Dusse, et. al.               Informational                     [Page 13]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+   Note that this discussion refers to the transfer encoding of the PKCS
+   #7 object or "outside" MIME entity. It is completely distinct from,
+   and unrelated to, the transfer encoding of the MIME entity secured by
+   the PKCS #7 object, the "inside" object, which is described in
+   section 3.1.
+
+   Because there are several types of application/pkcs7-mime objects, a
+   sending agent SHOULD do as much as possible to help a receiving agent
+   know about the contents of the object without forcing the receiving
+   agent to decode the ASN.1 for the object. The MIME headers of all
+   application/pkcs7-mime objects SHOULD include the optional "smime-
+   type" parameter, as described in the following sections.
+
+3.2.1 The name and filename Parameters
+
+   For the application/pkcs7-mime, sending agents SHOULD emit the
+   optional "name" parameter to the Content-Type field for compatibility
+   with older systems. Sending agents SHOULD also emit the optional
+   Content-Disposition field [CONTDISP] with the "filename" parameter.
+   If a sending agent emits the above parameters, the value of the
+   parameters SHOULD be a file name with the appropriate extension:
+
+   MIME Type                      File Extension
+
+   application/pkcs7-mime              .p7m
+   (signedData, envelopedData)
+
+   application/pkcs7-mime              .p7c
+   (degenerate signedData
+   "certs-only" message)
+
+   application/pkcs7-signature         .p7s
+
+   application/pkcs10                  .p10
+
+   In addition, the file name SHOULD be limited to eight characters
+   followed by a three letter extension. The eight character filename
+   base can be any distinct name; the use of the filename base "smime"
+   SHOULD be used to indicate that the MIME entity is associated with
+   S/MIME.
+
+   Including a file name serves two purposes. It facilitates easier use
+   of S/MIME objects as files on disk. It also can convey type
+   information across gateways. When a MIME entity of type
+   application/pkcs7-mime (for example) arrives at a gateway that has no
+   special knowledge of S/MIME, it will default the entity's MIME type
+   to application/octet-stream and treat it as a generic attachment,
+   thus losing the type information. However, the suggested filename for
+
+
+
+Dusse, et. al.               Informational                     [Page 14]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+   an attachment is often carried across a gateway.  This often allows
+   the receiving systems to determine the appropriate application to
+   hand the attachment off to, in this case a stand-alone S/MIME
+   processing application. Note that this mechanism is provided as a
+   convenience for implementations in certain environments. A proper
+   S/MIME implementation MUST use the MIME types and MUST NOT rely on
+   the file extensions.
+
+3.3 Creating an Enveloped-only Message
+
+   This section describes the format for enveloping a MIME entity
+   without signing it.
+
+     Step 1. The MIME entity to be enveloped is prepared according to
+             section 3.1.
+
+     Step 2. The MIME entity and other required data is processed into a
+             PKCS #7 object of type envelopedData.
+
+     Step 3. The PKCS #7 object is inserted into an application/pkcs7-
+             mime MIME entity.
+
+   The smime-type parameter for enveloped-only messages is "enveloped-
+   data".  The file extension for this type of message is ".p7m".
+
+   A sample message would be:
+
+       Content-Type: application/pkcs7-mime; smime-type=enveloped-data;
+            name=smime.p7m
+       Content-Transfer-Encoding: base64
+       Content-Disposition: attachment; filename=smime.p7m
+
+       rfvbnj756tbBghyHhHUujhJhjH77n8HHGT9HG4VQpfyF467GhIGfHfYT6
+       7n8HHGghyHhHUujhJh4VQpfyF467GhIGfHfYGTrfvbnjT6jH7756tbB9H
+       f8HHGTrfvhJhjH776tbB9HG4VQbnj7567GhIGfHfYT6ghyHhHUujpfyF4
+       0GhIGfHfQbnj756YT64V
+
+3.4 Creating a Signed-only Message
+
+   There are two formats for signed messages defined for S/MIME:
+   application/pkcs7-mime and SignedData, and multipart/signed. In
+   general, the multipart/signed form is preferred for sending, and
+   receiving agents SHOULD be able to handle both.
+
+3.4.1 Choosing a Format for Signed-only Messages
+
+   There are no hard-and-fast rules when a particular signed-only format
+   should be chosen because it depends on the capabilities of all the
+
+
+
+Dusse, et. al.               Informational                     [Page 15]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+   receivers and the relative importance of receivers with S/MIME
+   facilities being able to verify the signature versus the importance
+   of receivers without S/MIME software being able to view the message.
+
+   Messages signed using the multipart/signed format can always be
+   viewed by the receiver whether they have S/MIME software or not. They
+   can also be viewed whether they are using a MIME-native user agent or
+   they have messages translated by a gateway. In this context, "be
+   viewed" means the ability to process the message essentially as if it
+   were not a signed message, including any other MIME structure the
+   message might have.
+
+   Messages signed using the signedData format cannot be viewed by a
+   recipient unless they have S/MIME facilities. However, if they have
+   S/MIME facilities, these messages can always be verified if they were
+   not changed in transit.
+
+3.4.2 Signing Using application/pkcs7-mime and SignedData
+
+   This signing format uses the application/pkcs7-mime MIME type. The
+   steps to create this format are:
+
+     Step 1. The MIME entity is prepared according to section 3.1
+
+     Step 2. The MIME entity and other required data is processed into a
+             PKCS #7 object of type signedData
+
+     Step 3. The PKCS #7 object is inserted into an
+             application/pkcs7-mime MIME entity
+
+   The smime-type parameter for messages using application/pkcs7-mime
+   and SignedData is "signed-data". The file extension for this type of
+   message is ".p7m".
+
+   A sample message would be:
+
+       Content-Type: application/pkcs7-mime; smime-type=signed-data;
+            name=smime.p7m
+       Content-Transfer-Encoding: base64
+       Content-Disposition: attachment; filename=smime.p7m
+
+       567GhIGfHfYT6ghyHhHUujpfyF4f8HHGTrfvhJhjH776tbB9HG4VQbnj7
+       77n8HHGT9HG4VQpfyF467GhIGfHfYT6rfvbnj756tbBghyHhHUujhJhjH
+       HUujhJh4VQpfyF467GhIGfHfYGTrfvbnjT6jH7756tbB9H7n8HHGghyHh
+       6YT64V0GhIGfHfQbnj75
+
+
+
+
+
+
+Dusse, et. al.               Informational                     [Page 16]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+3.4.3 Signing Using the multipart/signed Format
+
+   This format is a clear-signing format. Recipients without any S/MIME
+   or PKCS processing facilities are able to view the message. It makes
+   use of the multipart/signed MIME type described in [MIME-SECURE]. The
+   multipart/signed MIME type has two parts. The first part contains the
+   MIME entity that is to be signed; the second part contains the
+   signature, which is a PKCS #7 detached signature.
+
+3.4.3.1 The application/pkcs7-signature MIME Type
+
+   This MIME type always contains a single PKCS #7 object of type
+   signedData.  The contentInfo field of the PKCS #7 object must be
+   empty. The signerInfos field contains the signatures for the MIME
+   entity. The details of the registered type are given in Appendix D.
+
+   The file extension for signed-only messages using application/pkcs7-
+   signature  is ".p7s".
+
+3.4.3.2 Creating a multipart/signed Message
+
+     Step 1. The MIME entity to be signed is prepared according to
+             section 3.1, taking special care for clear-signing.
+
+     Step 2. The MIME entity is presented to PKCS #7 processing in order
+             to obtain an object of type signedData with an empty
+             contentInfo field.
+
+     Step 3. The MIME entity is inserted into the first part of a
+             multipart/signed message with no processing other than that
+             described in section 3.1.
+
+     Step 4. Transfer encoding is applied to the detached signature and
+             it is inserted into a MIME entity of type
+             application/pkcs7-signature
+
+     Step 5. The MIME entity of the application/pkcs7-signature is
+             inserted into the second part of the multipart/signed
+             entity
+
+   The multipart/signed Content type has two required parameters: the
+   protocol parameter and the micalg parameter.
+
+   The protocol parameter MUST be "application/pkcs7-signature". Note
+   that quotation marks are required around the protocol parameter
+   because MIME requires that the "/" character in the parameter value
+   MUST be quoted.
+
+
+
+
+Dusse, et. al.               Informational                     [Page 17]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+   The micalg parameter allows for one-pass processing when the
+   signature is being verified. The value of the micalg parameter is
+   dependent on the message digest algorithm used in the calculation of
+   the Message Integrity Check. The value of the micalg parameter SHOULD
+   be one of the following:
+
+   Algorithm used     Value
+   --------------     ---------
+   MD5                md5
+   SHA-1              sha1
+   any other          unknown
+
+   (Historical note: some early implementations of S/MIME emitted and
+   expected "rsa-md5" and "rsa-sha1" for the micalg parameter.)
+   Receiving agents SHOULD be able to recover gracefully from a micalg
+   parameter value that they do not recognize.
+
+3.4.3.3 Sample multipart/signed Message
+
+       Content-Type: multipart/signed;
+          protocol="application/pkcs7-signature";
+          micalg=sha1; boundary=boundary42
+
+       --boundary42
+       Content-Type: text/plain
+
+       This is a clear-signed message.
+
+       --boundary42
+       Content-Type: application/pkcs7-signature; name=smime.p7s
+       Content-Transfer-Encoding: base64
+       Content-Disposition: attachment; filename=smime.p7s
+
+       ghyHhHUujhJhjH77n8HHGTrfvbnj756tbB9HG4VQpfyF467GhIGfHfYT6
+       4VQpfyF467GhIGfHfYT6jH77n8HHGghyHhHUujhJh756tbB9HGTrfvbnj
+       n8HHGTrfvhJhjH776tbB9HG4VQbnj7567GhIGfHfYT6ghyHhHUujpfyF4
+       7GhIGfHfYT64VQbnj756
+
+       --boundary42--
+
+3.5 Signing and Encrypting
+
+   To achieve signing and enveloping, any of the signed-only and
+   encrypted-only formats may be nested. This is allowed because the
+   above formats are all MIME entities, and because they all secure MIME
+   entities.
+
+
+
+
+
+Dusse, et. al.               Informational                     [Page 18]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+   An S/MIME implementation MUST be able to receive and process
+   arbitrarily nested S/MIME within reasonable resource limits of the
+   recipient computer.
+
+   It is possible to either sign a message first, or to envelope the
+   message first. It is up to the implementor and the user to choose.
+   When signing first, the signatories are then securely obscured by the
+   enveloping. When enveloping first the signatories are exposed, but it
+   is possible to verify signatures without removing the enveloping.
+   This may be useful in an environment were automatic signature
+   verification is desired, as no private key material is required to
+   verify a signature.
+
+3.6 Creating a Certificates-only Message
+
+   The certificates only message or MIME entity is used to transport
+   certificates, such as in response to a registration request. This
+   format can also be used to convey CRLs.
+
+     Step 1. The certificates are made available to the PKCS #7
+             generating process which creates a PKCS #7 object of type
+             signedData.  The contentInfo and signerInfos fields must be
+             empty.
+
+     Step 2. The PKCS #7 signedData object is enclosed in an
+             application/pkcs7-mime MIME entity
+
+   The smime-type parameter for a certs-only message is "certs-only".
+   The file extension for this type of message is ".p7c".
+
+3.7 Creating a Registration Request
+
+   A typical application which allows a user to generate cryptographic
+   information has to submit that information to a certification
+   authority, who transforms it into a certificate. PKCS #10 describes a
+   syntax for certification requests. The application/pkcs10 body type
+   MUST be used to transfer a PKCS #10 certification request.
+
+   The details of certification requests and the process of obtaining a
+   certificate are beyond the scope of this memo. Instead, only the
+   format of data used in application/pkcs10 is defined.
+
+3.7.1 Format of the application/pkcs10 Body
+
+   PKCS #10 defines the ASN.1 type CertificationRequest for use in
+   submitting a certification request. Therefore, when the MIME content
+   type application/pkcs10 is used, the body MUST be a
+   CertificationRequest, encoded using the Basic Encoding Rules (BER).
+
+
+
+Dusse, et. al.               Informational                     [Page 19]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+   Although BER is specified, instead of the more restrictive DER, a
+   typical application will use DER since the CertificationRequest's
+   CertificationRequestInfo has to be DER-encoded in order to be signed.
+   A robust application SHOULD output DER, but allow BER or DER on
+   input.
+
+   Data produced by BER or DER is 8-bit, but many transports are limited
+   to 7-bit data. Therefore, a suitable 7-bit Content-Transfer-Encoding
+   SHOULD be applied. The base64 Content-Transfer-Encoding SHOULD be
+   used with application/pkcs10, although any 7-bit transfer encoding
+   may work.
+
+3.7.2 Sending and Receiving an application/pkcs10 Body Part
+
+   For sending a certificate-signing request, the application/pkcs10
+   message format MUST be used to convey a PKCS #10 certificate-signing
+   request. Note that for sending certificates and CRLs messages without
+   any signed content, the application/pkcs7-mime message format MUST be
+   used to convey a degenerate PKCS #7 signedData "certs-only" message.
+
+   To send an application/pkcs10 body, the application generates the
+   cryptographic information for the user. The details of the
+   cryptographic information are beyond the scope of this memo.
+
+     Step 1. The cryptographic information is placed within a PKCS #10
+             CertificationRequest.
+
+     Step 2. The CertificationRequest is encoded according to BER or DER
+             (typically, DER).
+
+     Step 3. As a typical step, the DER-encoded CertificationRequest is
+             also base64 encoded so that it is 7-bit data suitable for
+             transfer in SMTP. This then becomes the body of an
+             application/pkcs10 body part.
+
+   The result might look like this:
+
+       Content-Type: application/pkcs10; name=smime.p10
+       Content-Transfer-Encoding: base64
+       Content-Disposition: attachment; filename=smime.p10
+
+       rfvbnj756tbBghyHhHUujhJhjH77n8HHGT9HG4VQpfyF467GhIGfHfYT6
+       7n8HHGghyHhHUujhJh4VQpfyF467GhIGfHfYGTrfvbnjT6jH7756tbB9H
+       f8HHGTrfvhJhjH776tbB9HG4VQbnj7567GhIGfHfYT6ghyHhHUujpfyF4
+       0GhIGfHfQbnj756YT64V
+
+   A typical application only needs to send a certification request. It
+   is a certification authority that has to receive and process the
+
+
+
+Dusse, et. al.               Informational                     [Page 20]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+   request. The steps for recovering the CertificationRequest from the
+   message are straightforward but are not presented here. The
+   procedures for processing the certification request are beyond the
+   scope of this document.
+
+3.8 Identifying an S/MIME Message
+
+   Because S/MIME takes into account interoperation in non-MIME
+   environments, several different mechanisms are employed to carry the
+   type information, and it becomes a bit difficult to identify S/MIME
+   messages. The following table lists criteria for determining whether
+   or not a message is an S/MIME message. A message is considered an
+   S/MIME message if it matches any below.
+
+   The file suffix in the table below comes from the "name" parameter in
+   the content-type header, or the "filename" parameter on the content-
+   disposition header. These parameters that give the file suffix are
+   not listed below as part of the parameter section.
+
+   MIME type:   application/pkcs7-mime
+   parameters:  any
+   file suffix: any
+
+   MIME type:   application/pkcs10
+   parameters:  any
+   file suffix: any
+
+   MIME type:   multipart/signed
+   parameters:  protocol="application/pkcs7-signature"
+   file suffix: any
+
+   MIME type:   application/octet-stream
+   parameters:  any
+   file suffix: p7m, p7s, aps, p7c, p10
+
+4. Certificate Processing
+
+   A receiving agent MUST provide some certificate retrieval mechanism
+   in order to gain access to certificates for recipients of digital
+   envelopes.  This memo does not cover how S/MIME agents handle
+   certificates, only what they do after a certificate has been
+   validated or rejected. S/MIME certification issues are covered in a
+   different document.
+
+   At a minimum, for initial S/MIME deployment, a user agent could
+   automatically generate a message to an intended recipient requesting
+   that recipient's certificate in a signed return message. Receiving
+   and sending agents SHOULD also provide a mechanism to allow a user to
+
+
+
+Dusse, et. al.               Informational                     [Page 21]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+   "store and protect" certificates for correspondents in such a way so
+   as to guarantee their later retrieval.
+
+4.1 Key Pair Generation
+
+   An S/MIME agent or some related administrative utility or function
+   MUST be capable of generating RSA key pairs on behalf of the user.
+   Each key pair MUST be generated from a good source of non-
+   deterministic random input and protected in a secure fashion.
+
+   A user agent SHOULD generate RSA key pairs at a minimum key size of
+   768 bits and a maximum key size of 1024 bits. A user agent MUST NOT
+   generate RSA key pairs less than 512 bits long. Some agents created
+   in the United States have chosen to create 512 bit keys in order to
+   get more advantageous export licenses. However, 512 bit keys are
+   considered by many to be cryptographically insecure.
+
+   Implementors should be aware that multiple (active) key pairs may be
+   associated with a single individual. For example, one key pair may be
+   used to support confidentiality, while a different key pair may be
+   used for authentication.
+
+5. Security Considerations
+
+   This entire memo discusses security. Security issues not covered in
+   other parts of the memo include:
+
+   40-bit encryption is considered weak by most cryptographers. Using
+   weak cryptography in S/MIME offers little actual security over
+   sending plaintext. However, other features of S/MIME, such as the
+   specification of tripleDES and the ability to announce stronger
+   cryptographic capabilities to parties with whom you communicate,
+   allow senders to create messages that use strong encryption. Using
+   weak cryptography is never recommended unless the only alternative is
+   no cryptography. When feasible, sending and receiving agents should
+   inform senders and recipients the relative cryptographic strength of
+   messages.
+
+   It is impossible for most software or people to estimate the value of
+   a message. Further, it is impossible for most software or people to
+   estimate the actual cost of decrypting a message that is encrypted
+   with a key of a particular size. Further, it is quite difficult to
+   determine the cost of a failed decryption if a recipient cannot
+   decode a message. Thus, choosing between different key sizes (or
+   choosing whether to just use plaintext) is also impossible. However,
+   decisions based on these criteria are made all the time, and
+   therefore this memo gives a framework for using those estimates in
+   choosing algorithms.
+
+
+
+Dusse, et. al.               Informational                     [Page 22]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+   If a sending agent is sending the same message using different
+   strengths of cryptography, an attacker watching the communications
+   channel can determine the contents of the strongly-encrypted message
+   by decrypting the weakly-encrypted version. In other words, a sender
+   should not send a copy of a message using weaker cryptography than
+   they would use for the original of the message.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Dusse, et. al.               Informational                     [Page 23]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+A. Object Identifiers and Syntax
+
+   The syntax for SMIMECapability is:
+
+   SMIMECapability ::= SEQUENCE {
+       capabilityID OBJECT IDENTIFIER,
+       parameters OPTIONAL ANY DEFINED BY capabilityID }
+
+   SMIMECapabilities ::= SEQUENCE OF SMIMECapability
+
+A.1 Content Encryption Algorithms
+
+RC2-CBC OBJECT IDENTIFIER ::=
+ {iso(1) member-body(2) us(840) rsadsi(113549) encryptionAlgorithm(3) 2}
+
+For the effective-key-bits (key size) greater than 32 and less than
+256, the RC2-CBC algorithm parameters are encoded as:
+
+RC2-CBC parameter ::=  SEQUENCE {
+ rc2ParameterVersion  INTEGER,
+ iv                   OCTET STRING (8)}
+
+For the effective-key-bits of 40, 64, and 128, the
+rc2ParameterVersion values are 160, 120, 58 respectively.
+
+DES-EDE3-CBC OBJECT IDENTIFIER ::=
+ {iso(1) member-body(2) us(840) rsadsi(113549) encryptionAlgorithm(3) 7}
+
+For DES-CBC and DES-EDE3-CBC, the parameter should be encoded as:
+
+CBCParameter :: IV
+
+where IV ::= OCTET STRING -- 8 octets.
+
+A.2 Digest Algorithms
+
+md5 OBJECT IDENTIFIER ::=
+ {iso(1) member-body(2) us(840) rsadsi(113549) digestAlgorithm(2) 5}
+
+sha-1 OBJECT IDENTIFIER ::=
+ {iso(1) identified-organization(3) oiw(14) secsig(3) algorithm(2) 26}
+
+A.3 Asymmetric Encryption Algorithms
+
+rsaEncryption OBJECT IDENTIFIER ::=
+ {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-1(1) 1}
+
+
+
+
+
+Dusse, et. al.               Informational                     [Page 24]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+rsa OBJECT IDENTIFIER ::=
+     {joint-iso-ccitt(2) ds(5) algorithm(8) encryptionAlgorithm(1) 1}
+
+A.4 Signature Algorithms
+
+md2WithRSAEncryption OBJECT IDENTIFIER ::=
+     {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-1(1) 2}
+
+md5WithRSAEncryption OBJECT IDENTIFIER ::=
+     {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-1(1) 4}
+
+sha-1WithRSAEncryption OBJECT IDENTIFIER ::=
+     {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-1(1) 5}
+
+A.5 Signed Attributes
+
+signingTime OBJECT IDENTIFIER ::=
+     {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9) 5}
+
+smimeCapabilities OBJECT IDENTIFIER ::=
+    {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9) 15}
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Dusse, et. al.               Informational                     [Page 25]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+B. References
+
+   [3DES] W. Tuchman, "Hellman Presents No Shortcut Solutions To DES,"
+   IEEE Spectrum, v. 16, n. 7, July 1979, pp40-41.
+
+   [CHARSETS] Character sets assigned by IANA. See
+   <ftp://ftp.isi.edu/in-notes/iana/assignments/character-sets>.
+
+   [CONTDISP] Troost, R., Dorner, S and K. Moore, "Communicating
+   Presentation Information in Internet Messages:  The Content-
+   Disposition Header Field", RFC 2183, August 1997.
+
+   [DES] ANSI X3.106, "American National Standard for Information
+   Systems-Data Link Encryption," American National Standards Institute,
+   1983.
+
+   [MD5] Rivest, R., "The MD5 Message Digest Algorithm", RFC 1321, April
+   1992.
+
+   [MIME-SPEC] The primary definition of MIME.
+
+   Freed, N., and N. Borenstein, "MIME Part 1: Format of Internet
+   Message Bodies", RFC 2045, November 1996.
+
+   Freed, N., and N. Borenstein, "MIME Part 2: Media Types", RFC 2046,
+   November 1996.
+
+   Moore, K., "MIME Part 3: Message Header Extensions for Non-ASCII
+   Text", RFC 2047, November 1996.
+
+   Freed, N., Klensin, J., and J. Postel, "MIME Part 4: Registration
+   Procedures", RFC 2048, November 1996.
+
+   Freed, N., and N. Borenstein, "MIME Part 5: Conformance Criteria and
+   Examples", RFC 2049, November 1996.
+
+   [MIME-SECURE] Galvin, J., Murphy, S., Crocker, S., and N. Freed,
+   "Security Multiparts for MIME: Multipart/Signed and
+   Multipart/Encrypted", RFC 1847, October 1995.
+
+   [MUSTSHOULD] Bradner, S., "Key words for use in RFCs to Indicate
+   Requirement Levels", BCP 14, RFC 2119, March 1997.
+
+   [PKCS-1] Kaliski, B., "PKCS #1: RSA Encryption Version 1.5", RFC
+   2313, March 1998.
+
+   [PKCS-7] Kaliski, B., "PKCS #7: Cryptographic Message Syntax Version
+   1.5", RFC 2315, March 1998.
+
+
+
+Dusse, et. al.               Informational                     [Page 26]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+   [PKCS-10] Kaliski, B., "PKCS #10: Certification Request Syntax
+   Version 1.5", RFC 2314, March 1998.
+
+   [RC2] Rivest, R., "Description of the RC2(r) Encryption Algorithm",
+   RFC 2268, January 1998.
+
+   [SHA1] NIST FIPS PUB 180-1, "Secure Hash Standard," National
+   Institute of Standards and Technology, U.S. Department of Commerce,
+   DRAFT, 31 May 1994.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Dusse, et. al.               Informational                     [Page 27]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+C. Compatibility with Prior Practice in S/MIME
+
+   S/MIME was originally developed by RSA Data Security, Inc. Many
+   developers implemented S/MIME agents before this document was
+   published. All S/MIME receiving agents SHOULD make every attempt to
+   interoperate with these earlier implementations of S/MIME.
+
+C.1 Early MIME Types
+
+   Some early implementations of S/MIME agents used the following MIME
+   types:
+
+   application/x-pkcs7-mime
+   application/x-pkcs7-signature
+   application/x-pkcs10
+
+   In each case, the "x-" subtypes correspond to the subtypes described
+   in this document without the "x-".
+
+C.2 Profiles
+
+   Early S/MIME documentation had two profiles for encryption:
+   "restricted" and "unrestricted". The difference between these
+   profiles historically came about due to US Government export
+   regulations, as described at the end of this section. It is expected
+   that in the future, there will be few agents that only use the
+   restricted profile.
+
+   Briefly, the restricted profile required the ability to encrypt and
+   decrypt using RSA's trade-secret RC2 algorithm in CBC mode with 40-
+   bit keys. The unrestricted profile required the ability to encrypt
+   and decrypt using RSA's trade-secret RC2 algorithm in CBC mode with
+   40-bit keys, and to encrypt and decrypt using tripleDES. The
+   restricted profile also had non-mandatory suggestions for other
+   algorithms, but these were not widely implemented.
+
+   It is important to note that many current implementations of S/MIME
+   use the restricted profile.
+
+C.2.1 Historical Reasons for the Existence of Two Encryption Profiles
+
+   Due to US Government export regulations, an S/MIME agent which
+   supports a strong content encryption algorithm such as DES would not
+   be freely exportable outside of North America. US software
+   manufacturers have been compelled to incorporate an exportable or
+   "restricted" content encryption algorithm in order to create a widely
+   exportable version of their product.  S/MIME agents created in the US
+   and intended for US domestic use (or use under special State
+
+
+
+Dusse, et. al.               Informational                     [Page 28]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+   Department export licenses) can utilize stronger, "unrestricted"
+   content encryption. However, in order to achieve interoperability,
+   such agents need to support whatever exportable algorithm is
+   incorporated in restricted S/MIME agents.
+
+   The RC2 symmetric encryption algorithm has been approved by the US
+   Government for "expedited" export licensing at certain key sizes.
+   Consequently, support for the RC2 algorithm in CBC mode is required
+   for baseline interoperability in all S/MIME implementations. Support
+   for other strong symmetric encryption algorithms such as RC5 CBC, DES
+   CBC and DES EDE3-CBC for content encryption is strongly encouraged
+   where possible.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Dusse, et. al.               Informational                     [Page 29]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+D. Request for New MIME Subtypes
+
+D.1 application/pkcs7-mime
+
+   To: ietf-types@iana.org
+   Subject: Registration of MIME media type application/pkcs7-mime
+
+   MIME media type name: application
+
+   MIME subtype name: pkcs7-mime
+
+   Required parameters: none
+
+   Optional parameters: name, filename, smime-type
+
+   Encoding considerations: Will be binary data, therefore should use
+   base64 encoding
+
+   Security considerations: Described in [PKCS-7]
+
+   Interoperability considerations: Designed to carry data formatted
+   with PKCS-7, as described in [PKCS-7]
+
+   Published specification: RFC 2311
+
+   Applications which use this media type: Secure Internet mail and
+   other secure data transports.
+
+   Additional information:
+   File extension(s): .p7m and .p7c
+   Macintosh File Type Code(s):
+
+   Person & email address to contact for further information:
+   Steve Dusse, spock@rsa.com
+
+   Intended usage: COMMON
+
+D.2 application/pkcs7-signature
+
+   To: ietf-types@iana.org
+   Subject: Registration of MIME media type application/pkcs7-signature
+
+   MIME media type name: application
+
+   MIME subtype name: pkcs7-signature
+
+   Required parameters: none
+
+
+
+
+Dusse, et. al.               Informational                     [Page 30]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+   Optional parameters: name, filename
+
+   Encoding considerations: Will be binary data, therefore should use
+   base64 encoding
+
+   Security considerations: Described in [PKCS-7]
+
+   Interoperability considerations: Designed to carry digital
+   signatures with PKCS-7, as described in [PKCS-7]
+
+   Published specification: RFC 2311
+
+   Applications which use this media type: Secure Internet mail and
+   other secure data transports.
+
+   Additional information:
+   File extension(s): .p7s
+   Macintosh File Type Code(s):
+
+   Person & email address to contact for further information:
+   Steve Dusse, spock@rsa.com
+
+   Intended usage: COMMON
+
+D.3 application/pkcs10
+
+   To: ietf-types@iana.org
+   Subject: Registration of MIME media type application/pkcs10
+
+   MIME media type name: application
+
+   MIME subtype name: pkcs10
+
+   Required parameters: none
+
+   Optional parameters: name, filename
+
+   Encoding considerations: Will be binary data, therefore should use
+   base64 encoding
+
+   Security considerations: Described in [PKCS-10]
+
+   Interoperability considerations: Designed to carry digital
+   certificates formatted with PKCS-10, as described in [PKCS-10]
+
+   Published specification: RFC 2311
+
+   Applications which use this media type: Secure Internet mail and
+
+
+
+Dusse, et. al.               Informational                     [Page 31]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+   other transports where certificates are required.
+
+   Additional information:
+   File extension(s): .p10
+   Macintosh File Type Code(s):
+
+   Person & email address to contact for further information:
+   Steve Dusse, spock@rsa.com
+
+   Intended usage: COMMON
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Dusse, et. al.               Informational                     [Page 32]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+E. Encapsulating Signed Messages for Internet Transport
+
+   The rationale behind the multiple formats for signing has to do with
+   the MIME subtype defaulting rules of the application and multipart
+   top-level types, and the behavior of currently deployed gateways and
+   mail user agents.
+
+   Ideally, the multipart/signed format would be the only format used
+   because it provides a truly backwards compatible way to sign MIME
+   entities. In a pure MIME environment with very capable user agents,
+   this would be possible. The world, however, is more complex than
+   this.
+
+   One problem with the multipart/signed format occurs with gateways to
+   non-MIME environments. In these environments, the gateway will
+   generally not be S/MIME aware, will not recognize the
+   multipart/signed type, and will default its treatment to
+   multipart/mixed as is prescribed by the MIME standard. The real
+   problem occurs when the gateway also applies conversions to the MIME
+   structure of the original message that is being signed and is
+   contained in the first part of the multipart/signed structure, such
+   as the gateway converting text and attachments to the local format.
+   Because the signature is over the MIME structure of the original
+   message, but the original message is now decomposed and transformed,
+   the signature cannot be verified. Because MIME encoding of a
+   particular set of body parts can be done in many different ways,
+   there is no way to reconstruct the original MIME entity over which
+   the signature was computed.
+
+   A similar problem occurs when an attempt is made to combine an
+   existing user agent with a stand-alone S/MIME facility. Typical user
+   agents do not have the ability to make a multipart sub-entity
+   available to a stand-alone application in the same way they make leaf
+   MIME entities available to "viewer" applications. This user agent
+   behavior is not required by the MIME standard and thus not widely
+   implemented. The result is that it is impossible for most user agents
+   to hand off the entire multipart/signed entity to a stand-alone
+   application.
+
+E.1 Solutions to the Problem
+
+   To work around these two problems, the application/pkcs7-mime type
+   can be used. When going through a gateway, it will be defaulted to
+   the MIME type of application/octet-stream and treated as a single
+   opaque entity. That is, the message will be treated as an attachment
+   of unknown type, converted into the local representation for an
+   attachment and thus can be made available to an S/MIME facility
+   completely intact. A similar result is achieved when a user agent
+
+
+
+Dusse, et. al.               Informational                     [Page 33]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+   similarly treats the application/pkcs7-mime MIME entity as a simple
+   leaf node of the MIME structure and makes it available to viewer
+   applications.
+
+   Another way to work around these problems is to encapsulate the
+   multipart/signed MIME entity in a MIME entity that will not be
+   damaged by the gateway. At the time that this memo is being written,
+   there is a proposal for a MIME entity "application/mime" for this
+   purpose. However, no implementations of S/MIME use this type of
+   wrapping.
+
+E.2 Encapsulation in an Non-MIME Environment
+
+   While this document primarily addresses the Internet, it is useful to
+   compose and receive S/MIME secured messages in non-MIME environments.
+   This is particularly the case when it is desired that security be
+   implemented end-to-end. Other discussion here addresses the receipt
+   of S/MIME messages in non-MIME environments. Here the composition of
+   multipart/signed entities is addressed.
+
+   When a message is to be sent in such an environment, the
+   multipart/signed entity is created as described above. That entity is
+   then treated as an opaque stream of bits and added to the message as
+   an attachment. It must have a file name that ends with ".aps", as
+   this is the sole mechanism for recognizing it as an S/MIME message by
+   the receiving agent.
+
+   When this message arrives in a MIME environment, it is likely to have
+   a MIME type of application/octet-stream, with MIME parameters giving
+   the filename for the attachment. If the intervening gateway has
+   carried the file type, it will end in ".aps" and be recognized as an
+   S/MIME message.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Dusse, et. al.               Informational                     [Page 34]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+F. Acknowledgements
+
+   Significant contributions to the content of this memo were made by
+   many people, including Jim Schaad, Jeff Thompson, and Jeff Weinstein.
+
+G. Authors' Addresses
+
+   Steve Dusse
+   RSA Data Security, Inc.
+   100 Marine Parkway, #500
+   Redwood City, CA  94065  USA
+
+   Phone: (415) 595-8782
+   EMail: spock@rsa.com
+
+
+   Paul Hoffman
+   Internet Mail Consortium
+   127 Segre Place
+   Santa Cruz, CA  95060
+
+   Phone: (408) 426-9827
+   EMail: phoffman@imc.org
+
+
+   Blake Ramsdell
+   Worldtalk
+   13122 NE 20th St., Suite C
+   Bellevue, WA 98005
+
+   Phone: (425) 882-8861
+   EMail: blaker@deming.com
+
+
+   Laurence Lundblade
+   QUALCOMM Incorporated
+   Eudora Division
+   6455 Lusk Boulevard
+   San Diego, California 92121-2779
+
+   Phone: (800) 238-3672
+   EMail: lgl@qualcomm.com
+
+
+
+
+
+
+
+
+
+Dusse, et. al.               Informational                     [Page 35]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+   Lisa Repka
+   Netscape Communications Corporation
+   501 East Middlefield Road
+   Mountain View, CA  94043
+
+   Phone: (415) 254-1900
+   EMail: repka@netscape.com
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Dusse, et. al.               Informational                     [Page 36]
+
+RFC 2311         S/MIME Version 2 Message Specification       March 1998
+
+
+H.  Full Copyright Statement
+
+   Copyright (C) The Internet Society (1998).  All Rights Reserved.
+
+   This document and translations of it may be copied and furnished to
+   others, and derivative works that comment on or otherwise explain it
+   or assist in its implementation may be prepared, copied, published
+   and distributed, in whole or in part, without restriction of any
+   kind, provided that the above copyright notice and this paragraph are
+   included on all such copies and derivative works.  However, this
+   document itself may not be modified in any way, such as by removing
+   the copyright notice or references to the Internet Society or other
+   Internet organizations, except as needed for the purpose of
+   developing Internet standards in which case the procedures for
+   copyrights defined in the Internet Standards process must be
+   followed, or as required to translate it into languages other than
+   English.
+
+   The limited permissions granted above are perpetual and will not be
+   revoked by the Internet Society or its successors or assigns.
+
+   This document and the information contained herein is provided on an
+   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
+   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
+   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
+   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
+   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Dusse, et. al.               Informational                     [Page 37]
+
diff -uNr gmime-1.90.0/rfc/rfc2312.txt gmime/rfc/rfc2312.txt
--- gmime-1.90.0/rfc/rfc2312.txt	Thu Jan  1 01:00:00 1970
+++ gmime/rfc/rfc2312.txt	Tue Dec  5 07:39:10 2000
@@ -0,0 +1,1123 @@
+
+
+
+
+
+
+Network Working Group                                           S. Dusse
+Request for Comments: 2312                             RSA Data Security
+Category: Informational                                       P. Hoffman
+                                                Internet Mail Consortium
+                                                             B. Ramsdell
+                                                               Worldtalk
+                                                            J. Weinstein
+                                                                Netscape
+                                                              March 1998
+
+
+                 S/MIME Version 2 Certificate Handling
+
+Status of this Memo
+
+   This memo provides information for the Internet community.  It does
+   not specify an Internet standard of any kind.  Distribution of this
+   memo is unlimited.
+
+Copyright Notice
+
+   Copyright (C) The Internet Society (1998).  All Rights Reserved.
+
+1. Overview
+
+   S/MIME (Secure/Multipurpose Internet Mail Extensions), described in
+   [SMIME-MSG], provides a method to send and receive secure MIME
+   messages. In order to validate the keys of a message sent to it, an
+   S/MIME agent needs to certify that the key is valid. This memo
+   describes the mechanisms S/MIME uses to create and validate keys
+   using certificates.
+
+   This specification is compatible with PKCS #7 in that it uses the
+   data types defined by PKCS #7. It also inherits all the varieties of
+   architectures for certificate-based key management supported by PKCS
+   #7.  Note that the method S/MIME messages make certificate requests
+   is defined in [SMIME-MSG].
+
+   In order to handle S/MIME certificates, an agent has to follow
+   specifications in this memo, as well as some of the specifications
+   listed in the following documents:
+
+    - "PKCS #1: RSA Encryption", [PKCS-1].
+    - "PKCS #7: Cryptographic Message Syntax", [PKCS-7]
+    - "PKCS #10: Certification Request Syntax", [PKCS-10].
+
+
+
+
+
+
+Dusse, et. al.               Informational                      [Page 1]
+
+RFC 2312        S/MIME Version 2 Certificate Handling         March 1998
+
+
+   Please note: The information in this document is historical material
+   being published for the public record. It is not an IETF standard.
+   The use of the word "standard" in this document indicates a standard
+   for adopters of S/MIME version 2, not an IETF standard.
+
+1.1 Definitions
+
+   For the purposes of this memo, the following definitions apply.
+
+   ASN.1: Abstract Syntax Notation One, as defined in CCITT X.208.
+
+   BER: Basic Encoding Rules for ASN.1, as defined in CCITT X.209.
+
+   Certificate: A type that binds an entity's distinguished name to a
+   public key with a digital signature. This type is defined in CCITT
+   X.509 [X.509].  This type also contains the distinguished name of the
+   certificate issuer (the signer), an issuer-specific serial number,
+   the issuer's signature algorithm identifier, and a validity period.
+
+   Certificate Revocation List (CRL): A type that contains information
+   about certificates whose validity an issuer has prematurely revoked.
+   The information consists of an issuer name, the time of issue, the
+   next scheduled time of issue, and a list of certificate serial
+   numbers and their associated revocation times. The CRL is signed by
+   the issuer. The type intended by this specification is the one
+   defined in [KEYM].
+
+   DER: Distinguished Encoding Rules for ASN.1, as defined in CCITT
+   X.509.
+
+1.2 Compatibility with Prior Practice of S/MIME
+
+   Appendix C contains important information about how S/MIME agents
+   following this specification should act in order to have the greatest
+   interoperability with earlier implementations of S/MIME.
+
+1.3 Terminology
+
+   Throughout this memo, the terms MUST, MUST NOT, SHOULD, and SHOULD
+   NOT are used in capital letters. This conforms to the definitions in
+   [MUSTSHOULD].  [MUSTSHOULD] defines the use of these key words to
+   help make the intent of standards track documents as clear as
+   possible. The same key words are used in this document to help
+   implementors achieve interoperability.
+
+
+
+
+
+
+
+Dusse, et. al.               Informational                      [Page 2]
+
+RFC 2312        S/MIME Version 2 Certificate Handling         March 1998
+
+
+2. PKCS #7 Options
+
+   The PKCS #7 message format allows for a wide variety of options in
+   content and algorithm support. This section puts forth a number of
+   support requirements and recommendations in order to achieve a base
+   level of interoperability among all S/MIME implementations. Most of
+   the PKCS #7 format for S/MIME messages is defined in [SMIME-MSG].
+
+2.1 CertificateRevocationLists
+
+   Receiving agents MUST support for the Certificate Revocation List
+   (CRL) format defined in [KEYM]. If sending agents include CRLs in
+   outgoing messages, the CRL format defined in [KEYM] MUST be used.
+
+   All agents MUST validate CRLs and check certificates against CRLs, if
+   available, in accordance with [KEYM]. All agents SHOULD check the
+   nextUpdate field in the CRL against the current time. If the current
+   time is later than the nextUpdate time, the action that the agent
+   takes is a local decision. For instance, it could warn a human user,
+   it could retrieve a new CRL if able, and so on.
+
+   Receiving agents MUST recognize CRLs in received S/MIME messages.
+
+   Clients MUST use revocation information included as a CRL in an
+   S/MIME message when verifying the signature and certificate path
+   validity in that message.  Clients SHOULD store CRLs received in
+   messages for use in processing later messages.
+
+   Clients MUST handle multiple valid Certificate Authority (CA)
+   certificates containing the same subject name and the same public
+   keys but with overlapping validity intervals.
+
+2.2 ExtendedCertificateOrCertificate
+
+   Receiving agents MUST support X.509 v1 and X.509 v3 certificates. See
+   [KEYM] for details about the profile for certificate formats. End
+   entity certificates MUST include an Internet mail address, as
+   described in section 3.1.
+
+2.2.1 Historical Note About PKCS #7 Certificates
+
+   The PKCS #7 message format supports a choice of certificate two
+   formats for public key content types: X.509 and PKCS #6 Extended
+   Certificates. The PKCS #6 format is not in widespread use. In
+   addition, proposed revisions of X.509 certificates address much of
+   the same functionality and flexibility as was intended in the PKCS
+   #6. Thus, sending and receiving agents MUST NOT use PKCS #6 extended
+   certificates.
+
+
+
+Dusse, et. al.               Informational                      [Page 3]
+
+RFC 2312        S/MIME Version 2 Certificate Handling         March 1998
+
+
+2.3 ExtendedCertificateAndCertificates
+
+   Receiving agents MUST be able to handle an arbitrary number of
+   certificates of arbitrary relationship to the message sender and to
+   each other in arbitrary order. In many cases, the certificates
+   included in a signed message may represent a chain of certification
+   from the sender to a particular root. There may be, however,
+   situations where the certificates in a signed message may be
+   unrelated and included for convenience.
+
+   Sending agents SHOULD include any certificates for the user's public
+   key(s) and associated issuer certificates. This increases the
+   likelihood that the intended recipient can establish trust in the
+   originator's public key(s).  This is especially important when
+   sending a message to recipients that may not have access to the
+   sender's public key through any other means or when sending a signed
+   message to a new recipient. The inclusion of certificates in outgoing
+   messages can be omitted if S/MIME objects are sent within a group of
+   correspondents that has established access to each other's
+   certificates by some other means such as a shared directory or manual
+   certificate distribution. Receiving S/MIME agents SHOULD be able to
+   handle messages without certificates using a database or directory
+   lookup scheme.
+
+   A sending agent SHOULD include at least one chain of certificates up
+   to, but not including, a Certificate Authority (CA) that it believes
+   that the recipient may trust as authoritative. A receiving agent
+   SHOULD be able to handle an arbitrarily large number of certificates
+   and chains.
+
+   Clients MAY send CA certificates, that is, certificates that are
+   self-signed and can be considered the "root" of other chains. Note
+   that receiving agents SHOULD NOT simply trust any self-signed
+   certificates as valid CAs, but SHOULD use some other mechanism to
+   determine if this is a CA that should be trusted.
+
+   Receiving agents MUST support chaining based on the distinguished
+   name fields. Other methods of building certificate chains may be
+   supported but are not currently recommended.
+
+
+
+
+
+
+
+
+
+
+
+
+Dusse, et. al.               Informational                      [Page 4]
+
+RFC 2312        S/MIME Version 2 Certificate Handling         March 1998
+
+
+3. Distinguished Names in Certificates
+
+3.1 Using Distinguished Names for Internet Mail
+
+   The format of an X.509 certificate includes fields for the subject
+   name and issuer name. The subject name identifies the owner of a
+   particular public key/private key pair while the issuer name is meant
+   to identify the entity that "certified" the subject (that is, who
+   signed the subject's certificate). The subject name and issuer name
+   are defined by X.509 as Distinguished Names.
+
+   Distinguished Names are defined by a CCITT standard X.501 [X.501]. A
+   Distinguished Name is broken into one or more Relative Distinguished
+   Names.  Each Relative Distinguished Name is comprised of one or more
+   Attribute-Value Assertions. Each Attribute-Value Assertion consists
+   of a Attribute Identifier and its corresponding value information,
+   such as CountryName=US. Distinguished Names were intended to identify
+   entities in the X.500 directory tree [X.500]. Each Relative
+   Distinguished Name can be thought of as a node in the tree which is
+   described by some collection of Attribute-Value Assertions. The
+   entire Distinguished Name is some collection of nodes in the tree
+   that traverse a path from the root of the tree to some end node which
+   represents a particular entity.
+
+   The goal of the directory was to provide an infrastructure to
+   uniquely name every communications entity everywhere. However,
+   adoption of a global X.500 directory infrastructure has been slower
+   than expected. Consequently, there is no requirement for X.500
+   directory service provision in the S/MIME environment, although such
+   provision would almost undoubtedly be of great value in facilitating
+   key management for S/MIME.
+
+   The use of Distinguished Names in accordance with the X.500 directory
+   is not very widespread. By contrast, Internet mail addresses, as
+   described in RFC 822 [RFC-822], are used almost exclusively in the
+   Internet environment to identify originators and recipients of
+   messages. However, Internet mail addresses bear no resemblance to
+   X.500 Distinguished Names (except, perhaps, that they are both
+   hierarchical in nature). Some method is needed to map Internet mail
+   addresses to entities that hold public keys. Some people have
+
+
+
+
+
+
+
+
+
+
+
+Dusse, et. al.               Informational                      [Page 5]
+
+RFC 2312        S/MIME Version 2 Certificate Handling         March 1998
+
+
+   suggested that the X.509 certificate format should be abandoned in
+   favor of other binding mechanisms. Instead, S/MIME keeps the X.509
+   certificate and Distinguished Name mechanisms while tailoring the
+   content of the naming information to suit the Internet mail
+   environment.
+
+   End-entity certificates MUST contain an Internet mail address as
+   described in [RFC-822]. The address must be an "addr-spec" as defined
+   in Section 6.1 of that specification.
+
+   Receiving agents MUST recognize email addresses in the subjectAltName
+   field. Receiving agents MUST recognize email addresses in the
+   Distinguished Name field.
+
+   Sending agents SHOULD make the address in the From header in a mail
+   message match an Internet mail address in the signer's certificate.
+   Receiving agents MUST check that the address in the From header of a
+   mail message matches an Internet mail address in the signer's
+   certificate. A receiving agent MUST provide some explicit alternate
+   processing of the message if this comparison fails, which may be to
+   reject the message.
+
+3.2 Required Name Attributes
+
+   Receiving agents MUST support parsing of zero, one, or more instances
+   of each of the following set of name attributes within the
+   Distinguished Names in certificates.
+
+   Sending agents MUST include the Internet mail address during
+   Distinguished Name creation. Guidelines for the inclusion, omission,
+   and ordering of the remaining name attributes during the creation of
+   a distinguished name will most likely be dictated by the policies
+   associated with the certification service which will certify the
+   corresponding name and public key.
+
+   CountryName
+   StateOrProvinceName
+   Locality
+   CommonName
+   Title
+   Organization
+   OrganizationalUnit
+   StreetAddress
+   PostalCode
+   PhoneNumber
+   EmailAddress
+
+
+
+
+
+Dusse, et. al.               Informational                      [Page 6]
+
+RFC 2312        S/MIME Version 2 Certificate Handling         March 1998
+
+
+   All attributes other than EmailAddress are described in X.520
+   [X.520].  EmailAddress is an IA5String that can have multiple
+   attribute values.
+
+4. Certificate Processing
+
+   A receiving agent needs to provide some certificate retrieval
+   mechanism in order to gain access to certificates for recipients of
+   digital envelopes.  There are many ways to implement certificate
+   retrieval mechanisms. X.500 directory service is an excellent example
+   of a certificate retrieval-only mechanism that is compatible with
+   classic X.500 Distinguished Names. The PKIX Working Group is
+   investigating other mechanisms. Another method under consideration by
+   the IETF is to provide certificate retrieval services as part of the
+   existing Domain Name System (DNS). Until such mechanisms are widely
+   used, their utility may be limited by the small number of
+   correspondent's certificates that can be retrieved. At a minimum, for
+   initial S/MIME deployment, a user agent could automatically generate
+   a message to an intended recipient requesting that recipient's
+   certificate in a signed return message.
+
+   Receiving and sending agents SHOULD also provide a mechanism to allow
+   a user to "store and protect" certificates for correspondents in such
+   a way so as to guarantee their later retrieval. In many environments,
+   it may be desirable to link the certificate retrieval/storage
+   mechanisms together in some sort of certificate database. In its
+   simplest form, a certificate database would be local to a particular
+   user and would function in a similar way as a "address book" that
+   stores a user's frequent correspondents. In this way, the certificate
+   retrieval mechanism would be limited to the certificates that a user
+   has stored (presumably from incoming messages).  A comprehensive
+   certificate retrieval/storage solution may combine two or more
+   mechanisms to allow the greatest flexibility and utility to the user.
+   For instance, a secure Internet mail agent may resort to checking a
+   centralized certificate retrieval mechanism for a certificate if it
+   can not be found in a user's local certificate storage/retrieval
+   database.
+
+   Receiving and sending agents SHOULD provide a mechanism for the
+   import and export of certificates, using a PKCS #7 certs-only
+   message. This allows for import and export of full certificate chains
+   as opposed to just a single certificate. This is described in
+   [SMIME-MSG].
+
+
+
+
+
+
+
+
+Dusse, et. al.               Informational                      [Page 7]
+
+RFC 2312        S/MIME Version 2 Certificate Handling         March 1998
+
+
+4.1 Certificate Revocation Lists
+
+   A receiving agent SHOULD have access to some certificate-revocation
+   list (CRL) retrieval mechanism in order to gain access to
+   certificate-revocation information when validating certificate
+   chains. A receiving or sending agent SHOULD also provide a mechanism
+   to allow a user to store incoming certificate-revocation information
+   for correspondents in such a way so as to guarantee its later
+   retrieval. However, it is always better to get the latest information
+   from the CA than to get information stored away from incoming
+   messages.
+
+   Receiving and sending agents SHOULD retrieve and utilize CRL
+   information every time a certificate is verified as part of a
+   certificate chain validation even if the certificate was already
+   verified in the past.  However, in many instances (such as off-line
+   verification) access to the latest CRL information may be difficult
+   or impossible. The use of CRL information, therefore, may be dictated
+   by the value of the information that is protected. The value of the
+   CRL information in a particular context is beyond the scope of this
+   memo but may be governed by the policies associated with particular
+   certificate hierarchies.
+
+4.2 Certificate Chain Validation
+
+   In creating a user agent for secure messaging, certificate, CRL, and
+   certificate chain validation SHOULD be highly automated while still
+   acting in the best interests of the user. Certificate, CRL, and chain
+   validation MUST be performed when validating a correspondent's public
+   key. This is necessary when a) verifying a signature from a
+   correspondent and, b) creating a digital envelope with the
+   correspondent as the intended recipient.
+
+   Certificates and CRLs are made available to the chain validation
+   procedure in two ways: a) incoming messages, and b) certificate and
+   CRL retrieval mechanisms. Certificates and CRLs in incoming messages
+   are not required to be in any particular order nor are they required
+   to be in any way related to the sender or recipient of the message
+   (although in most cases they will be related to the sender). Incoming
+   certificates and CRLs SHOULD be cached for use in chain validation
+   and optionally stored for later use. This temporary certificate and
+   CRL cache SHOULD be used to augment any other certificate and CRL
+   retrieval mechanisms for chain validation on incoming signed
+   messages.
+
+
+
+
+
+
+
+Dusse, et. al.               Informational                      [Page 8]
+
+RFC 2312        S/MIME Version 2 Certificate Handling         March 1998
+
+
+4.3 Certificate and CRL Signing Algorithms
+
+   Certificates and Certificate-Revocation Lists (CRLs) are signed by
+   the certificate issuer. A receiving agent MUST be capable of
+   verifying the signatures on certificates andCRLs made with
+   md5WithRSAEncryption and sha-1WithRSAEncryption signature algorithms
+   with key sizes from 512 bits to 2048 bits described in [SMIME-MSG]. A
+   receiving agent SHOULD be capable of verifying the signatures on
+   certificates and CRLs made with the md2WithRSAEncryption signature
+   algorithm with key sizes from 512 bits to 2048 bits.
+
+4.4 X.509 Version 3 Certificate Extensions
+
+   The X.509 v3 standard describes an extensible framework in which the
+   basic certificate information can be extended and how such extensions
+   can be used to control the process of issuing and validating
+   certificates. The PKIX Working Group has ongoing efforts to identify
+   and create extensions which have value in particular certification
+   environments. As such, there is still a fair amount of profiling work
+   to be done before there is widespread agreement on which v3
+   extensions will be used. Further, there are active efforts underway
+   to issue X.509 v3 certificates for business purposes. This memo
+   identifies the minumum required set of certificate extensions which
+   have the greatest value in the S/MIME environment. The
+   basicConstraints, and keyUsage extensions are defined in [X.509].
+
+   Sending and receiving agents MUST correctly handle the v3 Basic
+   Constraints Certificate Extension, the Key Usage Certificate
+   Extension, authorityKeyID, subjectKeyID, and the subjectAltNames when
+   they appear in end-user certificates. Some mechanism SHOULD exist to
+   handle the defined v3 certificate extensions when they appear in
+   intermediate or CA certificates.
+
+   Certificates issued for the S/MIME environment SHOULD NOT contain any
+   critical extensions other than those listed here. These extensions
+   SHOULD be marked as non-critical unless the proper handling of the
+   extension is deemed critical to the correct interpretation of the
+   associated certificate. Other extensions may be included, but those
+   extensions SHOULD NOT be marked as critical.
+
+4.4.1 Basic Constraints Certificate Extension
+
+   The basic constraints extension serves to delimit the role and
+   position of an issuing authority or end-user certificate plays in a
+   chain of certificates.
+
+
+
+
+
+
+Dusse, et. al.               Informational                      [Page 9]
+
+RFC 2312        S/MIME Version 2 Certificate Handling         March 1998
+
+
+   For example, certificates issued to CAs and subordinate CAs contain a
+   basic constraint extension that identifies them as issuing authority
+   certificates. End-user subscriber certificates contain an extension
+   that constrains the certificate from being an issuing authority
+   certificate.
+
+   Certificates SHOULD contain a basicContstraints extension.
+
+4.4.2 Key Usage Certificate Extension
+
+   The key usage extension serves to limit the technical purposes for
+   which a public key listed in a valid certificate may be used. Issuing
+   authority certificates may contain a key usage extension that
+   restricts the key to signing certificates, certificate revocation
+   lists and other data.
+
+   For example, a certification authority may create subordinate issuer
+   certificates which contain a keyUsage extension which specifies that
+   the corresponding public key can be used to sign end user certs and
+   sign CRLs.
+
+5. Generating Keys and Certification Requests
+
+5.1 Binding Names and Keys
+
+   An S/MIME agent or some related administrative utility or function
+   MUST be capable of generating a certification request given a user's
+   public key and associated name information. In most cases, the user's
+   public key/private key pair will be generated simultaneously.
+   However, there are cases where the keying information may be
+   generated by an external process (such as when a key pair is
+   generated on a cryptographic token or by a "key recovery" service).
+
+   There SHOULD NOT be multiple valid (that is, non-expired and non-
+   revoked) certificates for the same key pair bound to different
+   Distinguished Names.  Otherwise, a security flaw exists where an
+   attacker can substitute one valid certificate for another in such a
+   way that can not be detected by a message recipient. If a users
+   wishes to change their name (or create an alternate name), the user
+   agent SHOULD generate a new key pair. If the user wishes to reuse an
+   existing key pair with a new or alternate name, the user SHOULD first
+   have any valid certificates for the existing public key revoked.
+
+   In general, it is possible for a user to request certification for
+   the same name and different public key from the same or different
+   certification authorities.  This is acceptable both for end-entity
+   and issuer certificates and can be useful in supporting a change of
+   issuer keys in a smooth fashion.
+
+
+
+Dusse, et. al.               Informational                     [Page 10]
+
+RFC 2312        S/MIME Version 2 Certificate Handling         March 1998
+
+
+   CAs that re-use their own name with distinct keys MUST include the
+   AuthorityKeyIdentifier extension in certificates that they issue, and
+   MUST have the SubjectKeyIdentifier extension in their own
+   certificate. CAs SHOULD use these extensions uniformly.
+
+   Clients SHOULD handle multiple valid CA certificates that certify
+   different public keys but contain the same subject name (in this
+   case, that CA's name).
+
+   When selecting an appropriate issuer's certificate to use to verify a
+   given certificate, clients SHOULD process the AuthorityKeyIdentifier
+   and SubjectKeyIdentifier extensions.
+
+   5.2 Using PKCS #10 for Certification Requests
+
+   PKCS #10 is a flexible and extensible message format for representing
+   the results of cryptographic operations on some data. The choice of
+   naming information is largely dictated by the policies and procedures
+   associated with the intended certification service.
+
+   In addition to key and naming information, the PKCS #10 format
+   supports the inclusion of optional attributes, signed by the entity
+   requesting certification. This allows for information to be conveyed
+   in a certification request which may be useful to the request
+   process, but not necessarily part of the Distinguished Name being
+   certified.
+
+   Receiving agents MUST support the identification of an RSA key with
+   the rsa defined in X.509 and the rsaEncryption OID. Certification
+   authorities MUST support sha-1WithRSAEncryption and
+   md5WithRSAEncryption and SHOULD support MD2WithRSAEncryption for
+   verification of signatures on certificate requests as described in
+   [SMIME-MSG].
+
+   For the creation and submission of certification-requests, RSA keys
+   SHOULD be identified with the rsaEncryption OID and signed with the
+   sha-1WithRSAEncryption signature algorithm.  Certification-requests
+   MUST NOT be signed with the md2WithRSAEncryption signature algorithm.
+
+   Certification requests MUST include a valid Internet mail address,
+   either as part of the certificate (as described in 3.2) or as part of
+   the PKCS #10 attribute list. Certification authorities MUST check
+   that the address in the "From:" header matches either of these
+   addresses. CAs SHOULD allow the CA operator to configure processing
+   of messages whose addresses do not match.
+
+
+
+
+
+
+Dusse, et. al.               Informational                     [Page 11]
+
+RFC 2312        S/MIME Version 2 Certificate Handling         March 1998
+
+
+   Certification authorities SHOULD support parsing of zero or one
+   instance of each of the following set of certification-request
+   attributes on incoming messages. Attributes that a particular
+   implementation does not support may generate a warning message to the
+   requestor, or may be silently ignored.  Inclusion of the following
+   attributes during the creation and submission of a certification-
+   request will most likely be dictated by the policies associated with
+   the certification service which will certify the corresponding name
+   and public key.
+
+   postalAddress
+   challengePassword
+   unstructuredAddress
+
+   postalAddress is described in [X.520].
+
+5.2.1 Challenge Password
+
+   The challenge-password attribute type specifies a password by which
+   an entity may request certificate revocation. The interpretation of
+   the password is intended to be specified by the issuer of the
+   certificate; no particular interpretation is required. The
+   challenge-password attribute type is intended for PKCS #10
+   certification requests.
+
+Challenge-password attribute values have ASN.1 type ChallengePassword:
+
+ChallengePassword ::= CHOICE {
+  PrintableString, T61String }
+
+A challenge-password attribute must have a single attribute value.
+
+It is expected that if UCS becomes an ASN.1 type
+(e.g., UNIVERSAL STRING),
+ChallengePassword will become a CHOICE type:
+
+ChallengePassword ::= CHOICE {
+    PrintableString, T61String, UNIVERSAL STRING }
+
+5.2.2 Unstructured Address
+
+   The unstructured-address attribute type specifies the address or
+   addresses of the subject of a certificate as an unstructured ASCII or
+   T.61 string.  The interpretation of the addresses is intended to be
+   specified by the issuer of the certificate; no particular
+   interpretation is required. A likely interpretation is as an
+   alternative to the X.520 postalAddress attribute type. The
+   unstructured-address attribute type is intended for PKCS #10
+
+
+
+Dusse, et. al.               Informational                     [Page 12]
+
+RFC 2312        S/MIME Version 2 Certificate Handling         March 1998
+
+
+   certification requests.
+
+   Unstructured-address attribute values have
+   ASN.1 type UnstructuredAddress:
+
+   UnstructuredAddress ::= CHOICE {
+     PrintableString, T61String }
+
+   An unstructured-address attribute can have multiple attribute values.
+
+   Note: T.61's newline character (hexadecimal code 0d) is recommended
+   as a line separator in multi-line addresses.
+
+   It is expected that if UCS becomes an ASN.1 type (e.g., UNIVERSAL
+   STRING), UnstructuredAddress will become a CHOICE type:
+
+   UnstructuredAddress ::= CHOICE {
+       PrintableString, T61String, UNIVERSAL STRING }
+
+5.3 Fulfilling a Certification Request
+
+   Certification authorities SHOULD use the sha-1WithRSAEncryption
+   signature algorithms when signing certificates.
+
+5.4 Using PKCS #7 for Fulfilled Certificate Response
+
+   [PKCS-7] supports a degenerate case of the SignedData content type
+   where there are no signers on the content (and hence, the content
+   value is "irrelevant"). This degenerate case is used to convey
+   certificate and CRL information. Certification authorities MUST use
+   this format for returning certificate information resulting from the
+   successful fulfillment of a certification request. At a minimum, the
+   fulfilled certificate response MUST include the actual subject
+   certificate (corresponding to the information in the certification
+   request). The response SHOULD include other certificates which link
+   the issuer to higher level certification authorities and
+   corresponding certificate-revocation lists. Unrelated certificates
+   and revocation information is also acceptable.
+
+   Receiving agents MUST parse this degenerate PKCS #7 message type and
+   handle the certificates and CRLs according to the requirements and
+   recommendations in Section 4.
+
+
+
+
+
+
+
+
+
+Dusse, et. al.               Informational                     [Page 13]
+
+RFC 2312        S/MIME Version 2 Certificate Handling         March 1998
+
+
+6. Security Considerations
+
+   All of the security issues faced by any cryptographic application
+   must be faced by a S/MIME agent. Among these issues are protecting
+   the user's private key, preventing various attacks, and helping the
+   user avoid mistakes such as inadvertently encrypting a message for
+   the wrong recipient. The entire list of security considerations is
+   beyond the scope of this document, but some significant concerns are
+   listed here.
+
+   When processing certificates, there are many situations where the
+   processing might fail. Because the processing may be done by a user
+   agent, a security gateway, or other program, there is no single way
+   to handle such failures. Just because the methods to handle the
+   failures has not been listed, however, the reader should not assume
+   that they are not important.  The opposite is true: if a certificate
+   is not provably valid and associated with the message, the processing
+   software should take immediate and noticable steps to inform the end
+   user about it.
+
+   Some of the many places where signature and certificate checking
+   might fail include:
+
+   - no Internet mail addresses in a certificate match the sender of a
+     message
+   - no certificate chain leads to a trusted CA
+   - no ability to check the CRL for a certificate
+   - an invalid CRL was received
+   - the CRL being checked is expired
+   - the certificate is expired
+   - the certificate has been revoked
+
+   There are certainly other instances where a certificate may be
+   invalid, and it is the responsibility of the processing software to
+   check them all thoroughly, and to decide what to do if the check
+   fails.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Dusse, et. al.               Informational                     [Page 14]
+
+RFC 2312        S/MIME Version 2 Certificate Handling         March 1998
+
+
+A. Object Identifiers and Syntax
+
+   Sections A.1 through A.4 are adopted from [SMIME-MSG].
+
+A.5 Name Attributes
+
+emailAddress OBJECT IDENTIFIER ::=
+
+     {iso(1) member-body(2) US(840) rsadsi(113549) pkcs(1) pkcs-9(9) 1}
+
+CountryName OBJECT IDENTIFIER ::=
+     {joint-iso-ccitt(2) ds(5) attributeType(4) 6}
+
+StateOrProvinceName OBJECT IDENTIFIER ::=
+     {joint-iso-ccitt(2) ds(5) attributeType(4) 8}
+
+locality OBJECT IDENTIFIER ::=
+     {joint-iso-ccitt(2) ds(5) attributeType(4) 7}
+
+CommonName OBJECT IDENTIFIER ::=
+     {joint-iso-ccitt(2) ds(5) attributeType(4) 3}
+
+Title OBJECT IDENTIFIER ::=
+     {joint-iso-ccitt(2) ds(5) attributeType(4) 12}
+
+Organization OBJECT IDENTIFIER ::=
+     {joint-iso-ccitt(2) ds(5) attributeType(4) 10}
+
+OrganizationalUnit OBJECT IDENTIFIER ::=
+     {joint-iso-ccitt(2) ds(5) attributeType(4) 11}
+
+StreetAddress OBJECT IDENTIFIER ::=
+     {joint-iso-ccitt(2) ds(5) attributeType(4) 9}
+
+Postal Code OBJECT IDENTIFIER ::=
+     {joint-iso-ccitt(2) ds(5) attributeType(4) 17}
+
+Phone Number OBJECT IDENTIFIER ::=
+     {joint-iso-ccitt(2) ds(5) attributeType(4) 20}
+
+A.6 Certification Request Attributes
+
+postalAddress OBJECT IDENTIFIER ::=
+     {joint-iso-ccitt(2) ds(5) attributeType(4) 16}
+
+challengePassword OBJECT IDENTIFIER ::=
+     {iso(1) member-body(2) US(840) rsadsi(113549) pkcs(1) pkcs-9(9) 7}
+
+
+
+
+Dusse, et. al.               Informational                     [Page 15]
+
+RFC 2312        S/MIME Version 2 Certificate Handling         March 1998
+
+
+unstructuredAddress OBJECT IDENTIFIER ::=
+     {iso(1) member-body(2) US(840) rsadsi(113549) pkcs(1) pkcs-9(9) 8}
+
+A.7 X.509 V3 Certificate Extensions
+
+basicConstraints OBJECT IDENTIFIER ::=
+
+     {joint-iso-ccitt(2) ds(5) 29 19 }
+
+The ASN.1 definition of basicConstraints certificate extension is:
+
+basicConstraints basicConstraints EXTENSION ::= {
+     SYNTAX  BasicConstraintsSyntax
+     IDENTIFIED BY { id-ce 19 } }
+
+BasicConstraintsSyntax ::= SEQUENCE {
+     cA                 BOOLEAN DEFAULT FALSE,
+     pathLenConstraint  INTEGER (0..MAX) OPTIONAL }
+
+keyUsage OBJECT IDENTIFIER ::=
+     {joint-iso-ccitt(2) ds(5) 29 15 }
+
+The ASN.1 definition of keyUsage certificate extension is:
+
+keyUsage EXTENSION ::= {
+     SYNTAX  KeyUsage
+     IDENTIFIED BY { id-ce 15 }}
+
+KeyUsage ::= BIT STRING {
+     digitalSignature      (0),
+     nonRepudiation        (1),
+     keyEncipherment       (2),
+     dataEncipherment      (3),
+     keyAgreement          (4),
+     keyCertSign           (5),
+     cRLSign               (6)}
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Dusse, et. al.               Informational                     [Page 16]
+
+RFC 2312        S/MIME Version 2 Certificate Handling         March 1998
+
+
+B. References
+
+   [KEYM] PKIX Part 1. At the time of this writing, PKIX is a Work in
+   Progress, but it is expected that there will be standards-track RFCs
+   at some point in the future.
+
+   [MUSTSHOULD] Bradner, S., "Key words for use in RFCs to Indicate
+   Requirement Levels", BCP 1l4, RFC 2119, March 1997.
+
+   [PKCS-1] Kaliski, B., "PKCS #1: RSA Encryption Version 1.5", RFC
+   2313, March 1998.
+
+   [PKCS-7] Kaliski, B., "PKCS #7: Cryptographic Message Syntax Version
+   1.5", RFC 2315, March 1998.
+
+   [PKCS-10] Kaliski, B., "PKCS #10: Certification Request Syntax
+   Version 1.5", RFC 2314, March 1998.
+
+   [RFC-822] Crocker, D., "Standard For The Format Of ARPA Internet Text
+   Messages", STD 11, RFC 822, August 1982.
+
+   [SMIME-MSG] Dusse, S., Hoffman, P., Ramsdell, R., Lundblade, L., and
+   L. Repka, "S/MIME Version 2 Message Specification", RFC 2311, March
+   1998.
+
+   [X.500] ITU-T Recommendation X.500 (1997) | ISO/IEC 9594-1:1997,
+   Information technology - Open Systems Interconnection - The
+   Directory: Overview of concepts, models and services
+
+   [X.501] ITU-T Recommendation X.501 (1997) | ISO/IEC 9594-2:1997,
+   Information technology - Open Systems Interconnection - The
+   Directory: Models
+
+   [X.509] ITU-T Recommendation X.509 (1997) | ISO/IEC 9594-8:1997,
+   Information technology - Open Systems Interconnection - The
+   Directory: Authentication framework
+
+   [X.520] ITU-T Recommendation X.520 (1997) | ISO/IEC 9594-6:1997,
+   Information technology - Open Systems Interconnection - The
+   Directory: Selected attribute types.
+
+
+
+
+
+
+
+
+
+
+
+Dusse, et. al.               Informational                     [Page 17]
+
+RFC 2312        S/MIME Version 2 Certificate Handling         March 1998
+
+
+C. Compatibility with Prior Practice in S/MIME
+
+   S/MIME was originally developed by RSA Data Security, Inc. Many
+   developers implemented S/MIME agents before this document was
+   published. All S/MIME receiving agents SHOULD make every attempt to
+   interoperate with these earlier implementations of S/MIME.
+
+D. Acknowledgements
+
+   Significant contributions to the content of this memo were made by
+   many people, including David Solo, Anil Gangolli, Jeff Thompson, and
+   Lisa Repka.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Dusse, et. al.               Informational                     [Page 18]
+
+RFC 2312        S/MIME Version 2 Certificate Handling         March 1998
+
+
+E. Authors' Addresses
+
+   Steve Dusse
+   RSA Data Security, Inc.
+   100 Marine Parkway, #500
+   Redwood City, CA  94065  USA
+
+   Phone: (415) 595-8782
+   EMail: spock@rsa.com
+
+
+   Paul Hoffman
+   Internet Mail Consortium
+   127 Segre Place
+   Santa Cruz, CA  95060
+
+   Phone: (408) 426-9827
+   EMail: phoffman@imc.org
+
+
+   Blake Ramsdell
+   Worldtalk
+   13122 NE 20th St., Suite C
+   Bellevue, WA 98005
+
+   Phone: (425) 882-8861
+   EMail: blaker@deming.com
+
+
+   Jeff Weinstein
+   Netscape Communications Corporation
+   501 East Middlefield Road
+   Mountain View, CA  94043
+
+   Phone: (415) 254-1900
+   EMail: jsw@netscape.com
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Dusse, et. al.               Informational                     [Page 19]
+
+RFC 2312        S/MIME Version 2 Certificate Handling         March 1998
+
+
+F.  Full Copyright Statement
+
+   Copyright (C) The Internet Society (1998).  All Rights Reserved.
+
+   This document and translations of it may be copied and furnished to
+   others, and derivative works that comment on or otherwise explain it
+   or assist in its implementation may be prepared, copied, published
+   and distributed, in whole or in part, without restriction of any
+   kind, provided that the above copyright notice and this paragraph are
+   included on all such copies and derivative works.  However, this
+   document itself may not be modified in any way, such as by removing
+   the copyright notice or references to the Internet Society or other
+   Internet organizations, except as needed for the purpose of
+   developing Internet standards in which case the procedures for
+   copyrights defined in the Internet Standards process must be
+   followed, or as required to translate it into languages other than
+   English.
+
+   The limited permissions granted above are perpetual and will not be
+   revoked by the Internet Society or its successors or assigns.
+
+   This document and the information contained herein is provided on an
+   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
+   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
+   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
+   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
+   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Dusse, et. al.               Informational                     [Page 20]
+
diff -uNr gmime-1.90.0/rfc/rfc2313.txt gmime/rfc/rfc2313.txt
--- gmime-1.90.0/rfc/rfc2313.txt	Thu Jan  1 01:00:00 1970
+++ gmime/rfc/rfc2313.txt	Tue Dec  5 07:50:00 2000
@@ -0,0 +1,1067 @@
+
+
+
+
+
+
+Network Working Group                                      B. Kaliski
+Request for Comments: 2313                      RSA Laboratories East
+Category: Informational                                    March 1998
+
+
+                        PKCS #1: RSA Encryption
+                              Version 1.5
+
+Status of this Memo
+
+   This memo provides information for the Internet community.  It does
+   not specify an Internet standard of any kind.  Distribution of this
+   memo is unlimited.
+
+Copyright Notice
+
+   Copyright (C) The Internet Society (1998).  All Rights Reserved.
+
+Overview
+
+   This document describes a method for encrypting data using the RSA
+   public-key cryptosystem.
+
+1. Scope
+
+   This document describes a method for encrypting data using the RSA
+   public-key cryptosystem. Its intended use is in the construction of
+   digital signatures and digital envelopes, as described in PKCS #7:
+
+        o    For digital signatures, the content to be signed
+             is first reduced to a message digest with a
+             message-digest algorithm (such as MD5), and then
+             an octet string containing the message digest is
+             encrypted with the RSA private key of the signer
+             of the content. The content and the encrypted
+             message digest are represented together according
+             to the syntax in PKCS #7 to yield a digital
+             signature. This application is compatible with
+             Privacy-Enhanced Mail (PEM) methods.
+
+        o    For digital envelopes, the content to be enveloped
+             is first encrypted under a content-encryption key
+             with a content-encryption algorithm (such as DES),
+             and then the content-encryption key is encrypted
+             with the RSA public keys of the recipients of the
+             content. The encrypted content and the encrypted
+
+
+
+
+
+Kaliski                      Informational                      [Page 1]
+
+RFC 2313                PKCS #1: RSA Encryption               March 1998
+
+
+             content-encryption key are represented together
+             according to the syntax in PKCS #7 to yield a
+             digital envelope. This application is also
+             compatible with PEM methods.
+
+   The document also describes a syntax for RSA public keys and private
+   keys. The public-key syntax would be used in certificates; the
+   private-key syntax would be used typically in PKCS #8 private-key
+   information. The public-key syntax is identical to that in both X.509
+   and Privacy-Enhanced Mail.  Thus X.509/PEM RSA keys can be used in
+   this document.
+
+   The document also defines three signature algorithms for use in
+   signing X.509/PEM certificates and certificate-revocation lists, PKCS
+   #6 extended certificates, and other objects employing digital
+   signatures such as X.401 message tokens.
+
+   Details on message-digest and content-encryption algorithms are
+   outside the scope of this document, as are details on sources of the
+   pseudorandom bits required by certain methods in this document.
+
+2. References
+
+   FIPS PUB 46-1  National Bureau of Standards. FIPS PUB 46-1:
+             Data Encryption Standard. January 1988.
+
+   PKCS #6   RSA Laboratories. PKCS #6: Extended-Certificate
+             Syntax. Version 1.5, November 1993.
+
+   PKCS #7   RSA Laboratories. PKCS #7: Cryptographic Message
+             Syntax. Version 1.5, November 1993.
+
+   PKCS #8   RSA Laboratories. PKCS #8: Private-Key Information
+             Syntax. Version 1.2, November 1993.
+
+   RFC 1319  Kaliski, B., "The MD2 Message-Digest
+             Algorithm," RFC 1319, April 1992.
+
+   RFC 1320  Rivest, R., "The MD4 Message-Digest
+             Algorithm," RFC 1320, April 1992.
+
+   RFC 1321  Rivest, R., "The MD5 Message-Digest
+             Algorithm," RFC 1321, April 1992.
+
+   RFC 1423  Balenson, D., "Privacy Enhancement for
+             Internet Electronic Mail: Part III: Algorithms,
+             Modes, and Identifiers," RFC 1423, February 1993.
+
+
+
+
+Kaliski                      Informational                      [Page 2]
+
+RFC 2313                PKCS #1: RSA Encryption               March 1998
+
+
+   X.208     CCITT. Recommendation X.208: Specification of
+             Abstract Syntax Notation One (ASN.1). 1988.
+
+   X.209     CCITT. Recommendation X.209: Specification of
+             Basic Encoding Rules for Abstract Syntax Notation
+             One (ASN.1). 1988.
+
+   X.411     CCITT. Recommendation X.411: Message Handling
+             Systems: Message Transfer System: Abstract Service
+             Definition and Procedures.1988.
+
+   X.509     CCITT. Recommendation X.509: The Directory--
+             Authentication Framework. 1988.
+
+   [dBB92]   B. den Boer and A. Bosselaers. An attack on the
+             last two rounds of MD4. In J. Feigenbaum, editor,
+             Advances in Cryptology---CRYPTO '91 Proceedings,
+             volume 576 of Lecture Notes in Computer Science,
+             pages 194-203. Springer-Verlag, New York, 1992.
+
+   [dBB93]   B. den Boer  and A. Bosselaers. Collisions for the
+             compression function of MD5. Presented at
+             EUROCRYPT '93 (Lofthus, Norway, May 24-27, 1993).
+
+   [DO86]    Y. Desmedt and A.M. Odlyzko. A chosen text attack
+             on the RSA cryptosystem and some discrete
+             logarithm schemes. In H.C. Williams, editor,
+             Advances in Cryptology---CRYPTO '85 Proceedings,
+             volume 218 of Lecture Notes in Computer Science,
+             pages 516-521. Springer-Verlag, New York, 1986.
+
+   [Has88]   Johan Hastad. Solving simultaneous modular
+             equations. SIAM Journal on Computing,
+             17(2):336-341, April 1988.
+
+   [IM90]    Colin I'Anson and Chris Mitchell. Security defects
+             in CCITT Recommendation X.509--The directory
+             authentication framework. Computer Communications
+             Review, :30-34, April 1990.
+
+   [Mer90]   R.C. Merkle. Note on MD4. Unpublished manuscript,
+             1990.
+
+   [Mil76]   G.L. Miller. Riemann's hypothesis and tests for
+             primality. Journal of Computer and Systems
+             Sciences, 13(3):300-307, 1976.
+
+
+
+
+
+Kaliski                      Informational                      [Page 3]
+
+RFC 2313                PKCS #1: RSA Encryption               March 1998
+
+
+   [QC82]    J.-J. Quisquater and C. Couvreur. Fast
+             decipherment algorithm for RSA public-key
+             cryptosystem. Electronics Letters, 18(21):905-907,
+             October 1982.
+
+   [RSA78]   R.L. Rivest, A. Shamir, and L. Adleman. A method
+             for obtaining digital signatures and public-key
+             cryptosystems. Communications of the ACM,
+             21(2):120-126, February 1978.
+
+3. Definitions
+
+   For the purposes of this document, the following definitions apply.
+
+   AlgorithmIdentifier: A type that identifies an algorithm (by object
+   identifier) and associated parameters. This type is defined in X.509.
+
+   ASN.1: Abstract Syntax Notation One, as defined in X.208.
+
+   BER: Basic Encoding Rules, as defined in X.209.
+
+   DES: Data Encryption Standard, as defined in FIPS PUB 46-1.
+
+   MD2: RSA Data Security, Inc.'s MD2 message-digest algorithm, as
+   defined in RFC 1319.
+
+   MD4: RSA Data Security, Inc.'s MD4 message-digest algorithm, as
+   defined in RFC 1320.
+
+   MD5: RSA Data Security, Inc.'s MD5 message-digest algorithm, as
+   defined in RFC 1321.
+
+   modulus: Integer constructed as the product of two primes.
+
+   PEM: Internet Privacy-Enhanced Mail, as defined in RFC 1423 and
+   related documents.
+
+   RSA: The RSA public-key cryptosystem, as defined in [RSA78].
+
+   private key: Modulus and private exponent.
+
+   public key: Modulus and public exponent.
+
+4. Symbols and abbreviations
+
+   Upper-case symbols (e.g., BT) denote octet strings and bit strings
+   (in the case of the signature S); lower-case symbols (e.g., c) denote
+   integers.
+
+
+
+Kaliski                      Informational                      [Page 4]
+
+RFC 2313                PKCS #1: RSA Encryption               March 1998
+
+
+   ab   hexadecimal octet value  c    exponent
+   BT   block type               d    private exponent
+   D    data                     e    public exponent
+   EB   encryption block         k    length of modulus in
+                                        octets
+   ED   encrypted data           n    modulus
+   M    message                  p, q  prime factors of modulus
+   MD   message digest           x    integer encryption block
+   MD'  comparative message      y    integer encrypted data
+          digest
+   PS   padding string           mod n  modulo n
+   S    signature                X || Y  concatenation of X, Y
+                                 ||X||  length in octets of X
+5. General overview
+
+   The next six sections specify key generation, key syntax, the
+   encryption process, the decryption process, signature algorithms, and
+   object identifiers.
+
+   Each entity shall generate a pair of keys: a public key and a private
+   key. The encryption process shall be performed with one of the keys
+   and the decryption process shall be performed with the other key.
+   Thus the encryption process can be either a public-key operation or a
+   private-key operation, and so can the decryption process. Both
+   processes transform an octet string to another octet string. The
+   processes are inverses of each other if one process uses an entity's
+   public key and the other process uses the same entity's private key.
+
+   The encryption and decryption processes can implement either the
+   classic RSA transformations, or variations with padding.
+
+6. Key generation
+
+   This section describes RSA key generation.
+
+   Each entity shall select a positive integer e as its public exponent.
+
+   Each entity shall privately and randomly select two distinct odd
+   primes p and q such that (p-1) and e have no common divisors, and
+   (q-1) and e have no common divisors.
+
+   The public modulus n shall be the product of the private prime
+   factors p and q:
+
+                                 n = pq .
+
+   The private exponent shall be a positive integer d such that de-1 is
+   divisible by both p-1 and q-1.
+
+
+
+Kaliski                      Informational                      [Page 5]
+
+RFC 2313                PKCS #1: RSA Encryption               March 1998
+
+
+   The length of the modulus n in octets is the integer k satisfying
+
+                        2^(8(k-1)) <= n < 2^(8k) .
+
+   The length k of the modulus must be at least 12 octets to accommodate
+   the block formats in this document (see Section 8).
+
+   Notes.
+
+        1.   The public exponent may be standardized in
+             specific applications. The values 3 and F4 (65537) may have
+             some practical advantages, as noted in X.509 Annex C.
+
+        2.   Some additional conditions on the choice of primes
+             may well be taken into account in order to deter
+             factorization of the modulus. These security conditions
+             fall outside the scope of this document. The lower bound on
+             the length k is to accommodate the block formats, not for
+             security.
+
+7. Key syntax
+
+   This section gives the syntax for RSA public and private keys.
+
+7.1 Public-key syntax
+
+   An RSA public key shall have ASN.1 type RSAPublicKey:
+
+   RSAPublicKey ::= SEQUENCE {
+     modulus INTEGER, -- n
+     publicExponent INTEGER -- e }
+
+   (This type is specified in X.509 and is retained here for
+   compatibility.)
+
+   The fields of type RSAPublicKey have the following meanings:
+
+        o    modulus is the modulus n.
+
+        o    publicExponent is the public exponent e.
+
+
+
+
+
+
+
+
+
+
+
+Kaliski                      Informational                      [Page 6]
+
+RFC 2313                PKCS #1: RSA Encryption               March 1998
+
+
+7.2 Private-key syntax
+
+   An RSA private key shall have ASN.1 type RSAPrivateKey:
+
+   RSAPrivateKey ::= SEQUENCE {
+     version Version,
+     modulus INTEGER, -- n
+     publicExponent INTEGER, -- e
+     privateExponent INTEGER, -- d
+     prime1 INTEGER, -- p
+     prime2 INTEGER, -- q
+     exponent1 INTEGER, -- d mod (p-1)
+     exponent2 INTEGER, -- d mod (q-1)
+     coefficient INTEGER -- (inverse of q) mod p }
+
+   Version ::= INTEGER
+
+   The fields of type RSAPrivateKey have the following meanings:
+
+        o    version is the version number, for compatibility
+             with future revisions of this document. It shall
+             be 0 for this version of the document.
+
+        o    modulus is the modulus n.
+
+        o    publicExponent is the public exponent e.
+
+        o    privateExponent is the private exponent d.
+
+        o    prime1 is the prime factor p of n.
+
+        o    prime2 is the prime factor q of n.
+
+        o    exponent1 is d mod (p-1).
+
+        o    exponent2 is d mod (q-1).
+
+        o    coefficient is the Chinese Remainder Theorem
+             coefficient q-1 mod p.
+
+   Notes.
+
+        1.   An RSA private key logically consists of only the
+             modulus n and the private exponent d. The presence of the
+             values p, q, d mod (p-1), d mod (p-1), and q-1 mod p is
+             intended for efficiency, as Quisquater and Couvreur have
+             shown [QC82]. A private-key syntax that does not include
+
+
+
+
+Kaliski                      Informational                      [Page 7]
+
+RFC 2313                PKCS #1: RSA Encryption               March 1998
+
+
+             all the extra values can be converted readily to the syntax
+             defined here, provided the public key is known, according
+             to a result by Miller [Mil76].
+
+        2.   The presence of the public exponent e is intended
+             to make it straightforward to derive a public key from the
+             private key.
+
+8. Encryption process
+
+   This section describes the RSA encryption process.
+
+   The encryption process consists of four steps: encryption- block
+   formatting, octet-string-to-integer conversion, RSA computation, and
+   integer-to-octet-string conversion. The input to the encryption
+   process shall be an octet string D, the data; an integer n, the
+   modulus; and an integer c, the exponent. For a public-key operation,
+   the integer c shall be an entity's public exponent e; for a private-
+   key operation, it shall be an entity's private exponent d. The output
+   from the encryption process shall be an octet string ED, the
+   encrypted data.
+
+   The length of the data D shall not be more than k-11 octets, which is
+   positive since the length k of the modulus is at least 12 octets.
+   This limitation guarantees that the length of the padding string PS
+   is at least eight octets, which is a security condition.
+
+   Notes.
+
+        1.   In typical applications of this document to
+             encrypt content-encryption keys and message digests, one
+             would have ||D|| <= 30. Thus the length of the RSA modulus
+             will need to be at least 328 bits (41 octets), which is
+             reasonable and consistent with security recommendations.
+
+        2.   The encryption process does not provide an
+             explicit integrity check to facilitate error detection
+             should the encrypted data be corrupted in transmission.
+             However, the structure of the encryption block guarantees
+             that the probability that corruption is undetected is less
+             than 2-16, which is an upper bound on the probability that
+             a random encryption block looks like block type 02.
+
+        3.   Application of private-key operations as defined
+             here to data other than an octet string containing a
+             message digest is not recommended and is subject to further
+             study.
+
+
+
+
+Kaliski                      Informational                      [Page 8]
+
+RFC 2313                PKCS #1: RSA Encryption               March 1998
+
+
+        4.   This document may be extended to handle data of
+             length more than k-11 octets.
+
+8.1 Encryption-block formatting
+
+   A block type BT, a padding string PS, and the data D shall be
+   formatted into an octet string EB, the encryption block.
+
+              EB = 00 || BT || PS || 00 || D .           (1)
+
+   The block type BT shall be a single octet indicating the structure of
+   the encryption block. For this version of the document it shall have
+   value 00, 01, or 02. For a private- key operation, the block type
+   shall be 00 or 01. For a public-key operation, it shall be 02.
+
+   The padding string PS shall consist of k-3-||D|| octets. For block
+   type 00, the octets shall have value 00; for block type 01, they
+   shall have value FF; and for block type 02, they shall be
+   pseudorandomly generated and nonzero. This makes the length of the
+   encryption block EB equal to k.
+
+   Notes.
+
+        1.   The leading 00 octet ensures that the encryption
+             block, converted to an integer, is less than the modulus.
+
+        2.   For block type 00, the data D must begin with a
+             nonzero octet or have known length so that the encryption
+             block can be parsed unambiguously. For block types 01 and
+             02, the encryption block can be parsed unambiguously since
+             the padding string PS contains no octets with value 00 and
+             the padding string is separated from the data D by an octet
+             with value 00.
+
+        3.   Block type 01 is recommended for private-key
+             operations. Block type 01 has the property that the
+             encryption block, converted to an integer, is guaranteed to
+             be large, which prevents certain attacks of the kind
+             proposed by Desmedt and Odlyzko [DO86].
+
+        4.   Block types 01 and 02 are compatible with PEM RSA
+             encryption of content-encryption keys and message digests
+             as described in RFC 1423.
+
+
+
+
+
+
+
+
+Kaliski                      Informational                      [Page 9]
+
+RFC 2313                PKCS #1: RSA Encryption               March 1998
+
+
+        5.   For block type 02, it is recommended that the
+             pseudorandom octets be generated independently for each
+             encryption process, especially if the same data is input to
+             more than one encryption process.  Hastad's results [Has88]
+             motivate this recommendation.
+
+        6.   For block type 02, the padding string is at least
+             eight octets long, which is a security condition for
+             public-key operations that prevents an attacker from
+             recoving data by trying all possible encryption blocks. For
+             simplicity, the minimum length is the same for block type
+             01.
+
+        7.   This document may be extended in the future to
+             include other block types.
+
+8.2 Octet-string-to-integer conversion
+
+   The encryption block EB shall be converted to an integer x, the
+   integer encryption block. Let EB1, ..., EBk be the octets of EB from
+   first to last. Then the integer x shall satisfy
+
+                                     k
+                x =  SUM  2^(8(k-i)) EBi .              (2)
+                                   i = 1
+
+   In other words, the first octet of EB has the most significance in
+   the integer and the last octet of EB has the least significance.
+
+   Note. The integer encryption block x satisfies 0 <= x <  n since EB1
+   = 00 and 2^(8(k-1)) <= n.
+
+8.3 RSA computation
+
+   The integer encryption block x shall be raised to the power c modulo
+   n to give an integer y, the integer encrypted data.
+
+                       y = x^c mod n,  0 <= y < n .
+
+   This is the classic RSA computation.
+
+8.4 Integer-to-octet-string conversion
+
+   The integer encrypted data y shall be converted to an octet string ED
+   of length k, the encrypted data. The encrypted data ED shall satisfy
+
+
+
+
+
+
+Kaliski                      Informational                     [Page 10]
+
+RFC 2313                PKCS #1: RSA Encryption               March 1998
+
+
+                                     k
+                y =  SUM  2^(8(k-i)) EDi .              (3)
+                                   i = 1
+
+   where ED1, ..., EDk are the octets of ED from first to last.
+
+   In other words, the first octet of ED has the most significance in
+   the integer and the last octet of ED has the least significance.
+
+9. Decryption process
+
+   This section describes the RSA decryption process.
+
+   The decryption process consists of four steps: octet-string-to-
+   integer conversion, RSA computation, integer-to-octet-string
+   conversion, and encryption-block parsing. The input to the decryption
+   process shall be an octet string ED, the encrypted data; an integer
+   n, the modulus; and an integer c, the exponent. For a public-key
+   operation, the integer c shall be an entity's public exponent e; for
+   a private-key operation, it shall be an entity's private exponent d.
+   The output from the decryption process shall be an octet string D,
+   the data.
+
+   It is an error if the length of the encrypted data ED is not k.
+
+   For brevity, the decryption process is described in terms of the
+   encryption process.
+
+9.1 Octet-string-to-integer conversion
+
+   The encrypted data ED shall be converted to an integer y, the integer
+   encrypted data, according to Equation (3).
+
+   It is an error if the integer encrypted data y does not satisfy 0 <=
+   y < n.
+
+9.2 RSA computation
+
+   The integer encrypted data y shall be raised to the power c modulo n
+   to give an integer x, the integer encryption block.
+
+                       x = y^c mod n,  0 <= x < n .
+
+   This is the classic RSA computation.
+
+
+
+
+
+
+
+Kaliski                      Informational                     [Page 11]
+
+RFC 2313                PKCS #1: RSA Encryption               March 1998
+
+
+9.3 Integer-to-octet-string conversion
+
+   The integer encryption block x shall be converted to an octet string
+   EB of length k, the encryption block, according to Equation (2).
+
+9.4 Encryption-block parsing
+
+   The encryption block EB shall be parsed into a block type BT, a
+   padding string PS, and the data D according to Equation (1).
+
+   It is an error if any of the following conditions occurs:
+
+        o    The encryption block EB cannot be parsed
+             unambiguously (see notes to Section 8.1).
+
+        o    The padding string PS consists of fewer than eight
+             octets, or is inconsistent with the block type BT.
+
+        o    The decryption process is a public-key operation
+             and the block type BT is not 00 or 01, or the decryption
+             process is a private-key operation and the block type is
+             not 02.
+
+10. Signature algorithms
+
+   This section defines three signature algorithms based on the RSA
+   encryption process described in Sections 8 and 9. The intended use of
+   the signature algorithms is in signing X.509/PEM certificates and
+   certificate-revocation lists, PKCS #6 extended certificates, and
+   other objects employing digital signatures such as X.401 message
+   tokens. The algorithms are not intended for use in constructing
+   digital signatures in PKCS #7. The first signature algorithm
+   (informally, "MD2 with RSA") combines the MD2 message-digest
+   algorithm with RSA, the second (informally, "MD4 with RSA") combines
+   the MD4 message-digest algorithm with RSA, and the third (informally,
+   "MD5 with RSA") combines the MD5 message-digest algorithm with RSA.
+
+   This section describes the signature process and the verification
+   process for the two algorithms. The "selected" message-digest
+   algorithm shall be either MD2 or MD5, depending on the signature
+   algorithm. The signature process shall be performed with an entity's
+   private key and the verification process shall be performed with an
+   entity's public key. The signature process transforms an octet string
+   (the message) to a bit string (the signature); the verification
+   process determines whether a bit string (the signature) is the
+   signature of an octet string (the message).
+
+
+
+
+
+Kaliski                      Informational                     [Page 12]
+
+RFC 2313                PKCS #1: RSA Encryption               March 1998
+
+
+   Note. The only difference between the signature algorithms defined
+   here and one of the the methods by which signatures (encrypted
+   message digests) are constructed in PKCS #7 is that signatures here
+   are represented here as bit strings, for consistency with the X.509
+   SIGNED macro. In PKCS #7 encrypted message digests are octet strings.
+
+10.1 Signature process
+
+   The signature process consists of four steps: message digesting, data
+   encoding, RSA encryption, and octet-string-to-bit-string conversion.
+   The input to the signature process shall be an octet string M, the
+   message; and a signer's private key. The output from the signature
+   process shall be a bit string S, the signature.
+
+10.1.1 Message digesting
+
+   The message M shall be digested with the selected message- digest
+   algorithm to give an octet string MD, the message digest.
+
+10.1.2 Data encoding
+
+   The message digest MD and a message-digest algorithm identifier shall
+   be combined into an ASN.1 value of type DigestInfo, described below,
+   which shall be BER-encoded to give an octet string D, the data.
+
+   DigestInfo ::= SEQUENCE {
+     digestAlgorithm DigestAlgorithmIdentifier,
+     digest Digest }
+
+   DigestAlgorithmIdentifier ::= AlgorithmIdentifier
+
+   Digest ::= OCTET STRING
+
+   The fields of type DigestInfo have the following meanings:
+
+        o    digestAlgorithm identifies the message-digest
+             algorithm (and any associated parameters). For
+             this application, it should identify the selected
+             message-digest algorithm, MD2, MD4 or MD5. For
+             reference, the relevant object identifiers are the
+             following:
+
+
+
+
+
+
+
+
+
+
+Kaliski                      Informational                     [Page 13]
+
+RFC 2313                PKCS #1: RSA Encryption               March 1998
+
+
+   md2 OBJECT IDENTIFIER ::=
+
+     { iso(1) member-body(2) US(840) rsadsi(113549)
+         digestAlgorithm(2) 2 } md4 OBJECT IDENTIFIER ::=
+     { iso(1) member-body(2) US(840) rsadsi(113549)
+         digestAlgorithm(2) 4 } md5 OBJECT IDENTIFIER ::=
+     { iso(1) member-body(2) US(840) rsadsi(113549)
+         digestAlgorithm(2) 5 }
+
+             For these object identifiers, the parameters field of the
+             digestAlgorithm value should be NULL.
+
+        o    digest is the result of the message-digesting
+             process, i.e., the message digest MD.
+
+   Notes.
+
+        1.   A message-digest algorithm identifier is included
+             in the DigestInfo value to limit the damage resulting from
+             the compromise of one message-digest algorithm. For
+             instance, suppose an adversary were able to find messages
+             with a given MD2 message digest.  That adversary might try
+             to forge a signature on a message by finding an innocuous-
+             looking message with the same MD2 message digest, and
+             coercing a signer to sign the innocuous-looking message.
+             This attack would succeed only if the signer used MD2. If
+             the DigestInfo value contained only the message digest,
+             however, an adversary could attack signers that use any
+             message digest.
+
+        2.   Although it may be claimed that the use of a
+             SEQUENCE type violates the literal statement in the X.509
+             SIGNED and SIGNATURE macros that a signature is an
+             ENCRYPTED OCTET STRING (as opposed to ENCRYPTED SEQUENCE),
+             such a literal interpretation need not be required, as
+             I'Anson and Mitchell point out [IM90].
+
+        3.  No reason is known that MD4 would not be
+             for very high security digital signature schemes, but
+             because MD4 was designed to be exceptionally fast, it is
+             "at the edge" in terms of risking successful cryptanalytic
+             attack.  A message-digest algorithm can be considered
+             "broken" if someone can find a collision: two messages with
+             the same digest. While collisions have been found in
+             variants of MD4 with only two digesting "rounds"
+
+
+
+
+
+
+Kaliski                      Informational                     [Page 14]
+
+RFC 2313                PKCS #1: RSA Encryption               March 1998
+
+
+             [Mer90][dBB92], none have been found in MD4 itself, which
+             has three rounds. After further critical review, it may be
+             appropriate to consider MD4 for very high security
+             applications.
+
+             MD5, which has four rounds and is proportionally slower
+             than MD4, is recommended until the completion of MD4's
+             review. The reported "pseudocollisions" in MD5's internal
+             compression function [dBB93] do not appear to have any
+             practical impact on  MD5's security.
+
+             MD2, the slowest of the three, has the most conservative
+             design. No attacks on MD2 have been published.
+
+10.1.3 RSA encryption
+
+   The data D shall be encrypted with the signer's RSA private key as
+   described in Section 7 to give an octet string ED, the encrypted
+   data. The block type shall be 01. (See Section 8.1.)
+
+10.1.4 Octet-string-to-bit-string conversion
+
+   The encrypted data ED shall be converted into a bit string S, the
+   signature. Specifically, the most significant bit of the first octet
+   of the encrypted data shall become the first bit of the signature,
+   and so on through the least significant bit of the last octet of the
+   encrypted data, which shall become the last bit of the signature.
+
+   Note. The length in bits of the signature S is a multiple of eight.
+
+10.2 Verification process
+
+   The verification process for both signature algorithms consists of
+   four steps: bit-string-to-octet-string conversion, RSA decryption,
+   data decoding, and message digesting and comparison. The input to the
+   verification process shall be an octet string M, the message; a
+   signer's public key; and a bit string S, the signature. The output
+   from the verification process shall be an indication of success or
+   failure.
+
+10.2.1 Bit-string-to-octet-string conversion
+
+   The signature S shall be converted into an octet string ED, the
+   encrypted data. Specifically, assuming that the length in bits of the
+   signature S is a multiple of eight, the first bit of the signature
+   shall become the most significant bit of the first octet of the
+
+
+
+
+
+Kaliski                      Informational                     [Page 15]
+
+RFC 2313                PKCS #1: RSA Encryption               March 1998
+
+
+   encrypted data, and so on through the last bit of the signature,
+   which shall become the least significant bit of the last octet of the
+   encrypted data.
+
+   It is an error if the length in bits of the signature S is not a
+   multiple of eight.
+
+10.2.2 RSA decryption
+
+   The encrypted data ED shall be decrypted with the signer's RSA public
+   key as described in Section 8 to give an octet string D, the data.
+
+   It is an error if the block type recovered in the decryption process
+   is not 01. (See Section 9.4.)
+
+10.2.3 Data decoding
+
+   The data D shall be BER-decoded to give an ASN.1 value of type
+   DigestInfo, which shall be separated into a message digest MD and a
+   message-digest algorithm identifier. The message-digest algorithm
+   identifier shall determine the "selected" message-digest algorithm
+   for the next step.
+
+   It is an error if the message-digest algorithm identifier does not
+   identify the MD2, MD4 or MD5 message-digest algorithm.
+
+10.2.4 Message digesting and comparison
+
+   The message M shall be digested with the selected message-digest
+   algorithm to give an octet string MD', the comparative message
+   digest. The verification process shall succeed if the comparative
+   message digest MD' is the same as the message digest MD, and the
+   verification process shall fail otherwise.
+
+11. Object identifiers
+
+   This document defines five object identifiers: pkcs-1, rsaEncryption,
+   md2WithRSAEncryption, md4WithRSAEncryption, and md5WithRSAEncryption.
+
+   The object identifier pkcs-1 identifies this document.
+
+   pkcs-1 OBJECT IDENTIFIER ::=
+
+     { iso(1) member-body(2) US(840) rsadsi(113549)
+         pkcs(1) 1 }
+
+
+
+
+
+
+Kaliski                      Informational                     [Page 16]
+
+RFC 2313                PKCS #1: RSA Encryption               March 1998
+
+
+   The object identifier rsaEncryption identifies RSA public and private
+   keys as defined in Section 7 and the RSA encryption and decryption
+   processes defined in Sections 8 and 9.
+
+   rsaEncryption OBJECT IDENTIFIER ::= { pkcs-1 1 }
+
+   The rsaEncryption object identifier is intended to be used in the
+   algorithm field of a value of type AlgorithmIdentifier. The
+   parameters field of that type, which has the algorithm-specific
+   syntax ANY DEFINED BY algorithm, would have ASN.1 type NULL for this
+   algorithm.
+
+   The object identifiers md2WithRSAEncryption, md4WithRSAEncryption,
+   md5WithRSAEncryption, identify, respectively, the "MD2 with RSA,"
+   "MD4 with RSA," and "MD5 with RSA" signature and verification
+   processes defined in Section 10.
+
+   md2WithRSAEncryption OBJECT IDENTIFIER ::= { pkcs-1 2 }
+   md4WithRSAEncryption OBJECT IDENTIFIER ::= { pkcs-1 3 }
+   md5WithRSAEncryption OBJECT IDENTIFIER ::= { pkcs-1 4 }
+
+   These object identifiers are intended to be used in the algorithm
+   field of a value of type AlgorithmIdentifier. The parameters field of
+   that type, which has the algorithm-specific syntax ANY DEFINED BY
+   algorithm, would have ASN.1 type NULL for these algorithms.
+
+   Note. X.509's object identifier rsa also identifies RSA public keys
+   as defined in Section 7, but does not identify private keys, and
+   identifies different encryption and decryption processes. It is
+   expected that some applications will identify public keys by rsa.
+   Such public keys are compatible with this document; an rsaEncryption
+   process under an rsa public key is the same as the rsaEncryption
+   process under an rsaEncryption public key.
+
+Security Considerations
+
+   Security issues are discussed throughout this memo.
+
+Revision history
+
+   Versions 1.0-1.3
+
+   Versions 1.0-1.3 were distributed to participants in RSA Data
+   Security, Inc.'s Public-Key Cryptography Standards meetings in
+   February and March 1991.
+
+
+
+
+
+
+Kaliski                      Informational                     [Page 17]
+
+RFC 2313                PKCS #1: RSA Encryption               March 1998
+
+
+   Version 1.4
+
+   Version 1.4 is part of the June 3, 1991 initial public release of
+   PKCS. Version 1.4 was published as NIST/OSI Implementors' Workshop
+   document SEC-SIG-91-18.
+
+   Version 1.5
+
+   Version 1.5 incorporates several editorial changes, including updates
+   to the references and the addition of a revision history. The
+   following substantive changes were made:
+
+        o    Section 10: "MD4 with RSA" signature and
+             verification processes are added.
+
+        o    Section 11: md4WithRSAEncryption object identifier
+             is added.
+
+   Supersedes June 3, 1991 version, which was also published as NIST/OSI
+   Implementors' Workshop document SEC-SIG-91-18.
+
+Acknowledgements
+
+   This document is based on a contribution of RSA Laboratories, a
+   division of RSA Data Security, Inc.  Any substantial use of the text
+   from this document must acknowledge RSA Data Security, Inc. RSA Data
+   Security, Inc.  requests that all material mentioning or referencing
+   this document identify this as "RSA Data Security, Inc. PKCS #1".
+
+Author's Address
+
+   Burt Kaliski
+   RSA Laboratories East
+   20 Crosby Drive
+   Bedford, MA  01730
+
+   Phone: (617) 687-7000
+   EMail: burt@rsa.com
+
+
+
+
+
+
+
+
+
+
+
+
+
+Kaliski                      Informational                     [Page 18]
+
+RFC 2313                PKCS #1: RSA Encryption               March 1998
+
+
+Full Copyright Statement
+
+   Copyright (C) The Internet Society (1998).  All Rights Reserved.
+
+   This document and translations of it may be copied and furnished to
+   others, and derivative works that comment on or otherwise explain it
+   or assist in its implementation may be prepared, copied, published
+   and distributed, in whole or in part, without restriction of any
+   kind, provided that the above copyright notice and this paragraph are
+   included on all such copies and derivative works.  However, this
+   document itself may not be modified in any way, such as by removing
+   the copyright notice or references to the Internet Society or other
+   Internet organizations, except as needed for the purpose of
+   developing Internet standards in which case the procedures for
+   copyrights defined in the Internet Standards process must be
+   followed, or as required to translate it into languages other than
+   English.
+
+   The limited permissions granted above are perpetual and will not be
+   revoked by the Internet Society or its successors or assigns.
+
+   This document and the information contained herein is provided on an
+   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
+   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
+   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
+   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
+   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Kaliski                      Informational                     [Page 19]
+
diff -uNr gmime-1.90.0/rfc/rfc2314.txt gmime/rfc/rfc2314.txt
--- gmime-1.90.0/rfc/rfc2314.txt	Thu Jan  1 01:00:00 1970
+++ gmime/rfc/rfc2314.txt	Tue Dec  5 07:50:00 2000
@@ -0,0 +1,451 @@
+
+
+
+
+
+
+Network Working Group                                       B. Kaliski
+Request for Comments: 2314                       RSA Laboratories East
+Category: Informational                                     March 1998
+
+
+                 PKCS #10: Certification Request Syntax
+                              Version 1.5
+
+Status of this Memo
+
+   This memo provides information for the Internet community.  It does
+   not specify an Internet standard of any kind.  Distribution of this
+   memo is unlimited.
+
+Copyright Notice
+
+   Copyright (C) The Internet Society (1998).  All Rights Reserved.
+
+Overview
+
+   This document describes a syntax for certification requests.
+
+1. Scope
+
+   A certification request consists of a distinguished name, a public
+   key, and optionally a set of attributes, collectively signed by the
+   entity requesting certification. Certification requests are sent to a
+   certification authority, who transforms the request to an X.509
+   public-key certificate, or a PKCS #6 extended certificate. (In what
+   form the certification authority returns the newly signed certificate
+   is outside the scope of this document. A PKCS #7 message is one
+   possibility.)
+
+   The intention of including a set of attributes is twofold: to provide
+   other information about a given entity, such as the postal address to
+   which the signed certificate should be returned if electronic mail is
+   not available, or a "challenge password" by which the entity may
+   later request certificate revocation; and to provide attributes for a
+   PKCS #6 extended certificate. A non-exhaustive list of attributes is
+   given in PKCS #9.
+
+   Certification authorities may also require non-electronic forms of
+   request and may return non-electronic replies. It is expected that
+   descriptions of such forms, which are outside the scope of this
+   document, will be available from the certification authority.
+
+
+
+
+
+
+Kaliski                      Informational                      [Page 1]
+
+RFC 2314         PKCS #10: Certification Request Syntax       March 1998
+
+
+   The preliminary intended application of this document is to support
+   PKCS #7 cryptographic messages, but is expected that other
+   applications will be developed.
+
+2. References
+
+   PKCS #1   RSA Laboratories. PKCS #1: RSA Encryption
+             Standard. Version 1.5, November 1993.
+
+   PKCS #6   RSA Laboratories. PKCS #6: Extended-Certificate
+             Syntax. Version 1.5, November 1993.
+
+   PKCS #7   RSA Laboratories. PKCS #7: Cryptographic Message
+             Syntax. Version 1.5, November 1993.
+
+   PKCS #9   RSA Laboratories. PKCS #9: Selected Attribute
+             Types. Version 1.1, November 1993.
+
+   RFC 1424  Kaliski, B., "Privacy Enhancement for
+             Internet Electronic Mail: Part IV: Key
+             Certification and Related Services," RFC 1424,
+             February 1993.
+
+   X.208     CCITT. Recommendation X.208: Specification of
+             Abstract Syntax Notation One (ASN.1). 1988.
+
+   X.209     CCITT. Recommendation X.209: Specification of
+             Basic Encoding Rules for Abstract Syntax Notation
+             One (ASN.1). 1988.
+
+   X.500     CCITT. Recommendation X.500: The Directory--
+             Overview of Concepts, Models and
+             Services. 1988.
+
+   X.501     CCITT. Recommendation X.501: The Directory--
+             Models. 1988.
+
+   X.509     CCITT. Recommendation X.509: The Directory--
+             Authentication Framework. 1988.
+
+3. Definitions
+
+   For the purposes of this document, the following definitions apply.
+
+   AlgorithmIdentifier: A type that identifies an algorithm (by object
+   identifier) and any associated parameters. This type is defined in
+   X.509.
+
+
+
+
+Kaliski                      Informational                      [Page 2]
+
+RFC 2314         PKCS #10: Certification Request Syntax       March 1998
+
+
+   Attribute: A type that contains an attribute type (specified by
+   object identifier) and one or more attribute values. This type is
+   defined in X.501.
+
+   ASN.1: Abstract Syntax Notation One, as defined in X.208.
+
+   BER: Basic Encoding Rules, as defined in X.209.
+
+   Certificate: A type that binds an entity's distinguished name to a
+   public key with a digital signature. This type is defined in X.509.
+   This type also contains the distinguished name of the certificate
+   issuer (the signer), an issuer- specific serial number, the issuer's
+   signature algorithm identifier, and a validity period.
+
+   DER: Distinguished Encoding Rules for ASN.1, as defined in X.509,
+   Section 8.7.
+
+   Name: A type that uniquely identifies or "distinguishes" objects in a
+   X.500 directory. This type is defined in X.501.  In an X.509
+   certificate, the type identifies the certificate issuer and the
+   entity whose public key is certified.
+
+4. Symbols and abbreviations
+
+   No symbols or abbreviations are defined in this document.
+
+5. General overview
+
+   The next section specifies certification request syntax.
+
+   This document exports one type, CertificationRequest.
+
+6. Certification request syntax
+
+   This section gives the syntax for certification requests.
+
+   A certification request consists of three parts: "certification
+   request information," a signature algorithm identifier, and a digital
+   signature on the certification request information. The certification
+   request information consists of the entity's distinguished name, the
+   entity's public key, and a set of attributes providing other
+   information about the entity.
+
+
+
+
+
+
+
+
+
+Kaliski                      Informational                      [Page 3]
+
+RFC 2314         PKCS #10: Certification Request Syntax       March 1998
+
+
+   The process by which a certification request is constructed involves
+   the following steps:
+
+        1.   A CertificationRequestInfo value containing a
+             distinguished name, a public key, and optionally a set of
+             attributes is constructed by an entity.
+
+        2.   The CertificationRequestInfo value is signed with
+             the entity's private key. (See Section 6.2.)
+
+        3.   The CertificationRequestInfo value, a signature
+             algorithm identifier, and the entity's signature are
+             collected together into a CertificationRequest value,
+             defined below.
+
+   A certification authority fulfills the request by verifying the
+   entity's signature, and, if it is valid, constructing a X.509
+   certificate from the distinguished name and public key, as well as an
+   issuer name, serial number, validity period, and signature algorithm
+   of the certification authority's choice. If the certification request
+   contains a PKCS #9 extended-certificate-attributes attribute, the
+   certification authority also constructs a PKCS #6 extended
+   certificate from the X.509 certificate and the extended-certificate-
+   attributes attribute value.
+
+   In what form the certification authority returns the new certificate
+   is outside the scope of this document. One possibility is a PKCS #7
+   cryptographic message with content type signedData, following the
+   degenerate case where there are no signers. The return message may
+   include a certification path from the new certificate to the
+   certification authority. It may also include other certificates such
+   as cross-certificates that the certification authority considers
+   helpful, and it may include certificate-revocation lists (CRLs).
+   Another possibility is that the certification authority inserts the
+   new certificate into a central database.
+
+   This section is divided into two parts. The first part describes the
+   certification-request-information type CertificationRequestInfo, and
+   the second part describes the top-level type CertificationRequest.
+
+   Notes.
+
+        1.   An entity would typically send a certification
+             request after generating a public-key/private-key pair, but
+             may also do so after a change in the entity's distinguished
+             name.
+
+
+
+
+
+Kaliski                      Informational                      [Page 4]
+
+RFC 2314         PKCS #10: Certification Request Syntax       March 1998
+
+
+        2.   The signature on the certification request
+             prevents an entity from requesting a certificate with
+             another party's public key. Such an attack would give the
+             entity the minor ability to pretend to be the originator of
+             any message signed by the other party. This attack is
+             significant only if the entity does not know the message
+             being signed, and the signed part of the message does not
+             identify the signer. The entity would still not be able to
+             decrypt messages intended for the other party, of course.
+
+        3.   How the entity sends the certification request to
+             a certification authority is outside the scope of this
+             document. Both paper and electronic forms are possible.
+
+        4.   This document is not compatible with the
+             certification request syntax for Privacy-Enhanced Mail, as
+             described in RFC 1424. The syntax in this document differs
+             in three respects: It allows a set of attributes; it does
+             not include issuer name, serial number, or validity period;
+             and it does not require an "innocuous" message to be
+             signed. The syntax in this document is designed to minimize
+             request size, an important constraint for those
+             certification authorities accepting requests on paper.
+
+6.1 CertificationRequestInfo
+
+   Certification request information shall have ASN.1 type
+   CertificationRequestInfo:
+
+   CertificationRequestInfo ::= SEQUENCE {
+     version Version,
+     subject Name,
+     subjectPublicKeyInfo SubjectPublicKeyInfo,
+     attributes [0] IMPLICIT Attributes }
+
+   Version ::= INTEGER
+
+   Attributes ::= SET OF Attribute
+
+   The fields of type CertificationRequestInfo have the following
+   meanings:
+
+        o    version is the version number, for compatibility
+             with future revisions of this document. It shall be 0 for
+             this version of the document.
+
+
+
+
+
+
+Kaliski                      Informational                      [Page 5]
+
+RFC 2314         PKCS #10: Certification Request Syntax       March 1998
+
+
+        o    subject is the distinguished name of the
+             certificate subject (the entity whose public key is to be
+             certified).
+
+        o    subjectPublicKeyInfo contains information about
+             the public key being certified. The information identifies
+             the entity's public-key algorithm (and any associated
+             parameters); examples of public-key algorithms include
+             X.509's rsa and PKCS #1's rsaEncryption. The information
+             also includes a bit-string representation of the entity's
+             public key.  For both public-key algorithms just mentioned,
+             the bit string contains the BER encoding of a value of
+             X.509/PKCS #1 type RSAPublicKey.
+
+        o    attributes is a set of attributes providing
+             additional information about the subject of the
+             certificate. Some attribute types that might be useful here
+             are defined in PKCS #9. An example is the challenge-
+             password attribute, which specifies a password by which the
+             entity may request that the certificate revocation. Another
+             example is the extended-certificate-attributes attribute,
+             which specifies attributes for a PKCS #6 extended
+             certificate.
+
+6.2 CertificationRequest
+
+   A certification request shall have ASN.1 type CertificationRequest:
+
+   CertificationRequest ::= SEQUENCE {
+     certificationRequestInfo CertificationRequestInfo,
+     signatureAlgorithm SignatureAlgorithmIdentifier,
+     signature Signature }
+
+   SignatureAlgorithmIdentifier ::= AlgorithmIdentifier
+
+   Signature ::= BIT STRING
+
+   The fields of type CertificationRequest have the following meanings:
+
+        o    certificateRequestInfo is the "certification
+             request information." It is the value being
+             signed.
+
+        o    signatureAlgorithm identifies the signature
+             algorithm (and any associated parameters) under
+             which the certification-request information is
+             signed. Examples include PKCS #1's
+             md2WithRSAEncryption and md5WithRSAEncryption.
+
+
+
+Kaliski                      Informational                      [Page 6]
+
+RFC 2314         PKCS #10: Certification Request Syntax       March 1998
+
+
+        o    signature is the result of signing the
+             certification request information with the
+             certification request subject's private key.
+
+   The signature process consists of two steps:
+
+        1.   The value of the certificationRequestInfo field is
+             DER encoded, yielding an octet string.
+
+        2.   The result of step 1 is signed with the
+             certification request subject's private key under
+             the specified signature algorithm, yielding a bit
+             string, the signature.
+
+   Note. The syntax for CertificationRequest could equivalently be
+   written with the X.509 SIGNED macro:
+
+   CertificationRequest ::= SIGNED CertificateRequestInfo
+
+Security Considerations
+
+   Security issues are discussed throughout this memo.
+
+Revision history
+
+   Version 1.0
+
+   Version 1.0 is the initial version.
+
+Acknowledgements
+
+   This document is based on a contribution of RSA Laboratories, a
+   division of RSA Data Security, Inc.  Any substantial use of the text
+   from this document must acknowledge RSA Data Security, Inc. RSA Data
+   Security, Inc.  requests that all material mentioning or referencing
+   this document identify this as "RSA Data Security, Inc. PKCS #10".
+
+Author's Address
+
+   Burt Kaliski
+   RSA Laboratories East
+   20 Crosby Drive
+   Bedford, MA  01730
+
+   Phone: (617) 687-7000
+   EMail: burt@rsa.com
+
+
+
+
+
+Kaliski                      Informational                      [Page 7]
+
+RFC 2314         PKCS #10: Certification Request Syntax       March 1998
+
+
+Full Copyright Statement
+
+   Copyright (C) The Internet Society (1998).  All Rights Reserved.
+
+   This document and translations of it may be copied and furnished to
+   others, and derivative works that comment on or otherwise explain it
+   or assist in its implementation may be prepared, copied, published
+   and distributed, in whole or in part, without restriction of any
+   kind, provided that the above copyright notice and this paragraph are
+   included on all such copies and derivative works.  However, this
+   document itself may not be modified in any way, such as by removing
+   the copyright notice or references to the Internet Society or other
+   Internet organizations, except as needed for the purpose of
+   developing Internet standards in which case the procedures for
+   copyrights defined in the Internet Standards process must be
+   followed, or as required to translate it into languages other than
+   English.
+
+   The limited permissions granted above are perpetual and will not be
+   revoked by the Internet Society or its successors or assigns.
+
+   This document and the information contained herein is provided on an
+   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
+   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
+   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
+   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
+   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Kaliski                      Informational                      [Page 8]
+
diff -uNr gmime-1.90.0/rfc/rfc2315.txt gmime/rfc/rfc2315.txt
--- gmime-1.90.0/rfc/rfc2315.txt	Thu Jan  1 01:00:00 1970
+++ gmime/rfc/rfc2315.txt	Tue Dec  5 07:50:00 2000
@@ -0,0 +1,1795 @@
+
+
+
+
+
+
+Network Working Group                                          B. Kaliski
+Request for Comments: 2315                         RSA Laboratories, East
+Category: Informational                                        March 1998
+
+
+                 PKCS #7: Cryptographic Message Syntax
+                              Version 1.5
+
+Status of this Memo
+
+   This memo provides information for the Internet community.  It does
+   not specify an Internet standard of any kind.  Distribution of this
+   memo is unlimited.
+
+Copyright Notice
+
+   Copyright (C) The Internet Society (1998).  All Rights Reserved.
+
+Overview
+
+   This document describes a general syntax for data that may have
+   cryptography applied to it, such as digital signatures and digital
+   envelopes. The syntax admits recursion, so that, for example, one
+   envelope can be nested inside another, or one party can sign some
+   previously enveloped digital data.  It also allows arbitrary
+   attributes, such as signing time, to be authenticated along with the
+   content of a message, and provides for other attributes such as
+   countersignatures to be associated with a signature. A degenerate
+   case of the syntax provides a means for disseminating certificates
+   and certificate-revocation lists.
+
+1. Scope
+
+   This document is compatible with Privacy-Enhanced Mail (PEM) in that
+   signed-data and signed-and-enveloped-data content, constructed in a
+   PEM-compatible mode, can be converted into PEM messages without any
+   cryptographic operations. PEM messages can similarly be converted
+   into the signed-data and signed-and-enveloped data content types.
+
+   This document can support a variety of architectures for
+   certificate-based key management, such as the one proposed for
+   Privacy-Enhanced Mail in RFC 1422. Architectural decisions such as
+   what certificate issuers are considered "top-level," what entities
+   certificate issuers are authorized to certify, what distinguished
+   names are considered acceptable, and what policies certificate
+   issuers must follow (such as signing only with secure hardware, or
+   requiring entities to present specific forms of identification) are
+   left outside the document.
+
+
+
+Kaliski                      Informational                      [Page 1]
+
+RFC 2315          PKCS #7: Crytographic Message Syntax        March 1998
+
+
+   The values produced according to this document are intended to be
+   BER-encoded, which means that the values would typically be
+   represented as octet strings. While many systems are capable of
+   transmitting arbitrary octet strings reliably, it is well known that
+   many electronic-mail systems are not. This document does not address
+   mechanisms for encoding octet strings as (say) strings of ASCII
+   characters or other techniques for enabling reliable transmission by
+   re-encoding the octet string. RFC 1421 suggests one possible solution
+   to this problem.
+
+2. References
+
+      FIPS PUB 46-1  National Bureau of Standards. FIPS PUB 46-1:
+                Data Encryption Standard. January 1988.
+
+      PKCS #1   RSA Laboratories. PKCS #1: RSA Encryption.
+                Version 1.5, November 1993.
+
+      PKCS #6   RSA Laboratories. PKCS #6: Extended-Certificate
+                Syntax. Version 1.5, November 1993.
+
+      PKCS #9   RSA Laboratories. PKCS #9: Selected Attribute
+                Types. Version 1.1, November 1993.
+
+      RFC 1421  Linn, J., "Privacy Enhancement for
+                Internet Electronic Mail: Part I: Message
+                Encryption and Authentication Procedures," RFC 1421
+                February 1993.
+
+      RFC 1422  Kent, S., "Privacy Enhancement for
+                Internet Electronic Mail: Part II: Certificate-
+                Based Key Management," RFC 1422, February 1993.
+
+      RFC 1423  Balenson, D., "Privacy Enhancement for
+                Internet Electronic Mail: Part III: Algorithms,
+                Modes, and Identifiers," RFC 1423, February 1993.
+
+      RFC 1424  Kaliski, B., "Privacy Enhancement for
+                Internet Electronic Mail: Part IV: Key
+                Certification and Related Services," RFC 1424,
+                February 1993.
+
+
+
+
+
+
+
+
+
+
+Kaliski                      Informational                      [Page 2]
+
+RFC 2315          PKCS #7: Crytographic Message Syntax        March 1998
+
+
+      RFC 1319  Kaliski, B., "The MD2 Message-Digest
+                Algorithm," RFC 1319, April 1992.
+
+      RFC 1321  Rivest, R., "The MD5 Message-Digest
+                Algorithm," RFC 1321, April 1992.
+
+      X.208     CCITT. Recommendation X.208: Specification of
+                Abstract Syntax Notation One (ASN.1). 1988.
+
+      X.209     CCITT. Recommendation X.209: Specification of
+                Basic Encoding Rules for Abstract Syntax Notation
+                One (ASN.1). 1988.
+
+      X.500     CCITT. Recommendation X.500: The Directory--
+                Overview of Concepts, Models and
+                Services. 1988.
+
+      X.501     CCITT. Recommendation X.501: The Directory--
+                Models. 1988.
+
+      X.509     CCITT. Recommendation X.509: The Directory--
+                Authentication Framework. 1988.
+
+      [NIST91]  NIST. Special Publication 500-202: Stable
+                Implementation Agreements for Open Systems
+                Interconnection Protocols. Version 5, Edition 1,
+                Part 12. December 1991.
+
+      [RSA78]   R.L. Rivest, A. Shamir, and L. Adleman. A method
+                for obtaining digital signatures and public-key
+                cryptosystems. Communications of the ACM,
+                21(2):120-126, February 1978.
+
+3. Definitions
+
+   For the purposes of this document, the following definitions apply.
+
+   AlgorithmIdentifier: A type that identifies an algorithm (by object
+   identifier) and associated parameters. This type is defined in X.509.
+
+   ASN.1: Abstract Syntax Notation One, as defined in X.208.
+
+   Attribute: A type that contains an attribute type (specified by
+   object identifier) and one or more attribute values. This type is
+   defined in X.501.
+
+   BER: Basic Encoding Rules, as defined in X.209.
+
+
+
+
+Kaliski                      Informational                      [Page 3]
+
+RFC 2315          PKCS #7: Crytographic Message Syntax        March 1998
+
+
+   Certificate: A type that binds an entity's distinguished name to a
+   public key with a digital signature. This type is defined in X.509.
+   This type also contains the distinguished name of the certificate
+   issuer (the signer), an issuer-specific serial number, the issuer's
+   signature algorithm identifier, and a validity period.
+
+   CertificateSerialNumber: A type that uniquely identifies a
+   certificate (and thereby an entity and a public key) among those
+   signed by a particular certificate issuer. This type is defined in
+   X.509.
+
+   CertificateRevocationList: A type that contains information about
+   certificates whose validity an issuer has prematurely revoked. The
+   information consists of an issuer name, the time of issue, the next
+   scheduled time of issue, and a list of certificate serial numbers and
+   their associated revocation times. The CRL is signed by the issuer.
+   The type intended by this document is the one defined RFC 1422.
+
+   DER: Distinguished Encoding Rules for ASN.1, as defined in X.509,
+   Section 8.7.
+
+   DES: Data Encryption Standard, as defined in FIPS PUB 46-1.
+
+   desCBC: The object identifier for DES in cipher-block chaining (CBC)
+   mode, as defined in [NIST91].
+
+   ExtendedCertificate: A type that consists of an X.509 public-key
+   certificate and a set of attributes, collectively signed by the
+   issuer of the X.509 public-key certificate. This type is defined in
+   PKCS #6.
+
+   MD2: RSA Data Security, Inc.'s MD2 message-digest algorithm, as
+   defined in RFC 1319.
+
+   md2: The object identifier for MD2, as defined in RFC 1319.
+
+   MD5: RSA Data Security, Inc.'s MD5 message-digest algorithm, as
+   defined in RFC 1321.
+
+   md5: The object identifier for MD5, as defined in RFC 1321.
+
+   Name: A type that uniquely identifies or "distinguishes" objects in
+   an X.500 directory. This type is defined in X.501. In an X.509
+   certificate, the type identifies the certificate issuer and the
+   entity whose public key is certified.
+
+   PEM: Internet Privacy-Enhanced Mail, as defined in RFCs 1421-1424.
+
+
+
+
+Kaliski                      Informational                      [Page 4]
+
+RFC 2315          PKCS #7: Crytographic Message Syntax        March 1998
+
+
+   RSA: The RSA public-key cryptosystem, as defined in [RSA78].
+
+   rsaEncryption: The object identifier for RSA encryption, as defined
+   in PKCS #1.
+
+4. Symbols and abbreviations
+
+   No symbols or abbreviations are defined in this document.
+
+5. General overview
+
+   The following nine sections specify useful types, general syntax, six
+   content types, and object identifiers.
+
+   The syntax is general enough to support many different content types.
+   This document defines six: data, signed data, enveloped data,
+   signed-and-enveloped data, digested data, and encrypted data. Other
+   content types may be added in the future. The use of content types
+   defined outside this document is possible, but is subject to
+   bilateral agreement between parties exchanging content.
+
+   This document exports one type, ContentInfo, as well as the various
+   object identifiers.
+
+   There are two classes of content types: base and enhanced.  Content
+   types in the base class contain "just data," with no cryptographic
+   enhancements. Presently, one content type is in this class, the data
+   content type. Content types in the enhanced class contain content of
+   some type (possibly encrypted), and other cryptographic enhancements.
+   For example, enveloped-data content can contain (encrypted) signed-
+   data content, which can contain data content. The four non-data
+   content types fall into the enhanced class.  The content types in the
+   enhanced class thus employ encapsulation, giving rise to the terms
+   "outer" content (the one containing the enhancements) and "inner"
+   content (the one being enhanced).
+
+   The document is designed such that the enhanced content types can be
+   prepared in a single pass using indefinite-length BER encoding, and
+   processed in a single pass in any BER encoding. Single-pass operation
+   is especially helpful if content is stored on tapes, or is "piped"
+   from another process. One of the drawbacks of single-pass operation,
+   however, is that it is difficult to output a DER encoding in a single
+   pass, since the lengths of the various components may not be known in
+   advance. Since DER encoding is required by the signed-data, signed-
+   and-enveloped data, and digested-data content types, an extra pass
+   may be necessary when a content type other than data is the inner
+   content of one of those content types.
+
+
+
+
+Kaliski                      Informational                      [Page 5]
+
+RFC 2315          PKCS #7: Crytographic Message Syntax        March 1998
+
+
+6. Useful types
+
+   This section defines types that are useful in at least two places in
+   the document.
+
+6.1 CertificateRevocationLists
+
+   The CertificateRevocationLists type gives a set of certificate-
+   revocation lists. It is intended that the set contain information
+   sufficient to determine whether the certificates with which the set
+   is associated are "hot listed," but there may be more certificate-
+   revocation lists than necessary, or there may be fewer than
+   necessary.
+
+   CertificateRevocationLists ::=
+     SET OF CertificateRevocationList
+
+6.2 ContentEncryptionAlgorithmIdentifier
+
+   The ContentEncryptionAlgorithmIdentifier type identifies a content-
+   encryption algorithm such as DES. A content-encryption algorithm
+   supports encryption and decryption operations. The encryption
+   operation maps an octet string (the message) to another octet string
+   (the ciphertext) under control of a content-encryption key. The
+   decryption operation is the inverse of the encryption operation.
+   Context determines which operation is intended.
+
+   ContentEncryptionAlgorithmIdentifier ::=
+     AlgorithmIdentifier
+
+6.3 DigestAlgorithmIdentifier
+
+   The DigestAlgorithmIdentifier type identifies a message-digest
+   algorithm. Examples include MD2 and MD5. A message-digest algorithm
+   maps an octet string (the message) to another octet string (the
+   message digest).
+
+   DigestAlgorithmIdentifier ::= AlgorithmIdentifier
+
+6.4 DigestEncryptionAlgorithmIdentifier
+
+   The DigestEncryptionAlgorithmIdentifier type identifies a digest-
+   encryption algorithm under which a message digest can be encrypted.
+   One example is PKCS #1's rsaEncryption. A digest-encryption algorithm
+   supports encryption and decryption operations. The encryption
+   operation maps an octet string (the message digest) to another octet
+   .bp string (the encrypted message digest) under control of a digest-
+   encryption key. The decryption operation is the inverse of the
+
+
+
+Kaliski                      Informational                      [Page 6]
+
+RFC 2315          PKCS #7: Crytographic Message Syntax        March 1998
+
+
+   encryption operation. Context determines which operation is intended.
+
+   DigestEncryptionAlgorithmIdentifier ::=
+     AlgorithmIdentifier
+
+6.5 ExtendedCertificateOrCertificate
+
+   The ExtendedCertificateOrCertificate type gives either a PKCS #6
+   extended certificate or an X.509 certificate.  This type follows the
+   syntax recommended in Section 6 of PKCS #6:
+
+   ExtendedCertificateOrCertificate ::= CHOICE {
+     certificate Certificate, -- X.509
+
+     extendedCertificate [0] IMPLICIT ExtendedCertificate }
+
+6.6 ExtendedCertificatesAndCertificates
+
+   The ExtendedCertificatesAndCertificates type gives a set of extended
+   certificates and X.509 certificates. It is intended that the set be
+   sufficient to contain chains from a recognized "root" or "top-level
+   certification authority" to all of the signers with which the set is
+   associated, but there may be more certificates than necessary, or
+   there may be fewer than necessary.
+
+   ExtendedCertificatesAndCertificates ::=
+     SET OF ExtendedCertificateOrCertificate
+
+   Note. The precise meaning of a "chain" is outside the scope of this
+   document. Some applications of this document may impose upper limits
+   on the length of a chain; others may enforce certain relationships
+   between the subjects and issuers of certificates in a chain. An
+   example of such relationships has been proposed for Privacy-Enhanced
+   Mail in RFC 1422.
+
+6.7 IssuerAndSerialNumber
+
+   The IssuerAndSerialNumber type identifies a certificate (and thereby
+   an entity and a public key) by the distinguished name of the
+   certificate issuer and an issuer-specific certificate serial number.
+
+   IssuerAndSerialNumber ::= SEQUENCE {
+     issuer Name,
+     serialNumber CertificateSerialNumber }
+
+
+
+
+
+
+
+Kaliski                      Informational                      [Page 7]
+
+RFC 2315          PKCS #7: Crytographic Message Syntax        March 1998
+
+
+6.8 KeyEncryptionAlgorithmIdentifier
+
+   The KeyEncryptionAlgorithmIdentifier type identifies a key-encryption
+   algorithm under which a content-encryption key can be encrypted. One
+   example is PKCS #1's rsaEncryption. A key-encryption algorithm
+   supports encryption and decryption operations. The encryption
+   operation maps an octet string (the key) to another octet string (the
+   encrypted key) under control of a key-encryption key. The decryption
+   operation is the inverse of the encryption operation.  Context
+   determines which operation is intended.
+
+   KeyEncryptionAlgorithmIdentifier ::=
+     AlgorithmIdentifier
+
+6.9 Version
+
+   The Version type gives a syntax version number, for compatibility
+   with future revisions of this document.
+
+   Version ::= INTEGER
+
+7. General syntax
+
+   The general syntax for content exchanged between entities according
+   to this document associates a content type with content. The syntax
+   shall have ASN.1 type ContentInfo:
+
+   ContentInfo ::= SEQUENCE {
+     contentType ContentType,
+     content
+       [0] EXPLICIT ANY DEFINED BY contentType OPTIONAL }
+
+   ContentType ::= OBJECT IDENTIFIER
+
+   The fields of type ContentInfo have the following meanings:
+
+        o    contentType indicates the type of content. It is
+             an object identifier, which means it is a unique string of
+             integers assigned by the authority that defines the content
+             type. This document defines six content types (see Section
+             14): data, signedData, envelopedData,
+             signedAndEnvelopedData, digestedData, and encryptedData.
+
+        o    content is the content. The field is optional, and
+             if the field is not present, its intended value must be
+             supplied by other means. Its type is defined along with the
+             object identifier for contentType.
+
+
+
+
+Kaliski                      Informational                      [Page 8]
+
+RFC 2315          PKCS #7: Crytographic Message Syntax        March 1998
+
+
+   Notes.
+
+        1.   The methods below assume that the type of content
+             can be determined uniquely by contentType, so the type
+             defined along with the object identifier should not be a
+             CHOICE type.
+
+        2.   When a ContentInfo value is the inner content of
+             signed-data, signed-and-enveloped-data, or digested-data
+             content, a message-digest algorithm is applied to the
+             contents octets of the DER encoding of the content field.
+             When a ContentInfo value is the inner content of
+             enveloped-data or signed-and-enveloped-data content, a
+             content-encryption algorithm is applied to the contents
+             octets of a definite-length BER encoding of the content
+             field.
+
+        3.   The optional omission of the content field makes
+             it possible to construct "external signatures," for
+             example, without modification to or replication of the
+             content to which the signatures apply. In the case of
+             external signatures, the content being signed would be
+             omitted from the "inner" encapsulated ContentInfo value
+             included in the signed-data content type.
+
+8. Data content type
+
+   The data content type is just an octet string. It shall have ASN.1
+   type Data:
+
+   Data ::= OCTET STRING
+
+   The data content type is intended to refer to arbitrary octet
+   strings, such as ASCII text files; the interpretation is left to the
+   application. Such strings need not have any internal structure
+   (although they may; they could even be DER encodings).
+
+9. Signed-data content type
+
+   The signed-data content type consists of content of any type and
+   encrypted message digests of the content for zero or more signers.
+   The encrypted digest for a signer is a "digital signature" on the
+   content for that signer. Any type of content can be signed by any
+   number of signers in parallel. Furthermore, the syntax has a
+   degenerate case in which there are no signers on the content. The
+   degenerate case provides a means for disseminating certificates and
+   certificate-revocation lists.
+
+
+
+
+Kaliski                      Informational                      [Page 9]
+
+RFC 2315          PKCS #7: Crytographic Message Syntax        March 1998
+
+
+   It is expected that the typical application of the signed-data
+   content type will be to represent one signer's digital signature on
+   content of the data content type. Another typical application will be
+   to disseminate certificates and certificate-revocation lists.
+
+   The process by which signed data is constructed involves the
+   following steps:
+
+        1.   For each signer, a message digest is computed on
+             the content with a signer-specific message-digest
+             algorithm. (If two signers employ the same message-digest
+             algorithm, then the message digest need be computed for
+             only one of them.) If the signer is authenticating any
+             information other than the content (see Section 9.2), the
+             message digest of the content and the other information are
+             digested with the signer's message digest algorithm, and
+             the result becomes the "message digest."
+
+        2.   For each signer, the message digest and associated
+             information are encrypted with the signer's private key.
+
+        3.   For each signer, the encrypted message digest and
+             other signer-specific information are collected into a
+             SignerInfo value, defined in Section 9.2.  Certificates and
+             certificate-revocation lists for each signer, and those not
+             corresponding to any signer, are collected in this step.
+
+        4.   The message-digest algorithms for all the signers
+             and the SignerInfo values for all the signers are collected
+             together with the content into a SignedData value, defined
+             in Section 9.1.
+
+   A recipient verifies the signatures by decrypting the encrypted
+   message digest for each signer with the signer's public key, then
+   comparing the recovered message digest to an independently computed
+   message digest. The signer's public key is either contained in a
+   certificate included in the signer information, or is referenced by
+   an issuer distinguished name and an issuer-specific serial number
+   that uniquely identify the certificate for the public key.
+
+   This section is divided into five parts. The first part describes the
+   top-level type SignedData, the second part describes the per-signer
+   information type SignerInfo, and the third and fourth parts describe
+   the message-digesting and digest-encryption processes. The fifth part
+   summarizes compatibility with Privacy-Enhanced Mail.
+
+
+
+
+
+
+Kaliski                      Informational                     [Page 10]
+
+RFC 2315          PKCS #7: Crytographic Message Syntax        March 1998
+
+
+9.1 SignedData type
+
+   The signed-data content type shall have ASN.1 type SignedData:
+
+   SignedData ::= SEQUENCE {
+     version Version,
+     digestAlgorithms DigestAlgorithmIdentifiers,
+     contentInfo ContentInfo,
+     certificates
+        [0] IMPLICIT ExtendedCertificatesAndCertificates
+          OPTIONAL,
+     crls
+       [1] IMPLICIT CertificateRevocationLists OPTIONAL,
+     signerInfos SignerInfos }
+
+   DigestAlgorithmIdentifiers ::=
+
+     SET OF DigestAlgorithmIdentifier
+
+   SignerInfos ::= SET OF SignerInfo
+
+   The fields of type SignedData have the following meanings:
+
+        o    version is the syntax version number. It shall be
+             1 for this version of the document.
+
+        o    digestAlgorithms is a collection of message-digest
+             algorithm identifiers. There may be any number of
+             elements in the collection, including zero. Each
+             element identifies the message-digest algorithm
+             (and any associated parameters) under which the
+             content is digested for a some signer. The
+             collection is intended to list the message-digest
+             algorithms employed by all of the signers, in any
+             order, to facilitate one-pass signature
+             verification. The message-digesting process is
+             described in Section 9.3.
+
+        o    contentInfo is the content that is signed. It can
+             have any of the defined content types.
+
+        o    certificates is a set of PKCS #6 extended
+             certificates and X.509 certificates. It is intended that
+             the set be sufficient to contain chains from a recognized
+             "root" or "top-level certification authority" to all of the
+             signers in the signerInfos field. There may be more
+             certificates than necessary, and there may be certificates
+             sufficient to contain chains from two or more independent
+
+
+
+Kaliski                      Informational                     [Page 11]
+
+RFC 2315          PKCS #7: Crytographic Message Syntax        March 1998
+
+
+             top-level certification authorities. There may also be
+             fewer certificates than necessary, if it is expected that
+             those verifying the signatures have an alternate means of
+             obtaining necessary certificates (e.g., from a previous set
+             of certificates).
+
+        o    crls is a set of certificate-revocation lists. It
+             is intended that the set contain information sufficient to
+             determine whether or not the certificates in the
+             certificates field are "hot listed," but such
+             correspondence is not necessary.  There may be more
+             certificate-revocation lists than necessary, and there may
+             also be fewer certificate-revocation lists than necessary.
+
+        o    signerInfos is a collection of per-signer
+             information. There may be any number of elements in the
+             collection, including zero.
+
+   Notes.
+
+        1.   The fact that the digestAlgorithms field comes
+             before the contentInfo field and the signerInfos field
+             comes after it makes it possible to process a SignedData
+             value in a single pass. (Single-pass processing is
+             described in Section 5.)
+
+        2.   The differences between version 1 SignedData and
+             version 0 SignedData (defined in PKCS #7, Version 1.4) are
+             the following:
+
+                  o    the digestAlgorithms and signerInfos
+                       fields may contain zero elements in version 1,
+                       but not in version 0
+
+                  o    the crls field is allowed in version 1,
+                       but not in version 0
+
+             Except for the difference in version number, version 0
+             SignedData values are acceptable as version 1 values. An
+             implementation can therefore process SignedData values of
+             either version as though they were version 1 values. It is
+             suggested that PKCS implementations generate only version 1
+             SignedData values, but be prepared to process SignedData
+             values of either version.
+
+
+
+
+
+
+
+Kaliski                      Informational                     [Page 12]
+
+RFC 2315          PKCS #7: Crytographic Message Syntax        March 1998
+
+
+        3.   In the degenerate case where there are no signers
+             on the content, the ContentInfo value being "signed" is
+             irrelevant. It is recommended in that case that the content
+             type of the ContentInfo value being "signed" be data, and
+             the content field of the ContentInfo value be omitted.
+
+9.2 SignerInfo type
+
+   Per-signer information is represented in the type SignerInfo:
+
+   SignerInfo ::= SEQUENCE {
+     version Version,
+     issuerAndSerialNumber IssuerAndSerialNumber,
+     digestAlgorithm DigestAlgorithmIdentifier,
+     authenticatedAttributes
+       [0] IMPLICIT Attributes OPTIONAL,
+     digestEncryptionAlgorithm
+       DigestEncryptionAlgorithmIdentifier,
+     encryptedDigest EncryptedDigest,
+     unauthenticatedAttributes
+       [1] IMPLICIT Attributes OPTIONAL }
+
+   EncryptedDigest ::= OCTET STRING
+
+   The fields of type SignerInfo have the following meanings:
+
+        o    version is the syntax version number. It shall be
+             1 for this version of the document.
+
+        o    issuerAndSerialNumber specifies the signer's
+             certificate (and thereby the signer's distinguished name
+             and public key) by issuer distinguished name and issuer-
+             specific serial number.
+
+        o    digestAlgorithm identifies the message-digest
+             algorithm (and any associated parameters) under which the
+             content and authenticated attributes (if present) are
+             digested. It should be among those in the digestAlgorithms
+             field of the superior SignerInfo value. The message-
+             digesting process is described in Section 9.3.
+
+        o    authenticatedAttributes is a set of attributes
+             that are signed (i.e., authenticated) by the signer. The
+             field is optional, but it must be present if the content
+             type of the ContentInfo value being signed is not data. If
+             the field is present, it must contain, at a minimum, two
+             attributes:
+
+
+
+
+Kaliski                      Informational                     [Page 13]
+
+RFC 2315          PKCS #7: Crytographic Message Syntax        March 1998
+
+
+                  1.   A PKCS #9 content-type attribute having
+                       as its value the content type of the
+                       ContentInfo value being signed.
+
+                  2.   A PKCS #9 message-digest attribute,
+                       having as its value the message digest
+                       of the content (see below).
+
+             Other attribute types that might be useful here, such as
+             signing time, are also defined in PKCS #9.
+
+        o    digestEncryptionAlgorithm identifies the digest-
+             encryption algorithm (and any associated parameters) under
+             which the message digest and associated information are
+             encrypted with the signer's private key. The digest-
+             encryption process is described in Section 9.4.
+
+        o    encryptedDigest is the result of encrypting the
+             message digest and associated information with the signer's
+             private key.
+
+        o    unauthenticatedAttributes is a set of attributes
+             that are not signed (i.e., authenticated) by the signer.
+             The field is optional. Attribute types that might be useful
+             here, such as countersignatures, are defined in PKCS #9.
+
+   Notes.
+
+        1.   It is recommended in the interest of PEM
+             compatibility that the authenticatedAttributes field be
+             omitted whenever the content type of the ContentInfo value
+             being signed is data and there are no other authenticated
+             attributes.
+
+        2.   The difference between version 1 SignerInfo and
+             version 0 SignerInfo (defined in PKCS #7, Version 1.4) is
+             in the message-digest encryption process (see Section 9.4).
+             Only the PEM-compatible processes are different, reflecting
+             changes in Privacy-Enhanced Mail signature methods. There
+             is no difference in the non-PEM-compatible message-digest
+             encryption process.
+
+             It is suggested that PKCS implementations generate only
+             version 1 SignedData values. Since the PEM signature method
+             with which version 0 is compatible is obsolescent, it is
+             suggested that PKCS implementations be prepared to receive
+             only version 1 SignedData values.
+
+
+
+
+Kaliski                      Informational                     [Page 14]
+
+RFC 2315          PKCS #7: Crytographic Message Syntax        March 1998
+
+
+9.3 Message-digesting process
+
+   The message-digesting process computes a message digest on either the
+   content being signed or the content together with the signer's
+   authenticated attributes. In either case, the initial input to the
+   message-digesting process is the "value" of the content being signed.
+   Specifically, the initial input is the contents octets of the DER
+   encoding of the content field of the ContentInfo value to which the
+   signing process is applied. Only the contents octets of the DER
+   encoding of that field are digested, not the identifier octets or the
+   length octets.
+
+   The result of the message-digesting process (which is called,
+   informally, the "message digest") depends on whether the
+   authenticatedAttributes field is present. When the field is absent,
+   the result is just the message digest of the content. When the field
+   is present, however, the result is the message digest of the complete
+   DER encoding of the Attributes value containted in the
+   authenticatedAttributes field. (For clarity: The IMPLICIT [0] tag in
+   the authenticatedAttributes field is not part of the Attributes
+   value. The Attributes value's tag is SET OF, and the DER encoding of
+   the SET OF tag, rather than of the IMPLICIT [0] tag, is to be
+   digested along with the length and contents octets of the Attributes
+   value.) Since the Attributes value, when the field is present, must
+   contain as attributes the content type and the message digest of the
+   content, those values are indirectly included in the result.
+
+   When the content being signed has content type data and the
+   authenticatedAttributes field is absent, then just the value of the
+   data (e.g., the contents of a file) is digested. This has the
+   advantage that the length of the content being signed need not be
+   known in advance of the encryption process. This method is compatible
+   with Privacy-Enhanced Mail.
+
+   Although the identifier octets and the length octets are not
+   digested, they are still protected by other means. The length octets
+   are protected by the nature of the message-digest algorithm since it
+   is by assumption computationally infeasible to find any two distinct
+   messages of any length that have the same message digest.
+   Furthermore, assuming that the content type uniquely determines the
+   identifier octets, the identifier octets are protected implicitly in
+   one of two ways: either by the inclusion of the content type in the
+   authenticated attributes, or by the use of the PEM-compatible
+   alternative in Section 9.4 which implies that the content type is
+   data.
+
+
+
+
+
+
+Kaliski                      Informational                     [Page 15]
+
+RFC 2315          PKCS #7: Crytographic Message Syntax        March 1998
+
+
+   Note. The fact that the message digest is computed on part of a DER
+   encoding does not mean that DER is the required method of
+   representing that part for data transfer. Indeed, it is expected that
+   some implementations of this document may store objects in other than
+   their DER encodings, but such practices do not affect message-digest
+   computation.
+
+9.4 Digest-encryption process
+
+   The input to the digest-encryption process--the value supplied to the
+   signer's digest-encryption algorithm--includes the result of the
+   message-digesting process (informally, the "message digest") and the
+   digest algorithm identifier (or object identifier). The result of the
+   digest-encryption process is the encryption with the signer's private
+   key of the BER encoding of a value of type DigestInfo:
+
+   DigestInfo ::= SEQUENCE {
+     digestAlgorithm DigestAlgorithmIdentifier,
+     digest Digest }
+
+   Digest ::= OCTET STRING
+
+   The fields of type DigestInfo have the following meanings:
+
+        o    digestAlgorithm identifies the message-digest
+             algorithm (and any associated parameters) under which the
+             content and authenticated attributes are digested. It
+             should be the same as the digestAlgorithm field of the
+             superior SignerInfo value.
+
+        o    digest is the result of the message-digesting
+             process.
+
+   Notes.
+
+        1.   The only difference between the signature process
+             defined here and the signature algorithms defined in PKCS
+             #1 is that signatures there are represented as bit strings,
+             for consistency with the X.509 SIGNED macro. Here,
+             encrypted message digests are octet strings.
+
+        2.   The input to the encryption process typically will
+             have 30 or fewer octets. If digestEncryptionAlgorithm is
+             PKCS #1's rsaEncryption, then this means that the input can
+             be encrypted in a single block as long as the length of the
+             RSA modulus is at least 328 bits, which is reasonable and
+             consistent with security recommendations.
+
+
+
+
+Kaliski                      Informational                     [Page 16]
+
+RFC 2315          PKCS #7: Crytographic Message Syntax        March 1998
+
+
+        3.   A message-digest algorithm identifier is included
+             in the DigestInfo value to limit the damage resulting from
+             the compromise of one message-digest algorithm. For
+             instance, suppose an adversary were able to find messages
+             with a given MD2 message digest.  That adversary could then
+             forge a signature by finding a message with the same MD2
+             message digest as one that a signer previously signed, and
+             presenting the previous signature as the signature on the
+             new message.  This attack would succeed only if the signer
+             previously used MD2, since the DigestInfo value contains
+             the message-digest algorithm.  If a signer never trusted
+             the MD2 algorithm and always used MD5, then the compromise
+             of MD2 would not affect the signer. If the DigestInfo value
+             contained only the message digest, however, the compromise
+             of MD2 would affect signers that use any message-digest
+             algorithm.
+
+        4.   There is potential for ambiguity due to the fact
+             that the DigestInfo value does not indicate whether the
+             digest field contains just the message digest of the
+             content or the message digest of the complete DER encoding
+             of the authenticatedAttributes field. In other words, it is
+             possible for an adversary to transform a signature on
+             authenticated attributes to one that appears to be just on
+             content by changing the content to be the DER encoding of
+             the authenticatedAttributes field, and then removing the
+             authenticatedAttributes field. (The reverse transformation
+             is possible, but requires that the content be the DER
+             encoding of an authenticated attributes value, which is
+             unlikely.) This ambiguity is not a new problem, nor is it a
+             significant one, as context will generally prevent misuse.
+             Indeed, it is also possible for an adversary to transform a
+             signature on a certificate or certificate-revocation list
+             to one that appears to be just on signed-data content.
+
+9.5 Compatibility with Privacy-Enhanced Mail
+
+   Compatibility with the MIC-ONLY and MIC-CLEAR process types in PEM
+   occurs when the content type of the ContentInfo value being signed is
+   data, there are no authenticated attributes, the message-digest
+   algorithm is md2 or md5, and the digest-encryption algorithm is PKCS
+   #1's rsaEncryption. Under all those conditions, the encrypted message
+   digest produced here matches the one produced in PEM because:
+
+        1.   The value input to the message-digest algorithm in
+             PEM is the same as in this document when there are no
+             authenticated attributes. MD2 and MD5 in PEM are the same
+             as md2 and md5.
+
+
+
+Kaliski                      Informational                     [Page 17]
+
+RFC 2315          PKCS #7: Crytographic Message Syntax        March 1998
+
+
+        2.   The value encrypted with the signer's private key
+             in PEM (as specified in RFC 1423) is the same as in this
+             document when there are no authenticated attributes. RSA
+             private-key encryption in PEM is the same as PKCS #1's
+             rsaEncryption.
+
+   The other parts of the signed-data content type (certificates, CRLs,
+   algorithm identifiers, etc.) are easily translated to and from their
+   corresponding PEM components.
+
+10. Enveloped-data content type
+
+   The enveloped-data content type consists of encrypted content of any
+   type and encrypted content-encryption keys for one or more
+   recipients. The combination of encrypted content and encrypted
+   content-encryption key for a recipient is a "digital envelope" for
+   that recipient. Any type of content can be enveloped for any number
+   of recipients in parallel.
+
+   It is expected that the typical application of the enveloped-data
+   content type will be to represent one or more recipients' digital
+   envelopes on content of the data, digested-data, or signed-data
+   content types.
+
+   The process by which enveloped data is constructed involves the
+   following steps:
+
+        1.   A content-encryption key for a particular content-
+             encryption algorithm is generated at random.
+
+        2.   For each recipient, the content-encryption key is
+             encrypted with the recipient's public key.
+
+        3.   For each recipient, the encrypted content-
+             encryption key and other recipient-specific information are
+             collected into a RecipientInfo value, defined in Section
+             10.2.
+
+        4.   The content is encrypted with the content-
+             encryption key. (Content encryption may require that the
+             content be padded to a multiple of some block size; see
+             Section 10.3 for discussion.)
+
+        5.   The RecipientInfo values for all the recipients
+             are collected together with the encrypted content into a
+             EnvelopedData value, defined in Section 10.1.
+
+
+
+
+
+Kaliski                      Informational                     [Page 18]
+
+RFC 2315          PKCS #7: Crytographic Message Syntax        March 1998
+
+
+   A recipient opens the envelope by decrypting the one of the encrypted
+   content-encryption keys with the recipient's private key and
+   decrypting the encrypted content with the recovered content-
+   encryption key. The recipient's private key is referenced by an
+   issuer distinguished name and an issuer-specific serial number that
+   uniquely identify the certificate for the corresponding public key.
+
+   This section is divided into four parts. The first part describes the
+   top-level type EnvelopedData, the second part describes the per-
+   recipient information type RecipientInfo, and the third and fourth
+   parts describe the content-encryption and key-encryption processes.
+
+   This content type is not compatible with Privacy-Enhanced Mail
+   (although some processes it defines are compatible with their PEM
+   counterparts), since Privacy-Enhanced Mail always involves digital
+   signatures, never digital envelopes alone.
+
+10.1 EnvelopedData type
+
+   The enveloped-data content type shall have ASN.1 type EnvelopedData:
+
+   EnvelopedData ::= SEQUENCE {
+     version Version,
+     recipientInfos RecipientInfos,
+     encryptedContentInfo EncryptedContentInfo }
+
+   RecipientInfos ::= SET OF RecipientInfo
+
+   EncryptedContentInfo ::= SEQUENCE {
+     contentType ContentType,
+     contentEncryptionAlgorithm
+       ContentEncryptionAlgorithmIdentifier,
+     encryptedContent
+       [0] IMPLICIT EncryptedContent OPTIONAL }
+
+   EncryptedContent ::= OCTET STRING
+
+   The fields of type EnvelopedData have the following meanings:
+
+        o    version is the syntax version number. It shall be
+             0 for this version of the document.
+
+        o    recipientInfos is a collection of per-recipient
+             information. There must be at least one element in
+             the collection.
+
+        o    encryptedContentInfo is the encrypted content
+             information.
+
+
+
+Kaliski                      Informational                     [Page 19]
+
+RFC 2315          PKCS #7: Crytographic Message Syntax        March 1998
+
+
+   The fields of type EncryptedContentInfo have the following meanings:
+
+        o    contentType indicates the type of content.
+
+        o    contentEncryptionAlgorithm identifies the content-
+             encryption algorithm (and any associated
+             parameters) under which the content is encrypted.
+             The content-encryption process is described in
+             Section 10.3. This algorithm is the same for all
+             recipients.
+
+        o    encryptedContent is the result of encrypting the
+             content. The field is optional, and if the field
+             is not present, its intended value must be
+             supplied by other means.
+
+   Note. The fact that the recipientInfos field comes before the
+   encryptedContentInfo field makes it possible to process an
+   EnvelopedData value in a single pass. (Single-pass processing is
+   described in Section 5.)
+
+10.2 RecipientInfo type
+
+   Per-recipient information is represented in the type RecipientInfo:
+
+   RecipientInfo ::= SEQUENCE {
+     version Version,
+     issuerAndSerialNumber IssuerAndSerialNumber,
+     keyEncryptionAlgorithm
+
+       KeyEncryptionAlgorithmIdentifier,
+     encryptedKey EncryptedKey }
+
+   EncryptedKey ::= OCTET STRING
+
+   The fields of type RecipientInfo have the following meanings:
+
+        o    version is the syntax version number. It shall be
+             0 for this version of the document.
+
+        o    issuerAndSerialNumber specifies the recipient's
+             certificate (and thereby the recipient's
+             distinguished name and public key) by issuer
+             distinguished name and issuer-specific serial
+             number.
+
+
+
+
+
+
+Kaliski                      Informational                     [Page 20]
+
+RFC 2315          PKCS #7: Crytographic Message Syntax        March 1998
+
+
+        o    keyEncryptionAlgorithm identifies the key-
+             encryption algorithm (and any associated
+             parameters) under which the content-encryption key
+             is encrypted with the recipient's public key. The
+             key-encryption process is described in Section
+             10.4.
+
+        o    encryptedKey is the result of encrypting the
+             content-encryption key with the recipient's public
+             key (see below).
+
+10.3 Content-encryption process
+
+   The input to the content-encryption process is the "value" of the
+   content being enveloped. Specifically, the input is the contents
+   octets of a definite-length BER encoding of the content field of the
+   ContentInfo value to which the enveloping process is applied. Only
+   the contents octets of the BER encoding are encrypted, not the
+   identifier octets or length octets; those other octets are not
+   represented at all.
+
+   When the content being enveloped has content type data, then just the
+   value of the data (e.g., the contents of a file) is encrypted. This
+   has the advantage that the length of the content being encrypted need
+   not be known in advance of the encryption process. This method is
+   compatible with Privacy-Enhanced Mail.
+
+   The identifier octets and the length octets are not encrypted. The
+   length octets may be protected implicitly by the encryption process,
+   depending on the encryption algorithm. The identifier octets are not
+   protected at all, although they can be recovered from the content
+   type, assuming that the content type uniquely determines the
+   identifier octets. Explicit protection of the identifier and length
+   octets requires that the signed-and-enveloped-data content type be
+   employed, or that the digested-data and enveloped-data content types
+   be applied in succession.
+
+   Notes.
+
+        1.   The reason that a definite-length BER encoding is
+             required is that the bit indicating whether the length is
+             definite or indefinite is not recorded anywhere in the
+             enveloped-data content type.  Definite-length encoding is
+             more appropriate for simple types such as octet strings, so
+             definite-length encoding is chosen.
+
+
+
+
+
+
+Kaliski                      Informational                     [Page 21]
+
+RFC 2315          PKCS #7: Crytographic Message Syntax        March 1998
+
+
+        2.   Some content-encryption algorithms assume the
+             input length is a multiple of k octets, where k > 1, and
+             let the application define a method for handling inputs
+             whose lengths are not a multiple of k octets. For such
+             algorithms, the method shall be to pad the input at the
+             trailing end with k - (l mod k) octets all having value k -
+             (l mod k), where l is the length of the input. In other
+             words, the input is padded at the trailing end with one of
+             the following strings:
+
+                      01 -- if l mod k = k-1
+                     02 02 -- if l mod k = k-2
+                                 .
+                                 .
+                                 .
+                   k k ... k k -- if l mod k = 0
+
+             The padding can be removed unambiguously since all input is
+             padded and no padding string is a suffix of another. This
+             padding method is well-defined if and only if k < 256;
+             methods for larger k are an open issue for further study.
+
+10.4 Key-encryption process
+
+   The input to the key-encryption process--the value supplied to the
+   recipient's key-encryption algorithm--is just the "value" of the
+   content-encryption key.
+
+11. Signed-and-enveloped-data content type
+
+   This section defines the signed-and-enveloped-data content type. For
+   brevity, much of this section is expressed in terms of material in
+   Sections 9 and 10.
+
+   The signed-and-enveloped-data content type consists of encrypted
+   content of any type, encrypted content-encryption keys for one or
+   more recipients, and doubly encrypted message digests for one or more
+   signers. The "double encryption" consists of an encryption with a
+   signer's private key followed by an encryption with the content-
+   encryption key.
+
+   The combination of encrypted content and encrypted content-encryption
+   key for a recipient is a "digital envelope" for that recipient. The
+   recovered singly encrypted message digest for a signer is a "digital
+   signature" on the recovered content for that signer.  Any type of
+   content can be enveloped for any number of recipients and signed by
+   any number of signers in parallel.
+
+
+
+
+Kaliski                      Informational                     [Page 22]
+
+RFC 2315          PKCS #7: Crytographic Message Syntax        March 1998
+
+
+   It is expected that the typical application of the signed-and-
+   enveloped-data content type will be to represent one signer's digital
+   signature and one or more recipients' digital envelopes on content of
+   the data content type.
+
+   The process by which signed-and-enveloped data is constructed
+   involves the following steps:
+
+        1.   A content-encryption key for a particular content-
+             encryption algorithm is generated at random.
+
+        2.   For each recipient, the content-encryption key is
+             encrypted with the recipient's public key.
+
+        3.   For each recipient, the encrypted content-
+             encryption key and other recipient-specific
+             information are collected into a RecipientInfo
+             value, defined in Section 10.2.
+
+        4.   For each signer, a message digest is computed on
+             the content with a signer-specific message-digest
+             algorithm. (If two signers employ the same message-
+             digest algorithm, then the message digest need be
+             computed for only one of them.)
+
+        5.   For each signer, the message digest and associated
+             information are encrypted with the signer's
+             private key, and the result is encrypted with the
+             content-encryption key. (The second encryption may
+             require that the result of the first encryption be
+             padded to a multiple of some block size; see
+             Section 10.3 for discussion.)
+
+        6.   For each signer, the doubly encrypted message
+             digest and other signer-specific information are
+             collected into a SignerInfo value, defined in
+             Section 9.2.
+
+        7.   The content is encrypted with the content-
+             encryption key. (See Section 10.3 for discussion.)
+
+        8.   The message-digest algorithms for all the signers,
+             the SignerInfo values for all the signers and the
+             RecipientInfo values for all the recipients are
+             collected together with the encrypted content into
+             a SignedAndEnvelopedData value, defined in Section
+             11.1.
+
+
+
+
+Kaliski                      Informational                     [Page 23]
+
+RFC 2315          PKCS #7: Crytographic Message Syntax        March 1998
+
+
+   A recipient opens the envelope and verifies the signatures in two
+   steps. First, the one of the encrypted content-encryption keys is
+   decrypted with the recipient's private key, and the encrypted content
+   is decrypted with the recovered content-encryption key. Second, the
+   doubly encrypted message digest for each signer is decrypted with the
+   recovered content-encryption key, the result is decrypted with the
+   signer's public key, and the recovered message digest is compared to
+   an independently computed message digest.
+
+   Recipient private keys and signer public keys are contained or
+   referenced as discussed in Sections 9 and 10.
+
+   This section is divided into three parts. The first part describes
+   the top-level type SignedAndEnvelopedData and the second part
+   describes the digest-encryption process. Other types and processes
+   are the same as in Sections 9 and 10.  The third part summarizes
+   compatibility with Privacy-Enhanced Mail.
+
+   Note. The signed-and-enveloped-data content type provides
+   cryptographic enhancements similar to those resulting from the
+   sequential combination of signed-data and enveloped-data content
+   types. However, since the signed-and-enveloped-data content type does
+   not have authenticated or unauthenticated attributes, nor does it
+   provide enveloping of signer information other than the signature,
+   the sequential combination of signed-data and enveloped-data content
+   types is generally preferable to the SignedAndEnvelopedData content
+   type, except when compatibility with the ENCRYPTED process type in
+   Privacy-Enhanced Mail in intended.
+
+11.1 SignedAndEnvelopedData type
+
+   The signed-and-enveloped-data content type shall have ASN.1 type
+   SignedAndEnvelopedData:
+
+   SignedAndEnvelopedData ::= SEQUENCE {
+     version Version,
+     recipientInfos RecipientInfos,
+     digestAlgorithms DigestAlgorithmIdentifiers,
+     encryptedContentInfo EncryptedContentInfo,
+     certificates
+        [0] IMPLICIT ExtendedCertificatesAndCertificates
+          OPTIONAL,
+     crls
+       [1] IMPLICIT CertificateRevocationLists OPTIONAL,
+     signerInfos SignerInfos }
+
+
+
+
+
+
+Kaliski                      Informational                     [Page 24]
+
+RFC 2315          PKCS #7: Crytographic Message Syntax        March 1998
+
+
+   The fields of type SignedAndEnvelopedData have the following
+   meanings:
+
+        o    version is the syntax version number. It shall be
+             1 for this version of the document.
+
+        o    recipientInfos is a collection of per-recipient
+             information, as in Section 10. There must be at
+             least one element in the collection.
+
+        o    digestAlgorithms is a collection of message-digest
+             algorithm identifiers, as in Section 9. The
+             message-digesting process is the same as in
+             Section 9 in the case when there are no
+             authenticated attributes.
+
+        o    encryptedContentInfo is the encrypted content, as
+             in Section 10. It can have any of the defined
+             content types.
+
+        o    certificates is a set of PKCS #6 extended
+             certificates and X.509 certificates, as in Section
+             9.
+
+        o    crls is a set of certificate-revocation lists, as
+             in Section 9.
+
+        o    signerInfos is a collection of per-signer
+             information. There must be at least one element in
+             the collection. SignerInfo values have the same
+             meaning as in Section 9 with the exception of the
+             encryptedDigest field (see below).
+
+   Notes.
+
+        1.   The fact that the recipientInfos and
+             digestAlgorithms fields come before the contentInfo field
+             and the signerInfos field comes after it makes it possible
+             to process a SignedAndEnvelopedData value in a single pass.
+             (Single-pass processing is described in Section 5.)
+
+        2.   The difference between version 1
+             SignedAndEnvelopedData and version 0 SignedAndEnvelopedData
+             (defined in PKCS #7, Version 1.4) is that the crls field is
+             allowed in version 1, but not in version 0. Except for the
+             difference in version number, version 0
+             SignedAndEnvelopedData values are acceptable as version 1
+             values. An implementation can therefore process
+
+
+
+Kaliski                      Informational                     [Page 25]
+
+RFC 2315          PKCS #7: Crytographic Message Syntax        March 1998
+
+
+             SignedAndEnvelopedData values of either version as though
+             they were version 1 values. It is suggested that PKCS
+             implementations generate only version 1
+             SignedAndEnvelopedData values, but be prepared to process
+             SignedAndEnvelopedData values of either version.
+
+11.2 Digest-encryption process
+
+   The input to the digest-encryption process is the same as in Section
+   9, but the process itself is different.  Specifically, the process
+   involves two steps. First, the input to the process is supplied to
+   the signer's digest-encryption algorithm, as in Section 9. Second,
+   the result of the first step is encrypted with the content-encryption
+   key.  There is no DER encoding between the two steps; the "value"
+   output by the first step is input directly to the second step. (See
+   Section 10.3 for discussion.)
+
+   This process is compatible with the ENCRYPTED process type in
+   Privacy-Enhanced Mail.
+
+   Note. The purpose of the second step is to prevent an adversary from
+   recovering the message digest of the content.  Otherwise, an
+   adversary would be able to determine which of a list of candidate
+   contents (e.g., "Yes" or "No") is the actual content by comparing the
+   their message digests to the actual message digest.
+
+11.3 Compatibility with Privacy-Enhanced Mail
+
+   Compatibility with the ENCRYPTED process type of PEM occurs when the
+   content type of the ContentInfo value being signed and enveloped is
+   data, the message-digest algorithm is md2 or md5, the content-
+   encryption algorithm is DES in CBC mode, the digest-encryption
+   algorithm is PKCS #1's rsaEncryption, and the key-encryption
+   algorithm is PKCS #1's rsaEncryption.  Under all those conditions,
+   the doubly encrypted message digest and the encrypted content
+   encryption key match the ones produced in PEM because of reasons
+   similar to those given in Section 9.5, as well as the following:
+
+        1.   The value input to the content-encryption
+             algorithm in PEM is the same as in this document.
+             DES in CBC mode is the same as desCBC.
+
+        2.   The value input to the key-encryption algorithm in
+             PEM is the same as in this document (see Section
+             10.4). RSA public-key encryption in PEM is the
+             same as PKCS #1's rsaEncryption.
+
+
+
+
+
+Kaliski                      Informational                     [Page 26]
+
+RFC 2315          PKCS #7: Crytographic Message Syntax        March 1998
+
+
+        3.   The double-encryption process applied to the
+             message digest in this document and in PEM are the
+             same.
+
+   The other parts of the signed-and-enveloped-data content type
+   (certificates, CRLs, algorithm identifiers, etc.) are easily
+   translated to and from their corresponding PEM components. (CRLs are
+   carried in a separate PEM message.)
+
+12. Digested-data content type
+
+   The digested-data content type consists of content of any type and a
+   message digest of the content.
+
+   It is expected that the typical application of the digested-data
+   content type will be to add integrity to content of the data content
+   type, and that the result would become the content input to the
+   enveloped-data content type.
+
+   The process by which digested-data is constructed involves the
+   following steps:
+
+        1.   A message digest is computed on the content with a
+             message-digest algorithm.
+
+        2.   The message-digest algorithm and the message
+             digest are collected together with the content
+             into a DigestedData value.
+
+   A recipient verifies the message digest by comparing the message
+   digest to an independently computed message digest.
+
+   The digested-data content type shall have ASN.1 type DigestedData:
+
+   DigestedData ::= SEQUENCE {
+     version Version,
+     digestAlgorithm DigestAlgorithmIdentifier,
+     contentInfo ContentInfo,
+     digest Digest }
+
+   Digest ::= OCTET STRING
+
+   The fields of type DigestedData have the following meanings:
+
+        o    version is the syntax version number. It shall be
+             0 for this version of the document.
+
+
+
+
+
+Kaliski                      Informational                     [Page 27]
+
+RFC 2315          PKCS #7: Crytographic Message Syntax        March 1998
+
+
+        o    digestAlgorithm identifies the message-digest
+             algorithm (and any associated parameters) under which the
+             content is digested. (The message-digesting process is the
+             same as in Section 9 in the case when there are no
+             authenticated attributes.)
+
+        o    contentInfo is the content that is digested. It
+             can have any of the defined content types.
+
+        o    digest is the result of the message-digesting process.
+
+   Note. The fact that the digestAlgorithm field comes before the
+   contentInfo field and the digest field comes after it makes it
+   possible to process a DigestedData value in a single pass.  (Single-
+   pass processing is described in Section 5.)
+
+13. Encrypted-data content type
+
+   The encrypted-data content type consists of encrypted content of any
+   type. Unlike the enveloped-data content type, the encrypted-data
+   content type has neither recipients nor encrypted content-encryption
+   keys. Keys are assumed to be managed by other means.
+
+   It is expected that the typical application of the encrypted-data
+   content type will be to encrypt content of the data content type for
+   local storage, perhaps where the encryption key is a password.
+
+   The encrypted-data content type shall have ASN.1 type EncryptedData:
+
+   EncryptedData ::= SEQUENCE {
+     version Version,
+     encryptedContentInfo EncryptedContentInfo }
+
+   The fields of type EncryptedData have the following meanings:
+
+        o    version is the syntax version number. It shall be
+             0 for this version of the document.
+
+        o    encryptedContentInfo is the encrypted content
+             information, as in Section 10.
+
+14. Object identifiers
+
+   This document defines seven object identifiers: pkcs-7, data,
+   signedData, envelopedData, signedAndEnvelopedData, digestedData, and
+   encryptedData.
+
+
+
+
+
+Kaliski                      Informational                     [Page 28]
+
+RFC 2315          PKCS #7: Crytographic Message Syntax        March 1998
+
+
+   The object identifier pkcs-7 identifies this document.
+
+   pkcs-7 OBJECT IDENTIFIER ::=
+     { iso(1) member-body(2) US(840) rsadsi(113549)
+         pkcs(1) 7 }
+
+   The object identifiers data, signedData, envelopedData,
+   signedAndEnvelopedData, digestedData, and encryptedData, identify,
+   respectively, the data, signed-data, enveloped-data, signed-and-
+   enveloped-data, digested-data, and encrypted-data content types
+   defined in Sections 8-13.
+
+   data OBJECT IDENTIFIER ::= { pkcs-7 1 }
+   signedData OBJECT IDENTIFIER ::= { pkcs-7 2 }
+   envelopedData OBJECT IDENTIFIER ::= { pkcs-7 3 }
+   signedAndEnvelopedData OBJECT IDENTIFIER ::=
+      { pkcs-7 4 }
+   digestedData OBJECT IDENTIFIER ::= { pkcs-7 5 }
+   encryptedData OBJECT IDENTIFIER ::= { pkcs-7 6 }
+
+   These object identifiers are intended to be used in the contentType
+   field of a value of type ContentInfo (see Section 5). The content
+   field of that type, which has the content-type-specific syntax ANY
+   DEFINED BY contentType, would have ASN.1 type Data, SignedData,
+   EnvelopedData, SignedAndEnvelopedData, DigestedData, and
+   EncryptedData, respectively. These object identifiers are also
+   intended to be used in a PKCS #9 content-type attribute.
+
+Security Considerations
+
+   Security issues are discussed throughout this memo.
+
+Revision history
+
+
+   Versions 1.0-1.3
+
+   Versions 1.0-1.3 were distributed to participants in RSA Data
+   Security, Inc.'s Public-Key Cryptography Standards meetings in
+   February and March 1991.
+
+
+   Version 1.4
+
+   Version 1.4 is part of the June 3, 1991 initial public release of
+   PKCS. Version 1.4 was published as NIST/OSI Implementors' Workshop
+   document SEC-SIG-91-22.
+
+
+
+
+Kaliski                      Informational                     [Page 29]
+
+RFC 2315          PKCS #7: Crytographic Message Syntax        March 1998
+
+
+   Version 1.5
+
+   Version 1.5 incorporates several editorial changes, including updates
+   to the references and the addition of a revision history. The
+   following substantive changes were made:
+
+        o    Section 6: CertificateRevocationLists type is
+             added.
+
+        o    Section 9.1: SignedData syntax is revised. The new
+             version allows for the dissemination of
+             certificate-revocation lists along with
+             signatures. It also allows for the dissemination
+             of certificates and certificate-revocation lists
+             alone, without any signatures.
+
+        o    Section 9.2: SignerInfo syntax is revised. The new
+             version includes a message-digest encryption
+             process compatible with Privacy-Enhanced Mail as
+             specified in RFC 1423.
+
+        o    Section 9.3: Meaning of "the DER encoding of the
+             authenticatedAttributes field" is clarified as
+             "the DER encoding of the Attributes value."
+
+        o    Section 10.3: Padding method for content-
+             encryption algorithms is described.
+
+        o    Section 11.1: SignedAndEnvelopedData syntax is
+             revised. The new version allows for the
+             dissemination of certificate-revocation lists.
+
+        o    Section 13: Encrypted-data content type is added.
+             This content type consists of encrypted content of
+             any type.
+
+        o    Section 14: encryptedData object identifier is
+             added.
+
+   Supersedes June 3, 1991 version, which was also published as NIST/OSI
+   Implementors' Workshop document SEC-SIG-91-22.
+
+
+
+
+
+
+
+
+
+
+Kaliski                      Informational                     [Page 30]
+
+RFC 2315          PKCS #7: Crytographic Message Syntax        March 1998
+
+
+Acknowledgements
+
+   This document is based on a contribution of RSA Laboratories, a
+   division of RSA Data Security, Inc.  Any substantial use of the text
+   from this document must acknowledge RSA Data Security, Inc. RSA Data
+   Security, Inc.  requests that all material mentioning or referencing
+   this document identify this as "RSA Data Security, Inc. PKCS #7".
+
+Author's Address
+
+   Burt Kaliski
+   RSA Laboratories East
+   20 Crosby Drive
+   Bedford, MA  01730
+
+   Phone: (617) 687-7000
+   EMail: burt@rsa.com
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Kaliski                      Informational                     [Page 31]
+
+RFC 2315          PKCS #7: Crytographic Message Syntax        March 1998
+
+
+Full Copyright Statement
+
+   Copyright (C) The Internet Society (1998).  All Rights Reserved.
+
+   This document and translations of it may be copied and furnished to
+   others, and derivative works that comment on or otherwise explain it
+   or assist in its implementation may be prepared, copied, published
+   and distributed, in whole or in part, without restriction of any
+   kind, provided that the above copyright notice and this paragraph are
+   included on all such copies and derivative works.  However, this
+   document itself may not be modified in any way, such as by removing
+   the copyright notice or references to the Internet Society or other
+   Internet organizations, except as needed for the purpose of
+   developing Internet standards in which case the procedures for
+   copyrights defined in the Internet Standards process must be
+   followed, or as required to translate it into languages other than
+   English.
+
+   The limited permissions granted above are perpetual and will not be
+   revoked by the Internet Society or its successors or assigns.
+
+   This document and the information contained herein is provided on an
+   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
+   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
+   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
+   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
+   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Kaliski                      Informational                     [Page 32]
+
diff -uNr gmime-1.90.0/rfc/rfc2387.txt gmime/rfc/rfc2387.txt
--- gmime-1.90.0/rfc/rfc2387.txt	Thu Jan  1 01:00:00 1970
+++ gmime/rfc/rfc2387.txt	Tue Oct  2 22:40:19 2001
@@ -0,0 +1,563 @@
+
+
+
+
+
+
+Network Working Group                                       E. Levinson
+Request for Comments: 2387                                  August 1998
+Obsoletes: 2112
+Category: Standards Track
+
+
+                The MIME Multipart/Related Content-type
+
+Status of this Memo
+
+   This document specifies an Internet standards track protocol for the
+   Internet community, and requests discussion and suggestions for
+   improvements.  Please refer to the current edition of the "Internet
+   Official Protocol Standards" (STD 1) for the standardization state
+   and status of this protocol.  Distribution of this memo is unlimited.
+
+Copyright Notice
+
+   Copyright (C) The Internet Society (1998).  All Rights Reserved.
+
+Abstract
+
+   The Multipart/Related content-type provides a common mechanism for
+   representing objects that are aggregates of related MIME body parts.
+   This document defines the Multipart/Related content-type and provides
+   examples of its use.
+
+1.  Introduction
+
+   Several applications of MIME, including MIME-PEM, and MIME-Macintosh
+   and other proposals, require multiple body parts that make sense only
+   in the aggregate.  The present approach to these compound objects has
+   been to define specific multipart subtypes for each new object.  In
+   keeping with the MIME philosophy of having one mechanism to achieve
+   the same goal for different purposes, this document describes a
+   single mechanism for such aggregate or compound objects.
+
+   The Multipart/Related content-type addresses the MIME representation
+   of compound objects.  The object is categorized by a "type"
+   parameter.  Additional parameters are provided to indicate a specific
+   starting body part or root and auxiliary information which may be
+   required when unpacking or processing the object.
+
+   Multipart/Related MIME entities may contain Content-Disposition
+   headers that provide suggestions for the storage and display of a
+   body part.  Multipart/Related processing takes precedence over
+   Content-Disposition; the interaction between them is discussed in
+   section 4.
+
+
+
+Levinson                    Standards Track                     [Page 1]
+
+RFC 2387                   Multipart/Related                 August 1998
+
+
+   Responsibility for the display or processing of a Multipart/Related's
+   constituent entities rests with the application that handles the
+   compound object.
+
+2.  Multipart/Related Registration Information
+
+   The following form is copied from RFC 1590, Appendix A.
+
+     To:  IANA@isi.edu
+     Subject:  Registration of new Media Type content-type/subtype
+
+     Media Type name:           Multipart
+
+     Media subtype name:        Related
+
+     Required parameters:       Type, a media type/subtype.
+
+     Optional parameters:       Start
+                                Start-info
+
+     Encoding considerations:   Multipart content-types cannot have
+                                encodings.
+
+     Security considerations:   Depends solely on the referenced type.
+
+     Published specification:   RFC-REL (this document).
+
+     Person & email address to contact for further information:
+                                Edward Levinson
+                                47 Clive Street
+                                Metuchen, NJ  08840-1060
+                                +1 908 494 1606
+                                XIson@cnj.digex.net
+
+3.  Intended usage
+
+   The Multipart/Related media type is intended for compound objects
+   consisting of several inter-related body parts.  For a
+   Multipart/Related object, proper display cannot be achieved by
+   individually displaying the constituent body parts.  The content-type
+   of the Multipart/Related object is specified by the type parameter.
+   The "start" parameter, if given, points, via a content-ID, to the
+   body part that contains the object root.  The default root is the
+   first body part within the Multipart/Related body.
+
+   The relationships among the body parts of a compound object
+   distinguishes it from other object types.  These relationships are
+   often represented by links internal to the object's components that
+
+
+
+Levinson                    Standards Track                     [Page 2]
+
+RFC 2387                   Multipart/Related                 August 1998
+
+
+   reference the other components.  Within a single operating
+   environment the links are often file names, such links may be
+   represented within a MIME message using content-IDs or the value of
+   some other "Content-" headers.
+
+3.1.  The Type Parameter
+
+   The type parameter must be specified and its value is the MIME media
+   type of the "root" body part.  It permits a MIME user agent to
+   determine the content-type without reference to the enclosed body
+   part.  If the value of the type parameter and the root body part's
+   content-type differ then the User Agent's behavior is undefined.
+
+3.2.  The Start Parameter
+
+   The start parameter, if given, is the content-ID of the compound
+   object's "root".  If not present the "root" is the first body part in
+   the Multipart/Related entity.  The "root" is the element the
+   applications processes first.
+
+3.3.  The Start-Info Parameter
+
+   Additional information can be provided to an application by the
+   start-info parameter.  It contains either a string or points, via a
+   content-ID, to another MIME entity in the message.  A typical use
+   might be to provide additional command line parameters or a MIME
+   entity giving auxiliary information for processing the compound
+   object.
+
+   Applications that use Multipart/Related must specify the
+   interpretation of start-info.  User Agents shall provide the
+   parameter's value to the processing application.  Processes can
+   distinguish a start-info reference from a token or quoted-string by
+   examining the first non-white-space character, "<" indicates a
+   reference.
+
+3.4.  Syntax
+
+     related-param   := [ ";" "start" "=" cid ]
+                        [ ";" "start-info"  "="
+                           ( cid-list / value ) ]
+                        [ ";" "type"  "=" type "/" subtype ]
+                        ; order independent
+
+     cid-list        := cid cid-list
+
+     cid             := msg-id     ; c.f. [822]
+
+
+
+
+Levinson                    Standards Track                     [Page 3]
+
+RFC 2387                   Multipart/Related                 August 1998
+
+
+     value           := token / quoted-string    ; c.f. [MIME]
+                           ; value cannot begin with "<"
+
+   Note that the parameter values will usually require quoting.  Msg-id
+   contains the special characters "<", ">", "@", and perhaps other
+   special characters.  If msg-id contains quoted-strings, those quote
+   marks must be escaped.  Similarly, the type parameter contains the
+   special character "/".
+
+4.  Handling Content-Disposition Headers
+
+   Content-Disposition Headers [DISP] suggest presentation styles for
+   MIME body parts.  [DISP] describes two presentation styles, called
+   the disposition type, INLINE and ATTACHMENT.  These, used within a
+   multipart entity, allow the sender to suggest presentation
+   information.  [DISP] also provides for an optional storage (file)
+   name.  Content-Disposition headers could appear in one or more body
+   parts contained within a Multipart/Related entity.
+
+   Using Content-Disposition headers in addition to Multipart/Related
+   provides presentation information to User Agents that do not
+   recognize Multipart/Related.  They will treat the multipart as
+   Multipart/Mixed and they may find the Content-Disposition information
+   useful.
+
+   With Multipart/Related however, the application processing the
+   compound object determines the presentation style for all the
+   contained parts.  In that context the Content-Disposition header
+   information is redundant or even misleading.  Hence, User Agents that
+   understand Multipart/Related shall ignore the disposition type within
+   a Multipart/Related body part.
+
+   It may be possible for a User Agent capable of handling both
+   Multipart/Related and Content-Disposition headers to provide the
+   invoked application the Content-Disposition header's optional
+   filename parameter to the Multipart/Related.  The use of that
+   information will depend on the specific application and should be
+   specified when describing the handling of the corresponding compound
+   object.  Such descriptions would be appropriate in an RFC registering
+   that object's media type.
+
+5.  Examples
+
+5.1 Application/X-FixedRecord
+
+   The X-FixedRecord content-type consists of one or more octet-streams
+   and a list of the lengths of each record.  The root, which lists the
+   record lengths of each record within the streams.  The record length
+
+
+
+Levinson                    Standards Track                     [Page 4]
+
+RFC 2387                   Multipart/Related                 August 1998
+
+
+   list, type Application/X-FixedRecord, consists of a set of INTEGERs
+   in ASCII format, one per line.  Each INTEGER gives the number of
+   octets from the octet-stream body part that constitute the next
+   "record".
+
+   The example below, uses a single data block.
+
+     Content-Type: Multipart/Related; boundary=example-1
+             start="<950120.aaCC@XIson.com>";
+             type="Application/X-FixedRecord"
+             start-info="-o ps"
+
+     --example-1
+     Content-Type: Application/X-FixedRecord
+     Content-ID: <950120.aaCC@XIson.com>
+
+     25
+     10
+     34
+     10
+     25
+     21
+     26
+     10
+     --example-1
+     Content-Type: Application/octet-stream
+     Content-Description: The fixed length records
+     Content-Transfer-Encoding: base64
+     Content-ID: <950120.aaCB@XIson.com>
+
+     T2xkIE1hY0RvbmFsZCBoYWQgYSBmYXJtCkUgSS
+     BFIEkgTwpBbmQgb24gaGlzIGZhcm0gaGUgaGFk
+     IHNvbWUgZHVja3MKRSBJIEUgSSBPCldpdGggYS
+     BxdWFjayBxdWFjayBoZXJlLAphIHF1YWNrIHF1
+     YWNrIHRoZXJlLApldmVyeSB3aGVyZSBhIHF1YW
+     NrIHF1YWNrCkUgSSBFIEkgTwo=
+
+     --example-1--
+
+
+
+
+
+
+
+
+
+
+
+
+
+Levinson                    Standards Track                     [Page 5]
+
+RFC 2387                   Multipart/Related                 August 1998
+
+
+5.2 Text/X-Okie
+
+   The Text/X-Okie is an invented markup language permitting the
+   inclusion of images with text.  A feature of this example is the
+   inclusion of two additional body parts, both picture. They are
+   referred to internally by the encapsulated document via each
+   picture's body part content-ID.  Usage of "cid:", as in this example,
+   may be useful for a variety of compound objects.  It is not, however,
+   a part of the Multipart/Related specification.
+
+     Content-Type: Multipart/Related; boundary=example-2;
+             start="<950118.AEBH@XIson.com>"
+             type="Text/x-Okie"
+
+     --example-2
+     Content-Type: Text/x-Okie; charset=iso-8859-1;
+             declaration="<950118.AEB0@XIson.com>"
+     Content-ID: <950118.AEBH@XIson.com>
+     Content-Description: Document
+
+     {doc}
+     This picture was taken by an automatic camera mounted ...
+     {image file=cid:950118.AECB@XIson.com}
+     {para}
+     Now this is an enlargement of the area ...
+     {image file=cid:950118:AFDH@XIson.com}
+     {/doc}
+     --example-2
+     Content-Type: image/jpeg
+     Content-ID: <950118.AFDH@XIson.com>
+     Content-Transfer-Encoding: BASE64
+     Content-Description: Picture A
+
+     [encoded jpeg image]
+     --example-2
+     Content-Type: image/jpeg
+     Content-ID: <950118.AECB@XIson.com>
+     Content-Transfer-Encoding: BASE64
+     Content-Description: Picture B
+
+     [encoded jpeg image]
+     --example-2--
+
+5.3 Content-Disposition
+
+   In the above example each image body part could also have a Content-
+   Disposition header.  For example,
+
+
+
+
+Levinson                    Standards Track                     [Page 6]
+
+RFC 2387                   Multipart/Related                 August 1998
+
+
+     --example-2
+     Content-Type: image/jpeg
+     Content-ID: <950118.AECB@XIson.com>
+     Content-Transfer-Encoding: BASE64
+     Content-Description: Picture B
+     Content-Disposition: INLINE
+
+     [encoded jpeg image]
+     --example-2--
+
+   User Agents that recognize Multipart/Related will ignore the
+   Content-Disposition header's disposition type.  Other User Agents
+   will process the Multipart/Related as Multipart/Mixed and may make
+   use of that header's information.
+
+6.  User Agent Requirements
+
+   User agents that do not recognize Multipart/Related shall, in
+   accordance with [MIME], treat the entire entity as Multipart/Mixed.
+   MIME User Agents that do recognize Multipart/Related entities but are
+   unable to process the given type should give the user the option of
+   suppressing the entire Multipart/Related body part shall be.
+
+   Existing MIME-capable mail user agents (MUAs) handle the existing
+   media types in a straightforward manner.  For discrete media types
+   (e.g. text, image, etc.) the body of the entity can be directly
+   passed to a display process.  Similarly the existing composite
+   subtypes can be reduced to handing one or more discrete types.
+   Handling Multipart/Related differs in that processing cannot be
+   reduced to handling the individual entities.
+
+   The following sections discuss what information the processing
+   application requires.
+
+   It is possible that an application specific "receiving agent" will
+   manipulate the entities for display prior to invoking actual
+   application process.  Okie, above, is an example of this; it may need
+   a receiving agent to parse the document and substitute local file
+   names for the originator's file names.  Other applications may just
+   require a table showing the correspondence between the local file
+   names and the originator's.  The receiving agent takes responsibility
+   for such processing.
+
+6.1 Data Requirements
+
+   MIME-capable mail user agents (MUAs) are required to provide the
+   application:
+
+
+
+
+Levinson                    Standards Track                     [Page 7]
+
+RFC 2387                   Multipart/Related                 August 1998
+
+
+   (a) the bodies of the MIME entities and the entity Content-* headers,
+
+   (b) the parameters of the Multipart/Related Content-type header, and
+
+   (c) the correspondence between each body's local file name, that
+       body's header data, and, if present, the body part's content-ID.
+
+6.2 Storing Multipart/Related Entities
+
+   The Multipart/Related media type will be used for objects that have
+   internal linkages between the body parts.  When the objects are
+   stored the linkages may require processing by the application or its
+   receiving agent.
+
+6.3 Recursion
+
+   MIME is a recursive structure.  Hence one must expect a
+   Multipart/Related entity to contain other Multipart/Related entities.
+   When a Multipart/Related entity is being processed for display or
+   storage, any enclosed Multipart/Related entities shall be processed
+   as though they were being stored.
+
+6.4 Configuration Considerations
+
+   It is suggested that MUAs that use configuration mechanisms, see
+   [CFG] for an example, refer to Multipart/Related as Multi-
+   part/Related/<type>, were <type> is the value of the "type"
+   parameter.
+
+7.  Security Considerations
+
+   Security considerations relevant to Multipart/Related are identical
+   to those of the underlying content-type.
+
+8.  Acknowledgments
+
+   This proposal is the result of conversations the author has had with
+   many people.  In particular, Harald A. Alvestrand, James Clark,
+   Charles Goldfarb, Gary Houston, Ned Freed, Ray Moody, and Don
+   Stinchfield, provided both encouragement and invaluable help.  The
+   author, however, take full responsibility for all errors contained in
+   this document.
+
+
+
+
+
+
+
+
+
+Levinson                    Standards Track                     [Page 8]
+
+RFC 2387                   Multipart/Related                 August 1998
+
+
+9.  References
+
+   [822]       Crocker, D., "Standard for the Format of ARPA Internet
+               Text Messages", STD 11, RFC 822, August 1982.
+
+   [CID]       Levinson, E., and J. Clark, "Message/External-Body
+               Content-ID Access Type",  RFC 1873, December 1995,
+               Levinson, E., "Message/External-Body Content-ID Access
+               Type", Work in Progress.
+
+   [CFG]       Borenstein, N., "A User Agent Configuration Mechanism For
+               Multimedia Mail Format Information", RFC 1524, September
+               1993.
+
+   [DISP]      Troost, R., and S. Dorner, "Communicating Presentation
+               Information in Internet Messages:  The Content-
+               Disposition Header", RFC 1806, June 1995.
+
+   [MIME]      Borenstein, N., and Freed, N., "Multipurpose Internet
+               Mail Extensions (MIME) Part One: Format of Internet
+               Message Bodies", RFC 2045, November 1996.
+
+9.  Author's Address
+
+   Edward Levinson
+   47 Clive Street
+   Metuchen, NJ  08840-1060
+   USA
+
+   Phone: +1 908 494 1606
+   EMail: XIson@cnj.digex.com
+
+10.  Changes from previous draft (RFC 2112)
+
+   Corrected cid urls to conform to RFC 2111; the angle brackets were
+   removed.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Levinson                    Standards Track                     [Page 9]
+
+RFC 2387                   Multipart/Related                 August 1998
+
+
+11.  Full Copyright Statement
+
+   Copyright (C) The Internet Society (1998).  All Rights Reserved.
+
+   This document and translations of it may be copied and furnished to
+   others, and derivative works that comment on or otherwise explain it
+   or assist in its implementation may be prepared, copied, published
+   and distributed, in whole or in part, without restriction of any
+   kind, provided that the above copyright notice and this paragraph are
+   included on all such copies and derivative works.  However, this
+   document itself may not be modified in any way, such as by removing
+   the copyright notice or references to the Internet Society or other
+   Internet organizations, except as needed for the purpose of
+   developing Internet standards in which case the procedures for
+   copyrights defined in the Internet Standards process must be
+   followed, or as required to translate it into languages other than
+   English.
+
+   The limited permissions granted above are perpetual and will not be
+   revoked by the Internet Society or its successors or assigns.
+
+   This document and the information contained herein is provided on an
+   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
+   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
+   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
+   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
+   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Levinson                    Standards Track                    [Page 10]
+
diff -uNr gmime-1.90.0/rfc/rfc2424.txt gmime/rfc/rfc2424.txt
--- gmime-1.90.0/rfc/rfc2424.txt	Thu Jan  1 01:00:00 1970
+++ gmime/rfc/rfc2424.txt	Tue Dec  5 07:39:10 2000
@@ -0,0 +1,227 @@
+
+
+
+
+
+
+Network Working Group                                         G. Vaudreuil
+Request for Comments: 2424                             Lucent Technologies
+Category: Standards Track                                       G. Parsons
+                                                          Northern Telecom
+                                                            September 1998
+
+
+                            Content Duration
+                         MIME Header Definition
+
+Status of this Memo
+
+   This document specifies an Internet standards track protocol for the
+   Internet community, and requests discussion and suggestions for
+   improvements.  Please refer to the current edition of the "Internet
+   Official Protocol Standards" (STD 1) for the standardization state
+   and status of this protocol.  Distribution of this memo is unlimited.
+
+Copyright Notice
+
+   Copyright (C) The Internet Society (1998).  All Rights Reserved.
+
+Overview
+
+   This document describes the MIME header Content-Duration that is
+   intended for use with any timed media content (typically audio/* or
+   video/*).
+
+1.  Abstract
+
+   This document describes the MIME header Content-Duration that is
+   intended for use with any time varying media content (typically
+   audio/* or video/*).  The length of time is represented in seconds
+   without any units indication.
+
+2. Content-Duration Header Field
+
+   Time varying media contents, for example, a spoken voice message or a
+   video clip, have an inherent time duration.  Many audio and video
+   encodings may include their duration as header information or may
+   allow accurate calculation based on the byte length of the data.
+   However, it may be useful to present the time duration of the content
+   in a MIME header to allow its simple determination without dealing
+   with the actual content.
+
+
+
+
+
+
+
+Vaudreuil & Parsons         Standards Track                     [Page 1]
+
+RFC 2424                    Content-Duration              September 1998
+
+
+   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
+   "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and "OPTIONAL" in this
+   document are to be interpreted as described in [REQ].
+
+2.1 Syntax
+
+   The Content-Duration field's value is a single number specifying the
+   time duration in seconds of the content.  Formally:
+
+   duration := "Content-Duration" ":" 1*10DIGIT
+
+   Note that practically (though highly unlikely in MIME media), the
+   upper bound on the numerical value of the time duration is (2^^31 -
+   1) or 2147483647.
+
+2.2 Semantics
+
+   This field represents the time duration of the associated time
+   varying media content.  The time duration is noted in seconds with no
+   units tag.  The time value should be exact, however the exact value
+   of the time duration cannot be known without opening the content and
+   playing it.  If an exact value must be known, then the latter method
+   should be used.  This mechanism simply allows placing a sender
+   determined time duration value in the header for easy access.
+
+   Though there are several ways to present this duration to the
+   recipient (e.g. with the inbox headers, when audio attachment
+   opened), the actual use of this field on reception is a local
+   implementation issue.
+
+2.3 Example
+
+   In this example the content duration represents 33 seconds:
+
+       Content-Duration: 33
+
+3. VPIM Usage
+
+   The Content-Duration header field for the audio/32KADPCM sub-type is
+   a useful component of the VPIM specification [VPIM2].  All VPIM
+   Messages MUST contain this sub-type to carry the audio of a voice
+   message.  It may be useful in some instances (e.g. viewing on a
+   simple MIME or non-MIME desktop) to have the time duration of the
+   voice message available without having to open the audio content.
+
+
+
+
+
+
+
+Vaudreuil & Parsons         Standards Track                     [Page 2]
+
+RFC 2424                    Content-Duration              September 1998
+
+
+4. Security Considerations
+
+   This definition introduces the option of explicitly identifying the
+   time duration of an audio/* or video/* content outside of the binary
+   data that forms the content.  In some environments (though likely not
+   the majority), the identification of the actual time duration in a
+   header field may be a security issue and as a result should not be
+   noted.  Reliance on the time indicated in this header field cannot be
+   trusted for the purposes of determining the exact size of the data.
+   The exact length of the data must be determined by examining the data
+   itself.
+
+5. Authors' Addresses
+
+   Glenn W. Parsons
+   Northern Telecom
+   P.O. Box 3511, Station C
+   Ottawa, ON  K1Y 4H7
+   Canada
+
+   Phone: +1-613-763-7582
+   Fax: +1-613-763-4461
+   EMail: Glenn.Parsons@Nortel.ca
+
+
+   Gregory M. Vaudreuil
+   Lucent Technologies
+   17080 Dallas Parkway
+   Dallas, TX  75248-1905
+   United States
+
+   Phone/Fax: +1-972-733-2722
+   EMail: GregV@Lucent.Com
+
+6. References
+
+   [MIME2] Freed, N., and N. Borenstein, "Multipurpose Internet Mail
+           Extensions (MIME) Part Two: Media Types", RFC 2046, November
+           1996.
+
+   [VPIM2] Vaudreuil, G., and G. Parsons, "Voice Profile for Internet
+           Mail - version 2", RFC 2421, September 1998.
+
+   [REQ] Bradner, S., "Key words for use in RFCs to Indicate Requirement
+         Levels", BCP 14, RFC 2119, March 1997.
+
+
+
+
+
+
+Vaudreuil & Parsons         Standards Track                     [Page 3]
+
+RFC 2424                    Content-Duration              September 1998
+
+
+7.  Full Copyright Statement
+
+   Copyright (C) The Internet Society (1998).  All Rights Reserved.
+
+   This document and translations of it may be copied and furnished to
+   others, and derivative works that comment on or otherwise explain it
+   or assist in its implementation may be prepared, copied, published
+   and distributed, in whole or in part, without restriction of any
+   kind, provided that the above copyright notice and this paragraph are
+   included on all such copies and derivative works.  However, this
+   document itself may not be modified in any way, such as by removing
+   the copyright notice or references to the Internet Society or other
+   Internet organizations, except as needed for the purpose of
+   developing Internet standards in which case the procedures for
+   copyrights defined in the Internet Standards process must be
+   followed, or as required to translate it into languages other than
+   English.
+
+   The limited permissions granted above are perpetual and will not be
+   revoked by the Internet Society or its successors or assigns.
+
+   This document and the information contained herein is provided on an
+   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
+   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
+   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
+   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
+   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Vaudreuil & Parsons         Standards Track                     [Page 4]
+
diff -uNr gmime-1.90.0/rfc/rfc2630.txt gmime/rfc/rfc2630.txt
--- gmime-1.90.0/rfc/rfc2630.txt	Thu Jan  1 01:00:00 1970
+++ gmime/rfc/rfc2630.txt	Mon Jun  3 05:44:17 2002
@@ -0,0 +1,3363 @@
+
+
+
+
+
+
+Network Working Group                                        R. Housley
+Request for Comments: 2630                                       SPYRUS
+Category: Standards Track                                     June 1999
+
+
+                      Cryptographic Message Syntax
+
+Status of this Memo
+
+   This document specifies an Internet standards track protocol for the
+   Internet community, and requests discussion and suggestions for
+   improvements.  Please refer to the current edition of the "Internet
+   Official Protocol Standards" (STD 1) for the standardization state
+   and status of this protocol.  Distribution of this memo is unlimited.
+
+Copyright Notice
+
+   Copyright (C) The Internet Society (1999).  All Rights Reserved.
+
+Abstract
+
+   This document describes the Cryptographic Message Syntax.  This
+   syntax is used to digitally sign, digest, authenticate, or encrypt
+   arbitrary messages.
+
+   The Cryptographic Message Syntax is derived from PKCS #7 version 1.5
+   as specified in RFC 2315 [PKCS#7].  Wherever possible, backward
+   compatibility is preserved; however, changes were necessary to
+   accommodate attribute certificate transfer and key agreement
+   techniques for key management.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Housley                     Standards Track                     [Page 1]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+Table of Contents
+
+   1   Introduction .................................................  4
+   2   General Overview .............................................  4
+   3   General Syntax ...............................................  5
+   4   Data Content Type ............................................  5
+   5   Signed-data Content Type .....................................  6
+       5.1  SignedData Type .........................................  7
+       5.2  EncapsulatedContentInfo Type ............................  8
+       5.3  SignerInfo Type .........................................  9
+       5.4  Message Digest Calculation Process ...................... 11
+       5.5  Message Signature Generation Process .................... 12
+       5.6  Message Signature Verification Process .................. 12
+   6   Enveloped-data Content Type .................................. 12
+       6.1  EnvelopedData Type ...................................... 14
+       6.2  RecipientInfo Type ...................................... 15
+            6.2.1  KeyTransRecipientInfo Type ....................... 16
+            6.2.2  KeyAgreeRecipientInfo Type ....................... 17
+            6.2.3  KEKRecipientInfo Type ............................ 19
+       6.3  Content-encryption Process .............................. 20
+       6.4  Key-encryption Process .................................. 20
+   7   Digested-data Content Type ................................... 21
+   8   Encrypted-data Content Type .................................. 22
+   9   Authenticated-data Content Type .............................. 23
+       9.1  AuthenticatedData Type .................................. 23
+       9.2  MAC Generation .......................................... 25
+       9.3  MAC Verification ........................................ 26
+   10  Useful Types ................................................. 27
+       10.1  Algorithm Identifier Types ............................. 27
+             10.1.1  DigestAlgorithmIdentifier ...................... 27
+             10.1.2  SignatureAlgorithmIdentifier ................... 27
+             10.1.3  KeyEncryptionAlgorithmIdentifier ............... 28
+             10.1.4  ContentEncryptionAlgorithmIdentifier ........... 28
+             10.1.5  MessageAuthenticationCodeAlgorithm ............. 28
+       10.2  Other Useful Types ..................................... 28
+             10.2.1  CertificateRevocationLists ..................... 28
+             10.2.2  CertificateChoices ............................. 29
+             10.2.3  CertificateSet ................................. 29
+             10.2.4  IssuerAndSerialNumber .......................... 30
+             10.2.5  CMSVersion ..................................... 30
+             10.2.6  UserKeyingMaterial ............................. 30
+             10.2.7  OtherKeyAttribute .............................. 30
+
+
+
+
+
+
+
+
+
+Housley                     Standards Track                     [Page 2]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+   11  Useful Attributes ............................................ 31
+       11.1  Content Type ........................................... 31
+       11.2  Message Digest ......................................... 32
+       11.3  Signing Time ........................................... 32
+       11.4  Countersignature ....................................... 34
+   12  Supported Algorithms ......................................... 35
+       12.1  Digest Algorithms ...................................... 35
+             12.1.1  SHA-1 .......................................... 35
+             12.1.2  MD5 ............................................ 35
+       12.2  Signature Algorithms ................................... 36
+             12.2.1  DSA ............................................ 36
+             12.2.2  RSA ............................................ 36
+       12.3  Key Management Algorithms .............................. 36
+             12.3.1  Key Agreement Algorithms ....................... 36
+                     12.3.1.1  X9.42 Ephemeral-Static Diffie-Hellman. 37
+             12.3.2  Key Transport Algorithms ....................... 38
+                     12.3.2.1  RSA .................................. 39
+             12.3.3  Symmetric Key-Encryption Key Algorithms ........ 39
+                     12.3.3.1  Triple-DES Key Wrap .................. 40
+                     12.3.3.2  RC2 Key Wrap ......................... 41
+      12.4  Content Encryption Algorithms ........................... 41
+            12.4.1  Triple-DES CBC .................................. 42
+            12.4.2  RC2 CBC ......................................... 42
+      12.5  Message Authentication Code Algorithms .................. 42
+            12.5.1  HMAC with SHA-1 ................................. 43
+      12.6  Triple-DES and RC2 Key Wrap Algorithms .................. 43
+            12.6.1  Key Checksum .................................... 44
+            12.6.2  Triple-DES Key Wrap ............................. 44
+            12.6.3  Triple-DES Key Unwrap ........................... 44
+            12.6.4  RC2 Key Wrap .................................... 45
+            12.6.5  RC2 Key Unwrap .................................. 46
+   Appendix A:  ASN.1 Module ........................................ 47
+   References ....................................................... 55
+   Security Considerations .......................................... 56
+   Acknowledgments .................................................. 58
+   Author's Address ................................................. 59
+   Full Copyright Statement ......................................... 60
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Housley                     Standards Track                     [Page 3]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+1  Introduction
+
+   This document describes the Cryptographic Message Syntax.  This
+   syntax is used to digitally sign, digest, authenticate, or encrypt
+   arbitrary messages.
+
+   The Cryptographic Message Syntax describes an encapsulation syntax
+   for data protection.  It supports digital signatures, message
+   authentication codes, and encryption.  The syntax allows multiple
+   encapsulation, so one encapsulation envelope can be nested inside
+   another.  Likewise, one party can digitally sign some previously
+   encapsulated data.  It also allows arbitrary attributes, such as
+   signing time, to be signed along with the message content, and
+   provides for other attributes such as countersignatures to be
+   associated with a signature.
+
+   The Cryptographic Message Syntax can support a variety of
+   architectures for certificate-based key management, such as the one
+   defined by the PKIX working group.
+
+   The Cryptographic Message Syntax values are generated using ASN.1
+   [X.208-88], using BER-encoding [X.209-88].  Values are typically
+   represented as octet strings.  While many systems are capable of
+   transmitting arbitrary octet strings reliably, it is well known that
+   many electronic-mail systems are not.  This document does not address
+   mechanisms for encoding octet strings for reliable transmission in
+   such environments.
+
+2  General Overview
+
+   The Cryptographic Message Syntax (CMS) is general enough to support
+   many different content types.  This document defines one protection
+   content, ContentInfo.  ContentInfo encapsulates a single identified
+   content type, and the identified type may provide further
+   encapsulation.  This document defines six content types: data,
+   signed-data, enveloped-data, digested-data, encrypted-data, and
+   authenticated-data.  Additional content types can be defined outside
+   this document.
+
+   An implementation that conforms to this specification must implement
+   the protection content, ContentInfo, and must implement the data,
+   signed-data, and enveloped-data content types.  The other content
+   types may be implemented if desired.
+
+   As a general design philosophy, each content type permits single pass
+   processing using indefinite-length Basic Encoding Rules (BER)
+   encoding.  Single-pass operation is especially helpful if content is
+   large, stored on tapes, or is "piped" from another process.  Single-
+
+
+
+Housley                     Standards Track                     [Page 4]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+   pass operation has one significant drawback: it is difficult to
+   perform encode operations using the Distinguished Encoding Rules
+   (DER) [X.509-88] encoding in a single pass since the lengths of the
+   various components may not be known in advance.  However, signed
+   attributes within the signed-data content type and authenticated
+   attributes within the authenticated-data content type require DER
+   encoding.  Signed attributes and authenticated attributes must be
+   transmitted in DER form to ensure that recipients can verify a
+   content that contains one or more unrecognized attributes.  Signed
+   attributes and authenticated attributes are the only CMS data types
+   that require DER encoding.
+
+3  General Syntax
+
+   The Cryptographic Message Syntax (CMS) associates a content type
+   identifier with a content.  The syntax shall have ASN.1 type
+   ContentInfo:
+
+      ContentInfo ::= SEQUENCE {
+        contentType ContentType,
+        content [0] EXPLICIT ANY DEFINED BY contentType }
+
+      ContentType ::= OBJECT IDENTIFIER
+
+   The fields of ContentInfo have the following meanings:
+
+      contentType indicates the type of the associated content.  It is
+      an object identifier; it is a unique string of integers assigned
+      by an authority that defines the content type.
+
+      content is the associated content.  The type of content can be
+      determined uniquely by contentType.  Content types for data,
+      signed-data, enveloped-data, digested-data, encrypted-data, and
+      authenticated-data are defined in this document.  If additional
+      content types are defined in other documents, the ASN.1 type
+      defined should not be a CHOICE type.
+
+4  Data Content Type
+
+   The following object identifier identifies the data content type:
+
+      id-data OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+          us(840) rsadsi(113549) pkcs(1) pkcs7(7) 1 }
+
+   The data content type is intended to refer to arbitrary octet
+   strings, such as ASCII text files; the interpretation is left to the
+   application.  Such strings need not have any internal structure
+
+
+
+
+Housley                     Standards Track                     [Page 5]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+   (although they could have their own ASN.1 definition or other
+   structure).
+
+   The data content type is generally encapsulated in the signed-data,
+   enveloped-data, digested-data, encrypted-data, or authenticated-data
+   content type.
+
+5  Signed-data Content Type
+
+   The signed-data content type consists of a content of any type and
+   zero or more signature values.  Any number of signers in parallel can
+   sign any type of content.
+
+   The typical application of the signed-data content type represents
+   one signer's digital signature on content of the data content type.
+   Another typical application disseminates certificates and certificate
+   revocation lists (CRLs).
+
+   The process by which signed-data is constructed involves the
+   following steps:
+
+      1.  For each signer, a message digest, or hash value, is computed
+      on the content with a signer-specific message-digest algorithm.
+      If the signer is signing any information other than the content,
+      the message digest of the content and the other information are
+      digested with the signer's message digest algorithm (see Section
+      5.4), and the result becomes the "message digest."
+
+      2.  For each signer, the message digest is digitally signed using
+      the signer's private key.
+
+      3.  For each signer, the signature value and other signer-specific
+      information are collected into a SignerInfo value, as defined in
+      Section 5.3.  Certificates and CRLs for each signer, and those not
+      corresponding to any signer, are collected in this step.
+
+      4.  The message digest algorithms for all the signers and the
+      SignerInfo values for all the signers are collected together with
+      the content into a SignedData value, as defined in Section 5.1.
+
+   A recipient independently computes the message digest.  This message
+   digest and the signer's public key are used to verify the signature
+   value.  The signer's public key is referenced either by an issuer
+   distinguished name along with an issuer-specific serial number or by
+   a subject key identifier that uniquely identifies the certificate
+   containing the public key.  The signer's certificate may be included
+   in the SignedData certificates field.
+
+
+
+
+Housley                     Standards Track                     [Page 6]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+   This section is divided into six parts.  The first part describes the
+   top-level type SignedData, the second part describes
+   EncapsulatedContentInfo, the third part describes the per-signer
+   information type SignerInfo, and the fourth, fifth, and sixth parts
+   describe the message digest calculation, signature generation, and
+   signature verification processes, respectively.
+
+5.1  SignedData Type
+
+   The following object identifier identifies the signed-data content
+   type:
+
+      id-signedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+          us(840) rsadsi(113549) pkcs(1) pkcs7(7) 2 }
+
+   The signed-data content type shall have ASN.1 type SignedData:
+
+      SignedData ::= SEQUENCE {
+        version CMSVersion,
+        digestAlgorithms DigestAlgorithmIdentifiers,
+        encapContentInfo EncapsulatedContentInfo,
+        certificates [0] IMPLICIT CertificateSet OPTIONAL,
+        crls [1] IMPLICIT CertificateRevocationLists OPTIONAL,
+        signerInfos SignerInfos }
+
+      DigestAlgorithmIdentifiers ::= SET OF DigestAlgorithmIdentifier
+
+      SignerInfos ::= SET OF SignerInfo
+
+   The fields of type SignedData have the following meanings:
+
+      version is the syntax version number.  If no attribute
+      certificates are present in the certificates field, the
+      encapsulated content type is id-data, and all of the elements of
+      SignerInfos are version 1, then the value of version shall be 1.
+      Alternatively, if attribute certificates are present, the
+      encapsulated content type is other than id-data, or any of the
+      elements of SignerInfos are version 3, then the value of version
+      shall be 3.
+
+      digestAlgorithms is a collection of message digest algorithm
+      identifiers.  There may be any number of elements in the
+      collection, including zero.  Each element identifies the message
+      digest algorithm, along with any associated parameters, used by
+      one or more signer.  The collection is intended to list the
+      message digest algorithms employed by all of the signers, in any
+      order, to facilitate one-pass signature verification.  The message
+      digesting process is described in Section 5.4.
+
+
+
+Housley                     Standards Track                     [Page 7]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+      encapContentInfo is the signed content, consisting of a content
+      type identifier and the content itself.  Details of the
+      EncapsulatedContentInfo type are discussed in section 5.2.
+
+      certificates is a collection of certificates.  It is intended that
+      the set of certificates be sufficient to contain chains from a
+      recognized "root" or "top-level certification authority" to all of
+      the signers in the signerInfos field.  There may be more
+      certificates than necessary, and there may be certificates
+      sufficient to contain chains from two or more independent top-
+      level certification authorities.  There may also be fewer
+      certificates than necessary, if it is expected that recipients
+      have an alternate means of obtaining necessary certificates (e.g.,
+      from a previous set of certificates).  As discussed above, if
+      attribute certificates are present, then the value of version
+      shall be 3.
+
+      crls is a collection of certificate revocation lists (CRLs).  It
+      is intended that the set contain information sufficient to
+      determine whether or not the certificates in the certificates
+      field are valid, but such correspondence is not necessary.  There
+      may be more CRLs than necessary, and there may also be fewer CRLs
+      than necessary.
+
+      signerInfos is a collection of per-signer information.  There may
+      be any number of elements in the collection, including zero.  The
+      details of the SignerInfo type are discussed in section 5.3.
+
+5.2  EncapsulatedContentInfo Type
+
+   The content is represented in the type EncapsulatedContentInfo:
+
+      EncapsulatedContentInfo ::= SEQUENCE {
+        eContentType ContentType,
+        eContent [0] EXPLICIT OCTET STRING OPTIONAL }
+
+      ContentType ::= OBJECT IDENTIFIER
+
+   The fields of type EncapsulatedContentInfo have the following
+   meanings:
+
+      eContentType is an object identifier that uniquely specifies the
+      content type.
+
+      eContent is the content itself, carried as an octet string.  The
+      eContent need not be DER encoded.
+
+
+
+
+
+Housley                     Standards Track                     [Page 8]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+   The optional omission of the eContent within the
+   EncapsulatedContentInfo field makes it possible to construct
+   "external signatures."  In the case of external signatures, the
+   content being signed is absent from the EncapsulatedContentInfo value
+   included in the signed-data content type.  If the eContent value
+   within EncapsulatedContentInfo is absent, then the signatureValue is
+   calculated and the eContentType is assigned as though the eContent
+   value was present.
+
+   In the degenerate case where there are no signers, the
+   EncapsulatedContentInfo value being "signed" is irrelevant.  In this
+   case, the content type within the EncapsulatedContentInfo value being
+   "signed" should be id-data (as defined in section 4), and the content
+   field of the EncapsulatedContentInfo value should be omitted.
+
+5.3  SignerInfo Type
+
+   Per-signer information is represented in the type SignerInfo:
+
+      SignerInfo ::= SEQUENCE {
+        version CMSVersion,
+        sid SignerIdentifier,
+        digestAlgorithm DigestAlgorithmIdentifier,
+        signedAttrs [0] IMPLICIT SignedAttributes OPTIONAL,
+        signatureAlgorithm SignatureAlgorithmIdentifier,
+        signature SignatureValue,
+        unsignedAttrs [1] IMPLICIT UnsignedAttributes OPTIONAL }
+
+      SignerIdentifier ::= CHOICE {
+        issuerAndSerialNumber IssuerAndSerialNumber,
+        subjectKeyIdentifier [0] SubjectKeyIdentifier }
+
+      SignedAttributes ::= SET SIZE (1..MAX) OF Attribute
+
+      UnsignedAttributes ::= SET SIZE (1..MAX) OF Attribute
+
+      Attribute ::= SEQUENCE {
+        attrType OBJECT IDENTIFIER,
+        attrValues SET OF AttributeValue }
+
+      AttributeValue ::= ANY
+
+      SignatureValue ::= OCTET STRING
+
+   The fields of type SignerInfo have the following meanings:
+
+      version is the syntax version number.  If the SignerIdentifier is
+      the CHOICE issuerAndSerialNumber, then the version shall be 1.  If
+
+
+
+Housley                     Standards Track                     [Page 9]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+      the SignerIdentifier is subjectKeyIdentifier, then the version
+      shall be 3.
+
+      sid specifies the signer's certificate (and thereby the signer's
+      public key).  The signer's public key is needed by the recipient
+      to verify the signature.  SignerIdentifier provides two
+      alternatives for specifying the signer's public key.  The
+      issuerAndSerialNumber alternative identifies the signer's
+      certificate by the issuer's distinguished name and the certificate
+      serial number; the subjectKeyIdentifier identifies the signer's
+      certificate by the X.509 subjectKeyIdentifier extension value.
+
+      digestAlgorithm identifies the message digest algorithm, and any
+      associated parameters, used by the signer.  The message digest is
+      computed on either the content being signed or the content
+      together with the signed attributes using the process described in
+      section 5.4.  The message digest algorithm should be among those
+      listed in the digestAlgorithms field of the associated SignerData.
+
+      signedAttributes is a collection of attributes that are signed.
+      The field is optional, but it must be present if the content type
+      of the EncapsulatedContentInfo value being signed is not id-data.
+      Each SignedAttribute in the SET must be DER encoded.  Useful
+      attribute types, such as signing time, are defined in Section 11.
+      If the field is present, it must contain, at a minimum, the
+      following two attributes:
+
+         A content-type attribute having as its value the content type
+         of the EncapsulatedContentInfo value being signed.  Section
+         11.1 defines the content-type attribute.  The content-type
+         attribute is not required when used as part of a
+         countersignature unsigned attribute as defined in section 11.4.
+
+         A message-digest attribute, having as its value the message
+         digest of the content.  Section 11.2 defines the message-digest
+         attribute.
+
+      signatureAlgorithm identifies the signature algorithm, and any
+      associated parameters, used by the signer to generate the digital
+      signature.
+
+      signature is the result of digital signature generation, using the
+      message digest and the signer's private key.
+
+      unsignedAttributes is a collection of attributes that are not
+      signed.  The field is optional.  Useful attribute types, such as
+      countersignatures, are defined in Section 11.
+
+
+
+
+Housley                     Standards Track                    [Page 10]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+   The fields of type SignedAttribute and UnsignedAttribute have the
+   following meanings:
+
+      attrType indicates the type of attribute.  It is an object
+      identifier.
+
+      attrValues is a set of values that comprise the attribute.  The
+      type of each value in the set can be determined uniquely by
+      attrType.
+
+5.4  Message Digest Calculation Process
+
+   The message digest calculation process computes a message digest on
+   either the content being signed or the content together with the
+   signed attributes.  In either case, the initial input to the message
+   digest calculation process is the "value" of the encapsulated content
+   being signed.  Specifically, the initial input is the
+   encapContentInfo eContent OCTET STRING to which the signing process
+   is applied.  Only the octets comprising the value of the eContent
+   OCTET STRING are input to the message digest algorithm, not the tag
+   or the length octets.
+
+   The result of the message digest calculation process depends on
+   whether the signedAttributes field is present.  When the field is
+   absent, the result is just the message digest of the content as
+   described above.  When the field is present, however, the result is
+   the message digest of the complete DER encoding of the
+   SignedAttributes value contained in the signedAttributes field.
+   Since the SignedAttributes value, when present, must contain the
+   content type and the content message digest attributes, those values
+   are indirectly included in the result.  The content type attribute is
+   not required when used as part of a countersignature unsigned
+   attribute as defined in section 11.4.  A separate encoding of the
+   signedAttributes field is performed for message digest calculation.
+   The IMPLICIT [0] tag in the signedAttributes field is not used for
+   the DER encoding, rather an EXPLICIT SET OF tag is used.  That is,
+   the DER encoding of the SET OF tag, rather than of the IMPLICIT [0]
+   tag, is to be included in the message digest calculation along with
+   the length and content octets of the SignedAttributes value.
+
+   When the signedAttributes field is absent, then only the octets
+   comprising the value of the signedData encapContentInfo eContent
+   OCTET STRING (e.g., the contents of a file) are input to the message
+   digest calculation.  This has the advantage that the length of the
+   content being signed need not be known in advance of the signature
+   generation process.
+
+
+
+
+
+Housley                     Standards Track                    [Page 11]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+   Although the encapContentInfo eContent OCTET STRING tag and length
+   octets are not included in the message digest calculation, they are
+   still protected by other means.  The length octets are protected by
+   the nature of the message digest algorithm since it is
+   computationally infeasible to find any two distinct messages of any
+   length that have the same message digest.
+
+5.5  Message Signature Generation Process
+
+   The input to the signature generation process includes the result of
+   the message digest calculation process and the signer's private key.
+   The details of the signature generation depend on the signature
+   algorithm employed.  The object identifier, along with any
+   parameters, that specifies the signature algorithm employed by the
+   signer is carried in the signatureAlgorithm field.  The signature
+   value generated by the signer is encoded as an OCTET STRING and
+   carried in the signature field.
+
+5.6  Message Signature Verification Process
+
+   The input to the signature verification process includes the result
+   of the message digest calculation process and the signer's public
+   key.  The recipient may obtain the correct public key for the signer
+   by any means, but the preferred method is from a certificate obtained
+   from the SignedData certificates field.  The selection and validation
+   of the signer's public key may be based on certification path
+   validation (see [PROFILE]) as well as other external context, but is
+   beyond the scope of this document.  The details of the signature
+   verification depend on the signature algorithm employed.
+
+   The recipient may not rely on any message digest values computed by
+   the originator.  If the signedData signerInfo includes
+   signedAttributes, then the content message digest must be calculated
+   as described in section 5.4.  For the signature to be valid, the
+   message digest value calculated by the recipient must be the same as
+   the value of the messageDigest attribute included in the
+   signedAttributes of the signedData signerInfo.
+
+6  Enveloped-data Content Type
+
+   The enveloped-data content type consists of an encrypted content of
+   any type and encrypted content-encryption keys for one or more
+   recipients.  The combination of the encrypted content and one
+   encrypted content-encryption key for a recipient is a "digital
+   envelope" for that recipient.  Any type of content can be enveloped
+   for an arbitrary number of recipients using any of the three key
+   management techniques for each recipient.
+
+
+
+
+Housley                     Standards Track                    [Page 12]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+   The typical application of the enveloped-data content type will
+   represent one or more recipients' digital envelopes on content of the
+   data or signed-data content types.
+
+   Enveloped-data is constructed by the following steps:
+
+      1.  A content-encryption key for a particular content-encryption
+      algorithm is generated at random.
+
+      2.  The content-encryption key is encrypted for each recipient.
+      The details of this encryption depend on the key management
+      algorithm used, but three general techniques are supported:
+
+         key transport:  the content-encryption key is encrypted in the
+         recipient's public key;
+
+         key agreement:  the recipient's public key and the sender's
+         private key are used to generate a pairwise symmetric key, then
+         the content-encryption key is encrypted in the pairwise
+         symmetric key; and
+
+         symmetric key-encryption keys:  the content-encryption key is
+         encrypted in a previously distributed symmetric key-encryption
+         key.
+
+      3.  For each recipient, the encrypted content-encryption key and
+      other recipient-specific information are collected into a
+      RecipientInfo value, defined in Section 6.2.
+
+      4.  The content is encrypted with the content-encryption key.
+      Content encryption may require that the content be padded to a
+      multiple of some block size; see Section 6.3.
+
+      5.  The RecipientInfo values for all the recipients are collected
+      together with the encrypted content to form an EnvelopedData value
+      as defined in Section 6.1.
+
+   A recipient opens the digital envelope by decrypting one of the
+   encrypted content-encryption keys and then decrypting the encrypted
+   content with the recovered content-encryption key.
+
+   This section is divided into four parts.  The first part describes
+   the top-level type EnvelopedData, the second part describes the per-
+   recipient information type RecipientInfo, and the third and fourth
+   parts describe the content-encryption and key-encryption processes.
+
+
+
+
+
+
+Housley                     Standards Track                    [Page 13]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+6.1  EnvelopedData Type
+
+   The following object identifier identifies the enveloped-data content
+   type:
+
+      id-envelopedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+          us(840) rsadsi(113549) pkcs(1) pkcs7(7) 3 }
+
+   The enveloped-data content type shall have ASN.1 type EnvelopedData:
+
+      EnvelopedData ::= SEQUENCE {
+        version CMSVersion,
+        originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,
+        recipientInfos RecipientInfos,
+        encryptedContentInfo EncryptedContentInfo,
+        unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }
+
+      OriginatorInfo ::= SEQUENCE {
+        certs [0] IMPLICIT CertificateSet OPTIONAL,
+        crls [1] IMPLICIT CertificateRevocationLists OPTIONAL }
+
+      RecipientInfos ::= SET OF RecipientInfo
+
+      EncryptedContentInfo ::= SEQUENCE {
+        contentType ContentType,
+        contentEncryptionAlgorithm ContentEncryptionAlgorithmIdentifier,
+        encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL }
+
+      EncryptedContent ::= OCTET STRING
+
+      UnprotectedAttributes ::= SET SIZE (1..MAX) OF Attribute
+
+   The fields of type EnvelopedData have the following meanings:
+
+      version is the syntax version number.  If originatorInfo is
+      present, then version shall be 2.  If any of the RecipientInfo
+      structures included have a version other than 0, then the version
+      shall be 2.  If unprotectedAttrs is present, then version shall be
+      2.  If originatorInfo is absent, all of the RecipientInfo
+      structures are version 0, and unprotectedAttrs is absent, then
+      version shall be 0.
+
+      originatorInfo optionally provides information about the
+      originator.  It is present only if required by the key management
+      algorithm.  It may contain certificates and CRLs:
+
+         certs is a collection of certificates.  certs may contain
+         originator certificates associated with several different key
+
+
+
+Housley                     Standards Track                    [Page 14]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+         management algorithms.  certs may also contain attribute
+         certificates associated with the originator.  The certificates
+         contained in certs are intended to be sufficient to make chains
+         from a recognized "root" or "top-level certification authority"
+         to all recipients.  However, certs may contain more
+         certificates than necessary, and there may be certificates
+         sufficient to make chains from two or more independent top-
+         level certification authorities.  Alternatively, certs may
+         contain fewer certificates than necessary, if it is expected
+         that recipients have an alternate means of obtaining necessary
+         certificates (e.g., from a previous set of certificates).
+
+         crls is a collection of CRLs.  It is intended that the set
+         contain information sufficient to determine whether or not the
+         certificates in the certs field are valid, but such
+         correspondence is not necessary.  There may be more CRLs than
+         necessary, and there may also be fewer CRLs than necessary.
+
+      recipientInfos is a collection of per-recipient information.
+      There must be at least one element in the collection.
+
+      encryptedContentInfo is the encrypted content information.
+
+      unprotectedAttrs is a collection of attributes that are not
+      encrypted.  The field is optional.  Useful attribute types are
+      defined in Section 11.
+
+   The fields of type EncryptedContentInfo have the following meanings:
+
+      contentType indicates the type of content.
+
+      contentEncryptionAlgorithm identifies the content-encryption
+      algorithm, and any associated parameters, used to encrypt the
+      content.  The content-encryption process is described in Section
+      6.3.  The same content-encryption algorithm and content-encryption
+      key is used for all recipients.
+
+      encryptedContent is the result of encrypting the content.  The
+      field is optional, and if the field is not present, its intended
+      value must be supplied by other means.
+
+   The recipientInfos field comes before the encryptedContentInfo field
+   so that an EnvelopedData value may be processed in a single pass.
+
+6.2  RecipientInfo Type
+
+   Per-recipient information is represented in the type RecipientInfo.
+   RecipientInfo has a different format for the three key management
+
+
+
+Housley                     Standards Track                    [Page 15]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+   techniques that are supported: key transport, key agreement, and
+   previously distributed symmetric key-encryption keys.  Any of the
+   three key management techniques can be used for each recipient of the
+   same encrypted content.  In all cases, the content-encryption key is
+   transferred to one or more recipient in encrypted form.
+
+      RecipientInfo ::= CHOICE {
+        ktri KeyTransRecipientInfo,
+        kari [1] KeyAgreeRecipientInfo,
+        kekri [2] KEKRecipientInfo }
+
+      EncryptedKey ::= OCTET STRING
+
+6.2.1  KeyTransRecipientInfo Type
+
+   Per-recipient information using key transport is represented in the
+   type KeyTransRecipientInfo.  Each instance of KeyTransRecipientInfo
+   transfers the content-encryption key to one recipient.
+
+      KeyTransRecipientInfo ::= SEQUENCE {
+        version CMSVersion,  -- always set to 0 or 2
+        rid RecipientIdentifier,
+        keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
+        encryptedKey EncryptedKey }
+
+      RecipientIdentifier ::= CHOICE {
+        issuerAndSerialNumber IssuerAndSerialNumber,
+        subjectKeyIdentifier [0] SubjectKeyIdentifier }
+
+   The fields of type KeyTransRecipientInfo have the following meanings:
+
+      version is the syntax version number.  If the RecipientIdentifier
+      is the CHOICE issuerAndSerialNumber, then the version shall be 0.
+      If the RecipientIdentifier is subjectKeyIdentifier, then the
+      version shall be 2.
+
+      rid specifies the recipient's certificate or key that was used by
+      the sender to protect the content-encryption key.  The
+      RecipientIdentifier provides two alternatives for specifying the
+      recipient's certificate, and thereby the recipient's public key.
+      The recipient's certificate must contain a key transport public
+      key.  The content-encryption key is encrypted with the recipient's
+      public key.  The issuerAndSerialNumber alternative identifies the
+      recipient's certificate by the issuer's distinguished name and the
+      certificate serial number; the subjectKeyIdentifier identifies the
+      recipient's certificate by the X.509 subjectKeyIdentifier
+      extension value.
+
+
+
+
+Housley                     Standards Track                    [Page 16]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+      keyEncryptionAlgorithm identifies the key-encryption algorithm,
+      and any associated parameters, used to encrypt the content-
+      encryption key for the recipient.  The key-encryption process is
+      described in Section 6.4.
+
+      encryptedKey is the result of encrypting the content-encryption
+      key for the recipient.
+
+6.2.2  KeyAgreeRecipientInfo Type
+
+   Recipient information using key agreement is represented in the type
+   KeyAgreeRecipientInfo.  Each instance of KeyAgreeRecipientInfo will
+   transfer the content-encryption key to one or more recipient that
+   uses the same key agreement algorithm and domain parameters for that
+   algorithm.
+
+      KeyAgreeRecipientInfo ::= SEQUENCE {
+        version CMSVersion,  -- always set to 3
+        originator [0] EXPLICIT OriginatorIdentifierOrKey,
+        ukm [1] EXPLICIT UserKeyingMaterial OPTIONAL,
+        keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
+        recipientEncryptedKeys RecipientEncryptedKeys }
+
+      OriginatorIdentifierOrKey ::= CHOICE {
+        issuerAndSerialNumber IssuerAndSerialNumber,
+        subjectKeyIdentifier [0] SubjectKeyIdentifier,
+        originatorKey [1] OriginatorPublicKey }
+
+      OriginatorPublicKey ::= SEQUENCE {
+        algorithm AlgorithmIdentifier,
+        publicKey BIT STRING }
+
+      RecipientEncryptedKeys ::= SEQUENCE OF RecipientEncryptedKey
+
+      RecipientEncryptedKey ::= SEQUENCE {
+        rid KeyAgreeRecipientIdentifier,
+        encryptedKey EncryptedKey }
+
+      KeyAgreeRecipientIdentifier ::= CHOICE {
+        issuerAndSerialNumber IssuerAndSerialNumber,
+        rKeyId [0] IMPLICIT RecipientKeyIdentifier }
+
+      RecipientKeyIdentifier ::= SEQUENCE {
+        subjectKeyIdentifier SubjectKeyIdentifier,
+        date GeneralizedTime OPTIONAL,
+        other OtherKeyAttribute OPTIONAL }
+
+      SubjectKeyIdentifier ::= OCTET STRING
+
+
+
+Housley                     Standards Track                    [Page 17]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+   The fields of type KeyAgreeRecipientInfo have the following meanings:
+
+      version is the syntax version number.  It shall always be 3.
+
+      originator is a CHOICE with three alternatives specifying the
+      sender's key agreement public key.  The sender uses the
+      corresponding private key and the recipient's public key to
+      generate a pairwise key.  The content-encryption key is encrypted
+      in the pairwise key.  The issuerAndSerialNumber alternative
+      identifies the sender's certificate, and thereby the sender's
+      public key, by the issuer's distinguished name and the certificate
+      serial number.  The subjectKeyIdentifier alternative identifies
+      the sender's certificate, and thereby the sender's public key, by
+      the X.509 subjectKeyIdentifier extension value.  The originatorKey
+      alternative includes the algorithm identifier and sender's key
+      agreement public key. Permitting originator anonymity since the
+      public key is not certified.
+
+      ukm is optional.  With some key agreement algorithms, the sender
+      provides a User Keying Material (UKM) to ensure that a different
+      key is generated each time the same two parties generate a
+      pairwise key.
+
+      keyEncryptionAlgorithm identifies the key-encryption algorithm,
+      and any associated parameters, used to encrypt the content-
+      encryption key in the key-encryption key.  The key-encryption
+      process is described in Section 6.4.
+
+      recipientEncryptedKeys includes a recipient identifier and
+      encrypted key for one or more recipients.  The
+      KeyAgreeRecipientIdentifier is a CHOICE with two alternatives
+      specifying the recipient's certificate, and thereby the
+      recipient's public key, that was used by the sender to generate a
+      pairwise key-encryption key.  The recipient's certificate must
+      contain a key agreement public key.  The content-encryption key is
+      encrypted in the pairwise key-encryption key.  The
+      issuerAndSerialNumber alternative identifies the recipient's
+      certificate by the issuer's distinguished name and the certificate
+      serial number; the RecipientKeyIdentifier is described below.  The
+      encryptedKey is the result of encrypting the content-encryption
+      key in the pairwise key-encryption key generated using the key
+      agreement algorithm.
+
+   The fields of type RecipientKeyIdentifier have the following
+   meanings:
+
+      subjectKeyIdentifier identifies the recipient's certificate by the
+      X.509 subjectKeyIdentifier extension value.
+
+
+
+Housley                     Standards Track                    [Page 18]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+      date is optional.  When present, the date specifies which of the
+      recipient's previously distributed UKMs was used by the sender.
+
+      other is optional.  When present, this field contains additional
+      information used by the recipient to locate the public keying
+      material used by the sender.
+
+6.2.3  KEKRecipientInfo Type
+
+   Recipient information using previously distributed symmetric keys is
+   represented in the type KEKRecipientInfo.  Each instance of
+   KEKRecipientInfo will transfer the content-encryption key to one or
+   more recipients who have the previously distributed key-encryption
+   key.
+
+      KEKRecipientInfo ::= SEQUENCE {
+        version CMSVersion,  -- always set to 4
+        kekid KEKIdentifier,
+        keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
+        encryptedKey EncryptedKey }
+
+      KEKIdentifier ::= SEQUENCE {
+        keyIdentifier OCTET STRING,
+        date GeneralizedTime OPTIONAL,
+        other OtherKeyAttribute OPTIONAL }
+
+   The fields of type KEKRecipientInfo have the following meanings:
+
+      version is the syntax version number.  It shall always be 4.
+
+      kekid specifies a symmetric key-encryption key that was previously
+      distributed to the sender and one or more recipients.
+
+      keyEncryptionAlgorithm identifies the key-encryption algorithm,
+      and any associated parameters, used to encrypt the content-
+      encryption key with the key-encryption key.  The key-encryption
+      process is described in Section 6.4.
+
+      encryptedKey is the result of encrypting the content-encryption
+      key in the key-encryption key.
+
+   The fields of type KEKIdentifier have the following meanings:
+
+      keyIdentifier identifies the key-encryption key that was
+      previously distributed to the sender and one or more recipients.
+
+      date is optional.  When present, the date specifies a single key-
+      encryption key from a set that was previously distributed.
+
+
+
+Housley                     Standards Track                    [Page 19]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+      other is optional.  When present, this field contains additional
+      information used by the recipient to determine the key-encryption
+      key used by the sender.
+
+6.3  Content-encryption Process
+
+   The content-encryption key for the desired content-encryption
+   algorithm is randomly generated.  The data to be protected is padded
+   as described below, then the padded data is encrypted using the
+   content-encryption key.  The encryption operation maps an arbitrary
+   string of octets (the data) to another string of octets (the
+   ciphertext) under control of a content-encryption key.  The encrypted
+   data is included in the envelopedData encryptedContentInfo
+   encryptedContent OCTET STRING.
+
+   The input to the content-encryption process is the "value" of the
+   content being enveloped.  Only the value octets of the envelopedData
+   encryptedContentInfo encryptedContent OCTET STRING are encrypted; the
+   OCTET STRING tag and length octets are not encrypted.
+
+   Some content-encryption algorithms assume the input length is a
+   multiple of k octets, where k is greater than one.  For such
+   algorithms, the input shall be padded at the trailing end with
+   k-(lth mod k) octets all having value k-(lth mod k), where lth is
+   the length of the input.  In other words, the input is padded at
+   the trailing end with one of the following strings:
+
+                     01 -- if lth mod k = k-1
+                  02 02 -- if lth mod k = k-2
+                      .
+                      .
+                      .
+            k k ... k k -- if lth mod k = 0
+
+   The padding can be removed unambiguously since all input is padded,
+   including input values that are already a multiple of the block size,
+   and no padding string is a suffix of another.  This padding method is
+   well defined if and only if k is less than 256.
+
+6.4  Key-encryption Process
+
+   The input to the key-encryption process -- the value supplied to the
+   recipient's key-encryption algorithm -- is just the "value" of the
+   content-encryption key.
+
+   Any of the three key management techniques can be used for each
+   recipient of the same encrypted content.
+
+
+
+
+Housley                     Standards Track                    [Page 20]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+7  Digested-data Content Type
+
+   The digested-data content type consists of content of any type and a
+   message digest of the content.
+
+   Typically, the digested-data content type is used to provide content
+   integrity, and the result generally becomes an input to the
+   enveloped-data content type.
+
+   The following steps construct digested-data:
+
+      1.  A message digest is computed on the content with a message-
+      digest algorithm.
+
+      2.  The message-digest algorithm and the message digest are
+      collected together with the content into a DigestedData value.
+
+   A recipient verifies the message digest by comparing the message
+   digest to an independently computed message digest.
+
+   The following object identifier identifies the digested-data content
+   type:
+
+      id-digestedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+          us(840) rsadsi(113549) pkcs(1) pkcs7(7) 5 }
+
+   The digested-data content type shall have ASN.1 type DigestedData:
+
+      DigestedData ::= SEQUENCE {
+        version CMSVersion,
+        digestAlgorithm DigestAlgorithmIdentifier,
+        encapContentInfo EncapsulatedContentInfo,
+        digest Digest }
+
+      Digest ::= OCTET STRING
+
+   The fields of type DigestedData have the following meanings:
+
+      version is the syntax version number.  If the encapsulated content
+      type is id-data, then the value of version shall be 0; however, if
+      the encapsulated content type is other than id-data, then the
+      value of version shall be 2.
+
+      digestAlgorithm identifies the message digest algorithm, and any
+      associated parameters, under which the content is digested.  The
+      message-digesting process is the same as in Section 5.4 in the
+      case when there are no signed attributes.
+
+
+
+
+Housley                     Standards Track                    [Page 21]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+      encapContentInfo is the content that is digested, as defined in
+      section 5.2.
+
+      digest is the result of the message-digesting process.
+
+   The ordering of the digestAlgorithm field, the encapContentInfo
+   field, and the digest field makes it possible to process a
+   DigestedData value in a single pass.
+
+8  Encrypted-data Content Type
+
+   The encrypted-data content type consists of encrypted content of any
+   type.  Unlike the enveloped-data content type, the encrypted-data
+   content type has neither recipients nor encrypted content-encryption
+   keys.  Keys must be managed by other means.
+
+   The typical application of the encrypted-data content type will be to
+   encrypt the content of the data content type for local storage,
+   perhaps where the encryption key is a password.
+
+   The following object identifier identifies the encrypted-data content
+   type:
+
+      id-encryptedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+          us(840) rsadsi(113549) pkcs(1) pkcs7(7) 6 }
+
+   The encrypted-data content type shall have ASN.1 type EncryptedData:
+
+      EncryptedData ::= SEQUENCE {
+        version CMSVersion,
+        encryptedContentInfo EncryptedContentInfo,
+        unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }
+
+   The fields of type EncryptedData have the following meanings:
+
+      version is the syntax version number.  If unprotectedAttrs is
+      present, then version shall be 2.  If unprotectedAttrs is absent,
+      then version shall be 0.
+
+      encryptedContentInfo is the encrypted content information, as
+      defined in Section 6.1.
+
+      unprotectedAttrs is a collection of attributes that are not
+      encrypted.  The field is optional.  Useful attribute types are
+      defined in Section 11.
+
+
+
+
+
+
+Housley                     Standards Track                    [Page 22]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+9  Authenticated-data Content Type
+
+   The authenticated-data content type consists of content of any type,
+   a message authentication code (MAC), and encrypted authentication
+   keys for one or more recipients.  The combination of the MAC and one
+   encrypted authentication key for a recipient is necessary for that
+   recipient to verify the integrity of the content.  Any type of
+   content can be integrity protected for an arbitrary number of
+   recipients.
+
+   The process by which authenticated-data is constructed involves the
+   following steps:
+
+      1.  A message-authentication key for a particular message-
+      authentication algorithm is generated at random.
+
+      2.  The message-authentication key is encrypted for each
+      recipient.  The details of this encryption depend on the key
+      management algorithm used.
+
+      3.  For each recipient, the encrypted message-authentication key
+      and other recipient-specific information are collected into a
+      RecipientInfo value, defined in Section 6.2.
+
+      4.  Using the message-authentication key, the originator computes
+      a MAC value on the content.  If the originator is authenticating
+      any information in addition to the content (see Section 9.2), a
+      message digest is calculated on the content, the message digest of
+      the content and the other information are authenticated using the
+      message-authentication key, and the result becomes the "MAC
+      value."
+
+9.1  AuthenticatedData Type
+
+   The following object identifier identifies the authenticated-data
+   content type:
+
+      id-ct-authData OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+          us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16)
+          ct(1) 2 }
+
+
+
+
+
+
+
+
+
+
+
+Housley                     Standards Track                    [Page 23]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+   The authenticated-data content type shall have ASN.1 type
+   AuthenticatedData:
+
+      AuthenticatedData ::= SEQUENCE {
+        version CMSVersion,
+        originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,
+        recipientInfos RecipientInfos,
+        macAlgorithm MessageAuthenticationCodeAlgorithm,
+        digestAlgorithm [1] DigestAlgorithmIdentifier OPTIONAL,
+        encapContentInfo EncapsulatedContentInfo,
+        authenticatedAttributes [2] IMPLICIT AuthAttributes OPTIONAL,
+        mac MessageAuthenticationCode,
+        unauthenticatedAttributes [3] IMPLICIT UnauthAttributes OPTIONAL }
+
+      AuthAttributes ::= SET SIZE (1..MAX) OF Attribute
+
+      UnauthAttributes ::= SET SIZE (1..MAX) OF Attribute
+
+      MessageAuthenticationCode ::= OCTET STRING
+
+   The fields of type AuthenticatedData have the following meanings:
+
+      version is the syntax version number.  It shall be 0.
+
+      originatorInfo optionally provides information about the
+      originator.  It is present only if required by the key management
+      algorithm.  It may contain certificates, attribute certificates,
+      and CRLs, as defined in Section 6.1.
+
+      recipientInfos is a collection of per-recipient information, as
+      defined in Section 6.1.  There must be at least one element in the
+      collection.
+
+      macAlgorithm is a message authentication code (MAC) algorithm
+      identifier.  It identifies the MAC algorithm, along with any
+      associated parameters, used by the originator.  Placement of the
+      macAlgorithm field facilitates one-pass processing by the
+      recipient.
+
+      digestAlgorithm identifies the message digest algorithm, and any
+      associated parameters, used to compute a message digest on the
+      encapsulated content if authenticated attributes are present.  The
+      message digesting process is described in Section 9.2.  Placement
+      of the digestAlgorithm field facilitates one-pass processing by
+      the recipient.  If the digestAlgorithm field is present, then the
+      authenticatedAttributes field must also be present.
+
+
+
+
+
+Housley                     Standards Track                    [Page 24]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+      encapContentInfo is the content that is authenticated, as defined
+      in section 5.2.
+
+      authenticatedAttributes is a collection of authenticated
+      attributes.  The authenticatedAttributes structure is optional,
+      but it must be present if the content type of the
+      EncapsulatedContentInfo value being authenticated is not id-data.
+      If the authenticatedAttributes field is present, then the
+      digestAlgorithm field must also be present.  Each
+      AuthenticatedAttribute in the SET must be DER encoded.  Useful
+      attribute types are defined in Section 11.  If the
+      authenticatedAttributes field is present, it must contain, at a
+      minimum, the following two attributes:
+
+         A content-type attribute having as its value the content type
+         of the EncapsulatedContentInfo value being authenticated.
+         Section 11.1 defines the content-type attribute.
+
+         A message-digest attribute, having as its value the message
+         digest of the content.  Section 11.2 defines the message-digest
+         attribute.
+
+      mac is the message authentication code.
+
+      unauthenticatedAttributes is a collection of attributes that are
+      not authenticated.  The field is optional.  To date, no attributes
+      have been defined for use as unauthenticated attributes, but other
+      useful attribute types are defined in Section 11.
+
+9.2  MAC Generation
+
+   The MAC calculation process computes a message authentication code
+   (MAC) on either the message being authenticated or a message digest
+   of message being authenticated together with the originator's
+   authenticated attributes.
+
+   If authenticatedAttributes field is absent, the input to the MAC
+   calculation process is the value of the encapContentInfo eContent
+   OCTET STRING.  Only the octets comprising the value of the eContent
+   OCTET STRING are input to the MAC algorithm; the tag and the length
+   octets are omitted.  This has the advantage that the length of the
+   content being authenticated need not be known in advance of the MAC
+   generation process.
+
+   If authenticatedAttributes field is present, the content-type
+   attribute (as described in Section 11.1) and the message-digest
+   attribute (as described in section 11.2) must be included, and the
+   input to the MAC calculation process is the DER encoding of
+
+
+
+Housley                     Standards Track                    [Page 25]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+   authenticatedAttributes.  A separate encoding of the
+   authenticatedAttributes field is performed for message digest
+   calculation.  The IMPLICIT [2] tag in the authenticatedAttributes
+   field is not used for the DER encoding, rather an EXPLICIT SET OF tag
+   is used.  That is, the DER encoding of the SET OF tag, rather than of
+   the IMPLICIT [2] tag, is to be included in the message digest
+   calculation along with the length and content octets of the
+   authenticatedAttributes value.
+
+   The message digest calculation process computes a message digest on
+   the content being authenticated.  The initial input to the message
+   digest calculation process is the "value" of the encapsulated content
+   being authenticated.  Specifically, the input is the encapContentInfo
+   eContent OCTET STRING to which the authentication process is applied.
+   Only the octets comprising the value of the encapContentInfo eContent
+   OCTET STRING are input to the message digest algorithm, not the tag
+   or the length octets.  This has the advantage that the length of the
+   content being authenticated need not be known in advance.  Although
+   the encapContentInfo eContent OCTET STRING tag and length octets are
+   not included in the message digest calculation, they are still
+   protected by other means.  The length octets are protected by the
+   nature of the message digest algorithm since it is computationally
+   infeasible to find any two distinct messages of any length that have
+   the same message digest.
+
+   The input to the MAC calculation process includes the MAC input data,
+   defined above, and an authentication key conveyed in a recipientInfo
+   structure.  The details of MAC calculation depend on the MAC
+   algorithm employed (e.g., HMAC).  The object identifier, along with
+   any parameters, that specifies the MAC algorithm employed by the
+   originator is carried in the macAlgorithm field.  The MAC value
+   generated by the originator is encoded as an OCTET STRING and carried
+   in the mac field.
+
+9.3  MAC Verification
+
+   The input to the MAC verification process includes the input data
+   (determined based on the presence or absence of the
+   authenticatedAttributes field, as defined in 9.2), and the
+   authentication key conveyed in recipientInfo.  The details of the MAC
+   verification process depend on the MAC algorithm employed.
+
+   The recipient may not rely on any MAC values or message digest values
+   computed by the originator.  The content is authenticated as
+   described in section 9.2.  If the originator includes authenticated
+   attributes, then the content of the authenticatedAttributes is
+   authenticated as described in section 9.2.  For authentication to
+   succeed, the message MAC value calculated by the recipient must be
+
+
+
+Housley                     Standards Track                    [Page 26]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+   the same as the value of the mac field.  Similarly, for
+   authentication to succeed when the authenticatedAttributes field is
+   present, the content message digest value calculated by the recipient
+   must be the same as the message digest value included in the
+   authenticatedAttributes message-digest attribute.
+
+10  Useful Types
+
+   This section is divided into two parts.  The first part defines
+   algorithm identifiers, and the second part defines other useful
+   types.
+
+10.1  Algorithm Identifier Types
+
+   All of the algorithm identifiers have the same type:
+   AlgorithmIdentifier.  The definition of AlgorithmIdentifier is
+   imported from X.509 [X.509-88].
+
+   There are many alternatives for each type of algorithm listed.  For
+   each of these five types, Section 12 lists the algorithms that must
+   be included in a CMS implementation.
+
+10.1.1  DigestAlgorithmIdentifier
+
+   The DigestAlgorithmIdentifier type identifies a message-digest
+   algorithm.  Examples include SHA-1, MD2, and MD5.  A message-digest
+   algorithm maps an octet string (the message) to another octet string
+   (the message digest).
+
+      DigestAlgorithmIdentifier ::= AlgorithmIdentifier
+
+10.1.2  SignatureAlgorithmIdentifier
+
+   The SignatureAlgorithmIdentifier type identifies a signature
+   algorithm.  Examples include DSS and RSA.  A signature algorithm
+   supports signature generation and verification operations.  The
+   signature generation operation uses the message digest and the
+   signer's private key to generate a signature value.  The signature
+   verification operation uses the message digest and the signer's
+   public key to determine whether or not a signature value is valid.
+   Context determines which operation is intended.
+
+      SignatureAlgorithmIdentifier ::= AlgorithmIdentifier
+
+
+
+
+
+
+
+
+Housley                     Standards Track                    [Page 27]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+10.1.3  KeyEncryptionAlgorithmIdentifier
+
+   The KeyEncryptionAlgorithmIdentifier type identifies a key-encryption
+   algorithm used to encrypt a content-encryption key.  The encryption
+   operation maps an octet string (the key) to another octet string (the
+   encrypted key) under control of a key-encryption key.  The decryption
+   operation is the inverse of the encryption operation.  Context
+   determines which operation is intended.
+
+   The details of encryption and decryption depend on the key management
+   algorithm used.  Key transport, key agreement, and previously
+   distributed symmetric key-encrypting keys are supported.
+
+      KeyEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
+
+10.1.4  ContentEncryptionAlgorithmIdentifier
+
+   The ContentEncryptionAlgorithmIdentifier type identifies a content-
+   encryption algorithm.  Examples include Triple-DES and RC2.  A
+   content-encryption algorithm supports encryption and decryption
+   operations.  The encryption operation maps an octet string (the
+   message) to another octet string (the ciphertext) under control of a
+   content-encryption key.  The decryption operation is the inverse of
+   the encryption operation.  Context determines which operation is
+   intended.
+
+      ContentEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
+
+10.1.5  MessageAuthenticationCodeAlgorithm
+
+   The MessageAuthenticationCodeAlgorithm type identifies a message
+   authentication code (MAC) algorithm.  Examples include DES-MAC and
+   HMAC.  A MAC algorithm supports generation and verification
+   operations.  The MAC generation and verification operations use the
+   same symmetric key.  Context determines which operation is intended.
+
+      MessageAuthenticationCodeAlgorithm ::= AlgorithmIdentifier
+
+10.2  Other Useful Types
+
+   This section defines types that are used other places in the
+   document.  The types are not listed in any particular order.
+
+10.2.1  CertificateRevocationLists
+
+   The CertificateRevocationLists type gives a set of certificate
+   revocation lists (CRLs). It is intended that the set contain
+   information sufficient to determine whether the certificates and
+
+
+
+Housley                     Standards Track                    [Page 28]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+   attribute certificates with which the set is associated are revoked
+   or not.  However, there may be more CRLs than necessary or there may
+   be fewer CRLs than necessary.
+
+   The CertificateList may contain a CRL, an Authority Revocation List
+   (ARL), a Delta Revocation List, or an Attribute Certificate
+   Revocation List.  All of these lists share a common syntax.
+
+   CRLs are specified in X.509 [X.509-97], and they are profiled for use
+   in the Internet in RFC 2459 [PROFILE].
+
+   The definition of CertificateList is imported from X.509.
+
+      CertificateRevocationLists ::= SET OF CertificateList
+
+10.2.2  CertificateChoices
+
+   The CertificateChoices type gives either a PKCS #6 extended
+   certificate [PKCS#6], an X.509 certificate, or an X.509 attribute
+   certificate [X.509-97].  The PKCS #6 extended certificate is
+   obsolete.  PKCS #6 certificates are included for backward
+   compatibility, and their use should be avoided.  The Internet profile
+   of X.509 certificates is specified in the "Internet X.509 Public Key
+   Infrastructure: Certificate and CRL Profile" [PROFILE].
+
+   The definitions of Certificate and AttributeCertificate are imported
+   from X.509.
+
+      CertificateChoices ::= CHOICE {
+         certificate Certificate,                 -- See X.509
+         extendedCertificate [0] IMPLICIT ExtendedCertificate,
+                                                  -- Obsolete
+         attrCert [1] IMPLICIT AttributeCertificate }
+                                                  -- See X.509 and X9.57
+
+10.2.3  CertificateSet
+
+   The CertificateSet type provides a set of certificates.  It is
+   intended that the set be sufficient to contain chains from a
+   recognized "root" or "top-level certification authority" to all of
+   the sender certificates with which the set is associated.  However,
+   there may be more certificates than necessary, or there may be fewer
+   than necessary.
+
+   The precise meaning of a "chain" is outside the scope of this
+   document.  Some applications may impose upper limits on the length of
+   a chain; others may enforce certain relationships between the
+   subjects and issuers of certificates within a chain.
+
+
+
+Housley                     Standards Track                    [Page 29]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+      CertificateSet ::= SET OF CertificateChoices
+
+10.2.4  IssuerAndSerialNumber
+
+   The IssuerAndSerialNumber type identifies a certificate, and thereby
+   an entity and a public key, by the distinguished name of the
+   certificate issuer and an issuer-specific certificate serial number.
+
+   The definition of Name is imported from X.501 [X.501-88], and the
+   definition of CertificateSerialNumber is imported from X.509
+   [X.509-97].
+
+      IssuerAndSerialNumber ::= SEQUENCE {
+        issuer Name,
+        serialNumber CertificateSerialNumber }
+
+      CertificateSerialNumber ::= INTEGER
+
+10.2.5  CMSVersion
+
+   The Version type gives a syntax version number, for compatibility
+   with future revisions of this document.
+
+      CMSVersion ::= INTEGER  { v0(0), v1(1), v2(2), v3(3), v4(4) }
+
+10.2.6  UserKeyingMaterial
+
+   The UserKeyingMaterial type gives a syntax for user keying material
+   (UKM).  Some key agreement algorithms require UKMs to ensure that a
+   different key is generated each time the same two parties generate a
+   pairwise key.  The sender provides a UKM for use with a specific key
+   agreement algorithm.
+
+      UserKeyingMaterial ::= OCTET STRING
+
+10.2.7  OtherKeyAttribute
+
+   The OtherKeyAttribute type gives a syntax for the inclusion of other
+   key attributes that permit the recipient to select the key used by
+   the sender.  The attribute object identifier must be registered along
+   with the syntax of the attribute itself.  Use of this structure
+   should be avoided since it may impede interoperability.
+
+      OtherKeyAttribute ::= SEQUENCE {
+        keyAttrId OBJECT IDENTIFIER,
+        keyAttr ANY DEFINED BY keyAttrId OPTIONAL }
+
+
+
+
+
+Housley                     Standards Track                    [Page 30]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+11  Useful Attributes
+
+   This section defines attributes that may be used with signed-data,
+   enveloped-data, encrypted-data, or authenticated-data.  The syntax of
+   Attribute is compatible with X.501 [X.501-88] and RFC 2459 [PROFILE].
+   Some of the attributes defined in this section were originally
+   defined in PKCS #9 [PKCS#9], others were not previously defined.  The
+   attributes are not listed in any particular order.
+
+   Additional attributes are defined in many places, notably the S/MIME
+   Version 3 Message Specification [MSG] and the Enhanced Security
+   Services for S/MIME [ESS], which also include recommendations on the
+   placement of these attributes.
+
+11.1  Content Type
+
+   The content-type attribute type specifies the content type of the
+   ContentInfo value being signed in signed-data.  The content-type
+   attribute type is required if there are any authenticated attributes
+   present.
+
+   The content-type attribute must be a signed attribute or an
+   authenticated attribute; it cannot be an unsigned attribute, an
+   unauthenticated attribute, or an unprotectedAttribute.
+
+   The following object identifier identifies the content-type
+   attribute:
+
+      id-contentType OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+          us(840) rsadsi(113549) pkcs(1) pkcs9(9) 3 }
+
+   Content-type attribute values have ASN.1 type ContentType:
+
+      ContentType ::= OBJECT IDENTIFIER
+
+   A content-type attribute must have a single attribute value, even
+   though the syntax is defined as a SET OF AttributeValue.  There must
+   not be zero or multiple instances of AttributeValue present.
+
+   The SignedAttributes and AuthAttributes syntaxes are each defined as
+   a SET OF Attributes.  The SignedAttributes in a signerInfo must not
+   include multiple instances of the content-type attribute.  Similarly,
+   the AuthAttributes in an AuthenticatedData must not include multiple
+   instances of the content-type attribute.
+
+
+
+
+
+
+
+Housley                     Standards Track                    [Page 31]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+11.2  Message Digest
+
+   The message-digest attribute type specifies the message digest of the
+   encapContentInfo eContent OCTET STRING being signed in signed-data
+   (see section 5.4) or authenticated in authenticated-data (see section
+   9.2).  For signed-data, the message digest is computed using the
+   signer's message digest algorithm.  For authenticated-data, the
+   message digest is computed using the originator's message digest
+   algorithm.
+
+   Within signed-data, the message-digest signed attribute type is
+   required if there are any attributes present.  Within authenticated-
+   data, the message-digest authenticated attribute type is required if
+   there are any attributes present.
+
+   The message-digest attribute must be a signed attribute or an
+   authenticated attribute; it cannot be an unsigned attribute or an
+   unauthenticated attribute.
+
+   The following object identifier identifies the message-digest
+   attribute:
+
+      id-messageDigest OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+          us(840) rsadsi(113549) pkcs(1) pkcs9(9) 4 }
+
+   Message-digest attribute values have ASN.1 type MessageDigest:
+
+      MessageDigest ::= OCTET STRING
+
+   A message-digest attribute must have a single attribute value, even
+   though the syntax is defined as a SET OF AttributeValue.  There must
+   not be zero or multiple instances of AttributeValue present.
+
+   The SignedAttributes syntax is defined as a SET OF Attributes.  The
+   SignedAttributes in a signerInfo must not include multiple instances
+   of the message-digest attribute.
+
+11.3  Signing Time
+
+   The signing-time attribute type specifies the time at which the
+   signer (purportedly) performed the signing process.  The signing-time
+   attribute type is intended for use in signed-data.
+
+   The signing-time attribute may be a signed attribute; it cannot be an
+   unsigned attribute, an authenticated attribute, or an unauthenticated
+   attribute.
+
+
+
+
+
+Housley                     Standards Track                    [Page 32]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+   The following object identifier identifies the signing-time
+   attribute:
+
+      id-signingTime OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+          us(840) rsadsi(113549) pkcs(1) pkcs9(9) 5 }
+
+   Signing-time attribute values have ASN.1 type SigningTime:
+
+      SigningTime ::= Time
+
+      Time ::= CHOICE {
+        utcTime          UTCTime,
+        generalizedTime  GeneralizedTime }
+
+   Note: The definition of Time matches the one specified in the 1997
+   version of X.509 [X.509-97].
+
+   Dates between 1 January 1950 and 31 December 2049 (inclusive) must be
+   encoded as UTCTime.  Any dates with year values before 1950 or after
+   2049 must be encoded as GeneralizedTime.
+
+   UTCTime values must be expressed in Greenwich Mean Time (Zulu) and
+   must include seconds (i.e., times are YYMMDDHHMMSSZ), even where the
+   number of seconds is zero.  Midnight (GMT) must be represented as
+   "YYMMDD000000Z".  Century information is implicit, and the century
+   must be determined as follows:
+
+      Where YY is greater than or equal to 50, the year shall be
+      interpreted as 19YY; and
+
+      Where YY is less than 50, the year shall be interpreted as 20YY.
+
+   GeneralizedTime values shall be expressed in Greenwich Mean Time
+   (Zulu) and must include seconds (i.e., times are YYYYMMDDHHMMSSZ),
+   even where the number of seconds is zero.  GeneralizedTime values
+   must not include fractional seconds.
+
+   A signing-time attribute must have a single attribute value, even
+   though the syntax is defined as a SET OF AttributeValue.  There must
+   not be zero or multiple instances of AttributeValue present.
+
+   The SignedAttributes syntax is defined as a SET OF Attributes.  The
+   SignedAttributes in a signerInfo must not include multiple instances
+   of the signing-time attribute.
+
+   No requirement is imposed concerning the correctness of the signing
+   time, and acceptance of a purported signing time is a matter of a
+   recipient's discretion.  It is expected, however, that some signers,
+
+
+
+Housley                     Standards Track                    [Page 33]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+   such as time-stamp servers, will be trusted implicitly.
+
+11.4  Countersignature
+
+   The countersignature attribute type specifies one or more signatures
+   on the contents octets of the DER encoding of the signatureValue
+   field of a SignerInfo value in signed-data.  Thus, the
+   countersignature attribute type countersigns (signs in serial)
+   another signature.
+
+   The countersignature attribute must be an unsigned attribute; it
+   cannot be a signed attribute, an authenticated attribute, or an
+   unauthenticated attribute.
+
+   The following object identifier identifies the countersignature
+   attribute:
+
+      id-countersignature OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+          us(840) rsadsi(113549) pkcs(1) pkcs9(9) 6 }
+
+   Countersignature attribute values have ASN.1 type Countersignature:
+
+      Countersignature ::= SignerInfo
+
+   Countersignature values have the same meaning as SignerInfo values
+   for ordinary signatures, except that:
+
+      1.  The signedAttributes field must contain a message-digest
+      attribute if it contains any other attributes, but need not
+      contain a content-type attribute, as there is no content type for
+      countersignatures.
+
+      2.  The input to the message-digesting process is the contents
+      octets of the DER encoding of the signatureValue field of the
+      SignerInfo value with which the attribute is associated.
+
+   A countersignature attribute can have multiple attribute values.  The
+   syntax is defined as a SET OF AttributeValue, and there must be one
+   or more instances of AttributeValue present.
+
+   The UnsignedAttributes syntax is defined as a SET OF Attributes.  The
+   UnsignedAttributes in a signerInfo may include multiple instances of
+   the countersignature attribute.
+
+   A countersignature, since it has type SignerInfo, can itself contain
+   a countersignature attribute.  Thus it is possible to construct
+   arbitrarily long series of countersignatures.
+
+
+
+
+Housley                     Standards Track                    [Page 34]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+12  Supported Algorithms
+
+   This section lists the algorithms that must be implemented.
+   Additional algorithms that should be implemented are also included.
+
+12.1  Digest Algorithms
+
+   CMS implementations must include SHA-1.  CMS implementations should
+   include MD5.
+
+   Digest algorithm identifiers are located in the SignedData
+   digestAlgorithms field, the SignerInfo digestAlgorithm field, the
+   DigestedData digestAlgorithm field, and the AuthenticatedData
+   digestAlgorithm field.
+
+   Digest values are located in the DigestedData digest field, and
+   digest values are located in the Message Digest authenticated
+   attribute.  In addition, digest values are input to signature
+   algorithms.
+
+12.1.1  SHA-1
+
+   The SHA-1 digest algorithm is defined in FIPS Pub 180-1 [SHA1]. The
+   algorithm identifier for SHA-1 is:
+
+      sha-1 OBJECT IDENTIFIER ::= { iso(1) identified-organization(3)
+          oiw(14) secsig(3) algorithm(2) 26 }
+
+   The AlgorithmIdentifier parameters field is optional.  If present,
+   the parameters field must contain an ASN.1 NULL.  Implementations
+   should accept SHA-1 AlgorithmIdentifiers with absent parameters as
+   well as NULL parameters.  Implementations should generate SHA-1
+   AlgorithmIdentifiers with NULL parameters.
+
+12.1.2  MD5
+
+   The MD5 digest algorithm is defined in RFC 1321 [MD5].  The algorithm
+   identifier for MD5 is:
+
+      md5 OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)
+          rsadsi(113549) digestAlgorithm(2) 5 }
+
+   The AlgorithmIdentifier parameters field must be present, and the
+   parameters field must contain NULL.  Implementations may accept the
+   MD5 AlgorithmIdentifiers with absent parameters as well as NULL
+   parameters.
+
+
+
+
+
+Housley                     Standards Track                    [Page 35]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+12.2  Signature Algorithms
+
+   CMS implementations must include DSA.  CMS implementations may
+   include RSA.
+
+   Signature algorithm identifiers are located in the SignerInfo
+   signatureAlgorithm field.  Also, signature algorithm identifiers are
+   located in the SignerInfo signatureAlgorithm field of
+   countersignature attributes.
+
+   Signature values are located in the SignerInfo signature field.
+   Also, signature values are located in the SignerInfo signature field
+   of countersignature attributes.
+
+12.2.1  DSA
+
+   The DSA signature algorithm is defined in FIPS Pub 186 [DSS].  DSA is
+   always used with the SHA-1 message digest algorithm.  The algorithm
+   identifier for DSA is:
+
+      id-dsa-with-sha1 OBJECT IDENTIFIER ::=  { iso(1) member-body(2)
+          us(840) x9-57 (10040) x9cm(4) 3 }
+
+   The AlgorithmIdentifier parameters field must not be present.
+
+12.2.2  RSA
+
+   The RSA signature algorithm is defined in RFC 2347 [NEWPKCS#1]. RFC
+   2347 specifies the use of the RSA signature algorithm with the SHA-1
+   and MD5 message digest algorithms.  The algorithm identifier for RSA
+   is:
+
+      rsaEncryption OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+          us(840) rsadsi(113549) pkcs(1) pkcs-1(1) 1 }
+
+12.3  Key Management Algorithms
+
+   CMS accommodates three general key management techniques: key
+   agreement, key transport, and previously distributed symmetric key-
+   encryption keys.
+
+12.3.1  Key Agreement Algorithms
+
+   CMS implementations must include key agreement using X9.42
+   Ephemeral-Static Diffie-Hellman.
+
+   Any symmetric encryption algorithm that a CMS implementation includes
+   as a content-encryption algorithm must also be included as a key-
+
+
+
+Housley                     Standards Track                    [Page 36]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+   encryption algorithm.  CMS implementations must include key agreement
+   of Triple-DES pairwise key-encryption keys and Triple-DES wrapping of
+   Triple-DES content-encryption keys.  CMS implementations should
+   include key agreement of RC2 pairwise key-encryption keys and RC2
+   wrapping of RC2 content-encryption keys.  The key wrap algorithm for
+   Triple-DES and RC2 is described in section 12.3.3.
+
+   A CMS implementation may support mixed key-encryption and content-
+   encryption algorithms.  For example, a 128-bit RC2 content-encryption
+   key may be wrapped with 168-bit Triple-DES key-encryption key.
+   Similarly, a 40-bit RC2 content-encryption key may be wrapped with
+   128-bit RC2 key-encryption key.
+
+   For key agreement of RC2 key-encryption keys, 128 bits must be
+   generated as input to the key expansion process used to compute the
+   RC2 effective key [RC2].
+
+   Key agreement algorithm identifiers are located in the EnvelopedData
+   RecipientInfos KeyAgreeRecipientInfo keyEncryptionAlgorithm and
+   AuthenticatedData RecipientInfos KeyAgreeRecipientInfo
+   keyEncryptionAlgorithm fields.
+
+   Key wrap algorithm identifiers are located in the KeyWrapAlgorithm
+   parameters within the EnvelopedData RecipientInfos
+   KeyAgreeRecipientInfo keyEncryptionAlgorithm and AuthenticatedData
+   RecipientInfos KeyAgreeRecipientInfo keyEncryptionAlgorithm fields.
+
+   Wrapped content-encryption keys are located in the EnvelopedData
+   RecipientInfos KeyAgreeRecipientInfo RecipientEncryptedKeys
+   encryptedKey field.  Wrapped message-authentication keys are located
+   in the AuthenticatedData RecipientInfos KeyAgreeRecipientInfo
+   RecipientEncryptedKeys encryptedKey field.
+
+12.3.1.1  X9.42 Ephemeral-Static Diffie-Hellman
+
+   Ephemeral-Static Diffie-Hellman key agreement is defined in RFC 2631
+   [DH-X9.42].  When using Ephemeral-Static Diffie-Hellman, the
+   EnvelopedData RecipientInfos KeyAgreeRecipientInfo and
+   AuthenticatedData RecipientInfos KeyAgreeRecipientInfo fields are
+   used as follows:
+
+      version must be 3.
+
+      originator must be the originatorKey alternative.  The
+      originatorKey algorithm fields must contain the dh-public-number
+      object identifier with absent parameters.  The originatorKey
+      publicKey field must contain the sender's ephemeral public key.
+      The dh-public-number object identifier is:
+
+
+
+Housley                     Standards Track                    [Page 37]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+         dh-public-number OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+             us(840) ansi-x942(10046) number-type(2) 1 }
+
+      ukm may be absent.  When present, the ukm is used to ensure that a
+      different key-encryption key is generated when the ephemeral
+      private key might be used more than once.
+
+      keyEncryptionAlgorithm must be the id-alg-ESDH algorithm
+      identifier.  The algorithm identifier parameter field for id-alg-
+      ESDH is KeyWrapAlgorihtm, and this parameter must be present.  The
+      KeyWrapAlgorithm denotes the symmetric encryption algorithm used
+      to encrypt the content-encryption key with the pairwise key-
+      encryption key generated using the Ephemeral-Static Diffie-Hellman
+      key agreement algorithm.  Triple-DES and RC2 key wrap algorithms
+      are discussed in section 12.3.3.  The id-alg-ESDH algorithm
+      identifier and parameter syntax is:
+
+       id-alg-ESDH OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)
+           rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) alg(3) 5 }
+
+       KeyWrapAlgorithm ::= AlgorithmIdentifier
+
+      recipientEncryptedKeys contains an identifier and an encrypted key
+      for each recipient.  The RecipientEncryptedKey
+      KeyAgreeRecipientIdentifier must contain either the
+      issuerAndSerialNumber identifying the recipient's certificate or
+      the RecipientKeyIdentifier containing the subject key identifier
+      from the recipient's certificate.  In both cases, the recipient's
+      certificate contains the recipient's static public key.
+      RecipientEncryptedKey EncryptedKey must contain the content-
+      encryption key encrypted with the Ephemeral-Static Diffie-Hellman
+      generated pairwise key-encryption key using the algorithm
+      specified by the KeyWrapAlgortihm.
+
+12.3.2  Key Transport Algorithms
+
+   CMS implementations should include key transport using RSA.  RSA
+   implementations must include key transport of Triple-DES content-
+   encryption keys.  RSA implementations should include key transport of
+   RC2 content-encryption keys.
+
+   Key transport algorithm identifiers are located in the EnvelopedData
+   RecipientInfos KeyTransRecipientInfo keyEncryptionAlgorithm and
+   AuthenticatedData RecipientInfos KeyTransRecipientInfo
+   keyEncryptionAlgorithm fields.
+
+   Key transport encrypted content-encryption keys are located in the
+   EnvelopedData RecipientInfos KeyTransRecipientInfo encryptedKey
+
+
+
+Housley                     Standards Track                    [Page 38]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+   field.  Key transport encrypted message-authentication keys are
+   located in the AuthenticatedData RecipientInfos KeyTransRecipientInfo
+   encryptedKey field.
+
+12.3.2.1  RSA
+
+   The RSA key transport algorithm is the RSA encryption scheme defined
+   in RFC 2313 [PKCS#1], block type is 02, where the message to be
+   encrypted is the content-encryption key.  The algorithm identifier
+   for RSA is:
+
+      rsaEncryption OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+          us(840) rsadsi(113549) pkcs(1) pkcs-1(1) 1 }
+
+   The AlgorithmIdentifier parameters field must be present, and the
+   parameters field must contain NULL.
+
+   When using a Triple-DES content-encryption key, adjust the parity
+   bits for each DES key comprising the Triple-DES key prior to RSA
+   encryption.
+
+   The use of RSA encryption, as defined in RFC 2313 [PKCS#1], to
+   provide confidentiality has a known vulnerability concerns.  The
+   vulnerability is primarily relevant to usage in interactive
+   applications rather than to store-and-forward environments.  Further
+   information and proposed countermeasures are discussed in the
+   Security Considerations section of this document.
+
+   Note that the same encryption scheme is also defined in RFC 2437
+   [NEWPKCS#1].  Within RFC 2437, this scheme is called
+   RSAES-PKCS1-v1_5.
+
+12.3.3  Symmetric Key-Encryption Key Algorithms
+
+   CMS implementations may include symmetric key-encryption key
+   management.  Such CMS implementations must include Triple-DES key-
+   encryption keys wrapping Triple-DES content-encryption keys, and such
+   CMS implementations should include RC2 key-encryption keys wrapping
+   RC2 content-encryption keys.  Only 128-bit RC2 keys may be used as
+   key-encryption keys, and they must be used with the
+   RC2ParameterVersion parameter set to 58.  A CMS implementation may
+   support mixed key-encryption and content-encryption algorithms.  For
+   example, a 40-bit RC2 content-encryption key may be wrapped with
+   168-bit Triple-DES key-encryption key or with a 128-bit RC2 key-
+   encryption key.
+
+
+
+
+
+
+Housley                     Standards Track                    [Page 39]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+   Key wrap algorithm identifiers are located in the EnvelopedData
+   RecipientInfos KEKRecipientInfo keyEncryptionAlgorithm and
+   AuthenticatedData RecipientInfos KEKRecipientInfo
+   keyEncryptionAlgorithm fields.
+
+   Wrapped content-encryption keys are located in the EnvelopedData
+   RecipientInfos KEKRecipientInfo encryptedKey field.  Wrapped
+   message-authentication keys are located in the AuthenticatedData
+   RecipientInfos KEKRecipientInfo encryptedKey field.
+
+   The output of a key agreement algorithm is a key-encryption key, and
+   this key-encryption key is used to encrypt the content-encryption
+   key.  In conjunction with key agreement algorithms, CMS
+   implementations must include encryption of content-encryption keys
+   with the pairwise key-encryption key generated using a key agreement
+   algorithm.  To support key agreement, key wrap algorithm identifiers
+   are located in the KeyWrapAlgorithm parameter of the EnvelopedData
+   RecipientInfos KeyAgreeRecipientInfo keyEncryptionAlgorithm and
+   AuthenticatedData RecipientInfos KeyAgreeRecipientInfo
+   keyEncryptionAlgorithm fields.  Wrapped content-encryption keys are
+   located in the EnvelopedData RecipientInfos KeyAgreeRecipientInfo
+   RecipientEncryptedKeys encryptedKey field, wrapped message-
+   authentication keys are located in the AuthenticatedData
+   RecipientInfos KeyAgreeRecipientInfo RecipientEncryptedKeys
+   encryptedKey field.
+
+12.3.3.1  Triple-DES Key Wrap
+
+   Triple-DES key encryption has the algorithm identifier:
+
+      id-alg-CMS3DESwrap OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+          us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) alg(3) 6 }
+
+   The AlgorithmIdentifier parameter field must be NULL.
+
+   The key wrap algorithm used to encrypt a Triple-DES content-
+   encryption key with a Triple-DES key-encryption key is specified in
+   section 12.6.
+
+   Out-of-band distribution of the Triple-DES key-encryption key used to
+   encrypt the Triple-DES content-encryption key is beyond of the scope
+   of this document.
+
+
+
+
+
+
+
+
+
+Housley                     Standards Track                    [Page 40]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+12.3.3.2  RC2 Key Wrap
+
+   RC2 key encryption has the algorithm identifier:
+
+      id-alg-CMSRC2wrap OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+          us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) alg(3) 7 }
+
+   The AlgorithmIdentifier parameter field must be RC2wrapParameter:
+
+      RC2wrapParameter ::= RC2ParameterVersion
+
+      RC2ParameterVersion ::= INTEGER
+
+   The RC2 effective-key-bits (key size) greater than 32 and less than
+   256 is encoded in the RC2ParameterVersion.  For the effective-key-
+   bits of 40, 64, and 128, the rc2ParameterVersion values are 160, 120,
+   and 58 respectively.  These values are not simply the RC2 key length.
+   Note that the value 160 must be encoded as two octets (00 A0),
+   because the one octet (A0) encoding represents a negative number.
+
+   Only 128-bit RC2 keys may be used as key-encryption keys, and they
+   must be used with the RC2ParameterVersion parameter set to 58.
+
+   The key wrap algorithm used to encrypt a RC2 content-encryption key
+   with a RC2 key-encryption key is specified in section 12.6.
+
+   Out-of-band distribution of the RC2 key-encryption key used to
+   encrypt the RC2 content-encryption key is beyond of the scope of this
+   document.
+
+12.4  Content Encryption Algorithms
+
+   CMS implementations must include Triple-DES in CBC mode.  CMS
+   implementations should include RC2 in CBC mode.
+
+   Content encryption algorithms identifiers are located in the
+   EnvelopedData EncryptedContentInfo contentEncryptionAlgorithm and the
+   EncryptedData EncryptedContentInfo contentEncryptionAlgorithm fields.
+
+   Content encryption algorithms are used to encipher the content
+   located in the EnvelopedData EncryptedContentInfo encryptedContent
+   field and the EncryptedData EncryptedContentInfo encryptedContent
+   field.
+
+
+
+
+
+
+
+
+Housley                     Standards Track                    [Page 41]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+12.4.1  Triple-DES CBC
+
+   The Triple-DES algorithm is described in ANSI X9.52 [3DES].  The
+   Triple-DES is composed from three sequential DES [DES] operations:
+   encrypt, decrypt, and encrypt.  Three-Key Triple-DES uses a different
+   key for each DES operation.  Two-Key Triple-DES uses one key for the
+   two encrypt operations and different key for the decrypt operation.
+   The same algorithm identifiers are used for Three-Key Triple-DES and
+   Two-Key Triple-DES.  The algorithm identifier for Triple-DES in
+   Cipher Block Chaining (CBC) mode is:
+
+      des-ede3-cbc OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+          us(840) rsadsi(113549) encryptionAlgorithm(3) 7 }
+
+   The AlgorithmIdentifier parameters field must be present, and the
+   parameters field must contain a CBCParameter:
+
+      CBCParameter ::= IV
+
+      IV ::= OCTET STRING  -- exactly 8 octets
+
+12.4.2  RC2 CBC
+
+   The RC2 algorithm is described in RFC 2268 [RC2].  The algorithm
+   identifier for RC2 in CBC mode is:
+
+      rc2-cbc OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)
+          rsadsi(113549) encryptionAlgorithm(3) 2 }
+
+   The AlgorithmIdentifier parameters field must be present, and the
+   parameters field must contain a RC2CBCParameter:
+
+      RC2CBCParameter ::= SEQUENCE {
+        rc2ParameterVersion INTEGER,
+        iv OCTET STRING  }  -- exactly 8 octets
+
+   The RC2 effective-key-bits (key size) greater than 32 and less than
+   256 is encoded in the rc2ParameterVersion.  For the effective-key-
+   bits of 40, 64, and 128, the rc2ParameterVersion values are 160, 120,
+   and 58 respectively.  These values are not simply the RC2 key length.
+   Note that the value 160 must be encoded as two octets (00 A0), since
+   the one octet (A0) encoding represents a negative number.
+
+12.5  Message Authentication Code Algorithms
+
+   CMS implementations that support authenticatedData must include HMAC
+   with SHA-1.
+
+
+
+
+Housley                     Standards Track                    [Page 42]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+   MAC algorithm identifiers are located in the AuthenticatedData
+   macAlgorithm field.
+
+   MAC values are located in the AuthenticatedData mac field.
+
+12.5.1  HMAC with SHA-1
+
+   The HMAC with SHA-1 algorithm is described in RFC 2104 [HMAC].  The
+   algorithm identifier for HMAC with SHA-1 is:
+
+      hMAC-SHA1 OBJECT IDENTIFIER ::= { iso(1) identified-organization(3)
+          dod(6) internet(1) security(5) mechanisms(5) 8 1 2 }
+
+   The AlgorithmIdentifier parameters field must be absent.
+
+12.6  Triple-DES and RC2 Key Wrap Algorithms
+
+   CMS implementations must include encryption of a Triple-DES content-
+   encryption key with a Triple-DES key-encryption key using the
+   algorithm specified in Sections 12.6.2 and 12.6.3.  CMS
+   implementations should include encryption of a RC2 content-encryption
+   key with a RC2 key-encryption key using the algorithm specified in
+   Sections 12.6.4 and 12.6.5.  Triple-DES and RC2 content-encryption
+   keys are encrypted in Cipher Block Chaining (CBC) mode [MODES].
+
+   Key Transport algorithms allow for the content-encryption key to be
+   directly encrypted; however, key agreement and symmetric key-
+   encryption key algorithms encrypt the content-encryption key with a
+   second symmetric encryption algorithm.  This section describes how
+   the Triple-DES or RC2 content-encryption key is formatted and
+   encrypted.
+
+   Key agreement algorithms generate a pairwise key-encryption key, and
+   a key wrap algorithm is used to encrypt the content-encryption key
+   with the pairwise key-encryption key.  Similarly, a key wrap
+   algorithm is used to encrypt the content-encryption key in a
+   previously distributed key-encryption key.
+
+   The key-encryption key is generated by the key agreement algorithm or
+   distributed out of band.  For key agreement of RC2 key-encryption
+   keys, 128 bits must be generated as input to the key expansion
+   process used to compute the RC2 effective key [RC2].
+
+   The same algorithm identifier is used for both 2-key and 3-key
+   Triple-DES.  When the length of the content-encryption key to be
+   wrapped is a 2-key Triple-DES key, a third key with the same value as
+   the first key is created.  Thus, all Triple-DES content-encryption
+   keys are wrapped like 3-key Triple-DES keys.
+
+
+
+Housley                     Standards Track                    [Page 43]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+12.6.1  Key Checksum
+
+   The CMS Checksum Algorithm is used to provide a content-encryption
+   key integrity check value.  The algorithm is:
+
+   1.  Compute a 20 octet SHA-1 [SHA1] message digest on the
+       content-encryption key.
+   2.  Use the most significant (first) eight octets of the message
+       digest value as the checksum value.
+
+12.6.2  Triple-DES Key Wrap
+
+   The Triple-DES key wrap algorithm encrypts a Triple-DES content-
+   encryption key with a Triple-DES key-encryption key.  The Triple-DES
+   key wrap algorithm is:
+
+   1.  Set odd parity for each of the DES key octets comprising
+       the content-encryption key, call the result CEK.
+   2.  Compute an 8 octet key checksum value on CEK as described above
+       in Section 12.6.1, call the result ICV.
+   3.  Let CEKICV = CEK || ICV.
+   4.  Generate 8 octets at random, call the result IV.
+   5.  Encrypt CEKICV in CBC mode using the key-encryption key.  Use
+       the random value generated in the previous step as the
+       initialization vector (IV).  Call the ciphertext TEMP1.
+   6.  Let TEMP2 = IV || TEMP1.
+   7.  Reverse the order of the octets in TEMP2.  That is, the most
+       significant (first) octet is swapped with the least significant
+       (last) octet, and so on.  Call the result TEMP3.
+   8.  Encrypt TEMP3 in CBC mode using the key-encryption key.  Use
+       an initialization vector (IV) of 0x4adda22c79e82105.
+       The ciphertext is 40 octets long.
+
+   Note:  When the same content-encryption key is wrapped in different
+   key-encryption keys, a fresh initialization vector (IV) must be
+   generated for each invocation of the key wrap algorithm.
+
+12.6.3  Triple-DES Key Unwrap
+
+   The Triple-DES key unwrap algorithm decrypts a Triple-DES content-
+   encryption key using a Triple-DES key-encryption key.  The Triple-DES
+   key unwrap algorithm is:
+
+   1.  If the wrapped content-encryption key is not 40 octets, then
+       error.
+   2.  Decrypt the wrapped content-encryption key in CBC mode using
+       the key-encryption key.  Use an initialization vector (IV)
+       of 0x4adda22c79e82105.  Call the output TEMP3.
+
+
+
+Housley                     Standards Track                    [Page 44]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+   3.  Reverse the order of the octets in TEMP3.  That is, the most
+       significant (first) octet is swapped with the least significant
+       (last) octet, and so on.  Call the result TEMP2.
+   4.  Decompose the TEMP2 into IV and TEMP1.  IV is the most
+       significant (first) 8 octets, and TEMP1 is the least significant
+       (last) 32 octets.
+   5.  Decrypt TEMP1 in CBC mode using the key-encryption key.  Use
+       the IV value from the previous step as the initialization vector.
+       Call the ciphertext CEKICV.
+   6.  Decompose the CEKICV into CEK and ICV. CEK is the most significant
+       (first) 24 octets, and ICV is the least significant (last) 8 octets.
+   7.  Compute an 8 octet key checksum value on CEK as described above
+       in Section 12.6.1.  If the computed key checksum value does not
+       match the decrypted key checksum value, ICV, then error.
+   8.  Check for odd parity each of the DES key octets comprising CEK.
+       If parity is incorrect, then there is an error.
+   9.  Use CEK as the content-encryption key.
+
+12.6.4  RC2 Key Wrap
+
+   The RC2 key wrap algorithm encrypts a RC2 content-encryption key with
+   a RC2 key-encryption key.  The RC2 key wrap algorithm is:
+
+   1.  Let the content-encryption key be called CEK, and let the length
+       of the content-encryption key in octets be called LENGTH.  LENGTH
+       is a single octet.
+   2.  Let LCEK = LENGTH || CEK.
+   3.  Let LCEKPAD = LCEK || PAD.  If the length of LCEK is a multiple
+       of 8, the PAD has a length of zero.  If the length of LCEK is
+       not a multiple of 8, then PAD contains the fewest number of
+       random octets to make the length of LCEKPAD a multiple of 8.
+   4.  Compute an 8 octet key checksum value on LCEKPAD as described
+       above in Section 12.6.1, call the result ICV.
+   5.  Let LCEKPADICV = LCEKPAD || ICV.
+   6.  Generate 8 octets at random, call the result IV.
+   7.  Encrypt LCEKPADICV in CBC mode using the key-encryption key.
+       Use the random value generated in the previous step as the
+       initialization vector (IV).  Call the ciphertext TEMP1.
+   8.  Let TEMP2 = IV || TEMP1.
+   9.  Reverse the order of the octets in TEMP2.  That is, the most
+       significant (first) octet is swapped with the least significant
+       (last) octet, and so on.  Call the result TEMP3.
+   10. Encrypt TEMP3 in CBC mode using the key-encryption key.  Use
+       an initialization vector (IV) of 0x4adda22c79e82105.
+
+   Note:  When the same content-encryption key is wrapped in different
+   key-encryption keys, a fresh initialization vector (IV) must be
+   generated for each invocation of the key wrap algorithm.
+
+
+
+Housley                     Standards Track                    [Page 45]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+12.6.5  RC2 Key Unwrap
+
+   The RC2 key unwrap algorithm decrypts a RC2 content-encryption key
+   using a RC2 key-encryption key.  The RC2 key unwrap algorithm is:
+
+   1.  If the wrapped content-encryption key is not a multiple of 8
+       octets, then error.
+   2.  Decrypt the wrapped content-encryption key in CBC mode using
+       the key-encryption key.  Use an initialization vector (IV)
+       of 0x4adda22c79e82105.  Call the output TEMP3.
+   3.  Reverse the order of the octets in TEMP3.  That is, the most
+       significant (first) octet is swapped with the least significant
+       (last) octet, and so on.  Call the result TEMP2.
+   4.  Decompose the TEMP2 into IV and TEMP1.  IV is the most
+       significant (first) 8 octets, and TEMP1 is the remaining octets.
+
+   5.  Decrypt TEMP1 in CBC mode using the key-encryption key.  Use
+       the IV value from the previous step as the initialization vector.
+       Call the plaintext LCEKPADICV.
+   6.  Decompose the LCEKPADICV into LCEKPAD, and ICV.  ICV is the
+       least significant (last) octet 8 octets.  LCEKPAD is the
+       remaining octets.
+   7.  Compute an 8 octet key checksum value on LCEKPAD as described
+       above in Section 12.6.1.  If the computed key checksum value
+       does not match the decrypted key checksum value, ICV, then error.
+   8.  Decompose the LCEKPAD into LENGTH, CEK, and PAD.  LENGTH is the
+       most significant (first) octet.  CEK is the following LENGTH
+       octets.  PAD is the remaining octets, if any.
+   9.  If the length of PAD is more than 7 octets, then error.
+   10. Use CEK as the content-encryption key.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Housley                     Standards Track                    [Page 46]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+Appendix A:  ASN.1 Module
+
+CryptographicMessageSyntax
+    { iso(1) member-body(2) us(840) rsadsi(113549)
+      pkcs(1) pkcs-9(9) smime(16) modules(0) cms(1) }
+
+DEFINITIONS IMPLICIT TAGS ::=
+BEGIN
+
+-- EXPORTS All
+-- The types and values defined in this module are exported for use in
+-- the other ASN.1 modules.  Other applications may use them for their
+-- own purposes.
+
+IMPORTS
+
+  -- Directory Information Framework (X.501)
+        Name
+           FROM InformationFramework { joint-iso-itu-t ds(5) modules(1)
+                informationFramework(1) 3 }
+
+  -- Directory Authentication Framework (X.509)
+        AlgorithmIdentifier, AttributeCertificate, Certificate,
+        CertificateList, CertificateSerialNumber
+           FROM AuthenticationFramework { joint-iso-itu-t ds(5)
+                module(1) authenticationFramework(7) 3 } ;
+
+
+-- Cryptographic Message Syntax
+
+ContentInfo ::= SEQUENCE {
+  contentType ContentType,
+  content [0] EXPLICIT ANY DEFINED BY contentType }
+
+ContentType ::= OBJECT IDENTIFIER
+
+SignedData ::= SEQUENCE {
+  version CMSVersion,
+  digestAlgorithms DigestAlgorithmIdentifiers,
+  encapContentInfo EncapsulatedContentInfo,
+  certificates [0] IMPLICIT CertificateSet OPTIONAL,
+  crls [1] IMPLICIT CertificateRevocationLists OPTIONAL,
+  signerInfos SignerInfos }
+
+DigestAlgorithmIdentifiers ::= SET OF DigestAlgorithmIdentifier
+
+SignerInfos ::= SET OF SignerInfo
+
+
+
+
+Housley                     Standards Track                    [Page 47]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+EncapsulatedContentInfo ::= SEQUENCE {
+  eContentType ContentType,
+  eContent [0] EXPLICIT OCTET STRING OPTIONAL }
+
+SignerInfo ::= SEQUENCE {
+  version CMSVersion,
+  sid SignerIdentifier,
+  digestAlgorithm DigestAlgorithmIdentifier,
+  signedAttrs [0] IMPLICIT SignedAttributes OPTIONAL,
+  signatureAlgorithm SignatureAlgorithmIdentifier,
+  signature SignatureValue,
+  unsignedAttrs [1] IMPLICIT UnsignedAttributes OPTIONAL }
+
+SignerIdentifier ::= CHOICE {
+  issuerAndSerialNumber IssuerAndSerialNumber,
+  subjectKeyIdentifier [0] SubjectKeyIdentifier }
+
+SignedAttributes ::= SET SIZE (1..MAX) OF Attribute
+
+UnsignedAttributes ::= SET SIZE (1..MAX) OF Attribute
+
+Attribute ::= SEQUENCE {
+  attrType OBJECT IDENTIFIER,
+  attrValues SET OF AttributeValue }
+
+AttributeValue ::= ANY
+
+SignatureValue ::= OCTET STRING
+
+EnvelopedData ::= SEQUENCE {
+  version CMSVersion,
+  originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,
+  recipientInfos RecipientInfos,
+  encryptedContentInfo EncryptedContentInfo,
+  unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }
+
+OriginatorInfo ::= SEQUENCE {
+  certs [0] IMPLICIT CertificateSet OPTIONAL,
+  crls [1] IMPLICIT CertificateRevocationLists OPTIONAL }
+
+RecipientInfos ::= SET OF RecipientInfo
+
+EncryptedContentInfo ::= SEQUENCE {
+  contentType ContentType,
+  contentEncryptionAlgorithm ContentEncryptionAlgorithmIdentifier,
+  encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL }
+
+EncryptedContent ::= OCTET STRING
+
+
+
+Housley                     Standards Track                    [Page 48]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+UnprotectedAttributes ::= SET SIZE (1..MAX) OF Attribute
+
+RecipientInfo ::= CHOICE {
+  ktri KeyTransRecipientInfo,
+  kari [1] KeyAgreeRecipientInfo,
+  kekri [2] KEKRecipientInfo }
+
+EncryptedKey ::= OCTET STRING
+
+KeyTransRecipientInfo ::= SEQUENCE {
+  version CMSVersion,  -- always set to 0 or 2
+  rid RecipientIdentifier,
+  keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
+  encryptedKey EncryptedKey }
+
+RecipientIdentifier ::= CHOICE {
+  issuerAndSerialNumber IssuerAndSerialNumber,
+  subjectKeyIdentifier [0] SubjectKeyIdentifier }
+
+KeyAgreeRecipientInfo ::= SEQUENCE {
+  version CMSVersion,  -- always set to 3
+  originator [0] EXPLICIT OriginatorIdentifierOrKey,
+  ukm [1] EXPLICIT UserKeyingMaterial OPTIONAL,
+  keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
+  recipientEncryptedKeys RecipientEncryptedKeys }
+
+OriginatorIdentifierOrKey ::= CHOICE {
+  issuerAndSerialNumber IssuerAndSerialNumber,
+  subjectKeyIdentifier [0] SubjectKeyIdentifier,
+  originatorKey [1] OriginatorPublicKey }
+
+OriginatorPublicKey ::= SEQUENCE {
+  algorithm AlgorithmIdentifier,
+  publicKey BIT STRING }
+
+RecipientEncryptedKeys ::= SEQUENCE OF RecipientEncryptedKey
+
+RecipientEncryptedKey ::= SEQUENCE {
+  rid KeyAgreeRecipientIdentifier,
+  encryptedKey EncryptedKey }
+
+KeyAgreeRecipientIdentifier ::= CHOICE {
+  issuerAndSerialNumber IssuerAndSerialNumber,
+  rKeyId [0] IMPLICIT RecipientKeyIdentifier }
+
+
+
+
+
+
+
+Housley                     Standards Track                    [Page 49]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+RecipientKeyIdentifier ::= SEQUENCE {
+  subjectKeyIdentifier SubjectKeyIdentifier,
+  date GeneralizedTime OPTIONAL,
+  other OtherKeyAttribute OPTIONAL }
+
+SubjectKeyIdentifier ::= OCTET STRING
+
+KEKRecipientInfo ::= SEQUENCE {
+  version CMSVersion,  -- always set to 4
+  kekid KEKIdentifier,
+  keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
+  encryptedKey EncryptedKey }
+
+KEKIdentifier ::= SEQUENCE {
+  keyIdentifier OCTET STRING,
+  date GeneralizedTime OPTIONAL,
+  other OtherKeyAttribute OPTIONAL }
+
+DigestedData ::= SEQUENCE {
+  version CMSVersion,
+  digestAlgorithm DigestAlgorithmIdentifier,
+  encapContentInfo EncapsulatedContentInfo,
+  digest Digest }
+
+Digest ::= OCTET STRING
+
+EncryptedData ::= SEQUENCE {
+  version CMSVersion,
+  encryptedContentInfo EncryptedContentInfo,
+  unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }
+
+AuthenticatedData ::= SEQUENCE {
+  version CMSVersion,
+  originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,
+  recipientInfos RecipientInfos,
+  macAlgorithm MessageAuthenticationCodeAlgorithm,
+  digestAlgorithm [1] DigestAlgorithmIdentifier OPTIONAL,
+  encapContentInfo EncapsulatedContentInfo,
+  authenticatedAttributes [2] IMPLICIT AuthAttributes OPTIONAL,
+  mac MessageAuthenticationCode,
+  unauthenticatedAttributes [3] IMPLICIT UnauthAttributes OPTIONAL }
+
+AuthAttributes ::= SET SIZE (1..MAX) OF Attribute
+
+UnauthAttributes ::= SET SIZE (1..MAX) OF Attribute
+
+MessageAuthenticationCode ::= OCTET STRING
+
+
+
+
+Housley                     Standards Track                    [Page 50]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+DigestAlgorithmIdentifier ::= AlgorithmIdentifier
+
+SignatureAlgorithmIdentifier ::= AlgorithmIdentifier
+
+KeyEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
+
+ContentEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
+
+MessageAuthenticationCodeAlgorithm ::= AlgorithmIdentifier
+
+CertificateRevocationLists ::= SET OF CertificateList
+
+CertificateChoices ::= CHOICE {
+  certificate Certificate,  -- See X.509
+  extendedCertificate [0] IMPLICIT ExtendedCertificate,  -- Obsolete
+  attrCert [1] IMPLICIT AttributeCertificate }  -- See X.509 & X9.57
+
+CertificateSet ::= SET OF CertificateChoices
+
+IssuerAndSerialNumber ::= SEQUENCE {
+  issuer Name,
+  serialNumber CertificateSerialNumber }
+
+CMSVersion ::= INTEGER  { v0(0), v1(1), v2(2), v3(3), v4(4) }
+
+UserKeyingMaterial ::= OCTET STRING
+
+OtherKeyAttribute ::= SEQUENCE {
+  keyAttrId OBJECT IDENTIFIER,
+  keyAttr ANY DEFINED BY keyAttrId OPTIONAL }
+
+
+-- CMS Attributes
+
+MessageDigest ::= OCTET STRING
+
+SigningTime  ::= Time
+
+Time ::= CHOICE {
+  utcTime UTCTime,
+  generalTime GeneralizedTime }
+
+Countersignature ::= SignerInfo
+
+
+
+
+
+
+
+
+Housley                     Standards Track                    [Page 51]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+-- Algorithm Identifiers
+
+sha-1 OBJECT IDENTIFIER ::= { iso(1) identified-organization(3)
+    oiw(14) secsig(3) algorithm(2) 26 }
+
+md5 OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)
+    rsadsi(113549) digestAlgorithm(2) 5 }
+
+id-dsa-with-sha1 OBJECT IDENTIFIER ::=  { iso(1) member-body(2)
+    us(840) x9-57 (10040) x9cm(4) 3 }
+
+rsaEncryption OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+    us(840) rsadsi(113549) pkcs(1) pkcs-1(1) 1 }
+
+dh-public-number OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+    us(840) ansi-x942(10046) number-type(2) 1 }
+
+id-alg-ESDH OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)
+    rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) alg(3) 5 }
+
+id-alg-CMS3DESwrap OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+    us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) alg(3) 6 }
+
+id-alg-CMSRC2wrap OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+    us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) alg(3) 7 }
+
+des-ede3-cbc OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+    us(840) rsadsi(113549) encryptionAlgorithm(3) 7 }
+
+rc2-cbc OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)
+    rsadsi(113549) encryptionAlgorithm(3) 2 }
+
+hMAC-SHA1 OBJECT IDENTIFIER ::= { iso(1) identified-organization(3)
+    dod(6) internet(1) security(5) mechanisms(5) 8 1 2 }
+
+
+-- Algorithm Parameters
+
+KeyWrapAlgorithm ::= AlgorithmIdentifier
+
+RC2wrapParameter ::= RC2ParameterVersion
+
+RC2ParameterVersion ::= INTEGER
+
+CBCParameter ::= IV
+
+IV ::= OCTET STRING  -- exactly 8 octets
+
+
+
+
+Housley                     Standards Track                    [Page 52]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+RC2CBCParameter ::= SEQUENCE {
+  rc2ParameterVersion INTEGER,
+  iv OCTET STRING  }  -- exactly 8 octets
+
+
+-- Content Type Object Identifiers
+
+id-ct-contentInfo OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+    us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16)
+    ct(1) 6 }
+
+id-data OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+    us(840) rsadsi(113549) pkcs(1) pkcs7(7) 1 }
+
+id-signedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+    us(840) rsadsi(113549) pkcs(1) pkcs7(7) 2 }
+
+id-envelopedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+    us(840) rsadsi(113549) pkcs(1) pkcs7(7) 3 }
+
+id-digestedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+    us(840) rsadsi(113549) pkcs(1) pkcs7(7) 5 }
+
+id-encryptedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+    us(840) rsadsi(113549) pkcs(1) pkcs7(7) 6 }
+
+id-ct-authData OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+    us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16)
+    ct(1) 2 }
+
+
+-- Attribute Object Identifiers
+
+id-contentType OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+    us(840) rsadsi(113549) pkcs(1) pkcs9(9) 3 }
+
+id-messageDigest OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+    us(840) rsadsi(113549) pkcs(1) pkcs9(9) 4 }
+
+id-signingTime OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+    us(840) rsadsi(113549) pkcs(1) pkcs9(9) 5 }
+
+id-countersignature OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+    us(840) rsadsi(113549) pkcs(1) pkcs9(9) 6 }
+
+
+
+
+
+
+
+Housley                     Standards Track                    [Page 53]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+-- Obsolete Extended Certificate syntax from PKCS#6
+
+ExtendedCertificate ::= SEQUENCE {
+  extendedCertificateInfo ExtendedCertificateInfo,
+  signatureAlgorithm SignatureAlgorithmIdentifier,
+  signature Signature }
+
+ExtendedCertificateInfo ::= SEQUENCE {
+  version CMSVersion,
+  certificate Certificate,
+  attributes UnauthAttributes }
+
+Signature ::= BIT STRING
+
+
+END -- of CryptographicMessageSyntax
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Housley                     Standards Track                    [Page 54]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+References
+
+   3DES       American National Standards Institute.  ANSI X9.52-1998,
+              Triple Data Encryption Algorithm Modes of Operation. 1998.
+
+   DES        American National Standards Institute.  ANSI X3.106,
+              "American National Standard for Information Systems - Data
+              Link Encryption".  1983.
+
+   DH-X9.42   Rescorla, E., "Diffie-Hellman Key Agreement Method",
+              RFC 2631, June 1999.
+
+   DSS        National Institute of Standards and Technology.
+              FIPS Pub 186: Digital Signature Standard.  19 May 1994.
+
+   ESS        Hoffman, P., Editor, "Enhanced Security Services for
+              S/MIME", RFC 2634, June 1999.
+
+   HMAC       Krawczyk, H., "HMAC: Keyed-Hashing for Message
+              Authentication", RFC 2104, February 1997.
+
+   MD5        Rivest, R., "The MD5 Message-Digest Algorithm", RFC 1321,
+              April 1992.
+
+   MODES      National Institute of Standards and Technology.
+              FIPS Pub 81: DES Modes of Operation.  2 December 1980.
+
+   MSG        Ramsdell, B., Editor, "S/MIME Version 3 Message
+              Specification", RFC 2633, June 1999.
+
+   NEWPKCS#1  Kaliski, B., "PKCS #1: RSA Encryption, Version 2.0",
+              RFC 2347, October 1998.
+
+   PROFILE    Housley, R., Ford, W., Polk, W. and D. Solo, "Internet
+              X.509 Public Key Infrastructure: Certificate and CRL
+              Profile", RFC 2459, January 1999.
+
+   PKCS#1     Kaliski, B., "PKCS #1: RSA Encryption, Version 1.5.",
+              RFC 2313, March 1998.
+
+   PKCS#6     RSA Laboratories.  PKCS #6: Extended-Certificate Syntax
+              Standard, Version 1.5.  November 1993.
+
+   PKCS#7     Kaliski, B., "PKCS #7: Cryptographic Message Syntax,
+              Version 1.5.", RFC 2315, March 1998.
+
+   PKCS#9     RSA Laboratories.  PKCS #9: Selected Attribute Types,
+              Version 1.1.  November 1993.
+
+
+
+Housley                     Standards Track                    [Page 55]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+   RANDOM     Eastlake, D., Crocker, S. and J. Schiller, "Randomness
+              Recommendations for Security", RFC 1750, December 1994.
+
+   RC2        Rivest, R., "A Description of the RC2 (r) Encryption
+              Algorithm", RFC 2268, March 1998.
+
+   SHA1       National Institute of Standards and Technology.
+              FIPS Pub 180-1: Secure Hash Standard.  17 April 1995.
+
+   X.208-88   CCITT.  Recommendation X.208: Specification of Abstract
+              Syntax Notation One (ASN.1).  1988.
+
+   X.209-88   CCITT.  Recommendation X.209: Specification of Basic
+              Encoding Rules for Abstract Syntax Notation One (ASN.1).
+              1988.
+
+   X.501-88   CCITT.  Recommendation X.501: The Directory - Models.
+              1988.
+
+   X.509-88   CCITT.  Recommendation X.509: The Directory -
+              Authentication Framework.  1988.
+
+   X.509-97   ITU-T.  Recommendation X.509: The Directory -
+              Authentication Framework.  1997.
+
+Security Considerations
+
+   The Cryptographic Message Syntax provides a method for digitally
+   signing data, digesting data, encrypting data, and authenticating
+   data.
+
+   Implementations must protect the signer's private key.  Compromise of
+   the signer's private key permits masquerade.
+
+   Implementations must protect the key management private key, the
+   key-encryption key, and the content-encryption key.  Compromise of
+   the key management private key or the key-encryption key may result
+   in the disclosure of all messages protected with that key.
+   Similarly, compromise of the content-encryption key may result in
+   disclosure of the associated encrypted content.
+
+   Implementations must protect the key management private key and the
+   message-authentication key.  Compromise of the key management private
+   key permits masquerade of authenticated data.  Similarly, compromise
+   of the message-authentication key may result in undetectable
+   modification of the authenticated content.
+
+
+
+
+
+Housley                     Standards Track                    [Page 56]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+   Implementations must randomly generate content-encryption keys,
+   message-authentication keys, initialization vectors (IVs), and
+   padding.  Also, the generation of public/private key pairs relies on
+   a random numbers.  The use of inadequate pseudo-random number
+   generators (PRNGs) to generate cryptographic keys can result in
+   little or no security.  An attacker may find it much easier to
+   reproduce the PRNG environment that produced the keys, searching the
+   resulting small set of possibilities, rather than brute force
+   searching the whole key space.  The generation of quality random
+   numbers is difficult.  RFC 1750 [RANDOM] offers important guidance in
+   this area, and Appendix 3 of FIPS Pub 186 [DSS] provides one quality
+   PRNG technique.
+
+   When using key agreement algorithms or previously distributed
+   symmetric key-encryption keys, a key-encryption key is used to
+   encrypt the content-encryption key.  If the key-encryption and
+   content-encryption algorithms are different, the effective security
+   is determined by the weaker of the two algorithms.  If, for example,
+   a message content is encrypted with 168-bit Triple-DES and the
+   Triple-DES content-encryption key is wrapped with a 40-bit RC2 key,
+   then at most 40 bits of protection is provided.  A trivial search to
+   determine the value of the 40-bit RC2 key can recover Triple-DES key,
+   and then the Triple-DES key can be used to decrypt the content.
+   Therefore, implementers must ensure that key-encryption algorithms
+   are as strong or stronger than content-encryption algorithms.
+
+   Section 12.6 specifies key wrap algorithms used to encrypt a Triple-
+   DES [3DES] content-encryption key with a Triple-DES key-encryption
+   key or to encrypt a RC2 [RC2] content-encryption key with a RC2 key-
+   encryption key.  The key wrap algorithms make use of CBC mode
+   [MODES].  These key wrap algorithms have been reviewed for use with
+   Triple and RC2.  They have not been reviewed for use with other
+   cryptographic modes or other encryption algorithms.  Therefore, if a
+   CMS implementation wishes to support ciphers in addition to Triple-
+   DES or RC2, then additional key wrap algorithms need to be defined to
+   support the additional ciphers.
+
+   Implementers should be aware that cryptographic algorithms become
+   weaker with time.  As new cryptoanalysis techniques are developed and
+   computing performance improves, the work factor to break a particular
+   cryptographic algorithm will reduce.  Therefore, cryptographic
+   algorithm implementations should be modular allowing new algorithms
+   to be readily inserted.  That is, implementers should be prepared for
+   the set of mandatory to implement algorithms to change over time.
+
+   The countersignature unauthenticated attribute includes a digital
+   signature that is computed on the content signature value, thus the
+   countersigning process need not know the original signed content.
+
+
+
+Housley                     Standards Track                    [Page 57]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+   This structure permits implementation efficiency advantages; however,
+   this structure may also permit the countersigning of an inappropriate
+   signature value.  Therefore, implementations that perform
+   countersignatures should either verify the original signature value
+   prior to countersigning it (this verification requires processing of
+   the original content), or implementations should perform
+   countersigning in a context that ensures that only appropriate
+   signature values are countersigned.
+
+   Users of CMS, particularly those employing CMS to support interactive
+   applications, should be aware that PKCS #1 Version 1.5 as specified
+   in RFC 2313 [PKCS#1] is vulnerable to adaptive chosen ciphertext
+   attacks when applied for encryption purposes.  Exploitation of this
+   identified vulnerability, revealing the result of a particular RSA
+   decryption, requires access to an oracle which will respond to a
+   large number of ciphertexts (based on currently available results,
+   hundreds of thousands or more), which are constructed adaptively in
+   response to previously-received replies providing information on the
+   successes or failures of attempted decryption operations.  As a
+   result, the attack appears significantly less feasible to perpetrate
+   for store-and-forward S/MIME environments than for directly
+   interactive protocols.  Where CMS constructs are applied as an
+   intermediate encryption layer within an interactive request-response
+   communications environment, exploitation could be more feasible.
+
+   An updated version of PKCS #1 has been published, PKCS #1 Version 2.0
+   [NEWPKCS#1].  This new document will supersede RFC 2313.  PKCS #1
+   Version 2.0 preserves support for the encryption padding format
+   defined in PKCS #1 Version 1.5 [PKCS#1], and it also defines a new
+   alternative.  To resolve the adaptive chosen ciphertext
+   vulnerability, the PKCS #1 Version 2.0 specifies and recommends use
+   of Optimal Asymmetric Encryption Padding (OAEP) when RSA encryption
+   is used to provide confidentiality.  Designers of protocols and
+   systems employing CMS for interactive environments should either
+   consider usage of OAEP, or should ensure that information which could
+   reveal the success or failure of attempted PKCS #1 Version 1.5
+   decryption operations is not provided.  Support for OAEP will likely
+   be added to a future version of the CMS specification.
+
+Acknowledgments
+
+   This document is the result of contributions from many professionals.
+   I appreciate the hard work of all members of the IETF S/MIME Working
+   Group.  I extend a special thanks to Rich Ankney, Tim Dean, Steve
+   Dusse, Carl Ellison, Peter Gutmann, Bob Jueneman, Stephen Henson,
+   Paul Hoffman, Scott Hollenbeck, Don Johnson, Burt Kaliski, John Linn,
+   John Pawling, Blake Ramsdell, Francois Rousseau, Jim Schaad, and Dave
+   Solo for their efforts and support.
+
+
+
+Housley                     Standards Track                    [Page 58]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+Author's Address
+
+   Russell Housley
+   SPYRUS
+   381 Elden Street
+   Suite 1120
+   Herndon, VA 20170
+   USA
+
+   EMail: housley@spyrus.com
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Housley                     Standards Track                    [Page 59]
+
+RFC 2630              Cryptographic Message Syntax             June 1999
+
+
+Full Copyright Statement
+
+   Copyright (C) The Internet Society (1999).  All Rights Reserved.
+
+   This document and translations of it may be copied and furnished to
+   others, and derivative works that comment on or otherwise explain it
+   or assist in its implementation may be prepared, copied, published
+   and distributed, in whole or in part, without restriction of any
+   kind, provided that the above copyright notice and this paragraph are
+   included on all such copies and derivative works.  However, this
+   document itself may not be modified in any way, such as by removing
+   the copyright notice or references to the Internet Society or other
+   Internet organizations, except as needed for the purpose of
+   developing Internet standards in which case the procedures for
+   copyrights defined in the Internet Standards process must be
+   followed, or as required to translate it into languages other than
+   English.
+
+   The limited permissions granted above are perpetual and will not be
+   revoked by the Internet Society or its successors or assigns.
+
+   This document and the information contained herein is provided on an
+   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
+   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
+   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
+   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
+   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
+
+Acknowledgement
+
+   Funding for the RFC Editor function is currently provided by the
+   Internet Society.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Housley                     Standards Track                    [Page 60]
+
diff -uNr gmime-1.90.0/rfc/rfc2631.txt gmime/rfc/rfc2631.txt
--- gmime-1.90.0/rfc/rfc2631.txt	Thu Jan  1 01:00:00 1970
+++ gmime/rfc/rfc2631.txt	Mon Jun  3 05:44:17 2002
@@ -0,0 +1,731 @@
+
+
+
+
+
+
+Network Working Group                                       E. Rescorla
+Request for Comments: 2631                                    RTFM Inc.
+Category: Standards Track                                     June 1999
+
+
+                  Diffie-Hellman Key Agreement Method
+
+Status of this Memo
+
+   This document specifies an Internet standards track protocol for the
+   Internet community, and requests discussion and suggestions for
+   improvements.  Please refer to the current edition of the "Internet
+   Official Protocol Standards" (STD 1) for the standardization state
+   and status of this protocol.  Distribution of this memo is unlimited.
+
+Copyright Notice
+
+   Copyright (C) The Internet Society (1999).  All Rights Reserved.
+
+Abstract
+
+   This document standardizes one particular Diffie-Hellman variant,
+   based on the ANSI X9.42 draft, developed by the ANSI X9F1 working
+   group. Diffie-Hellman is a key agreement algorithm used by two
+   parties to agree on a shared secret. An algorithm for converting the
+   shared secret into an arbitrary amount of keying material is
+   provided. The resulting keying material is used as a symmetric
+   encryption key.  The Diffie-Hellman variant described requires the
+   recipient to have a certificate, but the originator may have a static
+   key pair (with the public key placed in a certificate) or an
+   ephemeral key pair.
+
+Table of Contents
+
+   1. Introduction  . . . . . . . . . . . . . . . . . . . . . . .   2
+   1.1. Requirements Terminology  . . . . . . . . . . . . . . . .   2
+   2. Overview Of Method  . . . . . . . . . . . . . . . . . . . .   2
+   2.1. Key Agreement . . . . . . . . . . . . . . . . . . . . . .   2
+   2.1.1. Generation of ZZ  . . . . . . . . . . . . . . . . . . .   3
+   2.1.2. Generation of Keying Material . . . . . . . . . . . . .   3
+   2.1.3. KEK Computation . . . . . . . . . . . . . . . . . . . .   4
+   2.1.4. Keylengths for common algorithms  . . . . . . . . . . .   5
+   2.1.5. Public Key Validation . . . . . . . . . . . . . . . . .   5
+   2.1.6. Example 1 . . . . . . . . . . . . . . . . . . . . . . .   5
+   2.1.7. Example 2 . . . . . . . . . . . . . . . . . . . . . . .   6
+   2.2. Key and Parameter Requirements  . . . . . . . . . . . . .   7
+   2.2.1. Group Parameter Generation  . . . . . . . . . . . . . .   7
+   2.2.1.1. Generation of p, q  . . . . . . . . . . . . . . . . .   8
+
+
+
+Rescorla                    Standards Track                     [Page 1]
+
+RFC 2631          Diffie-Hellman Key Agreement Method          June 1999
+
+
+   2.2.1.2. Generation of g . . . . . . . . . . . . . . . . . . .   9
+   2.2.2. Group Parameter Validation  . . . . . . . . . . . . . .   9
+   2.3. Ephemeral-Static Mode . . . . . . . . . . . . . . . . . .  10
+   2.4. Static-Static Mode  . . . . . . . . . . . . . . . . . . .  10
+   2.4. Acknowledgements  . . . . . . . . . . . . . . . . . . . .  10
+   2.4. References  . . . . . . . . . . . . . . . . . . . . . . .  11
+   Security Considerations  . . . . . . . . . . . . . . . . . . .  12
+   Author's Address . . . . . . . . . . . . . . . . . . . . . . .  12
+   Full Copyright Statement . . . . . . . . . . . . . . . . . . .  13
+
+1.  Introduction
+
+   In [DH76] Diffie and Hellman describe a means for two parties to
+   agree upon a shared secret in such a way that the secret will be
+   unavailable to eavesdroppers. This secret may then be converted into
+   cryptographic keying material for other (symmetric) algorithms.  A
+   large number of minor variants of this process exist. This document
+   describes one such variant, based on the ANSI X9.42 specification.
+
+1.1.  Requirements Terminology
+
+   Keywords "MUST", "MUST NOT", "REQUIRED", "SHOULD", "SHOULD NOT" and
+   "MAY" that appear in this document are to be interpreted as described
+   in [RFC2119].
+
+2.  Overview Of Method
+
+   Diffie-Hellman key agreement requires that both the sender and
+   recipient of a message have key pairs. By combining one's private key
+   and the other party's public key, both parties can compute the same
+   shared secret number. This number can then be converted into
+   cryptographic keying material.  That keying material is typically
+   used as a key-encryption key (KEK) to encrypt (wrap) a content-
+   encryption key (CEK) which is in turn used to encrypt the message
+   data.
+
+2.1.  Key Agreement
+
+   The first stage of the key agreement process is to compute a shared
+   secret number, called ZZ.  When the same originator and recipient
+   public/private key pairs are used, the same ZZ value will result.
+   The ZZ value is then converted into a shared symmetric cryptographic
+   key. When the originator employs a static private/public key pair,
+   the introduction of a public random value ensures that the resulting
+   symmetric key will be different for each key agreement.
+
+
+
+
+
+
+Rescorla                    Standards Track                     [Page 2]
+
+RFC 2631          Diffie-Hellman Key Agreement Method          June 1999
+
+
+2.1.1.  Generation of ZZ
+
+   X9.42 defines that the shared secret ZZ is generated as follows:
+
+     ZZ = g ^ (xb * xa) mod p
+
+   Note that the individual parties actually perform the computations:
+
+     ZZ = (yb ^ xa)  mod p  = (ya ^ xb)  mod p
+
+   where ^ denotes exponentiation
+
+         ya is party a's public key; ya = g ^ xa mod p
+         yb is party b's public key; yb = g ^ xb mod p
+         xa is party a's private key
+         xb is party b's private key
+         p is a large prime
+         q is a large prime
+         g = h^{(p-1)/q} mod p, where
+         h is any integer with 1 < h < p-1 such that h{(p-1)/q} mod p > 1
+           (g has order q mod p; i.e. g^q mod p = 1 if g!=1)
+         j a large integer such that p=qj + 1
+         (See Section 2.2 for criteria for keys and parameters)
+
+   In [CMS], the recipient's key is identified by the CMS
+   RecipientIdentifier, which points to the recipient's certificate.
+   The sender's public key is identified using the
+   OriginatorIdentifierOrKey field, either by reference to the sender's
+   certificate or by inline inclusion of a public key.
+
+2.1.2.  Generation of Keying Material
+
+   X9.42 provides an algorithm for generating an essentially arbitrary
+   amount of keying material from ZZ. Our algorithm is derived from that
+   algorithm by mandating some optional fields and omitting others.
+
+     KM = H ( ZZ || OtherInfo)
+
+   H is the message digest function SHA-1 [FIPS-180] ZZ is the shared
+   secret value computed in Section 2.1.1. Leading zeros MUST be
+   preserved, so that ZZ occupies as many octets as p. For instance, if
+   p is 1024 bits, ZZ should be 128 bytes long.  OtherInfo is the DER
+   encoding of the following structure:
+
+     OtherInfo ::= SEQUENCE {
+       keyInfo KeySpecificInfo,
+       partyAInfo [0] OCTET STRING OPTIONAL,
+       suppPubInfo [2] OCTET STRING
+
+
+
+Rescorla                    Standards Track                     [Page 3]
+
+RFC 2631          Diffie-Hellman Key Agreement Method          June 1999
+
+
+     }
+
+     KeySpecificInfo ::= SEQUENCE {
+       algorithm OBJECT IDENTIFIER,
+       counter OCTET STRING SIZE (4..4) }
+
+   Note that these ASN.1 definitions use EXPLICIT tagging. (In ASN.1,
+   EXPLICIT tagging is implicit unless IMPLICIT is explicitly
+   specified.)
+
+   algorithm is the ASN.1 algorithm OID of the CEK wrapping algorithm
+     with which this KEK will be used. Note that this is NOT an
+     AlgorithmIdentifier, but simply the OBJECT IDENTIFIER. No
+     parameters are used.
+
+   counter is a 32 bit number, represented in network byte order. Its
+     initial value is 1 for any ZZ, i.e. the byte sequence 00 00 00 01
+     (hex), and it is incremented by one every time the above key
+     generation function is run for a given KEK.
+
+   partyAInfo is a random string provided by the sender. In CMS, it is
+     provided as a parameter in the UserKeyingMaterial field (encoded as
+     an OCTET STRING). If provided, partyAInfo MUST contain 512 bits.
+
+   suppPubInfo is the length of the generated KEK, in bits, represented
+     as a 32 bit number in network byte order. E.g. for 3DES it would be
+     the byte sequence 00 00 00 C0.
+
+   To generate a KEK, one generates one or more KM blocks (incrementing
+   counter appropriately) until enough material has been generated.  The
+   KM blocks are concatenated left to right I.e. KM(counter=1) ||
+   KM(counter=2)...
+
+   Note that the only source of secret entropy in this computation is
+   ZZ.  Even if a string longer than ZZ is generated, the effective key
+   space of the KEK is limited by the size of ZZ, in addition to any
+   security level considerations imposed by the parameters p and q.
+   However, if partyAInfo is different for each message, a different KEK
+   will be generated for each message. Note that partyAInfo MUST be used
+   in Static-Static mode, but MAY appear in Ephemeral-Static mode.
+
+2.1.3.  KEK Computation
+
+   Each key encryption algorithm requires a specific size key (n). The
+   KEK is generated by mapping the left n-most bytes of KM onto the key.
+   For 3DES, which requires 192 bits of keying material, the algorithm
+   must be run twice, once with a counter value of 1 (to generate K1',
+   K2', and the first 32 bits of K3') and once with a counter value of 2
+
+
+
+Rescorla                    Standards Track                     [Page 4]
+
+RFC 2631          Diffie-Hellman Key Agreement Method          June 1999
+
+
+   (to generate the last 32 bits of K3). K1',K2' and K3' are then parity
+   adjusted to generate the 3 DES keys K1,K2 and K3.  For RC2-128, which
+   requires 128 bits of keying material, the algorithm is run once, with
+   a counter value of 1, and the left-most 128 bits are directly
+   converted to an RC2 key. Similarly, for RC2-40, which requires 40
+   bits of keying material, the algorithm is run once, with a counter
+   value of 1, and the leftmost 40 bits are used as the key.
+
+2.1.4.  Keylengths for common algorithms
+
+   Some common key encryption algorithms have KEKs of the following
+   lengths.
+
+     3-key 3DES      192 bits
+     RC2-128        128 bits
+     RC2-40         40 bits
+
+   RC2 effective key lengths are equal to RC2 real key lengths.
+
+2.1.5.  Public Key Validation
+
+   The following algorithm MAY be used to validate a received public key
+   y.
+
+     1. Verify that y lies within the interval [2,p-1]. If it does not,
+        the key is invalid.
+     2. Compute y^q mod p. If the result == 1, the key is valid.
+        Otherwise the key is invalid.
+
+   The primary purpose of public key validation is to prevent a small
+   subgroup attack [LAW98] on the sender's key pair. If Ephemeral-Static
+   mode is used, this check may not be necessary. See also [P1363] for
+   more information on Public Key validation.
+
+   Note that this procedure may be subject to pending patents.
+
+2.1.6.  Example 1
+
+   ZZ is the 20 bytes 00 01 02 03 04 05 06 07 08 09
+                      0a 0b 0c 0d 0e 0f 10 11 12 13
+
+   The key wrap algorithm is 3DES-EDE wrap.
+
+   No partyAInfo is used.
+
+   Consequently, the input to the first invocation of SHA-1 is:
+
+   00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12 13 ; ZZ
+
+
+
+Rescorla                    Standards Track                     [Page 5]
+
+RFC 2631          Diffie-Hellman Key Agreement Method          June 1999
+
+
+   30 1d
+      30 13
+         06 0b 2a 86 48 86 f7 0d 01 09 10 03 06          ; 3DES wrap OID
+         04 04
+            00 00 00 01                                        ; Counter
+      a2 06
+         04 04
+         00 00 00 c0                                        ; key length
+
+   And the output is the 20 bytes:
+
+   a0 96 61 39 23 76 f7 04 4d 90 52 a3 97 88 32 46 b6 7f 5f 1e
+
+   The input to the second invocation of SHA-1 is:
+
+   00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12 13 ; ZZ
+   30 1d
+      30 13
+         06 0b 2a 86 48 86 f7 0d 01 09 10 03 06          ; 3DES wrap OID
+         04 04
+            00 00 00 02                                        ; Counter
+      a2 06
+         04 04
+         00 00 00 c0                                        ; key length
+
+   And the output is the 20 bytes:
+
+   f6 3e b5 fb 5f 56 d9 b6 a8 34 03 91 c2 d3 45 34 93 2e 11 30
+
+   Consequently,
+   K1'=a0 96 61 39 23 76 f7 04
+   K2'=4d 90 52 a3 97 88 32 46
+   K3'=b6 7f 5f 1e f6 3e b5 fb
+
+   Note: These keys are not parity adjusted
+
+2.1.7.  Example 2
+
+   ZZ is the 20 bytes 00 01 02 03 04 05 06 07 08 09
+                      0a 0b 0c 0d 0e 0f 10 11 12 13
+
+   The key wrap algorithm is RC2-128 key wrap, so we need 128 bits (16
+   bytes) of keying material.
+
+   The partyAInfo used is the 64 bytes
+
+   01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 01
+   01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 01
+
+
+
+Rescorla                    Standards Track                     [Page 6]
+
+RFC 2631          Diffie-Hellman Key Agreement Method          June 1999
+
+
+   01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 01
+   01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 01
+
+   Consequently, the input to SHA-1 is:
+
+   00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12 13 ; ZZ
+   30 61
+      30 13
+         06 0b 2a 86 48 86 f7 0d 01 09 10 03 07           ; RC2 wrap OID
+         04 04
+            00 00 00 01                                        ; Counter
+      a0 42
+         04 40
+            01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 01 ; partyAInfo
+            01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 01
+            01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 01
+            01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 01
+      a2 06
+         04 04
+            00 00 00 80                                     ; key length
+
+   And the output is the 20 bytes:
+
+   48 95 0c 46 e0 53 00 75 40 3c ce 72 88 96 04 e0 3e 7b 5d e9
+
+   Consequently,
+   K=48 95 0c 46 e0 53 00 75 40 3c ce 72 88 96 04 e0
+
+2.2.  Key and Parameter Requirements
+
+   X9.42 requires that the group parameters be of the form p=jq + 1
+   where q is a large prime of length m and j>=2. An algorithm for
+   generating primes of this form (derived from the algorithms in FIPS
+   PUB 186-1[FIPS-186] and [X942]can be found in appendix A.
+
+   X9.42 requires that the private key x be in the interval [2, (q -
+   2)].  x should be randomly generated in this interval. y is then
+   computed by calculating g^x mod p.  To comply with this memo, m MUST
+   be >=160 bits in length, (consequently, q MUST be at least 160 bits
+   long). When symmetric ciphers stronger than DES are to be used, a
+   larger m may be advisable. p must be a minimum of 512 bits long.
+
+2.2.1.  Group Parameter Generation
+
+   Agents SHOULD generate domain parameters (g,p,q) using the following
+   algorithm, derived from [FIPS-186] and [X942]. When this algorithm is
+   used, the correctness of the generation procedure can be verified by
+   a third party by the algorithm of 2.2.2.
+
+
+
+Rescorla                    Standards Track                     [Page 7]
+
+RFC 2631          Diffie-Hellman Key Agreement Method          June 1999
+
+
+2.2.1.1.  Generation of p, q
+
+   This algorithm generates a p, q pair where q is of length m and p is
+   of length L.
+
+   1. Set m' = m/160 where / represents integer division with rounding
+      upwards. I.e. 200/160 = 2.
+
+   2. Set L'=  L/160
+
+   3. Set N'=  L/1024
+
+   4. Select an arbitrary bit string SEED such that the length of SEED
+      >= m
+
+   5. Set U = 0
+
+   6. For i = 0 to m' - 1
+
+        U = U + (SHA1[SEED + i] XOR SHA1[(SEED + m' + i)) * 2^(160 * i)
+
+   Note that for m=160, this reduces to the algorithm of [FIPS-186]
+
+        U = SHA1[SEED] XOR SHA1[(SEED+1) mod 2^160 ].
+
+   5. Form q from U by computing U mod (2^m) and setting the most
+      significant bit (the 2^(m-1) bit) and the least significant bit to
+      1. In terms of boolean operations, q = U OR 2^(m-1) OR 1. Note
+      that 2^(m-1) < q < 2^m
+
+   6. Use a robust primality algorithm to test whether q is prime.
+
+   7. If q is not prime then go to 4.
+
+   8. Let counter = 0
+
+   9. Set R = seed + 2*m' + (L' * counter)
+
+   10. Set V = 0
+
+   12. For i = 0 to L'-1 do
+
+       V = V + SHA1(R + i) * 2^(160 * i)
+
+   13. Set W = V mod 2^L
+
+   14. Set X = W OR 2^(L-1)
+
+
+
+
+Rescorla                    Standards Track                     [Page 8]
+
+RFC 2631          Diffie-Hellman Key Agreement Method          June 1999
+
+
+   Note that 0 <= W < 2^(L-1) and hence X >= 2^(L-1)
+
+   15. Set p = X - (X mod (2*q)) + 1
+
+   6. If p > 2^(L-1) use a robust primality test to test whether p is
+      prime. Else go to 18.
+
+   17. If p is prime output p, q, seed, counter and stop.
+
+   18. Set counter = counter + 1
+
+   19. If counter < (4096 * N) then go to 8.
+
+   20. Output "failure"
+
+   Note: A robust primality test is one where the probability of a non-
+   prime number passing the test is at most 2^-80. [FIPS-186] provides a
+   suitable algorithm, as does [X942].
+
+2.2.1.2.  Generation of g
+
+   This section gives an algorithm (derived from [FIPS-186]) for
+   generating g.
+
+   1. Let j = (p - 1)/q.
+
+   2. Set h = any integer, where 1 < h < p - 1 and h differs
+      from any value previously tried.
+
+   3. Set g = h^j mod p
+
+   4. If g = 1 go to step 2
+
+2.2.2.  Group Parameter Validation
+
+   The ASN.1 for DH keys in [PKIX] includes elements j and validation-
+   Parms which MAY be used by recipients of a key to verify that the
+   group parameters were correctly generated. Two checks are possible:
+
+     1. Verify that p=qj + 1. This demonstrates that the parameters meet
+        the X9.42 parameter criteria.
+     2. Verify that when the p,q generation procedure of [FIPS-186]
+        Appendix 2 is followed with seed 'seed', that p is found when
+        'counter' = pgenCounter.
+
+     This demonstrates that the parameters were randomly chosen and
+     do not have a special form.
+
+
+
+
+Rescorla                    Standards Track                     [Page 9]
+
+RFC 2631          Diffie-Hellman Key Agreement Method          June 1999
+
+
+   Whether agents provide validation information in their certificates
+   is a local matter between the agents and their CA.
+
+2.3.  Ephemeral-Static Mode
+
+   In Ephemeral-Static mode, the recipient has a static (and certified)
+   key pair, but the sender generates a new key pair for each message
+   and sends it using the originatorKey production. If the sender's key
+   is freshly generated for each message, the shared secret ZZ will be
+   similarly different for each message and partyAInfo MAY be omitted,
+   since it serves merely to decouple multiple KEKs generated by the
+   same set of pairwise keys. If, however, the same ephemeral sender key
+   is used for multiple messages (e.g. it is cached as a performance
+   optimization) then a separate partyAInfo MUST be used for each
+   message. All implementations of this standard MUST implement
+   Ephemeral-Static mode.
+
+   In order to resist small subgroup attacks, the recipient SHOULD
+   perform the check described in 2.1.5. If an opponent cannot determine
+   success or failure of a decryption operation by the recipient, the
+   recipient MAY choose to omit this check. See also [LL97] for a method
+   of generating keys which are not subject to small subgroup attack.
+
+2.4.  Static-Static Mode
+
+   In Static-Static mode, both the sender and the recipient have a
+   static (and certified) key pair. Since the sender's and recipient's
+   keys are therefore the same for each message, ZZ will be the same for
+   each message. Thus, partyAInfo MUST be used (and different for each
+   message) in order to ensure that different messages use different
+   KEKs. Implementations MAY implement Static-Static mode.
+
+   In order to prevent small subgroup attacks, both originator and
+   recipient SHOULD either perform the validation step described in
+   Section 2.1.5 or verify that the CA has properly verified the
+   validity of the key.  See also [LL97] for a method of generating keys
+   which are not subject to small subgroup attack.
+
+Acknowledgements
+
+   The Key Agreement method described in this document is based on work
+   done by the ANSI X9F1 working group. The author wishes to extend his
+   thanks for their assistance.
+
+   The author also wishes to thank Stephen Henson, Paul Hoffman, Russ
+   Housley, Burt Kaliski, Brian Korver, John Linn, Jim Schaad, Mark
+   Schertler, Peter Yee, and Robert Zuccherato for their expert advice
+   and review.
+
+
+
+Rescorla                    Standards Track                    [Page 10]
+
+RFC 2631          Diffie-Hellman Key Agreement Method          June 1999
+
+
+References
+
+   [CMS]       Housley, R., "Cryptographic Message Syntax", RFC 2630,
+               June 1999.
+
+   [FIPS-46-1] Federal Information Processing Standards Publication
+               (FIPS PUB) 46-1, Data Encryption Standard, Reaffirmed
+               1988 January 22 (supersedes FIPS PUB 46, 1977 January
+               15).
+
+   [FIPS-81]   Federal Information Processing Standards Publication
+               (FIPS PUB) 81, DES Modes of Operation, 1980 December 2.
+
+   [FIPS-180]  Federal Information Processing Standards Publication
+               (FIPS PUB) 180-1, "Secure Hash Standard", 1995 April 17.
+
+   [FIPS-186]  Federal Information Processing Standards Publication
+               (FIPS PUB) 186, "Digital Signature Standard", 1994 May
+               19.
+
+   [P1363]     "Standard Specifications for Public Key Cryptography",
+               IEEE P1363 working group draft, 1998, Annex D.
+
+   [PKIX]      Housley, R., Ford, W., Polk, W. and D. Solo, "Internet
+               X.509 Public Key Infrastructure Certificate and CRL
+               Profile", RFC 2459, January 1999.
+
+   [LAW98]     L. Law, A. Menezes, M. Qu, J. Solinas and S. Vanstone,
+               "An efficient protocol for authenticated key agreement",
+               Technical report CORR 98-05, University of Waterloo,
+               1998.
+
+   [LL97]      C.H. Lim and P.J. Lee, "A key recovery attack on discrete
+               log-based schemes using a prime order subgroup", B.S.
+               Kaliski, Jr., editor, Advances in Cryptology - Crypto
+               '97, Lecture Notes in Computer Science, vol. 1295, 1997,
+               Springer-Verlag, pp. 249-263.
+
+   [RFC2119]   Bradner, S., "Key words for use in RFCs to Indicate
+               Requirement Levels", BCP 14, RFC 2119, March 1997.
+
+   [X942]      "Agreement Of Symmetric Keys Using Diffie-Hellman and MQV
+               Algorithms", ANSI draft, 1998.
+
+
+
+
+
+
+
+
+Rescorla                    Standards Track                    [Page 11]
+
+RFC 2631          Diffie-Hellman Key Agreement Method          June 1999
+
+
+Security Considerations
+
+   All the security in this system is provided by the secrecy of the
+   private keying material. If either sender or recipient private keys
+   are disclosed, all messages sent or received using that key are
+   compromised. Similarly, loss of the private key results in an
+   inability to read messages sent using that key.
+
+   Static Diffie-Hellman keys are vulnerable to a small subgroup attack
+   [LAW98]. In practice, this issue arises for both sides in Static-
+   Static mode and for the receiver during Ephemeral-Static mode.
+   Sections 2.3 and 2.4 describe appropriate practices to protect
+   against this attack. Alternatively, it is possible to generate keys
+   in such a fashion that they are resistant to this attack. See [LL97]
+
+   The security level provided by these methods depends on several
+   factors. It depends on the length of the symmetric key (typically, a
+   2^l security level if the length is l bits); the size of the prime q
+   (a 2^{m/2} security level); and the size of the prime p (where the
+   security level grows as a subexponential function of the size in
+   bits).  A good design principle is to have a balanced system, where
+   all three security levels are approximately the same. If many keys
+   are derived from a given pair of primes p and q, it may be prudent to
+   have higher levels for the primes. In any case, the overall security
+   is limited by the lowest of the three levels.
+
+Author's Address
+
+   Eric Rescorla
+   RTFM Inc.
+   30 Newell Road, #16
+   East Palo Alto, CA 94303
+
+   EMail: ekr@rtfm.com
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Rescorla                    Standards Track                    [Page 12]
+
+RFC 2631          Diffie-Hellman Key Agreement Method          June 1999
+
+
+Full Copyright Statement
+
+   Copyright (C) The Internet Society (1999).  All Rights Reserved.
+
+   This document and translations of it may be copied and furnished to
+   others, and derivative works that comment on or otherwise explain it
+   or assist in its implementation may be prepared, copied, published
+   and distributed, in whole or in part, without restriction of any
+   kind, provided that the above copyright notice and this paragraph are
+   included on all such copies and derivative works.  However, this
+   document itself may not be modified in any way, such as by removing
+   the copyright notice or references to the Internet Society or other
+   Internet organizations, except as needed for the purpose of
+   developing Internet standards in which case the procedures for
+   copyrights defined in the Internet Standards process must be
+   followed, or as required to translate it into languages other than
+   English.
+
+   The limited permissions granted above are perpetual and will not be
+   revoked by the Internet Society or its successors or assigns.
+
+   This document and the information contained herein is provided on an
+   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
+   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
+   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
+   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
+   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
+
+Acknowledgement
+
+
+   Funding for the RFC Editor function is currently provided by the
+   Internet Society.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Rescorla                    Standards Track                    [Page 13]
+
diff -uNr gmime-1.90.0/rfc/rfc2632.txt gmime/rfc/rfc2632.txt
--- gmime-1.90.0/rfc/rfc2632.txt	Thu Jan  1 01:00:00 1970
+++ gmime/rfc/rfc2632.txt	Tue Dec  5 07:40:21 2000
@@ -0,0 +1,731 @@
+
+
+
+
+
+
+Network Working Group                               B. Ramsdell, Editor
+Request for Comments: 2632                                    Worldtalk
+Category: Standards Track                                     June 1999
+
+
+                 S/MIME Version 3 Certificate Handling
+
+Status of this Memo
+
+   This document specifies an Internet standards track protocol for the
+   Internet community, and requests discussion and suggestions for
+   improvements.  Please refer to the current edition of the "Internet
+   Official Protocol Standards" (STD 1) for the standardization state
+   and status of this protocol.  Distribution of this memo is unlimited.
+
+Copyright Notice
+
+   Copyright (C) The Internet Society (1999).  All Rights Reserved.
+
+1. Overview
+
+   S/MIME (Secure/Multipurpose Internet Mail Extensions), described in
+   [SMIME-MSG], provides a method to send and receive secure MIME
+   messages. Before using a public key to provide security services, the
+   S/MIME agent MUST certify that the public key is valid. S/MIME agents
+   MUST use PKIX certificates to validate public keys as described in
+   the Internet X.509 Public Key Infrastructure (PKIX) Certificate and
+   CRL Profile [KEYM]. S/MIME agents MUST meet the certificate
+   processing requirements documented in this document in addition to
+   those stated in [KEYM].
+
+   This specification is compatible with the Cryptographic Message
+   Syntax [CMS] in that it uses the data types defined by CMS. It also
+   inherits all the varieties of architectures for certificate-based key
+   management supported by CMS.
+
+1.1 Definitions
+
+   For the purposes of this memo, the following definitions apply.
+
+   ASN.1: Abstract Syntax Notation One, as defined in ITU-T X.680-689.
+
+   Attribute Certificate (AC): An X.509 AC is a separate structure from
+   a subject's public key X.509 Certificate.  A subject may have
+   multiple X.509 ACs associated with each of its public key X.509
+   Certificates.  Each X.509 AC binds one or more Attributes with one of
+   the subject's public key X.509 Certificates.  The X.509 AC syntax is
+   defined in [X.509]
+
+
+
+Ramsdell                    Standards Track                     [Page 1]
+
+RFC 2632         S/MIME Version 3 Certificate Handling         June 1999
+
+
+   BER: Basic Encoding Rules for ASN.1, as defined in ITU-T X.690.
+
+   Certificate: A type that binds an entity's distinguished name to a
+   public key with a digital signature. This type is defined in the
+   Internet X.509 Public Key Infrastructure (PKIX) Certificate and CRL
+   Profile [KEYM]. This type also contains the distinguished name of the
+   certificate issuer (the signer), an issuer-specific serial number,
+   the issuer's signature algorithm identifier, a validity period, and
+   extensions also defined in that document.
+
+   Certificate Revocation List (CRL): A type that contains information
+   about certificates whose validity an issuer has prematurely revoked.
+   The information consists of an issuer name, the time of issue, the
+   next scheduled time of issue, a list of certificate serial numbers
+   and their associated revocation times, and extensions as defined in
+   [KEYM]. The CRL is signed by the issuer. The type intended by this
+   specification is the one defined in [KEYM].
+
+   DER: Distinguished Encoding Rules for ASN.1, as defined in ITU-T
+   X.690.
+
+   Receiving agent: software that interprets and processes S/MIME CMS
+   objects, MIME body parts that contain CMS objects, or both.
+
+   Sending agent: software that creates S/MIME CMS objects, MIME body
+   parts that contain CMS objects, or both.
+
+   S/MIME agent: user software that is a receiving agent, a sending
+   agent, or both.
+
+1.2 Compatibility with Prior Practice of S/MIME
+
+   S/MIME version 3 agents should attempt to have the greatest
+   interoperability possible with S/MIME version 2 agents. S/MIME
+   version 2 is described in RFC 2311 through RFC 2315, inclusive.  RFC
+   2311 also has historical information about the development of S/MIME.
+
+1.3 Terminology
+
+   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
+   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
+   document are to be interpreted as described in [MUSTSHOULD].
+
+
+
+
+
+
+
+
+
+Ramsdell                    Standards Track                     [Page 2]
+
+RFC 2632         S/MIME Version 3 Certificate Handling         June 1999
+
+
+2. CMS Options
+
+   The CMS message format allows for a wide variety of options in
+   content and algorithm support. This section puts forth a number of
+   support requirements and recommendations in order to achieve a base
+   level of interoperability among all S/MIME implementations. Most of
+   the CMS format for S/MIME messages is defined in [SMIME-MSG].
+
+2.1 CertificateRevocationLists
+
+   Receiving agents MUST support the Certificate Revocation List (CRL)
+   format defined in [KEYM]. If sending agents include CRLs in outgoing
+   messages, the CRL format defined in [KEYM] MUST be used.
+
+   All agents MUST be capable of performing revocation checks using CRLs
+   as specified in [KEYM]. All agents MUST perform revocation status
+   checking in accordance with [KEYM]. Receiving agents MUST recognize
+   CRLs in received S/MIME messages.
+
+   Agents SHOULD store CRLs received in messages for use in processing
+   later messages.
+
+   Agents MUST handle multiple valid Certificate Authority (CA)
+   certificates containing the same subject name and the same public
+   keys but with overlapping validity intervals.
+
+2.2 CertificateChoices
+
+   Receiving agents MUST support PKIX v1 and PKIX v3 certificates. See
+   [KEYM] for details about the profile for certificate formats. End
+   entity certificates MAY include an Internet mail address, as
+   described in section 3.1.
+
+   Receiving agents SHOULD support X.509 attribute certificates.
+
+2.2.1 Historical Note About CMS Certificates
+
+   The CMS message format supports a choice of certificate formats for
+   public key content types: PKIX, PKCS #6 Extended Certificates and
+   X.509 Attribute Certificates. The PKCS #6 format is not in widespread
+   use. In addition, PKIX certificate extensions address much of the
+   same functionality and flexibility as was intended in the PKCS #6.
+   Thus, sending and receiving agents MUST NOT use PKCS #6 extended
+   certificates.
+
+
+
+
+
+
+
+Ramsdell                    Standards Track                     [Page 3]
+
+RFC 2632         S/MIME Version 3 Certificate Handling         June 1999
+
+
+2.3 CertificateSet
+
+   Receiving agents MUST be able to handle an arbitrary number of
+   certificates of arbitrary relationship to the message sender and to
+   each other in arbitrary order. In many cases, the certificates
+   included in a signed message may represent a chain of certification
+   from the sender to a particular root. There may be, however,
+   situations where the certificates in a signed message may be
+   unrelated and included for convenience.
+
+   Sending agents SHOULD include any certificates for the user's public
+   key(s) and associated issuer certificates. This increases the
+   likelihood that the intended recipient can establish trust in the
+   originator's public key(s). This is especially important when sending
+   a message to recipients that may not have access to the sender's
+   public key through any other means or when sending a signed message
+   to a new recipient. The inclusion of certificates in outgoing
+   messages can be omitted if S/MIME objects are sent within a group of
+   correspondents that has established access to each other's
+   certificates by some other means such as a shared directory or manual
+   certificate distribution. Receiving S/MIME agents SHOULD be able to
+   handle messages without certificates using a database or directory
+   lookup scheme.
+
+   A sending agent SHOULD include at least one chain of certificates up
+   to, but not including, a Certificate Authority (CA) that it believes
+   that the recipient may trust as authoritative. A receiving agent
+   SHOULD be able to handle an arbitrarily large number of certificates
+   and chains.
+
+   Agents MAY send CA certificates, that is, certificates that are
+   self-signed and can be considered the "root" of other chains. Note
+   that receiving agents SHOULD NOT simply trust any self-signed
+   certificates as valid CAs, but SHOULD use some other mechanism to
+   determine if this is a CA that should be trusted. Also note that in
+   the case of DSA certificates the parameters may be located in the
+   root certificate.  This would require that the recipient possess the
+   root certificate in order to perform a signature verification, and is
+   a valid example of a case where transmitting the root certificate may
+   be required.
+
+   Receiving agents MUST support chaining based on the distinguished
+   name fields. Other methods of building certificate chains may be
+   supported but are not currently recommended.
+
+
+
+
+
+
+
+Ramsdell                    Standards Track                     [Page 4]
+
+RFC 2632         S/MIME Version 3 Certificate Handling         June 1999
+
+
+   Receiving agents SHOULD support the decoding of X.509 attribute
+   certificates included in CMS objects. All other issues regarding the
+   generation and use of X.509 attribute certificates are outside of the
+   scope of this specification.
+
+3. Using Distinguished Names for Internet Mail
+
+   End-entity certificates MAY contain an Internet mail address as
+   described in [RFC-822]. The address must be an "addr-spec" as defined
+   in Section 6.1 of that specification.  The email address SHOULD be in
+   the subjectAltName extension, and SHOULD NOT be in the subject
+   distinguished name.
+
+   Receiving agents MUST recognize email addresses in the subjectAltName
+   field. Receiving agents MUST recognize email addresses in the
+   Distinguished Name field in the PKCS #9 emailAddress attribute.
+
+   Sending agents SHOULD make the address in the From or Sender header
+   in a mail message match an Internet mail address in the signer's
+   certificate. Receiving agents MUST check that the address in the From
+   or Sender header of a mail message matches an Internet mail address
+   in the signer's certificate, if mail addresses are present in the
+   certificate. A receiving agent SHOULD provide some explicit alternate
+   processing of the message if this comparison fails, which may be to
+   display a message that shows the recipient the addresses in the
+   certificate or other certificate details.
+
+   All subject and issuer names MUST be populated (i.e. not an empty
+   SEQUENCE) in S/MIME-compliant PKIX certificates, except that the
+   subject DN in a user's (i.e. end-entity) certificate MAY be an empty
+   SEQUENCE in which case the subjectAltName extension will include the
+   subject's identifier and MUST be marked as critical.
+
+4. Certificate Processing
+
+   A receiving agent needs to provide some certificate retrieval
+   mechanism in order to gain access to certificates for recipients of
+   digital envelopes. There are many ways to implement certificate
+   retrieval mechanisms. X.500 directory service is an excellent example
+   of a certificate retrieval-only mechanism that is compatible with
+   classic X.500 Distinguished Names. The PKIX Working Group is
+   investigating other mechanisms such as directory servers. Another
+   method under consideration by the IETF is to provide certificate
+   retrieval services as part of the existing Domain Name System (DNS).
+   Until such mechanisms are widely used, their utility may be limited
+   by the small number of correspondent's certificates that can be
+
+
+
+
+
+Ramsdell                    Standards Track                     [Page 5]
+
+RFC 2632         S/MIME Version 3 Certificate Handling         June 1999
+
+
+   retrieved. At a minimum, for initial S/MIME deployment, a user agent
+   could automatically generate a message to an intended recipient
+   requesting that recipient's certificate in a signed return message.
+
+   Receiving and sending agents SHOULD also provide a mechanism to allow
+   a user to "store and protect" certificates for correspondents in such
+   a way so as to guarantee their later retrieval. In many environments,
+   it may be desirable to link the certificate retrieval/storage
+   mechanisms together in some sort of certificate database. In its
+   simplest form, a certificate database would be local to a particular
+   user and would function in a similar way as a "address book" that
+   stores a user's frequent correspondents. In this way, the certificate
+   retrieval mechanism would be limited to the certificates that a user
+   has stored (presumably from incoming messages).  A comprehensive
+   certificate retrieval/storage solution may combine two or more
+   mechanisms to allow the greatest flexibility and utility to the user.
+   For instance, a secure Internet mail agent may resort to checking a
+   centralized certificate retrieval mechanism for a certificate if it
+   can not be found in a user's local certificate storage/retrieval
+   database.
+
+   Receiving and sending agents SHOULD provide a mechanism for the
+   import and export of certificates, using a CMS certs-only message.
+   This allows for import and export of full certificate chains as
+   opposed to just a single certificate. This is described in [SMIME-
+   MSG].
+
+4.1 Certificate Revocation Lists
+
+   In general, it is always better to get the latest CRL information
+   from a CA than to get information stored away from incoming messages.
+   A receiving agent SHOULD have access to some certificate-revocation
+   list (CRL) retrieval mechanism in order to gain access to
+   certificate-revocation information when validating certificate
+   chains.  A receiving or sending agent SHOULD also provide a mechanism
+   to allow a user to store incoming certificate-revocation information
+   for correspondents in such a way so as to guarantee its later
+   retrieval.
+
+   Receiving and sending agents SHOULD retrieve and utilize CRL
+   information every time a certificate is verified as part of a
+   certificate chain validation even if the certificate was already
+   verified in the past. However, in many instances (such as off-line
+   verification) access to the latest CRL information may be difficult
+   or impossible. The use of CRL information, therefore, may be dictated
+   by the value of the information that is protected. The value of the
+
+
+
+
+
+Ramsdell                    Standards Track                     [Page 6]
+
+RFC 2632         S/MIME Version 3 Certificate Handling         June 1999
+
+
+   CRL information in a particular context is beyond the scope of this
+   memo but may be governed by the policies associated with particular
+   certificate hierarchies.
+
+   All agents MUST be capable of performing revocation checks using CRLs
+   as specified in [KEYM]. All agents MUST perform revocation status
+   checking in accordance with [KEYM]. Receiving agents MUST recognize
+   CRLs in received S/MIME messages.
+
+4.2 Certificate Chain Validation
+
+   In creating a user agent for secure messaging, certificate, CRL, and
+   certificate chain validation SHOULD be highly automated while still
+   acting in the best interests of the user. Certificate, CRL, and chain
+   validation MUST be performed as per [KEYM] when validating a
+   correspondent's public key. This is necessary before using a public
+   key to provide security services such as: verifying a signature;
+   encrypting a content-encryption key (ex: RSA); or forming a pairwise
+   symmetric key (ex: Diffie-Hellman) to be used to encrypt or decrypt a
+   content-encryption key.
+
+   Certificates and CRLs are made available to the chain validation
+   procedure in two ways: a) incoming messages, and b) certificate and
+   CRL retrieval mechanisms. Certificates and CRLs in incoming messages
+   are not required to be in any particular order nor are they required
+   to be in any way related to the sender or recipient of the message
+   (although in most cases they will be related to the sender). Incoming
+   certificates and CRLs SHOULD be cached for use in chain validation
+   and optionally stored for later use. This temporary certificate and
+   CRL cache SHOULD be used to augment any other certificate and CRL
+   retrieval mechanisms for chain validation on incoming signed
+   messages.
+
+4.3 Certificate and CRL Signing Algorithms
+
+   Certificates and Certificate-Revocation Lists (CRLs) are signed by
+   the certificate issuer. A receiving agent MUST be capable of
+   verifying the signatures on certificates and CRLs made with id-dsa-
+   with-sha1 [DSS].
+
+   A receiving agent SHOULD be capable of verifying the signatures on
+   certificates and CRLs made with md2WithRSAEncryption,
+   md5WithRSAEncryption and sha-1WithRSAEncryption signature algorithms
+   with key sizes from 512 bits to 2048 bits described in [PKCS#1V2].
+
+
+
+
+
+
+
+Ramsdell                    Standards Track                     [Page 7]
+
+RFC 2632         S/MIME Version 3 Certificate Handling         June 1999
+
+
+4.4 PKIX Certificate Extensions
+
+   PKIX describes an extensible framework in which the basic certificate
+   information can be extended and how such extensions can be used to
+   control the process of issuing and validating certificates. The PKIX
+   Working Group has ongoing efforts to identify and create extensions
+   which have value in particular certification environments. Further,
+   there are active efforts underway to issue PKIX certificates for
+   business purposes. This document identifies the minumum required set
+   of certificate extensions which have the greatest value in the S/MIME
+   environment. The syntax and semantics of all the identified
+   extensions are defined in [KEYM].
+
+   Sending and receiving agents MUST correctly handle the Basic
+   Constraints Certificate Extension, the Key Usage Certificate
+   Extension, authorityKeyID, subjectKeyID, and the subjectAltNames when
+   they appear in end-user certificates. Some mechanism SHOULD exist to
+   handle the defined certificate extensions when they appear in
+   intermediate or CA certificates.
+
+   Certificates issued for the S/MIME environment SHOULD NOT contain any
+   critical extensions (extensions that have the critical field set to
+   TRUE) other than those listed here. These extensions SHOULD be marked
+   as non-critical unless the proper handling of the extension is deemed
+   critical to the correct interpretation of the associated certificate.
+   Other extensions may be included, but those extensions SHOULD NOT be
+   marked as critical.
+
+   Interpretation and syntax for all extensions MUST follow [KEYM],
+   unless otherwise specified here.
+
+4.4.1 Basic Constraints Certificate Extension
+
+   The basic constraints extension serves to delimit the role and
+   position of an issuing authority or end-entity certificate plays in a
+   chain of certificates.
+
+   For example, certificates issued to CAs and subordinate CAs contain a
+   basic constraint extension that identifies them as issuing authority
+   certificates. End-entity certificates contain an extension that
+   constrains the certificate from being an issuing authority
+   certificate.
+
+   Certificates SHOULD contain a basicConstraints extension in CA
+   certificates, and SHOULD NOT contain that extension in end entity
+   certificates.
+
+
+
+
+
+Ramsdell                    Standards Track                     [Page 8]
+
+RFC 2632         S/MIME Version 3 Certificate Handling         June 1999
+
+
+4.4.2 Key Usage Certificate Extension
+
+   The key usage extension serves to limit the technical purposes for
+   which a public key listed in a valid certificate may be used. Issuing
+   authority certificates may contain a key usage extension that
+   restricts the key to signing certificates, certificate revocation
+   lists and other data.
+
+   For example, a certification authority may create subordinate issuer
+   certificates which contain a keyUsage extension which specifies that
+   the corresponding public key can be used to sign end user certs and
+   sign CRLs.
+
+   If a key usage extension is included in a PKIX certificate, then it
+   MUST be marked as critical.
+
+4.4.2.1 Key Usage in Diffie-Hellman Key Exchange Certificates
+
+   For Diffie-Hellman key exchange certificates (certificates in which
+   the subject public key algorithm is dhpublicnumber), if the keyUsage
+   keyAgreement bit is set to 1 AND if the public key is to be used to
+   form a pairwise key to decrypt data, then the S/MIME agent MUST only
+   use the public key if the keyUsage encipherOnly bit is set to 0. If
+   the keyUsage keyAgreement bit is set to 1 AND if the key is to be
+   used to form a pairwise key to encrypt data, then the S/MIME agent
+   MUST only use the public key if the keyUsage decipherOnly bit is set
+   to 0.
+
+4.4.3 Subject Alternative Name Extension
+
+   The subject alternative name extension is used in S/MIME as the
+   preferred means to convey the RFC-822 email address(es) that
+   correspond to the entity for this certificate. Any RFC-822 email
+   addresses present MUST be encoded using the rfc822Name CHOICE of the
+   GeneralName type. Since the SubjectAltName type is a SEQUENCE OF
+   GeneralName, multiple RFC-822 email addresses MAY be present.
+
+5. Security Considerations
+
+   All of the security issues faced by any cryptographic application
+   must be faced by a S/MIME agent. Among these issues are protecting
+   the user's private key, preventing various attacks, and helping the
+   user avoid mistakes such as inadvertently encrypting a message for
+   the wrong recipient. The entire list of security considerations is
+   beyond the scope of this document, but some significant concerns are
+   listed here.
+
+
+
+
+
+Ramsdell                    Standards Track                     [Page 9]
+
+RFC 2632         S/MIME Version 3 Certificate Handling         June 1999
+
+
+   When processing certificates, there are many situations where the
+   processing might fail. Because the processing may be done by a user
+   agent, a security gateway, or other program, there is no single way
+   to handle such failures. Just because the methods to handle the
+   failures has not been listed, however, the reader should not assume
+   that they are not important. The opposite is true: if a certificate
+   is not provably valid and associated with the message, the processing
+   software should take immediate and noticable steps to inform the end
+   user about it.
+
+   Some of the many places where signature and certificate checking
+   might fail include:
+
+   - no Internet mail addresses in a certificate match the sender
+     of a message
+   - no certificate chain leads to a trusted CA
+   - no ability to check the CRL for a certificate
+   - an invalid CRL was received
+   - the CRL being checked is expired
+   - the certificate is expired
+   - the certificate has been revoked
+
+   There are certainly other instances where a certificate may be
+   invalid, and it is the responsibility of the processing software to
+   check them all thoroughly, and to decide what to do if the check
+   fails.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Ramsdell                    Standards Track                    [Page 10]
+
+RFC 2632         S/MIME Version 3 Certificate Handling         June 1999
+
+
+A. References
+
+   [CERTV2]     Dusse, S., Hoffman, P. and B. Ramsdell,"S/MIME Version 2
+                Certificate Handling", RFC 2312, March 1998.
+
+   [CMS]        Housley, R., "Cryptographic Message Syntax", RFC 2630,
+                June 1999.
+
+   [DSS]        NIST FIPS PUB 186, "Digital Signature Standard", 18 May
+                1994.
+
+   [KEYM]       Housley, R., Ford, W., Polk, W. and D. Solo, "Internet
+                X.509 Public Key Infrastructure Certificate and CRL
+                Profile", RFC 2459, January 1999.
+
+   [MUSTSHOULD] Bradner, S., "Key words for use in RFCs to Indicate
+                Requirement Levels", BCP 14, RFC 2119, March 1997.
+
+   [PKCS#1V2]   Kaliski, B., "PKCS #1: RSA Cryptography Specifications
+                Version 2.0", RFC 2437, October 1998.
+
+   [RFC-822]    Crocker, D., "Standard For The Format Of ARPA Internet
+                Text Messages", STD 11, RFC 822, August 1982.
+
+   [SMIME-MSG]  Ramsdell, B., Editor, "S/MIME Version 3 Message
+                Specification", RFC 2633, June 1999.
+
+   [X.500]      ITU-T Recommendation X.500 (1997) | ISO/IEC 9594-1:1997,
+                Information technology - Open Systems Interconnection -
+                The Directory:  Overview of concepts, models and
+                services.
+
+   [X.501]      ITU-T Recommendation X.501 (1997) | ISO/IEC 9594-2:1997,
+                Information technology - Open Systems Interconnection -
+                The Directory:  Models.
+
+   [X.509]      ITU-T Recommendation X.509 (1997) | ISO/IEC 9594-8:1997,
+                Information technology - Open Systems Interconnection -
+                The Directory:  Authentication framework.
+
+   [X.520]      ITU-T Recommendation X.520 (1997) | ISO/IEC 9594-6:1997,
+                Information technology - Open Systems Interconnection -
+                The Directory:  Selected attribute types.
+
+
+
+
+
+
+
+
+Ramsdell                    Standards Track                    [Page 11]
+
+RFC 2632         S/MIME Version 3 Certificate Handling         June 1999
+
+
+B. Acknowledgements
+
+   Many thanks go out to the other authors of the S/MIME v2 RFC:  Steve
+   Dusse, Paul Hoffman and Jeff Weinstein. Without v2, there wouldn't be
+   a v3.
+
+   A number of the members of the S/MIME Working Group have also worked
+   very hard and contributed to this document. Any list of people is
+   doomed to omission and for that I apologize. In alphabetical order,
+   the following people stand out in my mind due to the fact that they
+   made direct contributions to this document.
+
+   Bill Flanigan Elliott Ginsburg Paul Hoffman Russ Housley Michael
+   Myers John Pawling Denis Pinkas Jim Schaad
+
+Editor's Address
+
+   Blake Ramsdell
+   Worldtalk
+   17720 NE 65th St Ste 201
+   Redmond, WA 98052
+
+   Phone: +1 425 376 0225
+   EMail: blaker@deming.com
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Ramsdell                    Standards Track                    [Page 12]
+
+RFC 2632         S/MIME Version 3 Certificate Handling         June 1999
+
+
+Full Copyright Statement
+
+   Copyright (C) The Internet Society (1999).  All Rights Reserved.
+
+   This document and translations of it may be copied and furnished to
+   others, and derivative works that comment on or otherwise explain it
+   or assist in its implementation may be prepared, copied, published
+   and distributed, in whole or in part, without restriction of any
+   kind, provided that the above copyright notice and this paragraph are
+   included on all such copies and derivative works.  However, this
+   document itself may not be modified in any way, such as by removing
+   the copyright notice or references to the Internet Society or other
+   Internet organizations, except as needed for the purpose of
+   developing Internet standards in which case the procedures for
+   copyrights defined in the Internet Standards process must be
+   followed, or as required to translate it into languages other than
+   English.
+
+   The limited permissions granted above are perpetual and will not be
+   revoked by the Internet Society or its successors or assigns.
+
+   This document and the information contained herein is provided on an
+   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
+   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
+   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
+   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
+   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
+
+Acknowledgement
+
+   Funding for the RFC Editor function is currently provided by the
+   Internet Society.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Ramsdell                    Standards Track                    [Page 13]
+
diff -uNr gmime-1.90.0/rfc/rfc2633.txt gmime/rfc/rfc2633.txt
--- gmime-1.90.0/rfc/rfc2633.txt	Thu Jan  1 01:00:00 1970
+++ gmime/rfc/rfc2633.txt	Tue Dec  5 07:39:10 2000
@@ -0,0 +1,1795 @@
+
+
+
+
+
+
+Network Working Group                               B. Ramsdell, Editor
+Request for Comments: 2633                                    Worldtalk
+Category: Standards Track                                     June 1999
+
+
+                 S/MIME Version 3 Message Specification
+
+Status of this Memo
+
+   This document specifies an Internet standards track protocol for the
+   Internet community, and requests discussion and suggestions for
+   improvements.  Please refer to the current edition of the "Internet
+   Official Protocol Standards" (STD 1) for the standardization state
+   and status of this protocol.  Distribution of this memo is unlimited.
+
+Copyright Notice
+
+   Copyright (C) The Internet Society (1999).  All Rights Reserved.
+
+1. Introduction
+
+   S/MIME (Secure/Multipurpose Internet Mail Extensions) provides a
+   consistent way to send and receive secure MIME data. Based on the
+   popular Internet MIME standard, S/MIME provides the following
+   cryptographic security services for electronic messaging
+   applications:  authentication, message integrity and non-repudiation
+   of origin (using digital signatures) and privacy and data security
+   (using encryption).
+
+   S/MIME can be used by traditional mail user agents (MUAs) to add
+   cryptographic security services to mail that is sent, and to
+   interpret cryptographic security services in mail that is received.
+   However, S/MIME is not restricted to mail; it can be used with any
+   transport mechanism that transports MIME data, such as HTTP. As such,
+   S/MIME takes advantage of the object-based features of MIME and
+   allows secure messages to be exchanged in mixed-transport systems.
+
+   Further, S/MIME can be used in automated message transfer agents that
+   use cryptographic security services that do not require any human
+   intervention, such as the signing of software-generated documents and
+   the encryption of FAX messages sent over the Internet.
+
+1.1 Specification Overview
+
+   This document describes a protocol for adding cryptographic signature
+   and encryption services to MIME data. The MIME standard [MIME-SPEC]
+   provides a general structure for the content type of Internet
+   messages and allows extensions for new content type applications.
+
+
+
+Ramsdell                    Standards Track                     [Page 1]
+
+RFC 2633         S/MIME Version 3 Message Specification        June 1999
+
+
+   This memo defines how to create a MIME body part that has been
+   cryptographically enhanced according to CMS [CMS], which is derived
+   from PKCS #7 [PKCS-7]. This memo also defines the application/pkcs7-
+   mime MIME type that can be used to transport those body parts.
+
+   This memo also discusses how to use the multipart/signed MIME type
+   defined in [MIME-SECURE] to transport S/MIME signed messages. This
+   memo also defines the application/pkcs7-signature MIME type, which is
+   also used to transport S/MIME signed messages.
+
+   In order to create S/MIME messages, an S/MIME agent has to follow
+   specifications in this memo, as well as the specifications listed in
+   the Cryptographic Message Syntax [CMS].
+
+   Throughout this memo, there are requirements and recommendations made
+   for how receiving agents handle incoming messages. There are separate
+   requirements and recommendations for how sending agents create
+   outgoing messages. In general, the best strategy is to "be liberal in
+   what you receive and conservative in what you send". Most of the
+   requirements are placed on the handling of incoming messages while
+   the recommendations are mostly on the creation of outgoing messages.
+
+   The separation for requirements on receiving agents and sending
+   agents also derives from the likelihood that there will be S/MIME
+   systems that involve software other than traditional Internet mail
+   clients.  S/MIME can be used with any system that transports MIME
+   data. An automated process that sends an encrypted message might not
+   be able to receive an encrypted message at all, for example. Thus,
+   the requirements and recommendations for the two types of agents are
+   listed separately when appropriate.
+
+1.2 Terminology
+
+   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
+   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
+   document are to be interpreted as described in [MUSTSHOULD].
+
+1.3 Definitions
+
+   For the purposes of this memo, the following definitions apply.
+
+   ASN.1: Abstract Syntax Notation One, as defined in CCITT X.208.
+
+   BER: Basic Encoding Rules for ASN.1, as defined in CCITT X.209.
+
+   Certificate: A type that binds an entity's distinguished name to a
+   public key with a digital signature.
+
+
+
+
+Ramsdell                    Standards Track                     [Page 2]
+
+RFC 2633         S/MIME Version 3 Message Specification        June 1999
+
+
+   DER: Distinguished Encoding Rules for ASN.1, as defined in CCITT
+   X.509.
+
+   7-bit data: Text data with lines less than 998 characters long, where
+   none of the characters have the 8th bit set, and there are no NULL
+   characters. <CR> and <LF> occur only as part of a <CR><LF> end of
+   line delimiter.
+
+   8-bit data: Text data with lines less than 998 characters, and where
+   none of the characters are NULL characters. <CR> and <LF> occur only
+   as part of a <CR><LF> end of line delimiter.
+
+   Binary data: Arbitrary data.
+
+   Transfer Encoding: A reversible transformation made on data so 8-bit
+   or binary data may be sent via a channel that only transmits 7-bit
+   data.
+
+   Receiving agent: software that interprets and processes S/MIME CMS
+   objects, MIME body parts that contain CMS objects, or both.
+
+   Sending agent: software that creates S/MIME CMS objects, MIME body
+   parts that contain CMS objects, or both.
+
+   S/MIME agent: user software that is a receiving agent, a sending
+   agent, or both.
+
+1.4 Compatibility with Prior Practice of S/MIME
+
+   S/MIME version 3 agents should attempt to have the greatest
+   interoperability possible with S/MIME version 2 agents. S/MIME
+   version 2 is described in RFC 2311 through RFC 2315, inclusive. RFC
+   2311 also has historical information about the development of S/MIME.
+
+2. CMS Options
+
+   CMS allows for a wide variety of options in content and algorithm
+   support. This section puts forth a number of support requirements and
+   recommendations in order to achieve a base level of interoperability
+   among all S/MIME implementations. [CMS] provides additional details
+   regarding the use of the cryptographic algorithms.
+
+2.1 DigestAlgorithmIdentifier
+
+   Sending and receiving agents MUST support SHA-1 [SHA1].  Receiving
+   agents SHOULD support MD5 [MD5] for the purpose of providing backward
+   compatibility with MD5-digested S/MIME v2 SignedData objects.
+
+
+
+
+Ramsdell                    Standards Track                     [Page 3]
+
+RFC 2633         S/MIME Version 3 Message Specification        June 1999
+
+
+2.2 SignatureAlgorithmIdentifier
+
+   Sending and receiving agents MUST support id-dsa defined in [DSS].
+   The algorithm parameters MUST be absent (not encoded as NULL).
+
+   Receiving agents SHOULD support rsaEncryption, defined in [PKCS-1].
+
+   Sending agents SHOULD support rsaEncryption. Outgoing messages are
+   signed with a user's private key. The size of the private key is
+   determined during key generation.
+
+   Note that S/MIME v2 clients are only capable of verifying digital
+   signatures using the rsaEncryption algorithm.
+
+2.3 KeyEncryptionAlgorithmIdentifier
+
+   Sending and receiving agents MUST support Diffie-Hellman defined in
+   [DH].
+
+   Receiving agents SHOULD support rsaEncryption. Incoming encrypted
+   messages contain symmetric keys which are to be decrypted with a
+   user's private key. The size of the private key is determined during
+   key generation.
+
+   Sending agents SHOULD support rsaEncryption.
+
+   Note that S/MIME v2 clients are only capable of decrypting content
+   encryption keys using the rsaEncryption algorithm.
+
+2.4 General Syntax
+
+   CMS defines multiple content types.  Of these, only the Data,
+   SignedData, and EnvelopedData content types are currently used for
+   S/MIME.
+
+2.4.1 Data Content Type
+
+   Sending agents MUST use the id-data content type identifier to
+   indicate the message content which has had security services applied
+   to it. For example, when applying a digital signature to MIME data,
+   the CMS signedData encapContentInfo eContentType MUST include the
+   id-data object identifier and the MIME content MUST be stored in the
+   SignedData encapContentInfo eContent OCTET STRING (unless the sending
+   agent is using multipart/signed, in which case the eContent is
+   absent, per section 3.4.3 of this document).  As another example,
+   when applying encryption to MIME data, the CMS EnvelopedData
+
+
+
+
+
+Ramsdell                    Standards Track                     [Page 4]
+
+RFC 2633         S/MIME Version 3 Message Specification        June 1999
+
+
+   encryptedContentInfo ContentType MUST include the id-data object
+   identifier and the encrypted MIME content MUST be stored in the
+   envelopedData encryptedContentInfo encryptedContent OCTET STRING.
+
+2.4.2 SignedData Content Type
+
+   Sending agents MUST use the signedData content type to apply a
+   digital signature to a message or, in a degenerate case where there
+   is no signature information, to convey certificates.
+
+2.4.3 EnvelopedData Content Type
+
+   This content type is used to apply privacy protection to a message. A
+   sender needs to have access to a public key for each intended message
+   recipient to use this service. This content type does not provide
+   authentication.
+
+2.5 Attribute SignerInfo Type
+
+   The SignerInfo type allows the inclusion of unsigned and signed
+   attributes to be included along with a signature.
+
+   Receiving agents MUST be able to handle zero or one instance of each
+   of the signed attributes listed here. Sending agents SHOULD generate
+   one instance of each of the following signed attributes in each
+   S/MIME message:
+
+   - signingTime (section 2.5.1 in this document)
+   - sMIMECapabilities (section 2.5.2 in this document)
+   - sMIMEEncryptionKeyPreference (section 2.5.3 in this document)
+
+   Further, receiving agents SHOULD be able to handle zero or one
+   instance in the signed attributes of the signingCertificate attribute
+   (section 5 in [ESS]).
+
+   Sending agents SHOULD generate one instance of the signingCertificate
+   signed attribute in each S/MIME message.
+
+   Additional attributes and values for these attributes may be defined
+   in the future. Receiving agents SHOULD handle attributes or values
+   that it does not recognize in a graceful manner.
+
+   Sending agents that include signed attributes that are not listed
+   here SHOULD display those attributes to the user, so that the user is
+   aware of all of the data being signed.
+
+
+
+
+
+
+Ramsdell                    Standards Track                     [Page 5]
+
+RFC 2633         S/MIME Version 3 Message Specification        June 1999
+
+
+2.5.1 Signing-Time Attribute
+
+   The signing-time attribute is used to convey the time that a message
+   was signed. Until there are trusted timestamping services, the time
+   of signing will most likely be created by a message originator and
+   therefore is only as trustworthy as the originator.
+
+   Sending agents MUST encode signing time through the year 2049 as
+   UTCTime; signing times in 2050 or later MUST be encoded as
+   GeneralizedTime. When the UTCTime CHOICE is used, S/MIME agents MUST
+   interpret the year field (YY) as follows:
+
+   if YY is greater than or equal to 50, the year is interpreted as
+   19YY; if YY is less than 50, the year is interpreted as 20YY.
+
+2.5.2 SMIMECapabilities Attribute
+
+   The SMIMECapabilities attribute includes signature algorithms (such
+   as "sha1WithRSAEncryption"), symmetric algorithms (such as "DES-
+   EDE3-CBC"), and key encipherment algorithms (such as
+   "rsaEncryption"). It also includes a non-algorithm capability which
+   is the preference for signedData. The SMIMECapabilities were designed
+   to be flexible and extensible so that, in the future, a means of
+   identifying other capabilities and preferences such as certificates
+   can be added in a way that will not cause current clients to break.
+
+   If present, the SMIMECapabilities attribute MUST be a
+   SignedAttribute; it MUST NOT be an UnsignedAttribute. CMS defines
+   SignedAttributes as a SET OF Attribute. The SignedAttributes in a
+   signerInfo MUST NOT include multiple instances of the
+   SMIMECapabilities attribute. CMS defines the ASN.1 syntax for
+   Attribute to include attrValues SET OF AttributeValue. A
+   SMIMECapabilities attribute MUST only include a single instance of
+   AttributeValue.  There MUST NOT be zero or multiple instances of
+   AttributeValue present in the attrValues SET OF AttributeValue.
+
+   The semantics of the SMIMECapabilites attribute specify a partial
+   list as to what the client announcing the SMIMECapabilites can
+   support. A client does not have to list every capability it supports,
+   and probably should not list all its capabilities so that the
+   capabilities list doesn't get too long. In an SMIMECapabilities
+   attribute, the OIDs are listed in order of their preference, but
+   SHOULD be logically separated along the lines of their categories
+   (signature algorithms, symmetric algorithms, key encipherment
+   algorithms, etc.)
+
+
+
+
+
+
+Ramsdell                    Standards Track                     [Page 6]
+
+RFC 2633         S/MIME Version 3 Message Specification        June 1999
+
+
+   The structure of the SMIMECapabilities attribute is to facilitate
+   simple table lookups and binary comparisons in order to determine
+   matches. For instance, the DER-encoding for the SMIMECapability for
+   DES EDE3 CBC MUST be identically encoded regardless of the
+   implementation.
+
+   In the case of symmetric algorithms, the associated parameters for
+   the OID MUST specify all of the parameters necessary to differentiate
+   between two instances of the same algorithm. For instance, the number
+   of rounds and block size for RC5 must be specified in addition to the
+   key length.
+
+   There is a list of OIDs (OIDs Used with S/MIME) that is centrally
+   maintained and is separate from this memo. The list of OIDs is
+   maintained by the Internet Mail Consortium at
+   <http://www.imc.org/ietf-smime/oids.html>. Note that all OIDs
+   associated with the MUST and SHOULD implement algorithms are included
+   in section A of this document.
+
+   The OIDs that correspond to algorithms SHOULD use the same OID as the
+   actual algorithm, except in the case where the algorithm usage is
+   ambiguous from the OID. For instance, in an earlier draft,
+   rsaEncryption was ambiguous because it could refer to either a
+   signature algorithm or a key encipherment algorithm. In the event
+   that an OID is ambiguous, it needs to be arbitrated by the maintainer
+   of the registered SMIMECapabilities list as to which type of
+   algorithm will use the OID, and a new OID MUST be allocated under the
+   smimeCapabilities OID to satisfy the other use of the OID.
+
+   The registered SMIMECapabilities list specifies the parameters for
+   OIDs that need them, most notably key lengths in the case of
+   variable-length symmetric ciphers. In the event that there are no
+   differentiating parameters for a particular OID, the parameters MUST
+   be omitted, and MUST NOT be encoded as NULL.
+
+   Additional values for the SMIMECapabilities attribute may be defined
+   in the future. Receiving agents MUST handle a SMIMECapabilities
+   object that has values that it does not recognize in a graceful
+   manner.
+
+2.5.3 Encryption Key Preference Attribute
+
+   The encryption key preference attribute allows the signer to
+   unambiguously describe which of the signer's certificates has the
+   signer's preferred encryption key. This attribute is designed to
+   enhance behavior for interoperating with those clients which use
+   separate keys for encryption and signing. This attribute is used to
+
+
+
+
+Ramsdell                    Standards Track                     [Page 7]
+
+RFC 2633         S/MIME Version 3 Message Specification        June 1999
+
+
+   convey to anyone viewing the attribute which of the listed
+   certificates should be used for encrypting a session key for future
+   encrypted messages.
+
+   If present, the SMIMEEncryptionKeyPreference attribute MUST be a
+   SignedAttribute; it MUST NOT be an UnsignedAttribute. CMS defines
+   SignedAttributes as a SET OF Attribute. The SignedAttributes in a
+   signerInfo MUST NOT include multiple instances of the
+   SMIMEEncryptionKeyPreference attribute.  CMS defines the ASN.1 syntax
+   for Attribute to include attrValues SET OF AttributeValue. A
+   SMIMEEncryptionKeyPreference attribute MUST only include a single
+   instance of AttributeValue.  There MUST NOT be zero or multiple
+   instances of AttributeValue present in the attrValues SET OF
+   AttributeValue.
+
+   The sending agent SHOULD include the referenced certificate in the
+   set of certificates included in the signed message if this attribute
+   is used.  The certificate may be omitted if it has been previously
+   made available to the receiving agent.  Sending agents SHOULD use
+   this attribute if the commonly used or preferred encryption
+   certificate is not the same as the certificate used to sign the
+   message.
+
+   Receiving agents SHOULD store the preference data if the signature on
+   the message is valid and the signing time is greater than the
+   currently stored value.  (As with the SMIMECapabilities, the clock
+   skew should be checked and the data not used if the skew is too
+   great.)  Receiving agents SHOULD respect the sender's encryption key
+   preference attribute if possible.  This however represents only a
+   preference and the receiving agent may use any certificate in
+   replying to the sender that is valid.
+
+2.5.3.1 Selection of Recipient Key Management Certificate
+
+   In order to determine the key management certificate to be used when
+   sending a future CMS envelopedData message for a particular
+   recipient, the following steps SHOULD be followed:
+
+    - If an SMIMEEncryptionKeyPreference attribute is found in a
+   signedData object received from the desired recipient, this
+   identifies the X.509 certificate that should be used as the X.509
+   key management certificate for the recipient.
+
+   - If an SMIMEEncryptionKeyPreference attribute is not found in a
+   signedData object received from the desired recipient, the set of
+   X.509 certificates should be searched for a X.509 certificate with
+   the same subject name as the signing X.509 certificate which can
+   be used for key management.
+
+
+
+Ramsdell                    Standards Track                     [Page 8]
+
+RFC 2633         S/MIME Version 3 Message Specification        June 1999
+
+
+   - Or use some other method of determining the user's key management
+   key. If a X.509 key management certificate is not found, then
+   encryption cannot be done with the signer of the message. If multiple
+   X.509 key management certificates are found, the S/MIME agent can
+   make an arbitrary choice between them.
+
+2.6 SignerIdentifier SignerInfo Type
+
+   S/MIME v3 requires the use of SignerInfo version 1, that is the
+   issuerAndSerialNumber CHOICE MUST be used for SignerIdentifier.
+
+2.7 ContentEncryptionAlgorithmIdentifier
+
+   Sending and receiving agents MUST support encryption and decryption
+   with DES EDE3 CBC, hereinafter called "tripleDES" [3DES] [DES].
+   Receiving agents SHOULD support encryption and decryption using the
+   RC2 [RC2] or a compatible algorithm at a key size of 40 bits,
+   hereinafter called "RC2/40".
+
+2.7.1 Deciding Which Encryption Method To Use
+
+   When a sending agent creates an encrypted message, it has to decide
+   which type of encryption to use. The decision process involves using
+   information garnered from the capabilities lists included in messages
+   received from the recipient, as well as out-of-band information such
+   as private agreements, user preferences, legal restrictions, and so
+   on.
+
+   Section 2.5 defines a method by which a sending agent can optionally
+   announce, among other things, its decrypting capabilities in its
+   order of preference. The following method for processing and
+   remembering the encryption capabilities attribute in incoming signed
+   messages SHOULD be used.
+
+   -  If the receiving agent has not yet created a list of capabilities
+      for the sender's public key, then, after verifying the signature
+      on the incoming message and checking the timestamp, the receiving
+      agent SHOULD create a new list containing at least the signing
+      time and the symmetric capabilities.
+
+    - If such a list already exists, the receiving agent SHOULD verify
+      that the signing time in the incoming message is greater than
+      the signing time stored in the list and that the signature is
+      valid. If so, the receiving agent SHOULD update both the signing
+      time and capabilities in the list. Values of the signing time that
+      lie far in the future (that is, a greater discrepancy than any
+      reasonable clock skew), or a capabilities list in messages whose
+      signature could not be verified, MUST NOT be accepted.
+
+
+
+Ramsdell                    Standards Track                     [Page 9]
+
+RFC 2633         S/MIME Version 3 Message Specification        June 1999
+
+
+   The list of capabilities SHOULD be stored for future use in creating
+   messages.
+
+   Before sending a message, the sending agent MUST decide whether it is
+   willing to use weak encryption for the particular data in the
+   message.  If the sending agent decides that weak encryption is
+   unacceptable for this data, then the sending agent MUST NOT use a
+   weak algorithm such as RC2/40.  The decision to use or not use weak
+   encryption overrides any other decision in this section about which
+   encryption algorithm to use.
+
+   Sections 2.7.2.1 through 2.7.2.4 describe the decisions a sending
+   agent SHOULD use in deciding which type of encryption should be
+   applied to a message.  These rules are ordered, so the sending agent
+   SHOULD make its decision in the order given.
+
+2.7.1.1 Rule 1: Known Capabilities
+
+   If the sending agent has received a set of capabilities from the
+   recipient for the message the agent is about to encrypt, then the
+   sending agent SHOULD use that information by selecting the first
+   capability in the list (that is, the capability most preferred by the
+   intended recipient) for which the sending agent knows how to encrypt.
+   The sending agent SHOULD use one of the capabilities in the list if
+   the agent reasonably expects the recipient to be able to decrypt the
+   message.
+
+2.7.1.2 Rule 2: Unknown Capabilities, Known Use of Encryption
+
+   If:
+    - the sending agent has no knowledge of the encryption capabilities
+      of the recipient,
+    - and the sending agent has received at least one message from the
+      recipient,
+    - and the last encrypted message received from the recipient had a
+      trusted signature on it,
+
+   then the outgoing message SHOULD use the same encryption algorithm as
+   was used on the last signed and encrypted message received from the
+   recipient.
+
+
+
+
+
+
+
+
+
+
+
+Ramsdell                    Standards Track                    [Page 10]
+
+RFC 2633         S/MIME Version 3 Message Specification        June 1999
+
+
+2.7.1.3 Rule 3: Unknown Capabilities, Unknown Version of S/MIME
+
+   If:
+
+    - the sending agent has no knowledge of the encryption capabilities
+      of the recipient,
+    - and the sending agent has no knowledge of the version of S/MIME
+      of the recipient,
+
+   then the sending agent SHOULD use tripleDES because it is a stronger
+   algorithm and is required by S/MIME v3. If the sending agent chooses
+   not to use tripleDES in this step, it SHOULD use RC2/40.
+
+2.7.2 Choosing Weak Encryption
+
+   Like all algorithms that use 40 bit keys, RC2/40 is considered by
+   many to be weak encryption. A sending agent that is controlled by a
+   human SHOULD allow a human sender to determine the risks of sending
+   data using RC2/40 or a similarly weak encryption algorithm before
+   sending the data, and possibly allow the human to use a stronger
+   encryption method such as tripleDES.
+
+2.7.3 Multiple Recipients
+
+   If a sending agent is composing an encrypted message to a group of
+   recipients where the encryption capabilities of some of the
+   recipients do not overlap, the sending agent is forced to send more
+   than one message. It should be noted that if the sending agent
+   chooses to send a message encrypted with a strong algorithm, and then
+   send the same message encrypted with a weak algorithm, someone
+   watching the communications channel may be able to learn the contents
+   of the strongly-encrypted message simply by decrypting the weakly-
+   encrypted message.
+
+3. Creating S/MIME Messages
+
+   This section describes the S/MIME message formats and how they are
+   created. S/MIME messages are a combination of MIME bodies and CMS
+   objects. Several MIME types as well as several CMS objects are used.
+   The data to be secured is always a canonical MIME entity. The MIME
+   entity and other data, such as certificates and algorithm
+   identifiers, are given to CMS processing facilities which produces a
+   CMS object.  The CMS object is then finally wrapped in MIME. The
+   Enhanced Security Services for S/MIME [ESS] document provides
+   examples of how nested, secured S/MIME messages are formatted.  ESS
+   provides an example of how a triple-wrapped S/MIME message is
+   formatted using multipart/signed and application/pkcs7-mime for the
+   signatures.
+
+
+
+Ramsdell                    Standards Track                    [Page 11]
+
+RFC 2633         S/MIME Version 3 Message Specification        June 1999
+
+
+   S/MIME provides one format for enveloped-only data, several formats
+   for signed-only data, and several formats for signed and enveloped
+   data. Several formats are required to accommodate several
+   environments, in particular for signed messages. The criteria for
+   choosing among these formats are also described.
+
+   The reader of this section is expected to understand MIME as
+   described in [MIME-SPEC] and [MIME-SECURE].
+
+3.1 Preparing the MIME Entity for Signing or Enveloping
+
+   S/MIME is used to secure MIME entities. A MIME entity may be a sub-
+   part, sub-parts of a message, or the whole message with all its sub-
+   parts. A MIME entity that is the whole message includes only the MIME
+   headers and MIME body, and does not include the RFC-822 headers.
+   Note that S/MIME can also be used to secure MIME entities used in
+   applications other than Internet mail.
+
+   The MIME entity that is secured and described in this section can be
+   thought of as the "inside" MIME entity. That is, it is the
+   "innermost" object in what is possibly a larger MIME message.
+   Processing "outside" MIME entities into CMS objects is described in
+   Section 3.2, 3.4 and elsewhere.
+
+   The procedure for preparing a MIME entity is given in [MIME-SPEC].
+   The same procedure is used here with some additional restrictions
+   when signing. Description of the procedures from [MIME-SPEC] are
+   repeated here, but the reader should refer to that document for the
+   exact procedure. This section also describes additional requirements.
+
+   A single procedure is used for creating MIME entities that are to be
+   signed, enveloped, or both signed and enveloped. Some additional
+   steps are recommended to defend against known corruptions that can
+   occur during mail transport that are of particular importance for
+   clear- signing using the multipart/signed format. It is recommended
+   that these additional steps be performed on enveloped messages, or
+   signed and enveloped messages in order that the message can be
+   forwarded to any environment without modification.
+
+   These steps are descriptive rather than prescriptive. The implementor
+   is free to use any procedure as long as the result is the same.
+
+   Step 1. The MIME entity is prepared according to the local
+   conventions
+
+   Step 2. The leaf parts of the MIME entity are converted to canonical
+   form
+
+
+
+
+Ramsdell                    Standards Track                    [Page 12]
+
+RFC 2633         S/MIME Version 3 Message Specification        June 1999
+
+
+   Step 3. Appropriate transfer encoding is applied to the leaves of the
+   MIME entity
+
+   When an S/MIME message is received, the security services on the
+   message are processed, and the result is the MIME entity. That MIME
+   entity is typically passed to a MIME-capable user agent where, it is
+   further decoded and presented to the user or receiving application.
+
+3.1.1 Canonicalization
+
+   Each MIME entity MUST be converted to a canonical form that is
+   uniquely and unambiguously representable in the environment where the
+   signature is created and the environment where the signature will be
+   verified.  MIME entities MUST be canonicalized for enveloping as well
+   as signing.
+
+   The exact details of canonicalization depend on the actual MIME type
+   and subtype of an entity, and are not described here. Instead, the
+   standard for the particular MIME type should be consulted. For
+   example, canonicalization of type text/plain is different from
+   canonicalization of audio/basic. Other than text types, most types
+   have only one representation regardless of computing platform or
+   environment which can be considered their canonical representation.
+   In general, canonicalization will be performed by the non-security
+   part of the sending agent rather than the S/MIME implementation.
+
+   The most common and important canonicalization is for text, which is
+   often represented differently in different environments. MIME
+   entities of major type "text" must have both their line endings and
+   character set canonicalized. The line ending must be the pair of
+   characters <CR><LF>, and the charset should be a registered charset
+   [CHARSETS].  The details of the canonicalization are specified in
+   [MIME-SPEC]. The chosen charset SHOULD be named in the charset
+   parameter so that the receiving agent can unambiguously determine the
+   charset used.
+
+   Note that some charsets such as ISO-2022 have multiple
+   representations for the same characters. When preparing such text for
+   signing, the canonical representation specified for the charset MUST
+   be used.
+
+3.1.2 Transfer Encoding
+
+   When generating any of the secured MIME entities below, except the
+   signing using the multipart/signed format, no transfer encoding at
+   all is required.  S/MIME implementations MUST be able to deal with
+   binary MIME objects. If no Content-Transfer-Encoding header is
+   present, the transfer encoding should be considered 7BIT.
+
+
+
+Ramsdell                    Standards Track                    [Page 13]
+
+RFC 2633         S/MIME Version 3 Message Specification        June 1999
+
+
+   S/MIME implementations SHOULD however use transfer encoding described
+   in section 3.1.3 for all MIME entities they secure. The reason for
+   securing only 7-bit MIME entities, even for enveloped data that are
+   not exposed to the transport, is that it allows the MIME entity to be
+   handled in any environment without changing it. For example, a
+   trusted gateway might remove the envelope, but not the signature, of
+   a message, and then forward the signed message on to the end
+   recipient so that they can verify the signatures directly. If the
+   transport internal to the site is not 8-bit clean, such as on a
+   wide-area network with a single mail gateway, verifying the signature
+   will not be possible unless the original MIME entity was only 7-bit
+   data.
+
+3.1.3 Transfer Encoding for Signing Using multipart/signed
+
+   If a multipart/signed entity is EVER to be transmitted over the
+   standard Internet SMTP infrastructure or other transport that is
+   constrained to 7-bit text, it MUST have transfer encoding applied so
+   that it is represented as 7-bit text. MIME entities that are 7-bit
+   data already need no transfer encoding. Entities such as 8-bit text
+   and binary data can be encoded with quoted-printable or base-64
+   transfer encoding.
+
+   The primary reason for the 7-bit requirement is that the Internet
+   mail transport infrastructure cannot guarantee transport of 8-bit or
+   binary data. Even though many segments of the transport
+   infrastructure now handle 8-bit and even binary data, it is sometimes
+   not possible to know whether the transport path is 8-bit clear. If a
+   mail message with 8-bit data were to encounter a message transfer
+   agent that can not transmit 8-bit or binary data, the agent has three
+   options, none of which are acceptable for a clear-signed message:
+
+   - The agent could change the transfer encoding; this would invalidate
+     the signature.
+   - The agent could transmit the data anyway, which would most likely
+     result in the 8th bit being corrupted; this too would invalidate the
+     signature.
+   - The agent could return the message to the sender.
+
+   [MIME-SECURE] prohibits an agent from changing the transfer encoding
+   of the first part of a multipart/signed message. If a compliant agent
+   that can not transmit 8-bit or binary data encounters a
+   multipart/signed message with 8-bit or binary data in the first part,
+   it would have to return the message to the sender as undeliverable.
+
+
+
+
+
+
+
+Ramsdell                    Standards Track                    [Page 14]
+
+RFC 2633         S/MIME Version 3 Message Specification        June 1999
+
+
+3.1.4 Sample Canonical MIME Entity
+
+   This example shows a multipart/mixed message with full transfer
+   encoding. This message contains a text part and an attachment. The
+   sample message text includes characters that are not US-ASCII and
+   thus must be transfer encoded. Though not shown here, the end of each
+   line is <CR><LF>. The line ending of the MIME headers, the text, and
+   transfer encoded parts, all must be <CR><LF>.
+
+   Note that this example is not of an S/MIME message.
+
+     Content-Type: multipart/mixed; boundary=bar
+
+     --bar
+     Content-Type: text/plain; charset=iso-8859-1
+     Content-Transfer-Encoding: quoted-printable
+
+     =A1Hola Michael!
+
+     How do you like the new S/MIME specification?
+
+     I agree. It's generally a good idea to encode lines that begin with
+     From=20 because some mail transport agents will insert a
+     greater-than (>) sign, thus invalidating the signature.
+
+     Also, in some cases it might be desirable to encode any  =20
+     trailing whitespace that occurs on lines in order to ensure  =20
+     that the message signature is not invalidated when passing  =20
+     a gateway that modifies such whitespace (like BITNET).  =20
+
+     --bar
+     Content-Type: image/jpeg
+     Content-Transfer-Encoding: base64
+
+     iQCVAwUBMJrRF2N9oWBghPDJAQE9UQQAtl7LuRVndBjrk4EqYBIb3h5QXIX/LC//
+     jJV5bNvkZIGPIcEmI5iFd9boEgvpirHtIREEqLQRkYNoBActFBZmh9GC3C041WGq
+     uMbrbxc+nIs1TIKlA08rVi9ig/2Yh7LFrK5Ein57U/W72vgSxLhe/zhdfolT9Brn
+     HOxEa44b+EI=
+
+     --bar--
+
+3.2 The application/pkcs7-mime Type
+
+   The application/pkcs7-mime type is used to carry CMS objects of
+   several types including envelopedData and signedData. The details of
+   constructing these entities is described in subsequent sections. This
+   section describes the general characteristics of the
+   application/pkcs7-mime type.
+
+
+
+Ramsdell                    Standards Track                    [Page 15]
+
+RFC 2633         S/MIME Version 3 Message Specification        June 1999
+
+
+   The carried CMS object always contains a MIME entity that is prepared
+   as described in section 3.1 if the eContentType is id-data. Other
+   contents may be carried when the eContentType contains different
+   values. See [ESS] for an example of this with signed receipts.
+
+   Since CMS objects are binary data, in most cases base-64 transfer
+   encoding is appropriate, in particular when used with SMTP transport.
+   The transfer encoding used depends on the transport through which the
+   object is to be sent, and is not a characteristic of the MIME type.
+
+   Note that this discussion refers to the transfer encoding of the CMS
+   object or "outside" MIME entity. It is completely distinct from, and
+   unrelated to, the transfer encoding of the MIME entity secured by the
+   CMS object, the "inside" object, which is described in section 3.1.
+
+   Because there are several types of application/pkcs7-mime objects, a
+   sending agent SHOULD do as much as possible to help a receiving agent
+   know about the contents of the object without forcing the receiving
+   agent to decode the ASN.1 for the object. The MIME headers of all
+   application/pkcs7-mime objects SHOULD include the optional "smime-
+   type" parameter, as described in the following sections.
+
+3.2.1 The name and filename Parameters
+
+   For the application/pkcs7-mime, sending agents SHOULD emit the
+   optional "name" parameter to the Content-Type field for compatibility
+   with older systems. Sending agents SHOULD also emit the optional
+   Content-Disposition field [CONTDISP] with the "filename" parameter.
+   If a sending agent emits the above parameters, the value of the
+   parameters SHOULD be a file name with the appropriate extension:
+
+   MIME Type                                File Extension
+
+   Application/pkcs7-mime (signedData,      .p7m
+   envelopedData)
+
+   Application/pkcs7-mime (degenerate       .p7c
+   signedData "certs-only" message)
+
+   Application/pkcs7-signature              .p7s
+
+   In addition, the file name SHOULD be limited to eight characters
+   followed by a three letter extension. The eight character filename
+   base can be any distinct name; the use of the filename base "smime"
+   SHOULD be used to indicate that the MIME entity is associated with
+   S/MIME.
+
+
+
+
+
+Ramsdell                    Standards Track                    [Page 16]
+
+RFC 2633         S/MIME Version 3 Message Specification        June 1999
+
+
+   Including a file name serves two purposes. It facilitates easier use
+   of S/MIME objects as files on disk. It also can convey type
+   information across gateways. When a MIME entity of type
+   application/pkcs7-mime (for example) arrives at a gateway that has no
+   special knowledge of S/MIME, it will default the entity's MIME type
+   to application/octet-stream and treat it as a generic attachment,
+   thus losing the type information. However, the suggested filename for
+   an attachment is often carried across a gateway. This often allows
+   the receiving systems to determine the appropriate application to
+   hand the attachment off to, in this case a stand-alone S/MIME
+   processing application. Note that this mechanism is provided as a
+   convenience for implementations in certain environments. A proper
+   S/MIME implementation MUST use the MIME types and MUST NOT rely on
+   the file extensions.
+
+3.2.2 The smime-type parameter
+
+   The application/pkcs7-mime content type defines the optional "smime-
+   type" parameter. The intent of this parameter is to convey details
+   about the security applied (signed or enveloped) along with
+   infomation about the contained content. This memo defines the
+   following smime-types.
+
+   Name                   Security                Inner Content
+
+   enveloped-data         EnvelopedData           id-data
+
+   signed-data            SignedData              id-data
+
+   certs-only             SignedData              none
+
+   In order that consistency can be obtained with future, the following
+   guidelines should be followed when assigning a new smime-type
+   parameter.
+
+   1. If both signing and encryption can be applied to the content, then
+   two values for smime-type SHOULD be assigned "signed-*" and
+   "encrypted-*".  If one operation can be assigned then this may be
+   omitted. Thus since "certs-only" can only be signed, "signed-" is
+   omitted.
+
+   2. A common string for a content oid should be assigned. We use
+   "data" for the id-data content OID when MIME is the inner content.
+
+   3. If no common string is assigned.  Then the common string of
+   "OID.<oid>" is recommended (for example, "OID.1.3.6.1.5.5.7.6.1"
+   would be DES40).
+
+
+
+
+Ramsdell                    Standards Track                    [Page 17]
+
+RFC 2633         S/MIME Version 3 Message Specification        June 1999
+
+
+3.3 Creating an Enveloped-only Message
+
+   This section describes the format for enveloping a MIME entity
+   without signing it. It is important to note that sending enveloped
+   but not signed messages does not provide for data integrity. It is
+   possible to replace ciphertext in such a way that the processed
+   message will still be valid, but the meaning may be altered.
+
+   Step 1. The MIME entity to be enveloped is prepared according to
+   section 3.1.
+
+   Step 2. The MIME entity and other required data is processed into a
+   CMS object of type envelopedData. In addition to encrypting a copy of
+   the content-encryption key for each recipient, a copy of the content
+   encryption key SHOULD be encrypted for the originator and included in
+   the envelopedData (see CMS Section 6).
+
+   Step 3. The CMS object is inserted into an application/pkcs7-mime
+   MIME entity.
+
+   The smime-type parameter for enveloped-only messages is "enveloped-
+   data". The file extension for this type of message is ".p7m".
+
+   A sample message would be:
+
+       Content-Type: application/pkcs7-mime; smime-type=enveloped-data;
+            name=smime.p7m
+       Content-Transfer-Encoding: base64
+       Content-Disposition: attachment; filename=smime.p7m
+
+       rfvbnj756tbBghyHhHUujhJhjH77n8HHGT9HG4VQpfyF467GhIGfHfYT6
+       7n8HHGghyHhHUujhJh4VQpfyF467GhIGfHfYGTrfvbnjT6jH7756tbB9H
+       f8HHGTrfvhJhjH776tbB9HG4VQbnj7567GhIGfHfYT6ghyHhHUujpfyF4
+       0GhIGfHfQbnj756YT64V
+
+3.4 Creating a Signed-only Message
+
+   There are two formats for signed messages defined for S/MIME:
+   application/pkcs7-mime with SignedData, and multipart/signed. In
+   general, the multipart/signed form is preferred for sending, and
+   receiving agents SHOULD be able to handle both.
+
+
+
+
+
+
+
+
+
+
+Ramsdell                    Standards Track                    [Page 18]
+
+RFC 2633         S/MIME Version 3 Message Specification        June 1999
+
+
+3.4.1 Choosing a Format for Signed-only Messages
+
+   There are no hard-and-fast rules when a particular signed-only format
+   should be chosen because it depends on the capabilities of all the
+   receivers and the relative importance of receivers with S/MIME
+   facilities being able to verify the signature versus the importance
+   of receivers without S/MIME software being able to view the message.
+
+   Messages signed using the multipart/signed format can always be
+   viewed by the receiver whether they have S/MIME software or not. They
+   can also be viewed whether they are using a MIME-native user agent or
+   they have messages translated by a gateway. In this context, "be
+   viewed" means the ability to process the message essentially as if it
+   were not a signed message, including any other MIME structure the
+   message might have.
+
+   Messages signed using the signedData format cannot be viewed by a
+   recipient unless they have S/MIME facilities. However, if they have
+   S/MIME facilities, these messages can always be verified if they were
+   not changed in transit.
+
+3.4.2 Signing Using application/pkcs7-mime with SignedData
+
+   This signing format uses the application/pkcs7-mime MIME type. The
+   steps to create this format are:
+
+   Step 1. The MIME entity is prepared according to section 3.1
+
+   Step 2. The MIME entity and other required data is processed into a
+   CMS object of type signedData
+
+   Step 3. The CMS object is inserted into an application/pkcs7-mime
+   MIME entity
+
+   The smime-type parameter for messages using application/pkcs7-mime
+   with SignedData is "signed-data". The file extension for this type of
+   message is ".p7m".
+
+   A sample message would be:
+
+       Content-Type: application/pkcs7-mime; smime-type=signed-data;
+            name=smime.p7m
+       Content-Transfer-Encoding: base64
+       Content-Disposition: attachment; filename=smime.p7m
+
+
+
+
+
+
+
+Ramsdell                    Standards Track                    [Page 19]
+
+RFC 2633         S/MIME Version 3 Message Specification        June 1999
+
+
+       567GhIGfHfYT6ghyHhHUujpfyF4f8HHGTrfvhJhjH776tbB9HG4VQbnj7
+       77n8HHGT9HG4VQpfyF467GhIGfHfYT6rfvbnj756tbBghyHhHUujhJhjH
+       HUujhJh4VQpfyF467GhIGfHfYGTrfvbnjT6jH7756tbB9H7n8HHGghyHh
+       6YT64V0GhIGfHfQbnj75
+
+3.4.3 Signing Using the multipart/signed Format
+
+   This format is a clear-signing format. Recipients without any S/MIME
+   or CMS processing facilities are able to view the message. It makes
+   use of the multipart/signed MIME type described in [MIME-SECURE]. The
+   multipart/signed MIME type has two parts. The first part contains the
+   MIME entity that is signed; the second part contains the "detached
+   signature" CMS SignedData object in which the encapContentInfo
+   eContent field is absent.
+
+3.4.3.1 The application/pkcs7-signature MIME Type
+
+   This MIME type always contains a single CMS object of type
+   signedData.  The signedData encapContentInfo eContent field MUST be
+   absent. The signerInfos field contains the signatures for the MIME
+   entity.
+
+   The file extension for signed-only messages using application/pkcs7-
+   signature is ".p7s".
+
+3.4.3.2 Creating a multipart/signed Message
+
+   Step 1. The MIME entity to be signed is prepared according to section
+   3.1, taking special care for clear-signing.
+
+   Step 2. The MIME entity is presented to CMS processing in order to
+   obtain an object of type signedData in which the encapContentInfo
+   eContent field is absent.
+
+   Step 3. The MIME entity is inserted into the first part of a
+   multipart/signed message with no processing other than that described
+   in section 3.1.
+
+   Step 4. Transfer encoding is applied to the "detached signature" CMS
+   SignedData object and it is inserted into a MIME entity of type
+   application/pkcs7-signature.
+
+   Step 5. The MIME entity of the application/pkcs7-signature is
+   inserted into the second part of the multipart/signed entity.
+
+   The multipart/signed Content type has two required parameters: the
+   protocol parameter and the micalg parameter.
+
+
+
+
+Ramsdell                    Standards Track                    [Page 20]
+
+RFC 2633         S/MIME Version 3 Message Specification        June 1999
+
+
+   The protocol parameter MUST be "application/pkcs7-signature". Note
+   that quotation marks are required around the protocol parameter
+   because MIME requires that the "/" character in the parameter value
+   MUST be quoted.
+
+   The micalg parameter allows for one-pass processing when the
+   signature is being verified. The value of the micalg parameter is
+   dependent on the message digest algorithm(s) used in the calculation
+   of the Message Integrity Check. If multiple message digest algorithms
+   are used they MUST be separated by commas per [MIME-SECURE]. The
+   values to be placed in the micalg parameter SHOULD be from the
+   following:
+
+   Algorithm   Value
+   used
+
+   MD5         md5
+   SHA-1       sha1
+   Any other   unknown
+
+   (Historical note: some early implementations of S/MIME emitted and
+   expected "rsa-md5" and "rsa-sha1" for the micalg parameter.)
+   Receiving agents SHOULD be able to recover gracefully from a micalg
+   parameter value that they do not recognize.
+
+3.4.3.3 Sample multipart/signed Message
+
+       Content-Type: multipart/signed;
+          protocol="application/pkcs7-signature";
+          micalg=sha1; boundary=boundary42
+
+       --boundary42
+       Content-Type: text/plain
+
+       This is a clear-signed message.
+
+       --boundary42
+       Content-Type: application/pkcs7-signature; name=smime.p7s
+       Content-Transfer-Encoding: base64
+       Content-Disposition: attachment; filename=smime.p7s
+
+       ghyHhHUujhJhjH77n8HHGTrfvbnj756tbB9HG4VQpfyF467GhIGfHfYT6
+       4VQpfyF467GhIGfHfYT6jH77n8HHGghyHhHUujhJh756tbB9HGTrfvbnj
+       n8HHGTrfvhJhjH776tbB9HG4VQbnj7567GhIGfHfYT6ghyHhHUujpfyF4
+       7GhIGfHfYT64VQbnj756
+
+       --boundary42--
+
+
+
+
+Ramsdell                    Standards Track                    [Page 21]
+
+RFC 2633         S/MIME Version 3 Message Specification        June 1999
+
+
+3.5 Signing and Encrypting
+
+   To achieve signing and enveloping, any of the signed-only and
+   encrypted-only formats may be nested. This is allowed because the
+   above formats are all MIME entities, and because they all secure MIME
+   entities.
+
+   An S/MIME implementation MUST be able to receive and process
+   arbitrarily nested S/MIME within reasonable resource limits of the
+   recipient computer.
+
+   It is possible to either sign a message first, or to envelope the
+   message first. It is up to the implementor and the user to choose.
+   When signing first, the signatories are then securely obscured by the
+   enveloping. When enveloping first the signatories are exposed, but it
+   is possible to verify signatures without removing the enveloping.
+   This may be useful in an environment were automatic signature
+   verification is desired, as no private key material is required to
+   verify a signature.
+
+   There are security ramifications to choosing whether to sign first or
+   encrypt first. A recipient of a message that is encrypted and then
+   signed can validate that the encrypted block was unaltered, but
+   cannot determine any relationship between the signer and the
+   unencrypted contents of the message. A recipient of a message that is
+   signed-then-encrypted can assume that the signed message itself has
+   not been altered, but that a careful attacker may have changed the
+   unauthenticated portions of the encrypted message.
+
+3.6 Creating a Certificates-only Message
+
+   The certificates only message or MIME entity is used to transport
+   certificates, such as in response to a registration request. This
+   format can also be used to convey CRLs.
+
+   Step 1. The certificates are made available to the CMS generating
+   process which creates a CMS object of type signedData. The signedData
+   encapContentInfo eContent field MUST be absent and signerInfos field
+   MUST be empty.
+
+   Step 2. The CMS signedData object is enclosed in an
+   application/pkcs7-mime MIME entity
+
+   The smime-type parameter for a certs-only message is "certs-only".
+   The file extension for this type of message is ".p7c".
+
+
+
+
+
+
+Ramsdell                    Standards Track                    [Page 22]
+
+RFC 2633         S/MIME Version 3 Message Specification        June 1999
+
+
+3.7 Registration Requests
+
+   A sending agent that signs messages MUST have a certificate for the
+   signature so that a receiving agent can verify the signature. There
+   are many ways of getting certificates, such as through an exchange
+   with a certificate authority, through a hardware token or diskette,
+   and so on.
+
+   S/MIME v2 [SMIMEV2] specified a method for "registering" public keys
+   with certificate authorities using an application/pkcs10 body part.
+   The IETF's PKIX Working Group is preparing another method for
+   requesting certificates; however, that work was not finished at the
+   time of this memo. S/MIME v3 does not specify how to request a
+
+   certificate, but instead mandates that every sending agent already
+   has a certificate. Standardization of certificate management is being
+   pursued separately in the IETF.
+
+3.8 Identifying an S/MIME Message
+
+   Because S/MIME takes into account interoperation in non-MIME
+   environments, several different mechanisms are employed to carry the
+   type information, and it becomes a bit difficult to identify S/MIME
+   messages. The following table lists criteria for determining whether
+   or not a message is an S/MIME message. A message is considered an
+   S/MIME message if it matches any below.
+
+   The file suffix in the table below comes from the "name" parameter in
+   the content-type header, or the "filename" parameter on the content-
+   disposition header. These parameters that give the file suffix are
+   not listed below as part of the parameter section.
+
+   MIME type:   application/pkcs7-mime
+   parameters:  any
+   file suffix: any
+
+   MIME type:   multipart/signed
+   parameters:  protocol="application/pkcs7-signature"
+   file suffix: any
+
+   MIME type:   application/octet-stream
+   parameters:  any
+   file suffix: p7m, p7s, p7c
+
+
+
+
+
+
+
+
+Ramsdell                    Standards Track                    [Page 23]
+
+RFC 2633         S/MIME Version 3 Message Specification        June 1999
+
+
+4. Certificate Processing
+
+   A receiving agent MUST provide some certificate retrieval mechanism
+   in order to gain access to certificates for recipients of digital
+   envelopes. This memo does not cover how S/MIME agents handle
+   certificates, only what they do after a certificate has been
+   validated or rejected. S/MIME certification issues are covered in
+   [CERT3].
+
+   At a minimum, for initial S/MIME deployment, a user agent could
+   automatically generate a message to an intended recipient requesting
+   that recipient's certificate in a signed return message. Receiving
+   and sending agents SHOULD also provide a mechanism to allow a user to
+   "store and protect" certificates for correspondents in such a way so
+   as to guarantee their later retrieval.
+
+4.1 Key Pair Generation
+
+   If an S/MIME agent needs to generate a key pair, then the S/MIME
+   agent or some related administrative utility or function MUST be
+   capable of generating separate DH and DSS public/private key pairs on
+   behalf of the user. Each key pair MUST be generated from a good
+   source of non-deterministic random input [RANDOM] and the private key
+   MUST be protected in a secure fashion.
+
+   If an S/MIME agent needs to generate a key pair, then the S/MIME
+   agent or some related administrative utility or function SHOULD
+   generate RSA key pairs.
+
+   A user agent SHOULD generate RSA key pairs at a minimum key size of
+   768 bits. A user agent MUST NOT generate RSA key pairs less than 512
+   bits long. Creating keys longer than 1024 bits may cause some older
+   S/MIME receiving agents to not be able to verify signatures, but
+   gives better security and is therefore valuable. A receiving agent
+   SHOULD be able to verify signatures with keys of any size over 512
+   bits. Some agents created in the United States have chosen to create
+   512 bit keys in order to get more advantageous export licenses.
+   However, 512 bit keys are considered by many to be cryptographically
+   insecure.  Implementors should be aware that multiple (active) key
+   pairs may be associated with a single individual. For example, one
+   key pair may be used to support confidentiality, while a different
+   key pair may be used for authentication.
+
+
+
+
+
+
+
+
+
+Ramsdell                    Standards Track                    [Page 24]
+
+RFC 2633         S/MIME Version 3 Message Specification        June 1999
+
+
+5. Security
+
+   This entire memo discusses security. Security issues not covered in
+   other parts of the memo include:
+
+   40-bit encryption is considered weak by most cryptographers. Using
+   weak cryptography in S/MIME offers little actual security over
+   sending plaintext. However, other features of S/MIME, such as the
+   specification of tripleDES and the ability to announce stronger
+   cryptographic capabilities to parties with whom you communicate,
+   allow senders to create messages that use strong encryption. Using
+   weak cryptography is never recommended unless the only alternative is
+   no cryptography. When feasible, sending and receiving agents should
+   inform senders and recipients the relative cryptographic strength of
+   messages.
+
+   It is impossible for most software or people to estimate the value of
+   a message. Further, it is impossible for most software or people to
+   estimate the actual cost of decrypting a message that is encrypted
+   with a key of a particular size. Further, it is quite difficult to
+   determine the cost of a failed decryption if a recipient cannot
+   decode a message. Thus, choosing between different key sizes (or
+   choosing whether to just use plaintext) is also impossible. However,
+   decisions based on these criteria are made all the time, and
+   therefore this memo gives a framework for using those estimates in
+   choosing algorithms.
+
+   If a sending agent is sending the same message using different
+   strengths of cryptography, an attacker watching the communications
+   channel may be able to determine the contents of the strongly-
+   encrypted message by decrypting the weakly-encrypted version.  In
+   other words, a sender should not send a copy of a message using
+   weaker cryptography than they would use for the original of the
+   message.
+
+   Modification of the ciphertext can go undetected if authentication is
+   not also used, which is the case when sending EnvelopedData without
+   wrapping it in SignedData or enclosing SignedData within it.
+
+
+
+
+
+
+
+
+
+
+
+
+
+Ramsdell                    Standards Track                    [Page 25]
+
+RFC 2633         S/MIME Version 3 Message Specification        June 1999
+
+
+A. ASN.1 Module
+
+SecureMimeMessageV3
+  { iso(1) member-body(2) us(840) rsadsi(113549)
+         pkcs(1) pkcs-9(9) smime(16) modules(0) smime(4) }
+
+DEFINITIONS IMPLICIT TAGS ::=
+BEGIN
+
+IMPORTS
+-- Cryptographic Message Syntax
+    SubjectKeyIdentifier, IssuerAndSerialNumber,
+RecipientKeyIdentifier
+        FROM    CryptographicMessageSyntax
+               { iso(1) member-body(2) us(840) rsadsi(113549)
+                 pkcs(1) pkcs-9(9) smime(16) modules(0) cms(1) };
+
+--  id-aa is the arc with all new authenticated and unauthenticated
+--  attributes produced the by S/MIME Working Group
+
+id-aa OBJECT IDENTIFIER ::= {iso(1) member-body(2) usa(840)
+rsadsi(113549)
+        pkcs(1) pkcs-9(9) smime(16) attributes(2)}
+
+-- S/MIME Capabilities provides a method of broadcasting the symetric
+-- capabilities understood.  Algorithms should be ordered by preference
+-- and grouped by type
+
+smimeCapabilities OBJECT IDENTIFIER ::=
+   {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9) 15}
+
+SMIMECapability ::= SEQUENCE {
+   capabilityID OBJECT IDENTIFIER,
+   parameters ANY DEFINED BY capabilityID OPTIONAL }
+
+SMIMECapabilities ::= SEQUENCE OF SMIMECapability
+
+-- Encryption Key Preference provides a method of broadcasting the
+-- preferred encryption certificate.
+
+id-aa-encrypKeyPref OBJECT IDENTIFIER ::= {id-aa 11}
+
+SMIMEEncryptionKeyPreference ::= CHOICE {
+   issuerAndSerialNumber   [0] IssuerAndSerialNumber,
+   receipentKeyId          [1] RecipientKeyIdentifier,
+   subjectAltKeyIdentifier [2] SubjectKeyIdentifier
+}
+
+
+
+
+Ramsdell                    Standards Track                    [Page 26]
+
+RFC 2633         S/MIME Version 3 Message Specification        June 1999
+
+
+-- The Content Encryption Algorithms defined for SMIME are:
+
+-- Triple-DES is the manditory algorithm with CBCParameter being the
+-- parameters
+
+dES-EDE3-CBC OBJECT IDENTIFIER ::=
+   {iso(1) member-body(2) us(840) rsadsi(113549)
+encryptionAlgorithm(3) 7}
+
+CBCParameter ::= IV
+
+IV ::= OCTET STRING (SIZE (8..8))
+
+--  RC2 (or compatable) is an optional algorithm w/ RC2-CBC-paramter
+--  as the parameter
+
+rC2-CBC OBJECT IDENTIFIER ::=
+   {iso(1) member-body(2) us(840) rsadsi(113549)
+encryptionAlgorithm(3) 2}
+
+-- For the effective-key-bits (key size) greater than 32 and less than
+-- 256, the RC2-CBC algorithm parameters are encoded as:
+
+RC2-CBC-parameter ::=  SEQUENCE {
+   rc2ParameterVersion  INTEGER,
+   iv                   IV}
+
+-- For the effective-key-bits of 40, 64, and 128, the
+-- rc2ParameterVersion values are 160, 120, 58 respectively.
+
+-- The following list the OIDs to be used with S/MIME V3
+
+-- Digest Algorithms:
+
+-- md5 OBJECT IDENTIFIER ::=
+--    {iso(1) member-body(2) us(840) rsadsi(113549)
+-- digestAlgorithm(2) 5}
+
+-- sha-1 OBJECT IDENTIFIER ::=
+--    {iso(1) identified-organization(3) oiw(14) secsig(3)
+-- algorithm(2) 26}
+
+-- Asymmetric Encryption Algorithms
+--
+-- rsaEncryption OBJECT IDENTIFIER ::=
+--    {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-1(1)
+-- 1}
+--
+
+
+
+Ramsdell                    Standards Track                    [Page 27]
+
+RFC 2633         S/MIME Version 3 Message Specification        June 1999
+
+
+-- rsa OBJECT IDENTIFIER ::=
+--    {joint-iso-ccitt(2) ds(5) algorithm(8) encryptionAlgorithm(1) 1}
+--
+-- id-dsa OBJECT IDENTIFIER ::=
+--    {iso(1) member-body(2) us(840) x9-57(10040) x9cm(4) 1 }
+
+-- Signature Algorithms
+--
+-- md2WithRSAEncryption OBJECT IDENTIFIER ::=
+--    {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-1(1)
+-- 2}
+--
+-- md5WithRSAEncryption OBJECT IDENTIFIER ::=
+--    {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-1(1)
+-- 4}
+--
+-- sha-1WithRSAEncryption OBJECT IDENTIFIER ::=
+--    {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-1(1)
+-- 5}
+--
+-- id-dsa-with-sha1 OBJECT IDENTIFIER ::=
+--    {iso(1) member-body(2) us(840) x9-57(10040) x9cm(4) 3}
+
+-- Other Signed Attributes
+--
+-- signingTime OBJECT IDENTIFIER ::=
+--    {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)
+-- 5}
+--    See [CMS] for a description of how to encode the attribute
+--    value.
+
+END
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Ramsdell                    Standards Track                    [Page 28]
+
+RFC 2633         S/MIME Version 3 Message Specification        June 1999
+
+
+B. References
+
+   [3DES]         ANSI X9.52-1998, "Triple Data Encryption Algorithm
+                  Modes of Operation", American National Standards
+                  Institute, 1998.
+
+   [CERT3]        Ramsdell, B., Editor, "S/MIME Version 3 Certificate
+                  Handling", RFC 2632, June 1999.
+
+   [CHARSETS]     Character sets assigned by IANA. See
+                  <ftp://ftp.isi.edu/in-
+                  notes/iana/assignments/character-sets>.
+
+   [CMS]          Housley, R., "Cryptographic Message Syntax", RFC 2630,
+                  June 1999.
+
+   [CONTDISP]     Troost, R., Dorner, S. and K. Moore, "Communicating
+                  Presentation Information in Internet Messages: The
+                  Content-Disposition Header Field", RFC 2183, August
+                  1997.
+
+   [DES]          ANSI X3.106, "American National Standard for
+                  Information Systems- Data Link Encryption," American
+                  National Standards Institute, 1983.
+
+   [DH]           Rescorla, E., "Diffie-Hellman Key Agreement Method",
+                  RFC 2631, June 1999.
+
+   [DSS]          NIST FIPS PUB 186, "Digital Signature Standard", 18
+                  May 1994.
+
+   [ESS]          Hoffman, P., Editor "Enhanced Security Services for
+                  S/MIME", RFC 2634, June 1999.
+
+   [MD5]          Rivest, R., "The MD5 Message Digest Algorithm", RFC
+                  1321, April 1992.
+
+   [MIME-SPEC]    The primary definition of MIME. "MIME Part 1: Format
+                  of Internet Message Bodies", RFC 2045; "MIME Part 2:
+                  Media Types", RFC 2046; "MIME Part 3: Message Header
+                  Extensions for Non-ASCII Text", RFC 2047; "MIME Part
+                  4: Registration Procedures", RFC 2048; "MIME Part 5:
+                  Conformance Criteria and Examples", RFC 2049,
+                  September 1993.
+
+   [MIME-SECURE]  Galvin, J., Murphy, S., Crocker, S. and N. Freed,
+                  "Security Multiparts for MIME: Multipart/Signed and
+                  Multipart/Encrypted", RFC 1847, October 1995.
+
+
+
+Ramsdell                    Standards Track                    [Page 29]
+
+RFC 2633         S/MIME Version 3 Message Specification        June 1999
+
+
+   [MUSTSHOULD]   Bradner, S., "Key words for use in RFCs to Indicate
+                  Requirement Levels", BCP14, RFC 2119, March 1997.
+
+   [PKCS-1]       Kaliski, B., "PKCS #1: RSA Encryption Version 2.0",
+                  RFC 2437, October 1998.
+
+   [PKCS-7]       Kaliski, B., "PKCS #7: Cryptographic Message Syntax
+                  Version 1.5", RFC 2315, March 1998.
+
+   [RANDOM]       Eastlake, 3rd, D., Crocker, S. and J. Schiller,
+                  "Randomness Recommendations for Security", RFC 1750,
+                  December 1994.
+
+   [RC2]          Rivest, R., "A Description of the RC2 (r) Encryption
+                  Algorithm", RFC 2268, January 1998.
+
+   [SHA1]         NIST FIPS PUB 180-1, "Secure Hash Standard," National
+                  Institute of Standards and Technology, U.S. Department
+                  of Commerce, DRAFT, 31May 1994.
+
+   [SMIMEV2]      Dusse, S., Hoffman, P., Ramsdell, B., Lundblade, L.
+                  and L.  Repka, "S/MIME Version 2 Message
+                  Specification", RFC 2311, March 1998.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Ramsdell                    Standards Track                    [Page 30]
+
+RFC 2633         S/MIME Version 3 Message Specification        June 1999
+
+
+C. Acknowledgements
+
+   Many thanks go out to the other authors of the S/MIME Version 2
+   Message Specification RFC:  Steve Dusse, Paul Hoffman, Laurence
+   Lundblade and Lisa Repka. Without v2, there wouldn't be a v3.
+
+   A number of the members of the S/MIME Working Group have also worked
+   very hard and contributed to this document. Any list of people is
+   doomed to omission, and for that I apologize. In alphabetical order,
+   the following people stand out in my mind due to the fact that they
+   made direct contributions to this document.
+
+   Dave Crocker
+   Bill Flanigan
+   Paul Hoffman
+   Russ Housley
+   John Pawling
+   Jim Schaad
+
+Editor's Address
+
+   Blake Ramsdell
+   Worldtalk
+   17720 NE 65th St Ste 201
+   Redmond, WA 98052
+
+   Phone: +1 425 376 0225
+   EMail: blaker@deming.com
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Ramsdell                    Standards Track                    [Page 31]
+
+RFC 2633         S/MIME Version 3 Message Specification        June 1999
+
+
+Full Copyright Statement
+
+   Copyright (C) The Internet Society (1999).  All Rights Reserved.
+
+   This document and translations of it may be copied and furnished to
+   others, and derivative works that comment on or otherwise explain it
+   or assist in its implementation may be prepared, copied, published
+   and distributed, in whole or in part, without restriction of any
+   kind, provided that the above copyright notice and this paragraph are
+   included on all such copies and derivative works.  However, this
+   document itself may not be modified in any way, such as by removing
+   the copyright notice or references to the Internet Society or other
+   Internet organizations, except as needed for the purpose of
+   developing Internet standards in which case the procedures for
+   copyrights defined in the Internet Standards process must be
+   followed, or as required to translate it into languages other than
+   English.
+
+   The limited permissions granted above are perpetual and will not be
+   revoked by the Internet Society or its successors or assigns.
+
+   This document and the information contained herein is provided on an
+   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
+   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
+   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
+   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
+   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
+
+Acknowledgement
+
+   Funding for the RFC Editor function is currently provided by the
+   Internet Society.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Ramsdell                    Standards Track                    [Page 32]
+
diff -uNr gmime-1.90.0/rfc/rfc2634.txt gmime/rfc/rfc2634.txt
--- gmime-1.90.0/rfc/rfc2634.txt	Thu Jan  1 01:00:00 1970
+++ gmime/rfc/rfc2634.txt	Tue Dec  5 07:39:10 2000
@@ -0,0 +1,3251 @@
+
+
+
+
+
+
+Network Working Group                                P. Hoffman, Editor
+Request for Comments: 2634                     Internet Mail Consortium
+Category: Standards Track                                     June 1999
+
+
+                 Enhanced Security Services for S/MIME
+
+Status of this Memo
+
+   This document specifies an Internet standards track protocol for the
+   Internet community, and requests discussion and suggestions for
+   improvements.  Please refer to the current edition of the "Internet
+   Official Protocol Standards" (STD 1) for the standardization state
+   and status of this protocol.  Distribution of this memo is unlimited.
+
+Copyright Notice
+
+   Copyright (C) The Internet Society (1999).  All Rights Reserved.
+
+1. Introduction
+
+   This document describes four optional security service extensions for
+   S/MIME. The services are:
+
+    - signed receipts
+    - security labels
+    - secure mailing lists
+    - signing certificates
+
+   The first three of these services provide functionality that is
+   similar to the Message Security Protocol [MSP4], but are useful in
+   many other environments, particularly business and finance. Signing
+   certificates are useful in any environment where certificates might
+   be transmitted with signed messages.
+
+   The services described here are extensions to S/MIME version 3 ([MSG]
+   and [CERT]), and some of them can also be added to S/MIME version 2
+   [SMIME2]. The extensions described here will not cause an S/MIME
+   version 3 recipient to be unable to read messages from an S/MIME
+   version 2 sender. However, some of the extensions will cause messages
+   created by an S/MIME version 3 sender to be unreadable by an S/MIME
+   version 2 recipient.
+
+   This document describes both the procedures and the attributes needed
+   for the four services. Note that some of the attributes described in
+   this document are quite useful in other contexts and should be
+   considered when extending S/MIME or other CMS applications.
+
+
+
+
+Hoffman                     Standards Track                     [Page 1]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+   The format of the messages are described in ASN.1:1988 [ASN1-1988].
+
+   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
+   "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and "OPTIONAL" in this
+   document are to be interpreted as described in [MUSTSHOULD].
+
+1.1 Triple Wrapping
+
+   Some of the features of each service use the concept of a "triple
+   wrapped" message. A triple wrapped message is one that has been
+   signed, then encrypted, then signed again. The signers of the inner
+   and outer signatures may be different entities or the same entity.
+   Note that the S/MIME specification does not limit the number of
+   nested encapsulations, so there may be more than three wrappings.
+
+1.1.1 Purpose of Triple Wrapping
+
+   Not all messages need to be triple wrapped. Triple wrapping is used
+   when a message must be signed, then encrypted, and then have signed
+   attributes bound to the encrypted body. Outer attributes may be added
+   or removed by the message originator or intermediate agents, and may
+   be signed by intermediate agents or the final recipient.
+
+   The inside signature is used for content integrity, non-repudiation
+   with proof of origin, and binding attributes (such as a security
+   label) to the original content. These attributes go from the
+   originator to the recipient, regardless of the number of intermediate
+   entities such as mail list agents that process the message. The
+   signed attributes can be used for access control to the inner body.
+   Requests for signed receipts by the originator are carried in the
+   inside signature as well.
+
+   The encrypted body provides confidentiality, including
+   confidentiality of the attributes that are carried in the inside
+   signature.
+
+   The outside signature provides authentication and integrity for
+   information that is processed hop-by-hop, where each hop is an
+   intermediate entity such as a mail list agent. The outer signature
+   binds attributes (such as a security label) to the encrypted body.
+   These attributes can be used for access control and routing
+   decisions.
+
+
+
+
+
+
+
+
+
+Hoffman                     Standards Track                     [Page 2]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+1.1.2 Steps for Triple Wrapping
+
+   The steps to create a triple wrapped message are:
+
+   1. Start with a message body, called the "original content".
+
+   2. Encapsulate the original content with the appropriate MIME
+      Content-type headers, such as "Content-type: text/plain". An
+      exception to this MIME encapsulation rule is that a signed receipt
+      is not put in MIME headers.
+
+   3. Sign the result of step 2 (the inner MIME headers and the original
+      content). The SignedData encapContentInfo eContentType object
+      identifier MUST be id-data. If the structure you create in step 4
+      is multipart/signed, then the SignedData encapContentInfo eContent
+      MUST be absent. If the structure you create in step 4 is
+      application/pkcs7-mime, then the SignedData encapContentInfo
+      eContent MUST contain the result of step 2 above. The SignedData
+      structure is encapsulated by a ContentInfo SEQUENCE with a
+      contentType of id-signedData.
+
+   4. Add an appropriate MIME construct to the signed message from step
+      3 as defined in [MSG]. The resulting message is called the "inside
+      signature".
+
+    - If you are signing using multipart/signed, the MIME construct
+      added consists of a Content-type of multipart/signed with
+      parameters, the boundary, the result of step 2 above, the
+      boundary, a Content-type of application/pkcs7-signature,
+      optional MIME headers (such asContent-transfer-encoding and
+      Content-disposition), and a body part that is the result of
+      step 3 above.
+
+    - If you are instead signing using application/pkcs7-mime, the MIME
+      construct added consists of a Content-type of
+      application/pkcs7-mime with parameters, optional MIME headers
+      (such as Content-transfer-encoding and Content-disposition), and
+      the result of step 3 above.
+
+   5. Encrypt the result of step 4 as a single block, turning it into an
+      application/pkcs7-mime object. The EnvelopedData
+      encryptedContentInfo contentType MUST be id-data.
+      The EnvelopedData structure is encapsulated by a ContentInfo
+      SEQUENCE with a contentType of id-envelopedData. This is called
+      the "encrypted body".
+
+
+
+
+
+
+Hoffman                     Standards Track                     [Page 3]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+   6. Add the appropriate MIME headers: a Content-type of
+      application/pkcs7-mime with parameters, and optional MIME headers
+      such as Content-transfer-encoding and Content-disposition.
+
+   7. Using the same logic as in step 3 above, sign the result of step 6
+      (the MIME headers and the encrypted body) as a single block
+
+   8. Using the same logic as in step 4 above, add an appropriate MIME
+      construct to the signed message from step 7. The resulting message
+      is called the "outside signature", and is also the triple wrapped
+      message.
+
+1.2 Format of a Triple Wrapped Message
+
+   A triple wrapped message has many layers of encapsulation. The
+   structure differs based on the choice of format for the signed
+   portions of the message. Because of the way that MIME encapsulates
+   data, the layers do not appear in order, and the notion of "layers"
+   becomes vague.
+
+   There is no need to use the multipart/signed format in an inner
+   signature because it is known that the recipient is able to process
+   S/MIME messages (because they decrypted the middle wrapper). A
+   sending agent might choose to use the multipart/signed format in the
+   outer layer so that a non-S/MIME agent could see that the next inner
+   layer is encrypted; however, this is not of great value, since all it
+   shows the recipient is that the rest of the message is unreadable.
+   Because many sending agents always use multipart/signed structures,
+   all receiving agents MUST be able to interpret either
+   multipart/signed or application/pkcs7-mime signature structures.
+
+   The format of a triple wrapped message that uses multipart/signed for
+   both signatures is:
+
+   [step 8] Content-type: multipart/signed;
+   [step 8]    protocol="application/pkcs7-signature";
+   [step 8]    boundary=outerboundary
+   [step 8]
+   [step 8] --outerboundary
+   [step 6] Content-type: application/pkcs7-mime;             )
+   [step 6]    smime-type=enveloped-data                      )
+   [step 6]                                                   )
+   [step 4] Content-type: multipart/signed;                 | )
+   [step 4]    protocol="application/pkcs7-signature";      | )
+   [step 4]    boundary=innerboundary                       | )
+   [step 4]                                                 | )
+   [step 4] --innerboundary                                 | )
+   [step 2] Content-type: text/plain                      % | )
+
+
+
+Hoffman                     Standards Track                     [Page 4]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+   [step 2]                                               % | )
+   [step 1] Original content                              % | )
+   [step 4]                                                 | )
+   [step 4] --innerboundary                                 | )
+   [step 4] Content-type: application/pkcs7-signature       | )
+   [step 4]                                                 | )
+   [step 3] inner SignedData block (eContent is missing)    | )
+   [step 4]                                                 | )
+   [step 4] --innerboundary--                               | )
+   [step 8]
+   [step 8] --outerboundary
+   [step 8] Content-type: application/pkcs7-signature
+   [step 8]
+   [step 7] outer SignedData block (eContent is missing)
+   [step 8]
+   [step 8] --outerboundary--
+
+   % = These lines are what the inner signature is computed over.
+   | = These lines are what is encrypted in step 5. This encrypted result
+       is opaque and is a part of an EnvelopedData block.
+   ) = These lines are what the outer signature is computed over.
+
+   The format of a triple wrapped message that uses application/pkcs7-
+   mime for the both signatures is:
+
+   [step 8] Content-type: application/pkcs7-mime;
+   [step 8]    smime-type=signed-data
+   [step 8]
+   [step 7] outer SignedData block (eContent is present)        O
+   [step 6] Content-type: application/pkcs7-mime;             ) O
+   [step 6]    smime-type=enveloped-data;                     ) O
+   [step 6]                                                   ) O
+   [step 4] Content-type: application/pkcs7-mime;           | ) O
+   [step 4]    smime-type=signed-data                       | ) O
+   [step 4]                                                 | ) O
+   [step 3] inner SignedData block (eContent is present)  I | ) O
+   [step 2] Content-type: text/plain                      I | ) O
+   [step 2]                                               I | ) O
+   [step 1] Original content                              I | ) O
+
+   I = These lines are the inner SignedData block, which is opaque and
+       contains the ASN.1 encoded result of step 2 as well as control
+       information.
+   | = These lines are what is encrypted in step 5. This encrypted result
+       is opaque and is a part of an EnvelopedData block.
+   ) = These lines are what the outer signature is computed over.
+
+
+
+
+
+Hoffman                     Standards Track                     [Page 5]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+   O = These lines are the outer SignedData block, which is opaque and
+       contains the ASN.1 encoded result of step 6 as well as control
+       information.
+
+1.3 Security Services and Triple Wrapping
+
+   The first three security services described in this document are used
+   with triple wrapped messages in different ways. This section briefly
+   describes the relationship of each service with triple wrapping; the
+   other sections of the document go into greater detail.
+
+1.3.1 Signed Receipts and Triple Wrapping
+
+   A signed receipt may be requested in any SignedData object. However,
+   if a signed receipt is requested for a triple wrapped message, the
+   receipt request MUST be in the inside signature, not in the outside
+   signature.  A secure mailing list agent may change the receipt policy
+   in the outside signature of a triple wrapped message when that
+   message is processed by the mailing list.
+
+   Note: the signed receipts and receipt requests described in this memo
+   differ from those described in the work done by the IETF Receipt
+   Notification Working Group. The output of that Working Group, when
+   finished, is not expected to work well with triple wrapped messages
+   as described in this document.
+
+1.3.2 Security Labels and Triple Wrapping
+
+   A security label may be included in the signed attributes of any
+   SignedData object. A security label attribute may be included in
+   either the inner signature, outer signature, or both.
+
+   The inner security label is used for access control decisions related
+   to the plaintext original content. The inner signature provides
+   authentication and cryptographically protects the integrity of the
+   original signer's security label that is in the inside body. This
+   strategy facilitates the forwarding of messages because the original
+   signer's security label is included in the SignedData block which can
+   be forwarded to a third party that can verify the inner signature
+   which will cover the inner security label. The confidentiality
+   security service can be applied to the inner security label by
+   encrypting the entire inner SignedData block within an EnvelopedData
+   block.
+
+   A security label may also be included in the signed attributes of the
+   outer SignedData block which will include the sensitivities of the
+   encrypted message. The outer security label is used for access
+   control and routing decisions related to the encrypted message. Note
+
+
+
+Hoffman                     Standards Track                     [Page 6]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+   that a security label attribute can only be used in a
+   signedAttributes block.  An eSSSecurityLabel attribute MUST NOT be
+   used in an EnvelopedData or unsigned attributes.
+
+1.3.3 Secure Mailing Lists and Triple Wrapping
+
+   Secure mail list message processing depends on the structure of
+   S/MIME layers present in the message sent to the mail list agent. The
+   mail list agent never changes the data that was hashed to form the
+   inner signature, if such a signature is present. If an outer
+   signature is present, then the agent will modify the data that was
+   hashed to form that outer signature. In all cases, the agent adds or
+   updates an mlExpansionHistory attribute to document the agent's
+   processing, and ultimately adds or replaces the outer signature on
+   the message to be distributed.
+
+1.3.4 Placement of Attributes
+
+   Certain attributes should be placed in the inner or outer SignedData
+   message; some attributes can be in either. Further, some attributes
+   must be signed, while signing is optional for others, and some
+   attributes must not be signed. ESS defines several types of
+   attributes.  ContentHints and ContentIdentifier MAY appear in any
+   list of attributes. contentReference, equivalentLabel,
+   eSSSecurityLabel and mlExpansionHistory MUST be carried in a
+   SignedAttributes or AuthAttributes type, and MUST NOT be carried in a
+   UnsignedAttributes, UnauthAttributes or UnprotectedAttributes type.
+   msgSigDigest, receiptRequest and signingCertificate MUST be carried
+   in a SignedAttributes, and MUST NOT be carried in a AuthAttributes,
+   UnsignedAttributes, UnauthAttributes or UnprotectedAttributes type.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Hoffman                     Standards Track                     [Page 7]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+   The following table summarizes the recommendation of this profile. In
+   the OID column, [ESS] indicates that the attribute is defined in this
+   document.
+
+                     |                              |Inner or  |
+   Attribute         |OID                           |outer     |Signed
+   ------------------|----------------------------- |----------|--------
+   contentHints      |id-aa-contentHint [ESS]       |either    |MAY
+   contentIdentifier |id-aa-contentIdentifier [ESS] |either    |MAY
+   contentReference  |id-aa-contentReference [ESS]  |either    |MUST
+   contentType       |id-contentType [CMS]          |either    |MUST
+   counterSignature  |id-countersignature [CMS]     |either    |MUST NOT
+   equivalentLabel   |id-aa-equivalentLabels [ESS]  |either    |MUST
+   eSSSecurityLabel  |id-aa-securityLabel [ESS]     |either    |MUST
+   messageDigest     |id-messageDigest [CMS]        |either    |MUST
+   msgSigDigest      |id-aa-msgSigDigest [ESS]      |inner only|MUST
+   mlExpansionHistory|id-aa-mlExpandHistory [ESS]   |outer only|MUST
+   receiptRequest    |id-aa-receiptRequest [ESS]    |inner only|MUST
+   signingCertificate|id-aa-signingCertificate [ESS]|either    |MUST
+   signingTime       |id-signingTime [CMS]          |either    |MUST
+   smimeCapabilities |sMIMECapabilities [MSG]       |either    |MUST
+   sMIMEEncryption-
+     KeyPreference   |id-aa-encrypKeyPref [MSG]     |either    |MUST
+
+   CMS defines signedAttrs as a SET OF Attribute and defines
+   unsignedAttrs as a SET OF Attribute. ESS defines the contentHints,
+   contentIdentifier, eSSecurityLabel, msgSigDigest, mlExpansionHistory,
+   receiptRequest, contentReference, equivalentLabels and
+   signingCertificate attribute types. A signerInfo MUST NOT include
+   multiple instances of any of the attribute types defined in ESS.
+   Later sections of ESS specify further restrictions that apply to the
+   receiptRequest, mlExpansionHistory and eSSecurityLabel attribute
+   types.
+
+   CMS defines the syntax for the signed and unsigned attributes as
+   "attrValues SET OF AttributeValue". For all of the attribute types
+   defined in ESS, if the attribute type is present in a signerInfo,
+   then it MUST only include a single instance of AttributeValue. In
+   other words, there MUST NOT be zero, or multiple, instances of
+   AttributeValue present in the attrValues SET OF AttributeValue.
+
+   If a counterSignature attribute is present, then it MUST be included
+   in the unsigned attributes. It MUST NOT be included in the signed
+   attributes. The only attributes that are allowed in a
+   counterSignature attribute are counterSignature, messageDigest,
+   signingTime, and signingCertificate.
+
+
+
+
+
+Hoffman                     Standards Track                     [Page 8]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+   Note that the inner and outer signatures are usually those of
+   different senders. Because of this, the same attribute in the two
+   signatures could lead to very different consequences.
+
+   ContentIdentifier is an attribute (OCTET STRING) used to carry a
+   unique identifier assigned to the message.
+
+1.4 Required and Optional Attributes
+
+   Some security gateways sign messages that pass through them. If the
+   message is any type other than a signedData type, the gateway has
+   only one way to sign the message: by wrapping it with a signedData
+   block and MIME headers. If the message to be signed by the gateway is
+   a signedData message already, the gateway can sign the message by
+   inserting a signerInfo into the signedData block.
+
+   The main advantage of a gateway adding a signerInfo instead of
+   wrapping the message in a new signature is that the message doesn't
+   grow as much as if the gateway wrapped the message. The main
+   disadvantage is that the gateway must check for the presence of
+   certain attributes in the other signerInfos and either omit or copy
+   those attributes.
+
+   If a gateway or other processor adds a signerInfo to an existing
+   signedData block, it MUST copy the mlExpansionHistory and
+   eSSSecurityLabel attributes from other signerInfos. This helps ensure
+   that the recipient will process those attributes in a signerInfo that
+   it can verify.
+
+   Note that someone may in the future define an attribute that must be
+   present in each signerInfo of a signedData block in order for the
+   signature to be processed. If that happens, a gateway that inserts
+   signerInfos and doesn't copy that attribute will cause every message
+   with that attribute to fail when processed by the recipient. For this
+   reason, it is safer to wrap messages with new signatures than to
+   insert signerInfos.
+
+1.5 Object Identifiers
+
+   The object identifiers for many of the objects described in this memo
+   are found in [CMS], [MSG], and [CERT]. Other object identifiers used
+   in S/MIME can be found in the registry kept at
+   <http://www.imc.org/ietf-smime/oids.html>. When this memo moves to
+   standards track within the IETF, it is intended that the IANA will
+   maintain this registry.
+
+
+
+
+
+
+Hoffman                     Standards Track                     [Page 9]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+2. Signed Receipts
+
+   Returning a signed receipt provides to the originator proof of
+   delivery of a message, and allows the originator to demonstrate to a
+   third party that the recipient was able to verify the signature of
+   the original message. This receipt is bound to the original message
+   through the signature; consequently, this service may be requested
+   only if a message is signed. The receipt sender may optionally also
+   encrypt a receipt to provide confidentiality between the receipt
+   sender and the receipt recipient.
+
+2.1 Signed Receipt Concepts
+
+   The originator of a message may request a signed receipt from the
+   message's recipients. The request is indicated by adding a
+   receiptRequest attribute to the signedAttributes field of the
+   SignerInfo object for which the receipt is requested. The receiving
+   user agent software SHOULD automatically create a signed receipt when
+   requested to do so, and return the receipt in accordance with mailing
+   list expansion options, local security policies, and configuration
+   options.
+
+   Because receipts involve the interaction of two parties, the
+   terminology can sometimes be confusing. In this section, the "sender"
+   is the agent that sent the original message that included a request
+   for a receipt. The "receiver" is the party that received that message
+   and generated the receipt.
+
+   The steps in a typical transaction are:
+
+   1. Sender creates a signed message including a receipt request
+      attribute (Section 2.2).
+
+   2. Sender transmits the resulting message to the recipient or
+      recipients.
+
+   3. Recipient receives message and determines if there is a valid
+      signature and receipt request in the message (Section 2.3).
+
+   4. Recipient creates a signed receipt (Section 2.4).
+
+   5. Recipient transmits the resulting signed receipt message to the
+      sender (Section 2.5).
+
+
+
+
+
+
+
+
+Hoffman                     Standards Track                    [Page 10]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+   6. Sender receives the message and validates that it contains a
+      signed receipt for the original message (Section 2.6). This
+      validation relies on the sender having retained either a copy of
+      the original message or information extracted from the original
+      message.
+
+   The ASN.1 syntax for the receipt request is given in Section 2.7; the
+   ASN.1 syntax for the receipt is given in Section 2.8.
+
+   Note that a sending agent SHOULD remember when it has sent a receipt
+   so that it can avoid re-sending a receipt each time it processes the
+   message.
+
+   A receipt request can indicate that receipts be sent to many places,
+   not just to the sender (in fact, the receipt request might indicate
+   that the receipts should not even go to the sender). In order to
+   verify a receipt, the recipient of the receipt must be the originator
+   or a recipient of the original message. Thus, the sender SHOULD NOT
+   request that receipts be sent to anyone who does not have an exact
+   copy of the message.
+
+2.2 Receipt Request Creation
+
+   Multi-layer S/MIME messages may contain multiple SignedData layers.
+   However, receipts may be requested only for the innermost SignedData
+   layer in a multi-layer S/MIME message, such as a triple wrapped
+   message. Only one receiptRequest attribute can be included in the
+   signedAttributes of a SignerInfo.
+
+   A ReceiptRequest attribute MUST NOT be included in the attributes of
+   a SignerInfo in a SignedData object that encapsulates a Receipt
+   content.  In other words, the receiving agent MUST NOT request a
+   signed receipt for a signed receipt.
+
+   A sender requests receipts by placing a receiptRequest attribute in
+   the signed attributes of a signerInfo as follows:
+
+   1. A receiptRequest data structure is created.
+
+   2. A signed content identifier for the message is created and assigned
+      to the signedContentIdentifier field. The signedContentIdentifier
+      is used to associate the signed receipt with the message requesting
+      the signed receipt.
+
+   3. The entities requested to return a signed receipt are noted in the
+      receiptsFrom field.
+
+
+
+
+
+Hoffman                     Standards Track                    [Page 11]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+   4. The message originator MUST populate the receiptsTo field with a
+      GeneralNames for each entity to whom the recipient should send the
+      signed receipt. If the message originator wants the recipient to
+      send the signed receipt to the originator, then the originator MUST
+      include a GeneralNames for itself in the receiptsTo field.
+      GeneralNames is a SEQUENCE OF GeneralName. receiptsTo is a
+      SEQUENCE OF GeneralNames in which each GeneralNames represents an
+      entity.  There may be multiple GeneralName instances in each
+      GeneralNames.  At a minimum, the message originator MUST populate
+      each entity's GeneralNames with the address to which the signed
+      receipt should be sent. Optionally, the message originator MAY
+      also populate each entity's GeneralNames with other GeneralName
+      instances (such as directoryName).
+
+   5. The completed receiptRequest attribute is placed in the
+      signedAttributes field of the SignerInfo object.
+
+2.2.1 Multiple Receipt Requests
+
+   There can be multiple SignerInfos within a SignedData object, and
+   each SignerInfo may include signedAttributes. Therefore, a single
+   SignedData object may include multiple SignerInfos, each SignerInfo
+   having a receiptRequest attribute. For example, an originator can
+   send a signed message with two SignerInfos, one containing a DSS
+   signature, the other containing an RSA signature.
+
+   Each recipient SHOULD return only one signed receipt.
+
+   Not all of the SignerInfos need to include receipt requests, but in
+   all of the SignerInfos that do contain receipt requests, the receipt
+   requests MUST be identical.
+
+2.2.2 Information Needed to Validate Signed Receipts
+
+   The sending agent MUST retain one or both of the following items to
+   support the validation of signed receipts returned by the recipients.
+
+    - the original signedData object requesting the signed receipt
+
+    - the message signature digest value used to generate the original
+      signedData signerInfo signature value and the digest value of the
+      Receipt content containing values included in the original
+      signedData object. If signed receipts are requested from multiple
+      recipients, then retaining these digest values is a performance
+      enhancement because the sending agent can reuse the saved values
+      when verifying each returned signed receipt.
+
+
+
+
+
+Hoffman                     Standards Track                    [Page 12]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+2.3 Receipt Request Processing
+
+   A receiptRequest is associated only with the SignerInfo object to
+   which the receipt request attribute is directly attached. Receiving
+   software SHOULD examine the signedAttributes field of each of the
+   SignerInfos for which it verifies a signature in the innermost
+   signedData object to determine if a receipt is requested. This may
+   result in the receiving agent processing multiple receiptRequest
+   attributes included in a single SignedData object, such as requests
+   made from different people who signed the object in parallel.
+
+   Before processing a receiptRequest signedAttribute, the receiving
+   agent MUST verify the signature of the SignerInfo which covers the
+   receiptRequest attribute. A recipient MUST NOT process a
+   receiptRequest attribute that has not been verified. Because all
+   receiptRequest attributes in a SignedData object must be identical,
+   the receiving application fully processes (as described in the
+   following paragraphs) the first receiptRequest attribute that it
+   encounters in a SignerInfo that it verifies, and it then ensures that
+   all other receiptRequest attributes in signerInfos that it verifies
+   are identical to the first one encountered. If there are verified
+   ReceiptRequest attributes which are not the same, then the processing
+   software MUST NOT return any signed receipt. A signed receipt SHOULD
+   be returned if any signerInfo containing a receiptRequest attribute
+   can be validated, even if other signerInfos containing the same
+   receiptRequest attribute cannot be validated because they are signed
+   using an algorithm not supported by the receiving agent.
+
+   If a receiptRequest attribute is absent from the signed attributes,
+   then a signed receipt has not been requested from any of the message
+   recipients and MUST NOT be created. If a receiptRequest attribute is
+   present in the signed attributes, then a signed receipt has been
+   requested from some or all of the message recipients. Note that in
+   some cases, a receiving agent might receive two almost-identical
+   messages, one with a receipt request and the other without one. In
+   this case, the receiving agent SHOULD send a signed receipt for the
+   message that requests a signed receipt.
+
+   If a receiptRequest attribute is present in the signed attributes,
+   the following process SHOULD be used to determine if a message
+   recipient has been requested to return a signed receipt.
+
+
+
+
+
+
+
+
+
+
+Hoffman                     Standards Track                    [Page 13]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+   1. If an mlExpansionHistory attribute is present in the outermost
+      signedData block, do one of the following two steps, based on the
+      absence or presence of mlReceiptPolicy:
+
+       1.1. If an mlReceiptPolicy value is absent from the last MLData
+            element, a Mail List receipt policy has not been specified
+            and the processing software SHOULD examine the
+            receiptRequest attribute value to determine if a receipt
+            should be created and returned.
+
+       1.2. If an mlReceiptPolicy value is present in the last MLData
+            element, do one of the following two steps, based on the
+            value of mlReceiptPolicy:
+
+           1.2.1. If the mlReceiptPolicy value is none, then the receipt
+                  policy of the Mail List supersedes the originator's
+                  request for a signed receipt and a signed receipt MUST
+                  NOT be created.
+
+           1.2.2. If the mlReceiptPolicy value is insteadOf or
+                  inAdditionTo, the processing software SHOULD examine
+                  the receiptsFrom value from the receiptRequest
+                  attribute to determine if a receipt should be created
+                  and returned. If a receipt is created, the insteadOf
+                  and inAdditionTo fields identify entities that SHOULD
+                  be sent the receipt instead of or in addition to the
+                  originator.
+
+   2. If the receiptsFrom value of the receiptRequest attribute
+      allOrFirstTier, do one of the following two steps based on the
+      value of allOrFirstTier.
+
+       2.1. If the value of allOrFirstTier is allReceipts, then a signed
+            receipt SHOULD be created.
+
+       2.2. If the value of allOrFirstTier is firstTierRecipients, do
+            one of the following two steps based on the presence of an
+            mlExpansionHistory attribute in an outer signedData block:
+
+           2.2.1. If an mlExpansionHistory attribute is present, then
+                  this recipient is not a first tier recipient and a
+                  signed receipt MUST NOT be created.
+
+           2.2.2. If an mlExpansionHistory attribute is not present,
+                  then a signed receipt SHOULD be created.
+
+   3. If the receiptsFrom value of the receiptRequest attribute is a
+      receiptList:
+
+
+
+Hoffman                     Standards Track                    [Page 14]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+
+       3.1. If receiptList contains one of the GeneralNames of the
+            recipient, then a signed receipt SHOULD be created.
+
+       3.2. If receiptList does not contain one of the GeneralNames of
+            the recipient, then a signed receipt MUST NOT be created.
+
+   A flow chart for the above steps to be executed for each signerInfo
+   for which the receiving agent verifies the signature would be:
+
+   0. Receipt Request attribute present?
+          YES -> 1.
+          NO  -> STOP
+   1. Has mlExpansionHistory in outer signedData?
+          YES -> 1.1.
+          NO  -> 2.
+   1.1. mlReceiptPolicy absent?
+          YES -> 2.
+          NO  -> 1.2.
+   1.2. Pick based on value of mlReceiptPolicy.
+          none -> 1.2.1.
+          insteadOf or inAdditionTo -> 1.2.2.
+   1.2.1. STOP.
+   1.2.2. Examine receiptsFrom to determine if a receipt should be
+       created, create it if required, send it to recipients designated
+       by mlReceiptPolicy, then -> STOP.
+   2. Is value of receiptsFrom allOrFirstTier?
+          YES -> Pick based on value of allOrFirstTier.
+                allReceipts -> 2.1.
+                firstTierRecipients -> 2.2.
+          NO  -> 3.
+   2.1. Create a receipt, then -> STOP.
+   2.2. Has mlExpansionHistory in the outer signedData block?
+          YES -> 2.2.1.
+          NO  -> 2.2.2.
+   2.2.1. STOP.
+   2.2.2. Create a receipt, then -> STOP.
+   3. Is receiptsFrom value of receiptRequest a receiptList?
+          YES -> 3.1.
+          NO  -> STOP.
+   3.1. Does receiptList contain the recipient?
+          YES -> Create a receipt, then -> STOP.
+          NO  -> 3.2.
+   3.2. STOP.
+
+
+
+
+
+
+
+Hoffman                     Standards Track                    [Page 15]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+2.4 Signed Receipt Creation
+
+   A signed receipt is a signedData object encapsulating a Receipt
+   content (also called a "signedData/Receipt"). Signed receipts are
+   created as follows:
+
+   1. The signature of the original signedData signerInfo that includes
+      the receiptRequest signed attribute MUST be successfully verified
+      before creating the signedData/Receipt.
+
+       1.1. The content of the original signedData object is digested as
+            described in [CMS]. The resulting digest value is then
+            compared with the value of the messageDigest attribute
+            included in the signedAttributes of the original signedData
+            signerInfo. If these digest values are different, then the
+            signature verification process fails and the
+            signedData/Receipt MUST NOT be created.
+
+       1.2. The ASN.1 DER encoded signedAttributes (including
+            messageDigest, receiptRequest and, possibly, other signed
+            attributes) in the original signedData signerInfo are
+            digested as described in [CMS]. The resulting digest
+            value, called msgSigDigest, is then used to verify the
+            signature of the original signedData signerInfo. If the
+            signature verification fails, then the signedData/Receipt
+            MUST NOT be created.
+
+   2. A Receipt structure is created.
+
+       2.1. The value of the Receipt version field is set to 1.
+
+       2.2. The object identifier from the contentType attribute
+            included in the original signedData signerInfo that
+            includes the receiptRequest attribute is copied into
+            the Receipt contentType.
+
+       2.3. The original signedData signerInfo receiptRequest
+            signedContentIdentifier is copied into the Receipt
+            signedContentIdentifier.
+
+       2.4. The signature value from the original signedData signerInfo
+            that includes the receiptRequest attribute is copied into
+            the Receipt originatorSignatureValue.
+
+   3. The Receipt structure is ASN.1 DER encoded to produce a data
+      stream, D1.
+
+
+
+
+
+Hoffman                     Standards Track                    [Page 16]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+   4. D1 is digested. The resulting digest value is included as the
+      messageDigest attribute in the signedAttributes of the signerInfo
+      which will eventually contain the signedData/Receipt signature
+      value.
+
+   5. The digest value (msgSigDigest) calculated in Step 1 to verify the
+      signature of the original signedData signerInfo is included as the
+      msgSigDigest attribute in the signedAttributes of the signerInfo
+      which will eventually contain the signedData/Receipt signature
+      value.
+
+   6. A contentType attribute including the id-ct-receipt object
+      identifier MUST be created and added to the signed attributes of
+      the signerInfo which will eventually contain the
+      signedData/Receipt signature value.
+
+   7. A signingTime attribute indicating the time that the
+      signedData/Receipt is signed SHOULD be created and added to the
+      signed attributes of the signerInfo which will eventually contain
+      the signedData/Receipt signature value. Other attributes (except
+      receiptRequest) may be added to the signedAttributes of the
+      signerInfo.
+
+   8. The signedAttributes (messageDigest, msgSigDigest, contentType and,
+      possibly, others) of the signerInfo are ASN.1 DER encoded and
+      digested as described in [CMS]. The resulting digest value is used
+      to calculate the signature value which is then included in the
+      signedData/Receipt signerInfo.
+
+   9. The ASN.1 DER encoded Receipt content MUST be directly encoded
+      within the signedData encapContentInfo eContent OCTET STRING
+      defined in [CMS]. The id-ct-receipt object identifier MUST be
+      included in the signedData encapContentInfo eContentType. This
+      results in a single ASN.1 encoded object composed of a signedData
+      including the Receipt content. The Data content type MUST NOT be
+      used.  The Receipt content MUST NOT be encapsulated in a MIME
+      header or any other header prior to being encoded as part of the
+      signedData object.
+
+   10. The signedData/Receipt is then put in an application/pkcs7-mime
+       MIME wrapper with the smime-type parameter set to
+       "signed-receipt".  This will allow for identification of signed
+       receipts without having to crack the ASN.1 body. The smime-type
+       parameter would still be set as normal in any layer wrapped
+       around this message.
+
+
+
+
+
+
+Hoffman                     Standards Track                    [Page 17]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+   11. If the signedData/Receipt is to be encrypted within an
+       envelopedData object, then an outer signedData object MUST be
+       created that encapsulates the envelopedData object, and a
+       contentHints attribute with contentType set to the id-ct-receipt
+       object identifier MUST be included in the outer signedData
+       SignerInfo signedAttributes.  When a receiving agent processes the
+       outer signedData object, the presence of the id-ct-receipt OID in
+       the contentHints contentType indicates that a signedData/Receipt
+       is encrypted within the envelopedData object encapsulated by the
+       outer signedData.
+
+   All sending agents that support the generation of ESS signed receipts
+   MUST provide the ability to send encrypted signed receipts (that is,
+   a signedData/Receipt encapsulated within an envelopedData). The
+   sending agent MAY send an encrypted signed receipt in response to an
+   envelopedData-encapsulated signedData requesting a signed receipt. It
+   is a matter of local policy regarding whether or not the signed
+   receipt should be encrypted.  The ESS signed receipt includes the
+   message digest value calculated for the original signedData object
+   that requested the signed receipt. If the original signedData object
+   was sent encrypted within an envelopedData object and the ESS signed
+   receipt is sent unencrypted, then the message digest value calculated
+   for the original encrypted signedData object is sent unencrypted. The
+   responder should consider this when deciding whether or not to
+   encrypt the ESS signed receipt.
+
+2.4.1 MLExpansionHistory Attributes and Receipts
+
+   An MLExpansionHistory attribute MUST NOT be included in the
+   attributes of a SignerInfo in a SignedData object that encapsulates a
+   Receipt content. This is true because when a SignedData/Receipt is
+   sent to an MLA for distribution, then the MLA must always encapsulate
+   the received SignedData/Receipt in an outer SignedData in which the
+   MLA will include the MLExpansionHistory attribute. The MLA cannot
+   change the signedAttributes of the received SignedData/Receipt
+   object, so it can't add the MLExpansionHistory to the
+   SignedData/Receipt.
+
+2.5 Determining the Recipients of the Signed Receipt
+
+   If a signed receipt was created by the process described in the
+   sections above, then the software MUST use the following process to
+   determine to whom the signed receipt should be sent.
+
+   1. The receiptsTo field must be present in the receiptRequest
+      attribute. The software initiates the sequence of recipients with
+      the value(s) of receiptsTo.
+
+
+
+
+Hoffman                     Standards Track                    [Page 18]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+   2. If the MlExpansionHistory attribute is present in the outer
+      SignedData block, and the last MLData contains an MLReceiptPolicy
+      value of insteadOf, then the software replaces the sequence of
+      recipients with the value(s) of insteadOf.
+
+   3. If the MlExpansionHistory attribute is present in the outer
+      SignedData block and the last MLData contains an MLReceiptPolicy
+      value of inAdditionTo, then the software adds the value(s) of
+      inAdditionTo to the sequence of recipients.
+
+2.6. Signed Receipt Validation
+
+   A signed receipt is communicated as a single ASN.1 encoded object
+   composed of a signedData object directly including a Receipt content.
+   It is identified by the presence of the id-ct-receipt object
+   identifier in the encapContentInfo eContentType value of the
+   signedData object including the Receipt content.
+
+   Although recipients are not supposed to send more than one signed
+   receipt, receiving agents SHOULD be able to accept multiple signed
+   receipts from a recipient.
+
+   A signedData/Receipt is validated as follows:
+
+   1. ASN.1 decode the signedData object including the Receipt content.
+
+   2. Extract the contentType, signedContentIdentifier, and
+      originatorSignatureValue from the decoded Receipt structure to
+      identify the original signedData signerInfo that requested the
+      signedData/Receipt.
+
+   3. Acquire the message signature digest value calculated by the sender
+      to generate the signature value included in the original signedData
+      signerInfo that requested the signedData/Receipt.
+
+       3.1. If the sender-calculated message signature digest value has
+            been saved locally by the sender, it must be located and
+            retrieved.
+
+       3.2. If it has not been saved, then it must be re-calculated based
+            on the original signedData content and signedAttributes as
+            described in [CMS].
+
+   4. The message signature digest value calculated by the sender is then
+      compared with the value of the msgSigDigest signedAttribute
+      included in the signedData/Receipt signerInfo. If these digest
+      values are identical, then that proves that the message signature
+      digest value calculated by the recipient based on the received
+
+
+
+Hoffman                     Standards Track                    [Page 19]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+      original signedData object is the same as that calculated by the
+      sender. This proves that the recipient received exactly the same
+      original signedData content and signedAttributes as sent by the
+      sender because that is the only way that the recipient could have
+      calculated the same message signature digest value as calculated by
+      the sender.  If the digest values are different, then the
+      signedData/Receipt signature verification process fails.
+
+   5. Acquire the digest value calculated by the sender for the Receipt
+      content constructed by the sender (including the contentType,
+      signedContentIdentifier, and signature value that were included in
+      the original signedData signerInfo that requested the
+      signedData/Receipt).
+
+       5.1. If the sender-calculated Receipt content digest value has
+            been  saved locally by the sender, it must be located and
+            retrieved.
+
+       5.2. If it has not been saved, then it must be re-calculated. As
+            described in section above, step 2, create a Receipt
+            structure including the contentType, signedContentIdentifier
+            and signature value that were included in the original
+            signedData signerInfo that requested the signed receipt. The
+            Receipt structure is then ASN.1 DER encoded to produce a data
+            stream which is then digested to produce the Receipt content
+            digest value.
+
+   6. The Receipt content digest value calculated by the sender is then
+      compared with the value of the messageDigest signedAttribute
+      included in the signedData/Receipt signerInfo. If these digest
+      values are identical, then that proves that the values included in
+      the Receipt content by the recipient are identical to those that
+      were included in the original signedData signerInfo that requested
+      the signedData/Receipt. This proves that the recipient received the
+      original signedData signed by the sender, because that is the only
+      way that the recipient could have obtained the original signedData
+      signerInfo signature value for inclusion in the Receipt content. If
+      the digest values are different, then the signedData/Receipt
+      signature verification process fails.
+
+   7. The ASN.1 DER encoded signedAttributes of the signedData/Receipt
+      signerInfo are digested as described in [CMS].
+
+   8. The resulting digest value is then used to verify the signature
+      value included in the signedData/Receipt signerInfo. If the
+      signature verification is successful, then that proves the
+      integrity of the signedData/receipt signerInfo signedAttributes and
+      authenticates the identity of the signer of the signedData/Receipt
+
+
+
+Hoffman                     Standards Track                    [Page 20]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+      signerInfo. Note that the signedAttributes include the
+      recipient-calculated Receipt content digest value (messageDigest
+      attribute) and recipient-calculated message signature digest value
+      (msgSigDigest attribute). Therefore, the aforementioned comparison
+      of the sender-generated and recipient-generated digest values
+      combined with the successful signedData/Receipt signature
+      verification proves that the recipient received the exact original
+      signedData content and signedAttributes (proven by msgSigDigest
+      attribute) that were signed by the sender of the original
+      signedData object (proven by messageDigest attribute). If the
+      signature verification fails, then the signedData/Receipt signature
+      verification process fails.
+
+   The signature verification process for each signature algorithm that
+   is used in conjunction with the CMS protocol is specific to the
+   algorithm.  These processes are described in documents specific to
+   the algorithms.
+
+2. 7 Receipt Request Syntax
+
+   A receiptRequest attribute value has ASN.1 type ReceiptRequest. Use
+   the receiptRequest attribute only within the signed attributes
+   associated with a signed message.
+
+ReceiptRequest ::= SEQUENCE {
+  signedContentIdentifier ContentIdentifier,
+  receiptsFrom ReceiptsFrom,
+  receiptsTo SEQUENCE SIZE (1..ub-receiptsTo)) OF GeneralNames }
+
+ub-receiptsTo INTEGER ::= 16
+
+id-aa-receiptRequest OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+    us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) id-aa(2) 1}
+
+ContentIdentifier ::= OCTET STRING
+
+id-aa-contentIdentifier OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+    us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) id-aa(2) 7}
+
+   A signedContentIdentifier MUST be created by the message originator
+   when creating a receipt request. To ensure global uniqueness, the
+   minimal signedContentIdentifier SHOULD contain a concatenation of
+   user-specific identification information (such as a user name or
+   public keying material identification information), a GeneralizedTime
+   string, and a random number.
+
+
+
+
+
+
+Hoffman                     Standards Track                    [Page 21]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+   The receiptsFrom field is used by the originator to specify the
+   recipients requested to return a signed receipt. A CHOICE is provided
+   to allow specification of:
+
+    - receipts from all recipients are requested
+    - receipts from first tier (recipients that did not receive the
+      message as members of a mailing list) recipients are requested
+    - receipts from a specific list of recipients are requested
+
+   ReceiptsFrom ::= CHOICE {
+     allOrFirstTier [0] AllOrFirstTier,
+     -- formerly "allOrNone [0]AllOrNone"
+     receiptList [1] SEQUENCE OF GeneralNames }
+
+   AllOrFirstTier ::= INTEGER { -- Formerly AllOrNone
+     allReceipts (0),
+     firstTierRecipients (1) }
+
+   The receiptsTo field is used by the originator to identify the
+   user(s) to whom the identified recipient should send signed receipts.
+   The message originator MUST populate the receiptsTo field with a
+   GeneralNames for each entity to whom the recipient should send the
+   signed receipt. If the message originator wants the recipient to send
+   the signed receipt to the originator, then the originator MUST
+   include a GeneralNames for itself in the receiptsTo field.
+
+2.8 Receipt Syntax
+
+   Receipts are represented using a new content type, Receipt. The
+   Receipt content type shall have ASN.1 type Receipt. Receipts must be
+   encapsulated within a SignedData message.
+
+Receipt ::= SEQUENCE {
+  version ESSVersion,
+  contentType ContentType,
+  signedContentIdentifier ContentIdentifier,
+  originatorSignatureValue OCTET STRING }
+
+id-ct-receipt OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)
+   rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) id-ct(1) 1}
+
+ESSVersion ::= INTEGER  { v1(1) }
+
+   The version field defines the syntax version number, which is 1 for
+   this version of the standard.
+
+
+
+
+
+
+Hoffman                     Standards Track                    [Page 22]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+2.9 Content Hints
+
+   Many applications find it useful to have information that describes
+   the innermost signed content of a multi-layer message available on
+   the outermost signature layer. The contentHints attribute provides
+   such information.
+
+Content-hints attribute values have ASN.1 type contentHints.
+
+ContentHints ::= SEQUENCE {
+  contentDescription UTF8String (SIZE (1..MAX)) OPTIONAL,
+  contentType ContentType }
+
+id-aa-contentHint OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)
+    rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) id-aa(2) 4}
+
+   The contentDescription field may be used to provide information that
+   the recipient may use to select protected messages for processing,
+   such as a message subject. If this field is set, then the attribute
+   is expected to appear on the signedData object enclosing an
+   envelopedData object and not on the inner signedData object. The
+   (SIZE (1..MAX)) construct constrains the sequence to have at least
+   one entry. MAX indicates the upper bound is unspecified.
+   Implementations are free to choose an upper bound that suits their
+   environment.
+
+   Messages which contain a signedData object wrapped around an
+   envelopedData object, thus masking the inner content type of the
+   message, SHOULD include a contentHints attribute, except for the case
+   of the data content type. Specific message content types may either
+   force or preclude the inclusion of the contentHints attribute. For
+   example, when a signedData/Receipt is encrypted within an
+   envelopedData object, an outer signedData object MUST be created that
+   encapsulates the envelopedData object and a contentHints attribute
+   with contentType set to the id-ct-receipt object identifier MUST be
+   included in the outer signedData SignerInfo signedAttributes.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Hoffman                     Standards Track                    [Page 23]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+2.10  Message Signature Digest Attribute
+
+   The msgSigDigest attribute can only be used in the signed attributes
+   of a signed receipt. It contains the digest of the ASN.1 DER encoded
+   signedAttributes included in the original signedData that requested
+   the signed receipt. Only one msgSigDigest attribute can appear in a
+   signed attributes set. It is defined as follows:
+
+msgSigDigest ::= OCTET STRING
+
+id-aa-msgSigDigest OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+    us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) id-aa(2) 5}
+
+2.11 Signed Content Reference Attribute
+
+   The contentReference attribute is a link from one SignedData to
+   another. It may be used to link a reply to the original message to
+   which it refers, or to incorporate by reference one SignedData into
+   another. The first SignedData MUST include a contentIdentifier signed
+   attribute, which SHOULD be constructed as specified in section 2.7.
+   The second SignedData links to the first by including a
+   ContentReference signed attribute containing the content type,
+   content identifier, and signature value from the first SignedData.
+
+ContentReference ::= SEQUENCE {
+  contentType ContentType,
+  signedContentIdentifier ContentIdentifier,
+  originatorSignatureValue OCTET STRING }
+
+id-aa-contentReference   OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+    us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) id-aa(2) 10 }
+
+3. Security Labels
+
+   This section describes the syntax to be used for security labels that
+   can optionally be associated with S/MIME encapsulated data. A
+   security label is a set of security information regarding the
+   sensitivity of the content that is protected by S/MIME encapsulation.
+
+   "Authorization" is the act of granting rights and/or privileges to
+   users permitting them access to an object. "Access control" is a
+   means of enforcing these authorizations. The sensitivity information
+   in a security label can be compared with a user's authorizations to
+   determine if the user is allowed to access the content that is
+   protected by S/MIME encapsulation.
+
+
+
+
+
+
+Hoffman                     Standards Track                    [Page 24]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+   Security labels may be used for other purposes such as a source of
+   routing information. The labels often describe ranked levels
+   ("secret", "confidential", "restricted", and so on) or are role-
+   based, describing which kind of people can see the information
+   ("patient's health-care team", "medical billing agents",
+   "unrestricted", and so on).
+
+3.1 Security Label Processing Rules
+
+   A sending agent may include a security label attribute in the signed
+   attributes of a signedData object. A receiving agent examines the
+   security label on a received message and determines whether or not
+   the recipient is allowed to see the contents of the message.
+
+3.1.1 Adding Security Labels
+
+   A sending agent that is using security labels MUST put the security
+   label attribute in the signedAttributes field of a SignerInfo block.
+   The security label attribute MUST NOT be included in the unsigned
+   attributes. Integrity and authentication security services MUST be
+   applied to the security label, therefore it MUST be included as a
+   signed attribute, if used. This causes the security label attribute
+   to be part of the data that is hashed to form the SignerInfo
+   signature value. A SignerInfo block MUST NOT have more than one
+   security label signed attribute.
+
+   When there are multiple SignedData blocks applied to a message, a
+   security label attribute may be included in either the inner
+   signature, outer signature, or both. A security label signed
+   attribute may be included in a signedAttributes field within the
+   inner SignedData block.  The inner security label will include the
+   sensitivities of the original content and will be used for access
+   control decisions related to the plaintext encapsulated content. The
+   inner signature provides authentication of the inner security label
+   and cryptographically protects the original signer's inner security
+   label of the original content.
+
+   When the originator signs the plaintext content and signed
+   attributes, the inner security label is bound to the plaintext
+   content. An intermediate entity cannot change the inner security
+   label without invalidating the inner signature. The confidentiality
+   security service can be applied to the inner security label by
+   encrypting the entire inner signedData object within an EnvelopedData
+   block.
+
+   A security label signed attribute may also be included in a
+   signedAttributes field within the outer SignedData block. The outer
+   security label will include the sensitivities of the encrypted
+
+
+
+Hoffman                     Standards Track                    [Page 25]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+   message and will be used for access control decisions related to the
+   encrypted message and for routing decisions. The outer signature
+   provides authentication of the outer security label (as well as for
+   the encapsulated content which may include nested S/MIME messages).
+
+   There can be multiple SignerInfos within a SignedData object, and
+   each SignerInfo may include signedAttributes. Therefore, a single
+   SignedData object may include multiple eSSSecurityLabels, each
+   SignerInfo having an eSSSecurityLabel attribute. For example, an
+   originator can send a signed message with two SignerInfos, one
+   containing a DSS signature, the other containing an RSA signature. If
+   any of the SignerInfos included in a SignedData object include an
+   eSSSecurityLabel attribute, then all of the SignerInfos in that
+   SignedData object MUST include an eSSSecurityLabel attribute and the
+   value of each MUST be identical.
+
+3.1.2 Processing Security Labels
+
+   Before processing an eSSSecurityLabel signedAttribute, the receiving
+   agent MUST verify the signature of the SignerInfo which covers the
+   eSSSecurityLabel attribute. A recipient MUST NOT process an
+   eSSSecurityLabel attribute that has not been verified.
+
+   A receiving agent MUST process the eSSSecurityLabel attribute, if
+   present, in each SignerInfo in the SignedData object for which it
+   verifies the signature. This may result in the receiving agent
+   processing multiple eSSSecurityLabels included in a single SignedData
+   object. Because all eSSSecurityLabels in a SignedData object must be
+   identical, the receiving agent processes (such as performing access
+   control) on the first eSSSecurityLabel that it encounters in a
+   SignerInfo that it verifies, and then ensures that all other
+   eSSSecurityLabels in signerInfos that it verifies are identical to
+   the first one encountered. If the eSSSecurityLabels in the
+   signerInfos that it verifies are not all identical, then the
+   receiving agent MUST warn the user of this condition.
+
+   Receiving agents SHOULD have a local policy regarding whether or not
+   to show the inner content of a signedData object that includes an
+   eSSSecurityLabel security-policy-identifier that the processing
+   software does not recognize. If the receiving agent does not
+   recognize the eSSSecurityLabel security-policy-identifier value, then
+   it SHOULD stop processing the message and indicate an error.
+
+
+
+
+
+
+
+
+
+Hoffman                     Standards Track                    [Page 26]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+3.2 Syntax of eSSSecurityLabel
+
+   The eSSSecurityLabel syntax is derived directly from [MTSABS] ASN.1
+   module. (The MTSAbstractService module begins with "DEFINITIONS
+   IMPLICIT TAGS ::=".) Further, the eSSSecurityLabel syntax is
+   compatible with that used in [MSP4].
+
+ESSSecurityLabel ::= SET {
+  security-policy-identifier SecurityPolicyIdentifier,
+  security-classification SecurityClassification OPTIONAL,
+  privacy-mark ESSPrivacyMark OPTIONAL,
+  security-categories SecurityCategories OPTIONAL }
+
+id-aa-securityLabel OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+    us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) id-aa(2) 2}
+
+SecurityPolicyIdentifier ::= OBJECT IDENTIFIER
+
+SecurityClassification ::= INTEGER {
+  unmarked (0),
+  unclassified (1),
+  restricted (2),
+  confidential (3),
+  secret (4),
+  top-secret (5) } (0..ub-integer-options)
+
+ub-integer-options INTEGER ::= 256
+
+ESSPrivacyMark ::= CHOICE {
+    pString      PrintableString (SIZE (1..ub-privacy-mark-length)),
+    utf8String   UTF8String (SIZE (1..MAX))
+}
+
+ub-privacy-mark-length INTEGER ::= 128
+
+SecurityCategories ::= SET SIZE (1..ub-security-categories) OF
+        SecurityCategory
+
+ub-security-categories INTEGER ::= 64
+
+SecurityCategory ::= SEQUENCE {
+  type  [0] OBJECT IDENTIFIER,
+  value [1] ANY DEFINED BY type -- defined by type
+}
+
+--Note: The aforementioned SecurityCategory syntax produces identical
+--hex encodings as the following SecurityCategory syntax that is
+--documented in the X.411 specification:
+
+
+
+Hoffman                     Standards Track                    [Page 27]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+--
+--SecurityCategory ::= SEQUENCE {
+--     type  [0]  SECURITY-CATEGORY,
+--     value [1]  ANY DEFINED BY type }
+--
+--SECURITY-CATEGORY MACRO ::=
+--BEGIN
+--TYPE NOTATION ::= type | empty
+--VALUE NOTATION ::= value (VALUE OBJECT IDENTIFIER)
+--END
+
+3.3  Security Label Components
+
+   This section gives more detail on the the various components of the
+   eSSSecurityLabel syntax.
+
+3.3.1 Security Policy Identifier
+
+   A security policy is a set of criteria for the provision of security
+   services. The eSSSecurityLabel security-policy-identifier is used to
+   identify the security policy in force to which the security label
+   relates. It indicates the semantics of the other security label
+   components.
+
+3.3.2 Security Classification
+
+   This specification defines the use of the Security Classification
+   field exactly as is specified in the X.411 Recommendation, which
+   states in part:
+
+      If present, a security-classification may have one of a
+      hierarchical list of values. The basic security-classification
+      hierarchy is defined in this Recommendation, but the use of these
+      values is defined by the security-policy in force. Additional
+      values of security-classification, and their position in the
+      hierarchy, may also be defined by a security-policy as a local
+      matter or by bilateral agreement. The basic security-
+      classification hierarchy is, in ascending order: unmarked,
+      unclassified, restricted, confidential, secret, top-secret.
+
+   This means that the security policy in force (identified by the
+   eSSSecurityLabel security-policy-identifier) defines the
+   SecurityClassification integer values and their meanings.
+
+   An organization can develop its own security policy that defines the
+   SecurityClassification INTEGER values and their meanings. However,
+   the general interpretation of the X.411 specification is that the
+   values of 0 through 5 are reserved for the "basic hierarchy" values
+
+
+
+Hoffman                     Standards Track                    [Page 28]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+   of unmarked, unclassified, restricted, confidential, secret, and
+   top-secret. Note that X.411 does not provide the rules for how these
+   values are used to label data and how access control is performed
+   using these values.
+
+   There is no universal definition of the rules for using these "basic
+   hierarchy" values. Each organization (or group of organizations) will
+   define a security policy which documents how the "basic hierarchy"
+   values are used (if at all) and how access control is enforced (if at
+   all) within their domain.
+
+   Therefore, the security-classification value MUST be accompanied by a
+   security-policy-identifier value to define the rules for its use. For
+   example, a company's "secret" classification may convey a different
+   meaning than the US Government "secret" classification. In summary, a
+   security policy SHOULD NOT use integers 0 through 5 for other than
+   their X.411 meanings, and SHOULD instead use other values in a
+   hierarchical fashion.
+
+   Note that the set of valid security-classification values MUST be
+   hierarchical, but these values do not necessarily need to be in
+   ascending numerical order. Further, the values do not need to be
+   contiguous.
+
+   For example, in the Defense Message System 1.0 security policy, the
+   security-classification value of 11 indicates Sensitive-But-
+   Unclassified and 5 indicates top-secret. The hierarchy of sensitivity
+   ranks top-secret as more sensitive than Sensitive-But-Unclassified
+   even though the numerical value of top-secret is less than
+   Sensitive-But-Unclassified.
+
+   (Of course, if security-classification values are both hierarchical
+   and in ascending order, a casual reader of the security policy is
+   more likely to understand it.)
+
+   An example of a security policy that does not use any of the X.411
+   values might be:
+
+   10 -- anyone
+   15 -- Morgan Corporation and its contractors
+   20 -- Morgan Corporation employees
+   25 -- Morgan Corporation board of directors
+
+   An example of a security policy that uses part of the X.411 hierarchy
+   might be:
+
+   0 -- unmarked
+   1 -- unclassified, can be read by everyone
+
+
+
+Hoffman                     Standards Track                    [Page 29]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+   2 -- restricted to Timberwolf Productions staff
+   6 -- can only be read to Timberwolf Productions executives
+
+3.3.3 Privacy Mark
+
+   If present, the eSSSecurityLabel privacy-mark is not used for access
+   control. The content of the eSSSecurityLabel privacy-mark may be
+   defined by the security policy in force (identified by the
+   eSSSecurityLabel security-policy-identifier) which may define a list
+   of values to be used. Alternately, the value may be determined by the
+   originator of the security-label.
+
+3.3.4 Security Categories
+
+   If present, the eSSSecurityLabel security-categories provide further
+   granularity for the sensitivity of the message. The security policy
+   in force (identified by the eSSSecurityLabel security-policy-
+   identifier) is used to indicate the syntaxes that are allowed to be
+   present in the eSSSecurityLabel security-categories. Alternately, the
+   security-categories and their values may be defined by bilateral
+   agreement.
+
+3.4  Equivalent Security Labels
+
+   Because organizations are allowed to define their own security
+   policies, many different security policies will exist. Some
+   organizations may wish to create equivalencies between their security
+   policies with the security policies of other organizations. For
+   example, the Acme Company and the Widget Corporation may reach a
+   bilateral agreement that the "Acme private" security-classification
+   value is equivalent to the "Widget sensitive" security-classification
+   value.
+
+   Receiving agents MUST NOT process an equivalentLabels attribute in a
+   message if the agent does not trust the signer of that attribute to
+   translate the original eSSSecurityLabel values to the security policy
+   included in the equivalentLabels attribute. Receiving agents have the
+   option to process equivalentLabels attributes but do not have to. It
+   is acceptable for a receiving agent to only process
+   eSSSecurityLabels. All receiving agents SHOULD recognize
+   equivalentLabels attributes even if they do not process them.
+
+3.4.1 Creating Equivalent Labels
+
+   The EquivalentLabels signed attribute is defined as:
+
+
+
+
+
+
+Hoffman                     Standards Track                    [Page 30]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+EquivalentLabels ::= SEQUENCE OF ESSSecurityLabel
+
+id-aa-equivalentLabels OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+        us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) id-aa(2) 9}
+
+   As stated earlier, the ESSSecurityLabel contains the sensitivity
+   values selected by the original signer of the signedData. If an
+   ESSSecurityLabel is present in a signerInfo, all signerInfos in the
+   signedData MUST contain an ESSSecurityLabel and they MUST all be
+   identical. In addition to an ESSSecurityLabel, a signerInfo MAY also
+   include an equivalentLabels signed attribute. If present, the
+   equivalentLabels attribute MUST include one or more security labels
+   that are believed by the signer to be semantically equivalent to the
+   ESSSecurityLabel attribute included in the same signerInfo.
+
+   All security-policy object identifiers MUST be unique in the set of
+   ESSSecurityLabel and EquivalentLabels security labels. Before using
+   an EquivalentLabels attribute, a receiving agent MUST ensure that all
+   security-policy OIDs are unique in the security label or labels
+   included in the EquivalentLabels. Once the receiving agent selects
+   the security label (within the EquivalentLabels) to be used for
+   processing, then the security-policy OID of the selected
+   EquivalentLabels security label MUST be compared with the
+   ESSSecurityLabel security-policy OID to ensure that they are unique.
+
+   In the case that an ESSSecurityLabel attribute is not included in a
+   signerInfo, then an EquivalentLabels attribute may still be included.
+   For example, in the Acme security policy, the absence of an
+   ESSSecurityLabel could be defined to equate to a security label
+   composed of the Acme security-policy OID and the "unmarked"
+   security-classification.
+
+   Note that equivalentLabels MUST NOT be used to convey security labels
+   that are semantically different from the ESSSecurityLabel included in
+   the signerInfos in the signedData. If an entity needs to apply a
+   security label that is semantically different from the
+   ESSSecurityLabel, then it MUST include the sematically different
+   security label in an outer signedData object that encapsulates the
+   signedData object that includes the ESSSecurityLabel.
+
+   If present, the equivalentLabels attribute MUST be a signed
+   attribute; it MUST NOT be an unsigned attribute. [CMS] defines
+   signedAttributes as a SET OF Attribute. A signerInfo MUST NOT include
+   multiple instances of the equivalentLabels attribute. CMS defines the
+   ASN.1 syntax for the signed attributes to include attrValues SET OF
+
+
+
+
+
+
+Hoffman                     Standards Track                    [Page 31]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+   AttributeValue. A equivalentLabels attribute MUST only include a
+   single instance of AttributeValue. There MUST NOT be zero or multiple
+   instances of AttributeValue present in the attrValues SET OF
+   AttributeValue.
+
+3.4.2 Processing Equivalent Labels
+
+   A receiving agent SHOULD process the ESSSecurityLabel before
+   processing any EquivalentLabels. If the policy in the
+   ESSSecurityLabel is understood by the receiving agent, it MUST
+   process that label and MUST ignore all EquivalentLabels.
+
+   When processing an EquivalentLabels attribute, the receiving agent
+   MUST validate the signature on the EquivalentLabels attribute. A
+   receiving agent MUST NOT act on an equivalentLabels attribute for
+   which the signature could not be validated, and MUST NOT act on an
+   equivalentLabels attribute unless that attribute is signed by an
+   entity trusted to translate the original eSSSecurityLabel values to
+   the security policy included in the equivalentLabels attribute.
+   Determining who is allowed to specify equivalence mappings is a local
+   policy. If a message has more than one EquivalentLabels attribute,
+   the receiving agent SHOULD process the first one that it reads and
+   validates that contains the security policy of interest to the
+   receiving agent.
+
+4. Mail List Management
+
+   Sending agents must create recipient-specific data structures for
+   each recipient of an encrypted message. This process can impair
+   performance for messages sent to a large number of recipients. Thus,
+   Mail List Agents (MLAs) that can take a single message and perform
+   the recipient-specific encryption for every recipient are often
+   desired.
+
+   An MLA appears to the message originator as a normal message
+   recipient, but the MLA acts as a message expansion point for a Mail
+   List (ML). The sender of a message directs the message to the MLA,
+   which then redistributes the message to the members of the ML. This
+   process offloads the per-recipient processing from individual user
+   agents and allows for more efficient management of large MLs. MLs are
+   true message recipients served by MLAs that provide cryptographic and
+   expansion services for the mailing list.
+
+   In addition to cryptographic handling of messages, secure mailing
+   lists also have to prevent mail loops. A mail loop is where one
+   mailing list is a member of a second mailing list, and the second
+
+
+
+
+
+Hoffman                     Standards Track                    [Page 32]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+   mailing list is a member of the first. A message will go from one
+   list to the other in a rapidly-cascading succession of mail that will
+   be distributed to all other members of both lists.
+
+   To prevent mail loops, MLAs use the mlExpansionHistory attribute of
+   the outer signature of a triple wrapped message. The
+   mlExpansionHistory attribute is essentially a list of every MLA that
+   has processed the message. If an MLA sees its own unique entity
+   identifier in the list, it knows that a loop has been formed, and
+   does not send the message to the list again.
+
+4.1 Mail List Expansion
+
+   Mail list expansion processing is noted in the value of the
+   mlExpansionHistory attribute, located in the signed attributes of the
+   MLA's SignerInfo block. The MLA creates or updates the signed
+   mlExpansionHistory attribute value each time the MLA expands and
+   signs a message for members of a mail list.
+
+   The MLA MUST add an MLData record containing the MLA's identification
+   information, date and time of expansion, and optional receipt policy
+   to the end of the mail list expansion history sequence. If the
+   mlExpansionHistory attribute is absent, then the MLA MUST add the
+   attribute and the current expansion becomes the first element of the
+   sequence. If the mlExpansionHistory attribute is present, then the
+   MLA MUST add the current expansion information to the end of the
+   existing MLExpansionHistory sequence. Only one mlExpansionHistory
+   attribute can be included in the signedAttributes of a SignerInfo.
+
+   Note that if the mlExpansionHistory attribute is absent, then the
+   recipient is a first tier message recipient.
+
+   There can be multiple SignerInfos within a SignedData object, and
+   each SignerInfo may include signedAttributes. Therefore, a single
+   SignedData object may include multiple SignerInfos, each SignerInfo
+   having a mlExpansionHistory attribute. For example, an MLA can send a
+   signed message with two SignerInfos, one containing a DSS signature,
+   the other containing an RSA signature.
+
+   If an MLA creates a SignerInfo that includes an mlExpansionHistory
+   attribute, then all of the SignerInfos created by the MLA for that
+   SignedData object MUST include an mlExpansionHistory attribute, and
+   the value of each MUST be identical. Note that other agents might
+   later add SignerInfo attributes to the SignedData block, and those
+   additional SignerInfos might not include mlExpansionHistory
+   attributes.
+
+
+
+
+
+Hoffman                     Standards Track                    [Page 33]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+   A recipient MUST verify the signature of the SignerInfo which covers
+   the mlExpansionHistory attribute before processing the
+   mlExpansionHistory, and MUST NOT process the mlExpansionHistory
+   attribute unless the signature over it has been verified. If a
+   SignedData object has more than one SignerInfo that has an
+   mlExpansionHistory attribute, the recipient MUST compare the
+   mlExpansionHistory attributes in all the SignerInfos that it has
+   verified, and MUST NOT process the mlExpansionHistory attribute
+   unless every verified mlExpansionHistory attribute in the SignedData
+   block is identical. If the mlExpansionHistory attributes in the
+   verified signerInfos are not all identical, then the receiving agent
+   MUST stop processing the message and SHOULD notify the user or MLA
+   administrator of this error condition. In the mlExpansionHistory
+   processing, SignerInfos that do not have an mlExpansionHistory
+   attribute are ignored.
+
+4.1.1 Detecting Mail List Expansion Loops
+
+   Prior to expanding a message, the MLA examines the value of any
+   existing mail list expansion history attribute to detect an expansion
+   loop. An expansion loop exists when a message expanded by a specific
+   MLA for a specific mail list is redelivered to the same MLA for the
+   same mail list.
+
+   Expansion loops are detected by examining the mailListIdentifier
+   field of each MLData entry found in the mail list expansion history.
+   If an MLA finds its own identification information, then the MLA must
+   discontinue expansion processing and should provide warning of an
+   expansion loop to a human mail list administrator. The mail list
+   administrator is responsible for correcting the loop condition.
+
+4.2 Mail List Agent Processing
+
+   The first few paragraphs of this section provide a high-level
+   description of MLA processing. The rest of the section provides a
+   detailed description of MLA processing.
+
+   MLA message processing depends on the structure of the S/MIME layers
+   in the message sent to the MLA for expansion. In addition to sending
+   triple wrapped messages to an MLA, an entity can send other types of
+   messages to an MLA, such as:
+
+    - a single wrapped signedData or envelopedData message
+    - a double wrapped message (such as signed and enveloped, enveloped
+      and signed, or signed and signed, and so on)
+    - a quadruple-wrapped message (such as if a well-formed triple
+      wrapped message was sent through a gateway that added an outer
+      SignedData layer)
+
+
+
+Hoffman                     Standards Track                    [Page 34]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+   In all cases, the MLA MUST parse all layers of the received message
+   to determine if there are any signedData layers that include an
+   eSSSecurityLabel signedAttribute. This may include decrypting an
+   EnvelopedData layer to determine if an encapsulated SignedData layer
+   includes an eSSSecurityLabel attribute. The MLA MUST fully process
+   each eSSSecurityLabel attribute found in the various signedData
+   layers, including performing access control checks, before
+   distributing the message to the ML members. The details of the access
+   control checks are beyond the scope of this document. The MLA MUST
+   verify the signature of the signerInfo including the eSSSecurityLabel
+   attribute before using it.
+
+   In all cases, the MLA MUST sign the message to be sent to the ML
+   members in a new "outer" signedData layer. The MLA MUST add or update
+   an mlExpansionHistory attribute in the "outer" signedData that it
+   creates to document MLA processing. If there was an "outer"
+   signedData layer included in the original message received by the
+   MLA, then the MLA-created "outer" signedData layer MUST include each
+   signed attribute present in the original "outer" signedData layer,
+   unless the MLA explicitly replaces an attribute (such as signingTime
+   or mlExpansionHistory) with a new value.
+
+   When an S/MIME message is received by the MLA, the MLA MUST first
+   determine which received signedData layer, if any, is the "outer"
+   signedData layer.  To identify the received "outer" signedData layer,
+   the MLA MUST verify the signature and fully process the
+   signedAttributes in each of the outer signedData layers (working from
+   the outside in) to determine if any of them either include an
+   mlExpansionHistory attribute or encapsulate an envelopedData object.
+
+   The MLA's search for the "outer" signedData layer is completed when
+   it finds one of the following:
+
+    - the "outer" signedData layer that includes an mlExpansionHistory
+      attribute or encapsulates an envelopedData object
+    - an envelopedData layer
+    - the original content (that is, a layer that is neither
+      envelopedData nor signedData).
+
+   If the MLA finds an "outer" signedData layer, then the MLA MUST
+   perform the following steps:
+
+   1. Strip off all of the signedData layers that encapsulated the
+      "outer" signedData layer
+
+   2. Strip off the "outer" signedData layer itself (after remembering
+      the included signedAttributes)
+
+
+
+
+Hoffman                     Standards Track                    [Page 35]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+   3. Expand the envelopedData (if present)
+
+   4. Sign the message to be sent to the ML members in a new "outer"
+      signedData layer that includes the signedAttributes (unless
+      explicitly replaced) from the original, received "outer" signedData
+      layer.
+
+   If the MLA finds an "outer" signedData layer that includes an
+   mlExpansionHistory attribute AND the MLA subsequently finds an
+   envelopedData layer buried deeper with the layers of the received
+   message, then the MLA MUST strip off all of the signedData layers
+   down to the envelopedData layer (including stripping off the original
+   "outer" signedData layer) and MUST sign the expanded envelopedData in
+   a new "outer" signedData layer that includes the signedAttributes
+   (unless explicitly replaced) from the original, received "outer"
+   signedData layer.
+
+   If the MLA does not find an "outer" signedData layer AND does not
+   find an envelopedData layer, then the MLA MUST sign the original,
+   received message in a new "outer" signedData layer. If the MLA does
+   not find an "outer" signedData AND does find an envelopedData layer
+   then it MUST expand the envelopedData layer, if present, and sign it
+   in a new "outer" signedData layer.
+
+4.2.1 Examples of Rule Processing
+
+   The following examples help explain the rules above:
+
+   1) A message (S1(Original Content)) (where S = SignedData) is sent to
+      the MLA in which the signedData layer does not include an
+      MLExpansionHistory attribute. The MLA verifies and fully processes
+      the signedAttributes in S1.  The MLA decides that there is not an
+      original, received "outer" signedData layer since it finds the
+      original content, but never finds an envelopedData and never finds
+      an mlExpansionHistory attribute. The MLA calculates a new
+      signedData layer, S2, resulting in the following message sent to
+      the ML recipients: (S2(S1(Original Content))). The MLA includes an
+      mlExpansionHistory attribute in S2.
+
+   2) A message (S3(S2(S1(Original Content)))) is sent to the MLA in
+      which none of the signedData layers includes an MLExpansionHistory
+      attribute. The MLA verifies and fully processes the
+      signedAttributes in S3, S2 and S1. The MLA decides that there is
+      not an original, received "outer" signedData layer since it finds
+      the original content, but never finds an envelopedData and never
+      finds an mlExpansionHistory attribute. The MLA calculates a new
+      signedData layer, S4, resulting in the following
+
+
+
+
+Hoffman                     Standards Track                    [Page 36]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+      message sent to the ML recipients:
+      (S4(S3(S2(S1(Original Content))))). The MLA includes an
+      mlExpansionHistory attribute in S4.
+
+   3) A message (E1(S1(Original Content))) (where E = envelopedData) is
+      sent to the MLA in which S1 does not include an MLExpansionHistory
+      attribute.  The MLA decides that there is not an original,
+      received "outer" signedData layer since it finds the E1 as the
+      outer layer.  The MLA expands the recipientInformation in E1. The
+      MLA calculates a new signedData layer, S2, resulting in the
+      following message sent to the ML recipients:
+      (S2(E1(S1(Original Content)))). The MLA includes an
+      mlExpansionHistory attribute in S2.
+
+   4) A message (S2(E1(S1(Original Content)))) is sent to the MLA in
+      which S2 includes an MLExpansionHistory attribute. The MLA verifies
+      the signature and fully processes the signedAttributes in S2. The
+      MLA finds the mlExpansionHistory attribute in S2, so it decides
+      that S2 is the "outer" signedData. The MLA remembers the
+      signedAttributes included in S2 for later inclusion in the new
+      outer signedData that it applies to the message. The MLA strips off
+      S2. The MLA then expands the recipientInformation in E1 (this
+      invalidates the signature in S2 which is why it was stripped). The
+      nMLA calculates a new signedData layer, S3, resulting in the
+      following message sent to the ML recipients: (S3(E1(S1(Original
+      Content)))). The MLA includes in S3 the attributes from S2 (unless
+      it specifically replaces an attribute value) including an updated
+      mlExpansionHistory attribute.
+
+   5) A message (S3(S2(E1(S1(Original Content))))) is sent to the MLA in
+      which none of the signedData layers include an MLExpansionHistory
+      attribute. The MLA verifies the signature and fully processes the
+      signedAttributes in S3 and S2. When the MLA encounters E1, then it
+      decides that S2 is the "outer" signedData since S2 encapsulates E1.
+      The MLA remembers the signedAttributes included in S2 for later
+      inclusion in the new outer signedData that it applies to the
+      message.  The MLA strips off S3 and S2. The MLA then expands the
+      recipientInformation in E1 (this invalidates the signatures in S3
+      and S2 which is why they were stripped). The MLA calculates a new
+      signedData layer, S4, resulting in the following message sent to
+      the ML recipients: (S4(E1(S1(Original Content)))). The MLA
+      includes in S4 the attributes from S2 (unless it specifically
+      replaces an attribute value) and includes a new
+      mlExpansionHistory attribute.
+
+   6) A message (S3(S2(E1(S1(Original Content))))) is sent to the MLA in
+      which S3 includes an MLExpansionHistory attribute. In this case,
+      the MLA verifies the signature and fully processes the
+
+
+
+Hoffman                     Standards Track                    [Page 37]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+      signedAttributes in S3. The MLA finds the mlExpansionHistory in S3,
+      so it decides that S3 is the "outer" signedData. The MLA remembers
+      the signedAttributes included in S3 for later inclusion in the new
+      outer signedData that it applies to the message. The MLA keeps on
+      parsing encapsulated layers because it must determine if there are
+      any eSSSecurityLabel attributes contained within. The MLA verifies
+      the signature and fully processes the signedAttributes in S2. When
+      the MLA encounters E1, then it strips off S3 and S2. The MLA then
+      expands the recipientInformation in E1 (this invalidates the
+      signatures in S3 and S2 which is why they were stripped). The MLA
+      calculates a new signedData layer, S4, resulting in the following
+      message sent to the ML recipients: (S4(E1(S1(Original Content)))).
+      The MLA includes in S4 the attributes from S3 (unless it
+      specifically replaces an attribute value) including an updated
+      mlExpansionHistory attribute.
+
+4.2.3 Processing Choices
+
+   The processing used depends on the type of the outermost layer of the
+   message. There are three cases for the type of the outermost data:
+
+    - EnvelopedData
+    - SignedData
+    - data
+
+4.2.3.1 Processing for EnvelopedData
+
+   1. The MLA locates its own RecipientInfo and uses the information it
+      contains to obtain the message key.
+
+   2. The MLA removes the existing recipientInfos field and replaces it
+      with a new recipientInfos value built from RecipientInfo
+   structures
+      created for each member of the mailing list. The MLA also removes
+      the existing originatorInfo field and replaces it with a new
+      originatorInfo value built from information describing the MLA.
+
+   3. The MLA encapsulates the expanded encrypted message in a
+      SignedData block, adding an mlExpansionHistory attribute as
+      described in the "Mail List Expansion" section to document the
+      expansion.
+
+   4. The MLA signs the new message and delivers the updated message to
+      mail list members to complete MLA processing.
+
+
+
+
+
+
+
+Hoffman                     Standards Track                    [Page 38]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+4.2.3.2 Processing for SignedData
+
+   MLA processing of multi-layer messages depends on the type of data in
+   each of the layers. Step 3 below specifies that different processing
+   will take place depending on the type of CMS message that has been
+   signed. That is, it needs to know the type of data at the next inner
+   layer, which may or may not be the innermost layer.
+
+   1. The MLA verifies the signature value found in the outermost
+      SignedData layer associated with the signed data. MLA
+      processing of the message terminates if the message signature
+      is invalid.
+
+   2. If the outermost SignedData layer includes a signed
+      mlExpansionHistory attribute, the MLA checks for an expansion loop
+      as described in the "Detecting Mail List Expansion Loops" section,
+      then go to step 3. If the outermost SignedData layer does not
+      include a signed mlExpansionHistory attribute, the MLA signs the
+      whole message (including this outermost SignedData layer that
+      doesn't have an mlExpansionHistory attribute), and delivers the
+      updated message to mail list members to complete MLA processing.
+
+   3. Determine the type of the data that has been signed. That is, look
+      at the type of data on the layer just below the SignedData, which
+      may or may not be the "innermost" layer. Based on the type of data,
+      perform either step 3.1 (EnvelopedData), step 3.2 (SignedData), or
+      step 3.3 (all other types).
+
+       3.1. If the signed data is EnvelopedData, the MLA performs
+            expansion processing of the encrypted message as
+            described previously. Note that this process invalidates the
+            signature value in the outermost SignedData layer associated
+            with the original encrypted message.  Proceed to section 3.2
+            with the result of the expansion.
+
+       3.2. If the signed data is SignedData, or is the result of
+            expanding an EnvelopedData block in step 3.1:
+
+           3.2.1. The MLA strips the existing outermost SignedData layer
+                  after remembering the value of the mlExpansionHistory
+                  and all other signed attributes in that layer, if
+                  present.
+
+           3.2.2.  If the signed data is EnvelopedData (from step 3.1),
+                   the MLA encapsulates the expanded encrypted message
+                   in a new outermost SignedData layer. On the other
+
+
+
+
+
+Hoffman                     Standards Track                    [Page 39]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+                   hand, if the signed data is SignedData (from step
+                   3.2), the MLA encapsulates the signed data in a new
+                   outermost SignedData layer.
+
+           3.2.3.  The outermost signedData layer created by the MLA
+                   replaces the original outermost signedData layer. The
+                   MLA MUST create an signed attribute list for the new
+                   outermost signedData layer which MUST include each
+                   signed attribute present in the original outermost
+                   signedData layer, unless the MLA explicitly replaces
+                   one or more particular attributes with new value. A
+                   special case is the mlExpansionHistory attribute. The
+                   MLA MUST add an mlExpansionHistory signed attribute
+                   to the outer signedData layer as follows:
+
+               3.2.3.1. If the original outermost SignedData layer
+                        included an mlExpansionHistory attribute, the
+                        attribute's value is copied and updated with the
+                        current ML expansion information as described in
+                        the "Mail List Expansion" section.
+
+               3.2.3.2. If the original outermost SignedData layer did
+                        not include an mlExpansionHistory attribute, a
+                        new attribute value is created with the current
+                        ML expansion information as described in the
+                        "Mail List Expansion" section.
+
+       3.3. If the signed data is not EnvelopedData or SignedData:
+
+           3.3.1.  The MLA encapsulates the received signedData object in
+                   an outer SignedData object, and adds an
+                   mlExpansionHistory attribute to the outer SignedData
+                   object containing the current ML expansion information
+                   as described in the "Mail List Expansion" section.
+
+   4. The MLA signs the new message and delivers the updated message to
+      mail list members to complete MLA processing.
+
+   A flow chart for the above steps would be:
+
+   1. Has a valid signature?
+          YES -> 2.
+          NO  -> STOP.
+   2. Does outermost SignedData layer contain mlExpansionHistory?
+          YES -> Check it, then -> 3.
+          NO  -> Sign message (including outermost SignedData that
+                 doesn't have mlExpansionHistory), deliver it, STOP.
+   3. Check type of data just below outermost SignedData.
+
+
+
+Hoffman                     Standards Track                    [Page 40]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+          EnvelopedData -> 3.1.
+          SignedData -> 3.2.
+          all others -> 3.3.
+   3.1. Expand the encrypted message, then -> 3.2.
+   3.2. -> 3.2.1.
+   3.2.1. Strip outermost SignedData layer, note value of
+          mlExpansionHistory and other signed attributes, then -> 3.2.2.
+   3.2.2. Encapsulate in new signature, then -> 3.2.3.
+   3.2.3. Create new signedData layer. Was there an old
+          mlExpansionHistory?
+          YES -> copy the old mlExpansionHistory values, then -> 4.
+          NO  -> create new mlExpansionHistory value, then -> 4.
+   3.3. Encapsulate in a SignedData layer and add an mlExpansionHistory
+          attribute, then -> 4.
+   4. Sign message, deliver it, STOP.
+
+4.2.3.3 Processing for data
+
+   1. The MLA encapsulates the message in a SignedData layer, and adds an
+      mlExpansionHistory attribute containing the current ML expansion
+      information as described in the "Mail List Expansion" section.
+
+   2. The MLA signs the new message and delivers the updated message to
+      mail list members to complete MLA processing.
+
+   4.3 Mail List Agent Signed Receipt Policy Processing
+
+   If a mailing list (B) is a member of another mailing list (A), list B
+   often needs to propagate forward the mailing list receipt policy of
+   A. As a general rule, a mailing list should be conservative in
+   propagating forward the mailing list receipt policy because the
+   ultimate recipient need only process the last item in the ML
+   expansion history. The MLA builds the expansion history to meet this
+   requirement.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Hoffman                     Standards Track                    [Page 41]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+   The following table describes the outcome of the union of mailing
+   list A's policy (the rows in the table) and mailing list B's policy
+   (the columns in the table).
+
+             |                    B's policy
+A's policy   | none   insteadOf        inAdditionTo      missing
+-----------------------------------------------------------------------
+none         | none   none             none              none
+insteadOf    | none   insteadOf(B)     *1                insteadOf(A)
+inAdditionTo | none   insteadOf(B)     *2                inAdditionTo(A)
+missing      | none   insteadOf(B)     inAdditionTo(B)   missing
+
+*1 = insteadOf(insteadOf(A) + inAdditionTo(B))
+*2 = inAdditionTo(inAdditionTo(A) + inAdditionTo(B))
+
+4.4 Mail List Expansion History Syntax
+
+   An mlExpansionHistory attribute value has ASN.1 type
+   MLExpansionHistory. If there are more than ub-ml-expansion-history
+   mailing lists in the sequence, the receiving agent should provide
+   notification of the error to a human mail list administrator. The
+   mail list administrator is responsible for correcting the overflow
+   condition.
+
+MLExpansionHistory ::= SEQUENCE
+        SIZE (1..ub-ml-expansion-history) OF MLData
+
+id-aa-mlExpandHistory OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+    us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) id-aa(2) 3}
+
+ub-ml-expansion-history INTEGER ::= 64
+
+   MLData contains the expansion history describing each MLA that has
+   processed a message. As an MLA distributes a message to members of an
+   ML, the MLA records its unique identifier, date and time of
+   expansion, and receipt policy in an MLData structure.
+
+MLData ::= SEQUENCE {
+  mailListIdentifier EntityIdentifier,
+  expansionTime GeneralizedTime,
+  mlReceiptPolicy MLReceiptPolicy OPTIONAL }
+
+EntityIdentifier ::= CHOICE {
+  issuerAndSerialNumber IssuerAndSerialNumber,
+  subjectKeyIdentifier SubjectKeyIdentifier }
+
+
+
+
+
+
+Hoffman                     Standards Track                    [Page 42]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+   The receipt policy of the ML can withdraw the originator's request
+   for the return of a signed receipt. However, if the originator of the
+   message has not requested a signed receipt, the MLA cannot request a
+   signed receipt. In the event that a ML's signed receipt policy
+   supersedes the originator's request for signed receipts, such that
+   the originator will not receive any signed receipts, then the MLA MAY
+   inform the originator of that fact.
+
+   When present, the mlReceiptPolicy specifies a receipt policy that
+   supersedes the originator's request for signed receipts. The policy
+   can be one of three possibilities: receipts MUST NOT be returned
+   (none); receipts should be returned to an alternate list of
+   recipients, instead of to the originator (insteadOf); or receipts
+   should be returned to a list of recipients in addition to the
+   originator (inAdditionTo).
+
+   MLReceiptPolicy ::= CHOICE {
+     none [0] NULL,
+     insteadOf [1] SEQUENCE SIZE (1..MAX) OF GeneralNames,
+     inAdditionTo [2] SEQUENCE SIZE (1..MAX) OF GeneralNames }
+
+5. Signing Certificate Attribute
+
+   Concerns have been raised over the fact that the certificate which
+   the signer of a CMS SignedData object desired to be bound into the
+   verification process of the SignedData object is not
+   cryptographically bound into the signature itself. This section
+   addresses this issue by creating a new attribute to be placed in the
+   signed attributes section of a SignerInfo object.
+
+   This section also presents a description of a set of possible attacks
+   dealing with the substitution of one certificate to verify the
+   signature for the desired certificate. A set of ways for preventing
+   or addressing these attacks is presented to deal with the simplest of
+   the attacks.
+
+   Authorization information can be used as part of a signature
+   verification process. This information can be carried in either
+   attribute certificates and other public key certificates. The signer
+   needs to have the ability to restrict the set of certificates used in
+   the signature verification process, and information needs to be
+   encoded so that is covered by the signature on the SignedData object.
+   The methods in this section allow for the set of authorization
+   certificates to be listed as part of the signing certificate
+   attribute.
+
+
+
+
+
+
+Hoffman                     Standards Track                    [Page 43]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+   Explicit certificate policies can also be used as part of a signature
+   verification process. If a signer desires to state an explicit
+   certificate policy that should be used when validating the signature,
+   that policy needs to be cryptographically bound into the signing
+   process. The methods described in this section allows for a set of
+   certificate policy statements to be listed as part of the signing
+   certificate attribute.
+
+5.1. Attack Descriptions
+
+   At least three different attacks can be launched against a possible
+   signature verification process by replacing the certificate or
+   certficates used in the signature verification process.
+
+5.1.1 Substitution Attack Description
+
+   The first attack deals with simple substitution of one certificate
+   for another certificate. In this attack, the issuer and serial number
+   in the SignerInfo is modified to refer to a new certificate. This new
+   certificate is used during the signature verification process.
+
+   The first version of this attack is a simple denial of service attack
+   where an invalid certificate is substituted for the valid
+   certificate. This renders the message unverifiable, as the public key
+   in the certificate no longer matches the private key used to sign the
+   message.
+
+   The second version is a substitution of one valid certificate for the
+   original valid certificate where the public keys in the certificates
+   match.  This allows the signature to be validated under potentially
+   different certificate constraints than the originator of the message
+   intended.
+
+5.1.2 Reissue of Certificate Description
+
+   The second attack deals with a certificate authority (CA) re-issuing
+   the signing certificate (or potentially one of its certificates).
+   This attack may start becoming more frequent as Certificate
+   Authorities reissue their own root certificates, or as certificate
+   authorities change policies in the certificate while reissuing their
+   root certificates. This problem also occurs when cross certificates
+   (with potentially different restrictions) are used in the process of
+   verifying a signature.
+
+
+
+
+
+
+
+
+Hoffman                     Standards Track                    [Page 44]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+5.1.3 Rogue Duplicate CA Description
+
+   The third attack deals with a rogue entity setting up a certificate
+   authority that attempts to duplicate the structure of an existing CA.
+   Specifically, the rogue entity issues a new certificate with the same
+   public keys as the signer used, but signed by the rogue entity's
+   private key.
+
+5.2 Attack Responses
+
+   This document does not attempt to solve all of the above attacks;
+   however, a brief description of responses to each of the attacks is
+   given in this section.
+
+5.2.1 Substitution Attack Response
+
+   The denial of service attack cannot be prevented. After the
+   certificate identifier has been modified in transit, no verification
+   of the signature is possible. There is also no way to automatically
+   identify the attack because it is indistinguishable from a message
+   corruption.
+
+   The substitution of a valid certificate can be responded to in two
+   different manners. The first is to make a blanket statement that the
+   use of the same public key in two different certificates is bad
+   practice and has to be avoided. In practice, there is no practical
+   way to prevent users from getting new certificates with the same
+   public keys, and it should be assumed that they will do this. Section
+   5.4 provides a new attribute that can be included in the SignerInfo
+   signed attributes. This binds the correct certificate identifier into
+   the signature. This will convert the attack from a potentially
+   successful one to simply a denial of service attack.
+
+5.2.2 Reissue of Certificate Response
+
+   A CA should never reissue a certificate with different attributes.
+   Certificate Authorities that do so are following poor practices and
+   cannot be relied on. Using the hash of the certificate as the
+   reference to the certificate prevents this attack for end-entity
+   certificates.
+
+   Preventing the attack based on reissuing of CA certificates would
+   require a substantial change to the usage of the signingCertificate
+   attribute presented in section 5.4. It would require that ESSCertIDs
+   would need to be included in the attribute to represent the issuer
+   certificates in the signer's certification path. This presents
+   problems when the relying party is using a cross-certificate as part
+   of its authentication process, and this certificate does not appear
+
+
+
+Hoffman                     Standards Track                    [Page 45]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+   on the list of certificates. The problems outside of a closed PKI
+   make the addition of this information prone to error, possibly
+   causing the rejection of valid chains.
+
+5.2.3 Rogue Duplicate CA Response
+
+   The best method of preventing this attack is to avoid trusting the
+   rogue CA. The use of the hash to identify certificates prevents the
+   use of end-entity certificates from the rogue authority. However the
+   only true way to prevent this attack is to never trust the rogue CA.
+
+5.3 Related Signature Verification Context
+
+   Some applications require that additional information be used as part
+   of the signature validation process. In particular, authorization
+   information from attribute certificates and other public key
+   certificates or policy identifiers provide additional information
+   about the abilities and intent of the signer. The signing certificate
+   attribute described in Section 5.4 provides the ability to bind this
+   context information as part of the signature.
+
+5.3.1 Authorization Information
+
+   Some applications require that authorization information found in
+   attribute certificates and/or other public key certificates be
+   validated. This validation requires that the application be able to
+   find the correct certificates to perform the verification process;
+   however there is no list of the certificates to used in a SignerInfo
+   object. The sender has the ability to include a set of attribute
+   certificates and public key certificates in a SignedData object. The
+   receiver has the ability to retrieve attribute certificates and
+   public key certificates from a directory service. There are some
+   circumstances where the signer may wish to limit the set of
+   certificates that may be used in verifying a signature. It is useful
+   to be able to list the set of certificates the signer wants the
+   recipient to use in validating the signature.
+
+5.3.2 Policy Information
+
+   A related aspect of the certificate binding is the issue of multiple
+   certification paths. In some instances, the semantics of a
+   certificate in its use with a message may depend on the Certificate
+   Authorities and policies that apply. To address this issue, the
+   signer may also wish to bind that context under the signature. While
+   this could be done by either signing the complete certification path
+   or a policy ID, only a binding for the policy ID is described here.
+
+
+
+
+
+Hoffman                     Standards Track                    [Page 46]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+5.4 Signing Certificate Attribute Definition
+
+   The signing certificate attribute is designed to prevent the simple
+   substitution and re-issue attacks, and to allow for a restricted set
+   of authorization certificates to be used in verifying a signature.
+
+   The definition of SigningCertificate is
+
+   SigningCertificate ::=  SEQUENCE {
+       certs        SEQUENCE OF ESSCertID,
+       policies     SEQUENCE OF PolicyInformation OPTIONAL
+   }
+
+   id-aa-signingCertificate OBJECT IDENTIFIER ::= { iso(1)
+       member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)
+       smime(16) id-aa(2) 12 }
+
+   The first certificate identified in the sequence of certificate
+   identifiers MUST be the certificate used to verify the signature. The
+   encoding of the ESSCertID for this certificate SHOULD include the
+   issuerSerial field. If other constraints ensure that
+   issuerAndSerialNumber will be present in the SignerInfo, the
+   issuerSerial field MAY be omitted. The certificate identified is used
+   during the signature verification process. If the hash of the
+   certificate does not match the certificate used to verify the
+   signature, the signature MUST be considered invalid.
+
+   If more than one certificate is present in the sequence of
+   ESSCertIDs, the certificates after the first one limit the set of
+   authorization certificates that are used during signature validation.
+   Authorization certificates can be either attribute certificates or
+   normal certificates. The issuerSerial field (in the ESSCertID
+   structure) SHOULD be present for these certificates, unless the
+   client who is validating the signature is expected to have easy
+   access to all the certificates requred for validation. If only the
+   signing certificate is present in the sequence, there are no
+   restrictions on the set of authorization certificates used in
+   validating the signature.
+
+   The sequence of policy information terms identifies those certificate
+   policies that the signer asserts apply to the certificate, and under
+   which the certificate should be relied upon. This value suggests a
+   policy value to be used in the relying party's certification path
+   validation.
+
+   If present, the SigningCertificate attribute MUST be a signed
+   attribute; it MUST NOT be an unsigned attribute. CMS defines
+   SignedAttributes as a SET OF Attribute. A SignerInfo MUST NOT include
+
+
+
+Hoffman                     Standards Track                    [Page 47]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+   multiple instances of the SigningCertificate attribute. CMS defines
+   the ASN.1 syntax for the signed attributes to include attrValues SET
+   OF AttributeValue. A SigningCertificate attribute MUST include only a
+   single instance of AttributeValue. There MUST NOT be zero or multiple
+   instances of AttributeValue present in the attrValues SET OF
+   AttributeValue.
+
+5.4.1 Certificate Identification
+
+   The best way to identify certificates is an often-discussed issue.
+   [CERT] has imposed a restriction for SignedData objects that the
+   issuer DN must be present in all signing certificates. The
+   issuer/serial number pair is therefore sufficient to identify the
+   correct signing certificate. This information is already present, as
+   part of the SignerInfo object, and duplication of this information
+   would be unfortunate. A hash of the entire certificate serves the
+   same function (allowing the receiver to verify that the same
+   certificate is being used as when the message was signed), is
+   smaller, and permits a detection of the simple substitution attacks.
+
+   Attribute certificates and additional public key certificates
+   containing authorization information do not have an issuer/serial
+   number pair represented anywhere in a SignerInfo object. When an
+   attribute certificate or an additional public key certificate is not
+   included in the SignedData object, it becomes much more difficult to
+   get the correct set of certificates based only on a hash of the
+   certificate. For this reason, these certificates SHOULD be identified
+   by the IssuerSerial object.
+
+   This document defines a certificate identifier as:
+
+   ESSCertID ::=  SEQUENCE {
+        certHash                 Hash,
+        issuerSerial             IssuerSerial OPTIONAL
+   }
+
+   Hash ::= OCTET STRING -- SHA1 hash of entire certificate
+
+   IssuerSerial ::= SEQUENCE {
+        issuer                   GeneralNames,
+        serialNumber             CertificateSerialNumber
+   }
+
+   When creating an ESSCertID, the certHash is computed over the entire
+   DER encoded certificate including the signature. The issuerSerial
+   would normally be present unless the value can be inferred from other
+   information.
+
+
+
+
+Hoffman                     Standards Track                    [Page 48]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+   When encoding IssuerSerial, serialNumber is the serial number that
+   uniquely identifies the certificate. For non-attribute certificates,
+   the issuer MUST contain only the issuer name from the certificate
+   encoded in the directoryName choice of GeneralNames. For attribute
+   certificates, the issuer MUST contain the issuer name field from the
+   attribute certificate.
+
+6. Security Considerations
+
+   All security considerations from [CMS] and [SMIME3] apply to
+   applications that use procedures described in this document.
+
+   As stated in Section 2.3, a recipient of a receipt request must not
+   send back a reply if it cannot validate the signature. Similarly, if
+   there conflicting receipt requests in a message, the recipient must
+   not send back receipts, since an attacker may have inserted the
+   conflicting request.  Sending a signed receipt to an unvalidated
+   sender can expose information about the recipient that it may not
+   want to expose to unknown senders.
+
+   Senders of receipts should consider encrypting the receipts to
+   prevent a passive attacker from gleaning information in the receipts.
+
+   Senders must not rely on recipients' processing software to correctly
+   process security labels. That is, the sender cannot assume that
+   adding a security label to a message will prevent recipients from
+   viewing messages the sender doesn't want them to view. It is expected
+   that there will be many S/MIME clients that will not understand
+   security labels but will still display a labelled message to a
+   recipient.
+
+   A receiving agent that processes security labels must handle the
+   content of the messages carefully. If the agent decides not to show
+   the message to the intended recipient after processing the security
+   label, the agent must take care that the recipient does not
+   accidentally see the content at a later time. For example, if an
+   error response sent to the originator contains the content that was
+   hidden from the recipient, and that error response bounces back to
+   the sender due to addressing errors, the original recipient can
+   possibly see the content since it is unlikely that the bounce message
+   will have the proper security labels.
+
+   A man-in-the-middle attack can cause a recipient to send receipts to
+   an attacker if that attacker has a signature that can be validated by
+   the recipient. The attack consists of intercepting the original
+   message and adding a mLData attribute that says that a receipt should
+   be sent to the attacker in addition to whoever else was going to get
+   the receipt.
+
+
+
+Hoffman                     Standards Track                    [Page 49]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+   Mailing lists that encrypt their content may be targets for denial-
+   of-service attacks if they do not use the mailing list management
+   described in Section 4. Using simple RFC822 header spoofing, it is
+   quite easy to subscribe one encrypted mailing list to another,
+   thereby setting up an infinite loop.
+
+   Mailing List Agents need to be aware that they can be used as oracles
+   for the the adaptive chosen ciphertext attack described in [CMS].
+   MLAs should notify an administrator if a large number of
+   undecryptable messages are received.
+
+   When verifying a signature using certificates that come with a [CMS]
+   message, the recipient should only verify using certificates
+   previously known to be valid, or certificates that have come from a
+   signed SigningCertificate attribute. Otherwise, the attacks described
+   in Section 5 can cause the receiver to possibly think a signature is
+   valid when it is not.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Hoffman                     Standards Track                    [Page 50]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+A. ASN.1 Module
+
+ExtendedSecurityServices
+     { iso(1) member-body(2) us(840) rsadsi(113549)
+       pkcs(1) pkcs-9(9) smime(16) modules(0) ess(2) }
+
+DEFINITIONS IMPLICIT TAGS ::=
+BEGIN
+
+IMPORTS
+
+-- Cryptographic Message Syntax (CMS)
+    ContentType, IssuerAndSerialNumber, SubjectKeyIdentifier
+    FROM CryptographicMessageSyntax { iso(1) member-body(2) us(840)
+    rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) modules(0) cms(1)}
+
+-- PKIX Certificate and CRL Profile, Sec A.2 Implicitly Tagged Module,
+--  1988 Syntax
+    PolicyInformation FROM PKIX1Implicit88 {iso(1)
+    identified-organization(3) dod(6) internet(1) security(5)
+    mechanisms(5) pkix(7)id-mod(0) id-pkix1-implicit-88(2)}
+
+-- X.509
+    GeneralNames, CertificateSerialNumber FROM CertificateExtensions
+    {joint-iso-ccitt ds(5) module(1) certificateExtensions(26) 0};
+
+
+-- Extended Security Services
+
+-- The construct "SEQUENCE SIZE (1..MAX) OF" appears in several ASN.1
+-- constructs in this module. A valid ASN.1 SEQUENCE can have zero or
+-- more entries. The SIZE (1..MAX) construct constrains the SEQUENCE to
+-- have at least one entry. MAX indicates the upper bound is unspecified.
+-- Implementations are free to choose an upper bound that suits their
+-- environment.
+
+UTF8String ::= [UNIVERSAL 12] IMPLICIT OCTET STRING
+    -- The contents are formatted as described in [UTF8]
+
+-- Section 2.7
+
+ReceiptRequest ::= SEQUENCE {
+  signedContentIdentifier ContentIdentifier,
+  receiptsFrom ReceiptsFrom,
+  receiptsTo SEQUENCE SIZE (1..ub-receiptsTo) OF GeneralNames }
+
+ub-receiptsTo INTEGER ::= 16
+
+
+
+
+Hoffman                     Standards Track                    [Page 51]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+id-aa-receiptRequest OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+    us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) id-aa(2) 1}
+
+ContentIdentifier ::= OCTET STRING
+
+id-aa-contentIdentifier OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+    us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) id-aa(2) 7}
+
+ReceiptsFrom ::= CHOICE {
+  allOrFirstTier [0] AllOrFirstTier,
+  -- formerly "allOrNone [0]AllOrNone"
+  receiptList [1] SEQUENCE OF GeneralNames }
+
+AllOrFirstTier ::= INTEGER { -- Formerly AllOrNone
+  allReceipts (0),
+  firstTierRecipients (1) }
+
+
+-- Section 2.8
+
+Receipt ::= SEQUENCE {
+  version ESSVersion,
+  contentType ContentType,
+  signedContentIdentifier ContentIdentifier,
+  originatorSignatureValue OCTET STRING }
+
+id-ct-receipt OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)
+   rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) id-ct(1) 1}
+
+ESSVersion ::= INTEGER  { v1(1) }
+
+-- Section 2.9
+
+ContentHints ::= SEQUENCE {
+  contentDescription UTF8String (SIZE (1..MAX)) OPTIONAL,
+  contentType ContentType }
+
+id-aa-contentHint OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)
+    rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) id-aa(2) 4}
+
+-- Section 2.10
+
+MsgSigDigest ::= OCTET STRING
+
+id-aa-msgSigDigest OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+    us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) id-aa(2) 5}
+
+-- Section 2.11
+
+
+
+Hoffman                     Standards Track                    [Page 52]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+ContentReference ::= SEQUENCE {
+  contentType ContentType,
+  signedContentIdentifier ContentIdentifier,
+  originatorSignatureValue OCTET STRING }
+
+id-aa-contentReference   OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+    us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) id-aa(2) 10 }
+
+
+-- Section 3.2
+
+ESSSecurityLabel ::= SET {
+  security-policy-identifier SecurityPolicyIdentifier,
+  security-classification SecurityClassification OPTIONAL,
+  privacy-mark ESSPrivacyMark OPTIONAL,
+  security-categories SecurityCategories OPTIONAL }
+
+id-aa-securityLabel OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+    us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) id-aa(2) 2}
+
+SecurityPolicyIdentifier ::= OBJECT IDENTIFIER
+
+SecurityClassification ::= INTEGER {
+  unmarked (0),
+  unclassified (1),
+  restricted (2),
+  confidential (3),
+  secret (4),
+  top-secret (5) } (0..ub-integer-options)
+
+ub-integer-options INTEGER ::= 256
+
+ESSPrivacyMark ::= CHOICE {
+    pString      PrintableString (SIZE (1..ub-privacy-mark-length)),
+    utf8String   UTF8String (SIZE (1..MAX))
+}
+
+ub-privacy-mark-length INTEGER ::= 128
+
+SecurityCategories ::= SET SIZE (1..ub-security-categories) OF
+        SecurityCategory
+
+ub-security-categories INTEGER ::= 64
+
+SecurityCategory ::= SEQUENCE {
+  type  [0] OBJECT IDENTIFIER,
+  value [1] ANY DEFINED BY type -- defined by type
+}
+
+
+
+Hoffman                     Standards Track                    [Page 53]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+--Note: The aforementioned SecurityCategory syntax produces identical
+--hex encodings as the following SecurityCategory syntax that is
+--documented in the X.411 specification:
+--
+--SecurityCategory ::= SEQUENCE {
+--     type  [0]  SECURITY-CATEGORY,
+--     value [1]  ANY DEFINED BY type }
+--
+--SECURITY-CATEGORY MACRO ::=
+--BEGIN
+--TYPE NOTATION ::= type | empty
+--VALUE NOTATION ::= value (VALUE OBJECT IDENTIFIER)
+--END
+
+-- Section 3.4
+
+EquivalentLabels ::= SEQUENCE OF ESSSecurityLabel
+
+id-aa-equivalentLabels OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+    us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) id-aa(2) 9}
+
+
+-- Section 4.4
+
+MLExpansionHistory ::= SEQUENCE
+        SIZE (1..ub-ml-expansion-history) OF MLData
+
+id-aa-mlExpandHistory OBJECT IDENTIFIER ::= { iso(1) member-body(2)
+    us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) id-aa(2) 3}
+
+ub-ml-expansion-history INTEGER ::= 64
+
+MLData ::= SEQUENCE {
+  mailListIdentifier EntityIdentifier,
+  expansionTime GeneralizedTime,
+  mlReceiptPolicy MLReceiptPolicy OPTIONAL }
+
+EntityIdentifier ::= CHOICE {
+  issuerAndSerialNumber IssuerAndSerialNumber,
+  subjectKeyIdentifier SubjectKeyIdentifier }
+
+MLReceiptPolicy ::= CHOICE {
+  none [0] NULL,
+  insteadOf [1] SEQUENCE SIZE (1..MAX) OF GeneralNames,
+  inAdditionTo [2] SEQUENCE SIZE (1..MAX) OF GeneralNames }
+
+
+-- Section 5.4
+
+
+
+Hoffman                     Standards Track                    [Page 54]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+SigningCertificate ::=  SEQUENCE {
+    certs        SEQUENCE OF ESSCertID,
+    policies     SEQUENCE OF PolicyInformation OPTIONAL
+}
+
+id-aa-signingCertificate OBJECT IDENTIFIER ::= { iso(1)
+    member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)
+    smime(16) id-aa(2) 12 }
+
+ESSCertID ::=  SEQUENCE {
+     certHash                 Hash,
+     issuerSerial             IssuerSerial OPTIONAL
+}
+
+Hash ::= OCTET STRING -- SHA1 hash of entire certificate
+
+IssuerSerial ::= SEQUENCE {
+     issuer                   GeneralNames,
+     serialNumber             CertificateSerialNumber
+}
+
+END -- of ExtendedSecurityServices
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Hoffman                     Standards Track                    [Page 55]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+B. References
+
+   [ASN1-1988]  "Recommendation X.208: Specification of Abstract Syntax
+                Notation One (ASN.1)".
+
+   [ASN1-1994]  "Recommendation X.680: Specification of Abstract Syntax
+                Notation One (ASN.1)".
+
+   [CERT]       Ramsdell, B., Editor, "S/MIME Version 3 Certificate
+                Handling", RFC 2632, June 1999.
+
+   [CMS]        Housley, R., "Cryptographic Message Syntax", RFC 2630,
+                June 1999.
+
+   [MSG]        Ramsdell, B., Editor, "S/MIME Version 3 Message
+                Specification", RFC 2633, June 1999.
+
+   [MUSTSHOULD] Bradner, S., "Key Words for Use in RFCs to Indicate
+                Requirement Levels", BCP 14, RFC 2119, March 1997.
+
+   [MSP4]       "Secure Data Network System (SDNS) Message Security
+                Protocol (MSP) 4.0", Specification SDN.701, Revision A,
+                1997-02-06.
+
+   [MTSABS]     "1988 International Telecommunication Union (ITU) Data
+                Communication Networks Message Handling Systems: Message
+                Transfer System:  Abstract Service Definition and
+                Procedures, Volume VIII, Fascicle VIII.7, Recommendation
+                X.411"; MTSAbstractService {joint-iso-ccitt mhs-motis(6)
+                mts(3) modules(0) mts-abstract-service(1)}
+
+   [PKCS7-1.5]  Kaliski, B., "PKCS #7: Cryptographic Message Syntax",
+                RFC 2315, March 1998.
+
+   [SMIME2]     Dusse, S., Hoffman, P., Ramsdell, B., Lundblade, L. and
+                L.  Repka"S/MIME Version 2 Message Specification", RFC
+                2311, March 1998, and Dusse, S., Hoffman, P. and B.
+                Ramsdell,"S/MIME Version 2 Certificate Handling", RFC
+                2312, March 1998.
+
+   [UTF8]       Yergeau, F., "UTF-8, a transformation format of ISO
+                10646", RFC 2279, January 1998.
+
+C. Acknowledgments
+
+   The first draft of this work was prepared by David Solo. John Pawling
+   did a huge amount of very detailed revision work during the many
+   phases of the document.
+
+
+
+Hoffman                     Standards Track                    [Page 56]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+   Many other people have contributed hard work to this memo, including:
+
+   Andrew Farrell
+   Bancroft Scott
+   Bengt Ackzell
+   Bill Flanigan
+   Blake Ramsdell
+   Carlisle Adams
+   Darren Harter
+   David Kemp
+   Denis Pinkas
+   Francois Rousseau
+   Jim Schaad
+   Russ Housley
+   Scott Hollenbeck
+   Steve Dusse
+
+Editor's Address
+
+   Paul Hoffman
+   Internet Mail Consortium
+   127 Segre Place
+   Santa Cruz, CA  95060
+
+   EMail: phoffman@imc.org
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Hoffman                     Standards Track                    [Page 57]
+
+RFC 2634         Enhanced Security Services for S/MIME         June 1999
+
+
+Full Copyright Statement
+
+   Copyright (C) The Internet Society (1999).  All Rights Reserved.
+
+   This document and translations of it may be copied and furnished to
+   others, and derivative works that comment on or otherwise explain it
+   or assist in its implementation may be prepared, copied, published
+   and distributed, in whole or in part, without restriction of any
+   kind, provided that the above copyright notice and this paragraph are
+   included on all such copies and derivative works.  However, this
+   document itself may not be modified in any way, such as by removing
+   the copyright notice or references to the Internet Society or other
+   Internet organizations, except as needed for the purpose of
+   developing Internet standards in which case the procedures for
+   copyrights defined in the Internet Standards process must be
+   followed, or as required to translate it into languages other than
+   English.
+
+   The limited permissions granted above are perpetual and will not be
+   revoked by the Internet Society or its successors or assigns.
+
+   This document and the information contained herein is provided on an
+   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
+   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
+   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
+   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
+   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
+
+Acknowledgement
+
+   Funding for the RFC Editor function is currently provided by the
+   Internet Society.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Hoffman                     Standards Track                    [Page 58]
+
diff -uNr gmime-1.90.0/rfc/rfc3156.txt gmime/rfc/rfc3156.txt
--- gmime-1.90.0/rfc/rfc3156.txt	Thu Jan  1 01:00:00 1970
+++ gmime/rfc/rfc3156.txt	Sun Mar  3 00:35:17 2002
@@ -0,0 +1,843 @@
+
+
+
+
+
+
+Network Working Group                                          M. Elkins
+Request for Comments: 3156                      Network Associates, Inc.
+Updates: 2015                                               D. Del Torto
+Category: Standards Track                        CryptoRights Foundation
+                                                               R. Levien
+                                    University of California at Berkeley
+                                                             T. Roessler
+                                                             August 2001
+
+
+                       MIME Security with OpenPGP
+
+Status of this Memo
+
+   This document specifies an Internet standards track protocol for the
+   Internet community, and requests discussion and suggestions for
+   improvements.  Please refer to the current edition of the "Internet
+   Official Protocol Standards" (STD 1) for the standardization state
+   and status of this protocol.  Distribution of this memo is unlimited.
+
+Copyright Notice
+
+   Copyright (C) The Internet Society (2001).  All Rights Reserved.
+
+Abstract
+
+   This document describes how the OpenPGP Message Format can be used to
+   provide privacy and authentication using the Multipurpose Internet
+   Mail Extensions (MIME) security content types described in RFC 1847.
+
+1.  Introduction
+
+   Work on integrating PGP (Pretty Good Privacy) with MIME [3]
+   (including the since withdrawn "application/pgp" content type) prior
+   to RFC 2015 suffered from a number of problems, the most significant
+   of which is the inability to recover signed message bodies without
+   parsing data structures specific to PGP.  RFC 2015 makes use of the
+   elegant solution proposed in RFC 1847, which defines security
+   multipart formats for MIME.  The security multiparts clearly separate
+   the signed message body from the signature, and have a number of
+   other desirable properties.  This document revises RFC 2015 to adopt
+   the integration of PGP and MIME to the needs which emerged during the
+   work on the OpenPGP specification.
+
+   This document defines three content types for implementing security
+   and privacy with OpenPGP: "application/pgp-encrypted",
+   "application/pgp-signature" and "application/pgp-keys".
+
+
+
+
+Elkins, et al.              Standards Track                     [Page 1]
+
+RFC 3156               MIME Security with OpenPGP            August 2001
+
+
+   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
+   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
+   document are to be interpreted as described in RFC 2119.
+
+2.  OpenPGP data formats
+
+   OpenPGP implementations can generate either ASCII armor (described in
+   [1]) or 8-bit binary output when encrypting data, generating a
+   digital signature, or extracting public key data.  The ASCII armor
+   output is the REQUIRED method for data transfer.  This allows those
+   users who do not have the means to interpret the formats described in
+   this document to be able to extract and use the OpenPGP information
+   in the message.
+
+   When the amount of data to be transmitted requires that it be sent in
+   many parts, the MIME message/partial mechanism SHOULD be used rather
+   than the multi-part ASCII armor OpenPGP format.
+
+3.  Content-Transfer-Encoding restrictions
+
+   Multipart/signed and multipart/encrypted are to be treated by agents
+   as opaque, meaning that the data is not to be altered in any way [2],
+   [7].  However, many existing mail gateways will detect if the next
+   hop does not support MIME or 8-bit data and perform conversion to
+   either Quoted-Printable or Base64.  This presents serious problems
+   for multipart/signed, in particular, where the signature is
+   invalidated when such an operation occurs.  For this reason all data
+   signed according to this protocol MUST be constrained to 7 bits (8-
+   bit data MUST be encoded using either Quoted-Printable or Base64).
+   Note that this also includes the case where a signed object is also
+   encrypted (see section 6).  This restriction will increase the
+   likelihood that the signature will be valid upon receipt.
+
+   Additionally, implementations MUST make sure that no trailing
+   whitespace is present after the MIME encoding has been applied.
+
+      Note: In most cases, trailing whitespace can either be removed, or
+      protected by applying an appropriate content-transfer-encoding.
+      However, special care must be taken when any header lines - either
+      in MIME entity headers, or in embedded RFC 822 headers - are
+      present which only consist of whitespace: Such lines must be
+      removed entirely, since replacing them by empty lines would turn
+      them into header delimiters, and change the semantics of the
+      message.  The restrictions on whitespace are necessary in order to
+      make the hash calculated invariant under the text and binary mode
+      signature mechanisms provided by OpenPGP [1].  Also, they help to
+      avoid compatibility problems with PGP implementations which
+      predate the OpenPGP specification.
+
+
+
+Elkins, et al.              Standards Track                     [Page 2]
+
+RFC 3156               MIME Security with OpenPGP            August 2001
+
+
+      Note: If any line begins with the string "From ", it is strongly
+      suggested that either the Quoted-Printable or Base64 MIME encoding
+      be applied.  If Quoted-Printable is used, at least one of the
+      characters in the string should be encoded using the hexadecimal
+      coding rule.  This is because many mail transfer and delivery
+      agents treat "From " (the word "from" followed immediately by a
+      space character) as the start of a new message and thus insert a
+      right angle-bracket (>) in front of any line beginning with
+      "From " to distinguish this case, invalidating the signature.
+
+   Data that is ONLY to be encrypted is allowed to contain 8-bit
+   characters and trailing whitespace and therefore need not undergo the
+   conversion to a 7bit format, and the stripping of whitespace.
+
+      Implementor's note: It cannot be stressed enough that applications
+      using this standard follow MIME's suggestion that you "be
+      conservative in what you generate, and liberal in what you
+      accept."  In this particular case it means it would be wise for an
+      implementation to accept messages with any content-transfer-
+      encoding, but restrict generation to the 7-bit format required by
+      this memo.  This will allow future compatibility in the event the
+      Internet SMTP framework becomes 8-bit friendly.
+
+4.  OpenPGP encrypted data
+
+   Before OpenPGP encryption, the data is written in MIME canonical
+   format (body and headers).
+
+   OpenPGP encrypted data is denoted by the "multipart/encrypted"
+   content type, described in [2], and MUST have a "protocol" parameter
+   value of "application/pgp-encrypted".  Note that the value of the
+   parameter MUST be enclosed in quotes.
+
+   The multipart/encrypted MIME body MUST consist of exactly two body
+   parts, the first with content type "application/pgp-encrypted".  This
+   body contains the control information.  A message complying with this
+   standard MUST contain a "Version: 1" field in this body.  Since the
+   OpenPGP packet format contains all other information necessary for
+   decrypting, no other information is required here.
+
+   The second MIME body part MUST contain the actual encrypted data.  It
+   MUST be labeled with a content type of "application/octet-stream".
+
+   Example message:
+
+      From: Michael Elkins <elkins@aero.org>
+      To: Michael Elkins <elkins@aero.org>
+      Mime-Version: 1.0
+
+
+
+Elkins, et al.              Standards Track                     [Page 3]
+
+RFC 3156               MIME Security with OpenPGP            August 2001
+
+
+      Content-Type: multipart/encrypted; boundary=foo;
+         protocol="application/pgp-encrypted"
+
+      --foo
+      Content-Type: application/pgp-encrypted
+
+      Version: 1
+
+      --foo
+      Content-Type: application/octet-stream
+
+      -----BEGIN PGP MESSAGE-----
+      Version: 2.6.2
+
+      hIwDY32hYGCE8MkBA/wOu7d45aUxF4Q0RKJprD3v5Z9K1YcRJ2fve87lMlDlx4Oj
+      eW4GDdBfLbJE7VUpp13N19GL8e/AqbyyjHH4aS0YoTk10QQ9nnRvjY8nZL3MPXSZ
+      g9VGQxFeGqzykzmykU6A26MSMexR4ApeeON6xzZWfo+0yOqAq6lb46wsvldZ96YA
+      AABH78hyX7YX4uT1tNCWEIIBoqqvCeIMpp7UQ2IzBrXg6GtukS8NxbukLeamqVW3
+      1yt21DYOjuLzcMNe/JNsD9vDVCvOOG3OCi8=
+      =zzaA
+      -----END PGP MESSAGE-----
+
+      --foo--
+
+5.  OpenPGP signed data
+
+   OpenPGP signed messages are denoted by the "multipart/signed" content
+   type, described in [2], with a "protocol" parameter which MUST have a
+   value of "application/pgp-signature" (MUST be quoted).
+
+   The "micalg" parameter for the "application/pgp-signature" protocol
+   MUST contain exactly one hash-symbol of the format "pgp-<hash-
+   identifier>", where <hash-identifier> identifies the Message
+   Integrity Check (MIC) algorithm used to generate the signature.
+   Hash-symbols are constructed from the text names registered in [1] or
+   according to the mechanism defined in that document by converting the
+   text name to lower case and prefixing it with the four characters
+   "pgp-".
+
+   Currently defined values are "pgp-md5", "pgp-sha1", "pgp-ripemd160",
+   "pgp-md2", "pgp-tiger192", and "pgp-haval-5-160".
+
+   The multipart/signed body MUST consist of exactly two parts.  The
+   first part contains the signed data in MIME canonical format,
+   including a set of appropriate content headers describing the data.
+
+   The second body MUST contain the OpenPGP digital signature.  It MUST
+   be labeled with a content type of "application/pgp-signature".
+
+
+
+Elkins, et al.              Standards Track                     [Page 4]
+
+RFC 3156               MIME Security with OpenPGP            August 2001
+
+
+      Note: Implementations can either generate "signatures of a
+      canonical text document" or "signatures of a binary document", as
+      defined in [1].  The restrictions on the signed material put forth
+      in section 3 and in this section will make sure that the various
+      MIC algorithm variants specified in [1] and [5] will all produce
+      the same result.
+
+   When the OpenPGP digital signature is generated:
+
+   (1)   The data to be signed MUST first be converted to its content-
+         type specific canonical form.  For text/plain, this means
+         conversion to an appropriate character set and conversion of
+         line endings to the canonical <CR><LF> sequence.
+
+   (2)   An appropriate Content-Transfer-Encoding is then applied; see
+         section 3.  In particular, line endings in the encoded data
+         MUST use the canonical <CR><LF> sequence where appropriate
+         (note that the canonical line ending may or may not be present
+         on the last line of encoded data and MUST NOT be included in
+         the signature if absent).
+
+   (3)   MIME content headers are then added to the body, each ending
+         with the canonical <CR><LF> sequence.
+
+   (4)   As described in section 3 of this document, any trailing
+         whitespace MUST then be removed from the signed material.
+
+   (5)   As described in [2], the digital signature MUST be calculated
+         over both the data to be signed and its set of content headers.
+
+   (6)   The signature MUST be generated detached from the signed data
+         so that the process does not alter the signed data in any way.
+
+      Note: The accepted OpenPGP convention is for signed data to end
+      with a <CR><LF> sequence.  Note that the <CR><LF> sequence
+      immediately preceding a MIME boundary delimiter line is considered
+      to be part of the delimiter in [3], 5.1.  Thus, it is not part of
+      the signed data preceding the delimiter line.  An implementation
+      which elects to adhere to the OpenPGP convention has to make sure
+      it inserts a <CR><LF> pair on the last line of the data to be
+      signed and transmitted (signed message and transmitted message
+      MUST be identical).
+
+   Example message:
+
+         From: Michael Elkins <elkins@aero.org>
+         To: Michael Elkins <elkins@aero.org>
+         Mime-Version: 1.0
+
+
+
+Elkins, et al.              Standards Track                     [Page 5]
+
+RFC 3156               MIME Security with OpenPGP            August 2001
+
+
+         Content-Type: multipart/signed; boundary=bar; micalg=pgp-md5;
+           protocol="application/pgp-signature"
+
+         --bar
+      & Content-Type: text/plain; charset=iso-8859-1
+      & Content-Transfer-Encoding: quoted-printable
+      &
+      & =A1Hola!
+      &
+      & Did you know that talking to yourself is a sign of senility?
+      &
+      & It's generally a good idea to encode lines that begin with
+      & From=20because some mail transport agents will insert a greater-
+      & than (>) sign, thus invalidating the signature.
+      &
+      & Also, in some cases it might be desirable to encode any   =20
+      & trailing whitespace that occurs on lines in order to ensure  =20
+      & that the message signature is not invalidated when passing =20
+      & a gateway that modifies such whitespace (like BITNET). =20
+      &
+      & me
+
+      --bar
+
+      Content-Type: application/pgp-signature
+
+      -----BEGIN PGP MESSAGE-----
+      Version: 2.6.2
+
+      iQCVAwUBMJrRF2N9oWBghPDJAQE9UQQAtl7LuRVndBjrk4EqYBIb3h5QXIX/LC//
+      jJV5bNvkZIGPIcEmI5iFd9boEgvpirHtIREEqLQRkYNoBActFBZmh9GC3C041WGq
+      uMbrbxc+nIs1TIKlA08rVi9ig/2Yh7LFrK5Ein57U/W72vgSxLhe/zhdfolT9Brn
+      HOxEa44b+EI=
+      =ndaj
+      -----END PGP MESSAGE-----
+
+      --bar--
+
+   The "&"s in the previous example indicate the portion of the data
+   over which the signature was calculated.
+
+   Upon receipt of a signed message, an application MUST:
+
+   (1)   Convert line endings to the canonical <CR><LF> sequence before
+         the signature can be verified.  This is necessary since the
+         local MTA may have converted to a local end of line convention.
+
+
+
+
+
+Elkins, et al.              Standards Track                     [Page 6]
+
+RFC 3156               MIME Security with OpenPGP            August 2001
+
+
+   (2)   Pass both the signed data and its associated content headers
+         along with the OpenPGP signature to the signature verification
+         service.
+
+6.  Encrypted and Signed Data
+
+   Sometimes it is desirable to both digitally sign and then encrypt a
+   message to be sent.  This protocol allows for two methods of
+   accomplishing this task.
+
+6.1.  RFC 1847 Encapsulation
+
+   In [2], it is stated that the data is first signed as a
+   multipart/signature body, and then encrypted to form the final
+   multipart/encrypted body.  This is most useful for standard MIME-
+   compliant message forwarding.
+
+   Example:
+
+         Content-Type: multipart/encrypted;
+            protocol="application/pgp-encrypted"; boundary=foo
+
+         --foo
+         Content-Type: application/pgp-encrypted
+
+         Version: 1
+
+         --foo
+         Content-Type: application/octet-stream
+
+         -----BEGIN PGP MESSAGE-----
+      & Content-Type: multipart/signed; micalg=pgp-md5
+      &     protocol="application/pgp-signature"; boundary=bar
+      &
+      & --bar
+      & Content-Type: text/plain; charset=us-ascii
+      &
+      & This message was first signed, and then encrypted.
+      &
+      & --bar
+      & Content-Type: application/pgp-signature
+      &
+      & -----BEGIN PGP MESSAGE-----
+      & Version: 2.6.2
+      &
+      & iQCVAwUBMJrRF2N9oWBghPDJAQE9UQQAtl7LuRVndBjrk4EqYBIb3h5QXIX/LC//
+      & jJV5bNvkZIGPIcEmI5iFd9boEgvpirHtIREEqLQRkYNoBActFBZmh9GC3C041WGq
+      & uMbrbxc+nIs1TIKlA08rVi9ig/2Yh7LFrK5Ein57U/W72vgSxLhe/zhdfolT9Brn
+
+
+
+Elkins, et al.              Standards Track                     [Page 7]
+
+RFC 3156               MIME Security with OpenPGP            August 2001
+
+
+      & HOxEa44b+EI=
+      & =ndaj
+      & -----END PGP MESSAGE-----
+      &
+      & --bar--
+        -----END PGP MESSAGE-----
+
+        --foo--
+
+   (The text preceded by '&' indicates that it is really encrypted, but
+   presented as text for clarity.)
+
+6.2.  Combined method
+
+   The OpenPGP packet format [1] describes a method for signing and
+   encrypting data in a single OpenPGP message.  This method is allowed
+   in order to reduce processing overhead and increase compatibility
+   with non-MIME implementations of OpenPGP.  The resulting data is
+   formatted as a "multipart/encrypted" object as described in Section
+   4.
+
+   Messages which are encrypted and signed in this combined fashion are
+   REQUIRED to follow the same canonicalization rules as
+   multipart/signed objects.
+
+   It is explicitly allowed for an agent to decrypt a combined message
+   and rewrite it as a multipart/signed object using the signature data
+   embedded in the encrypted version.
+
+7.  Distribution of OpenPGP public keys
+
+   Content-Type: application/pgp-keys
+   Required parameters: none
+   Optional parameters: none
+
+   A MIME body part of the content type "application/pgp-keys" contains
+   ASCII-armored transferable Public Key Packets as defined in [1],
+   section 10.1.
+
+8.  Security Considerations
+
+   Signatures of a canonical text document as defined in [1] ignore
+   trailing white space in signed material.  Implementations which
+   choose to use signatures of canonical text documents will not be able
+   to detect the addition of whitespace in transit.
+
+   See [3], [4] for more information on the security considerations
+   concerning the underlying protocols.
+
+
+
+Elkins, et al.              Standards Track                     [Page 8]
+
+RFC 3156               MIME Security with OpenPGP            August 2001
+
+
+9.  IANA Considerations
+
+   This document defines three media types: "application/pgp-encrypted",
+   "application/pgp-signature" and "application/pgp-keys".  The
+   following sections specify the IANA registrations for these types.
+
+9.1.  Registration of the application/pgp-encrypted media type
+
+   MIME media type name: application
+   MIME subtype name: pgp-encrypted
+   Required parameters: none
+   Optional parameters: none
+
+   Encoding considerations:
+
+      Currently this media type always consists of a single 7bit text
+      string.
+
+   Security considerations:
+
+      See Section 8 and RFC 2440 Section 13.
+
+   Interoperability considerations: none
+
+   Published specification:
+
+      This document.
+
+   Additional information:
+
+      Magic number(s): none
+      File extension(s): none
+      Macintosh File Type Code(s): none
+
+   Person & email address to contact for further information:
+
+      Michael Elkins
+      Email: me@cs.hmc.edu
+
+   Intended usage: common
+
+   Author/Change controller:
+
+      Michael Elkins
+      Email: me@cs.hmc.edu
+
+
+
+
+
+
+Elkins, et al.              Standards Track                     [Page 9]
+
+RFC 3156               MIME Security with OpenPGP            August 2001
+
+
+9.2.  Registration of the application/pgp-signature media type
+
+   MIME media type name: application
+   MIME subtype name: pgp-signature
+   Required parameters: none
+   Optional parameters: none
+
+   Encoding considerations:
+
+      The content of this media type always consists of 7bit text.
+
+   Security considerations:
+
+      See Section 8 and RFC 2440 Section 13.
+
+   Interoperability considerations: none
+
+   Published specification:
+
+      RFC 2440 and this document.
+
+   Additional information:
+
+      Magic number(s): none
+      File extension(s): asc, sig
+      Macintosh File Type Code(s): pgDS
+
+   Person & email address to contact for further information:
+
+      Michael Elkins
+      Email: me@cs.hmc.edu
+
+   Intended usage: common
+
+   Author/Change controller:
+
+      Michael Elkins
+      Email: me@cs.hmc.edu
+
+9.3.  Registration of the application/pgp-keys media type
+
+   MIME media type name: application
+   MIME subtype name: pgp-keys
+   Required parameters: none
+   Optional parameters: none
+
+
+
+
+
+
+Elkins, et al.              Standards Track                    [Page 10]
+
+RFC 3156               MIME Security with OpenPGP            August 2001
+
+
+   Encoding considerations:
+
+      The content of this media type always consists of 7bit text.
+
+   Security considerations:
+
+      See Section 8 and RFC 2440 Section 13.
+
+   Interoperability considerations: none
+
+   Published specification:
+
+      RFC 2440 and this document.
+
+   Additional information:
+
+      Magic number(s): none
+      File extension(s): asc
+      Macintosh File Type Code(s): none
+
+   Person & email address to contact for further information:
+
+      Michael Elkins
+      Email: me@cs.hmc.edu
+
+   Intended usage: common
+
+   Author/Change controller:
+
+      Michael Elkins
+      Email: me@cs.hmc.edu
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Elkins, et al.              Standards Track                    [Page 11]
+
+RFC 3156               MIME Security with OpenPGP            August 2001
+
+
+10.  Notes
+
+   "PGP" and "Pretty Good Privacy" are registered trademarks of Network
+   Associates, Inc.
+
+11.  Acknowledgements
+
+   This document relies on the work of the IETF's OpenPGP Working
+   Group's definitions of the OpenPGP Message Format.  The OpenPGP
+   message format is currently described in RFC 2440 [1].
+
+   Special thanks are due: to Philip Zimmermann for his original and
+   ongoing work on PGP; to Charles Breed, Jon Callas and Dave Del Torto
+   for originally proposing the formation of the OpenPGP Working Group;
+   and to Steve Schoenfeld for helpful feedback during the draft
+   process.  The authors would also like to thank the engineers at
+   Pretty Good Privacy, Inc (now Network Associates, Inc), including
+   Colin Plumb, Hal Finney, Jon Callas, Mark Elrod, Mark Weaver and
+   Lloyd Chambers, for their technical commentary.
+
+   Additional thanks are due to Jeff Schiller and Derek Atkins for their
+   continuing support of strong cryptography and PGP freeware at MIT; to
+   Rodney Thayer of Sable Technology; to John Noerenberg, Steve Dorner
+   and Laurence Lundblade of the Eudora team at QUALCOMM, Inc; to Bodo
+   Moeller for proposing the approach followed with respect to trailing
+   whitespace; to John Gilmore, Hugh Daniel and Fred Ringel (at
+   Rivertown) and Ian Bell (at Turnpike) for their timely critical
+   commentary; and to the international members of the IETF's OpenPGP
+   mailing list, including William Geiger, Lutz Donnerhacke and Kazu
+   Yamamoto.  The idea to use multipart/mixed with multipart/signed has
+   been attributed to James Galvin.  Finally, our gratitude is due to
+   the many members of the "Cypherpunks," "Coderpunks" and "pgp-users"
+   <http://cryptorights.org/pgp-users> mailing lists and the many users
+   of PGP worldwide for helping keep the path to privacy open.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Elkins, et al.              Standards Track                    [Page 12]
+
+RFC 3156               MIME Security with OpenPGP            August 2001
+
+
+12.  Addresses of the Authors and OpenPGP Working Group Chair
+
+   The OpenPGP working group can be contacted via the current chair:
+
+   John W. Noerenberg II
+   Qualcomm, Inc.
+   5775 Morehouse Dr.
+   San Diego, CA 92121 USA
+
+   Phone: +1 619 658 3510
+   EMail: jwn2@qualcomm.com
+
+   The principal authors of this document are:
+
+   Dave Del Torto
+   CryptoRights Foundation
+   80 Alviso Street, Mailstop: CRF
+   San Francisco, CA 94127 USA
+
+   Phone: +1.415.334.5533, vm: #2
+   EMail: ddt@cryptorights.org, ddt@openpgp.net
+
+
+   Michael Elkins
+   Network Associates, Inc.
+   3415 S. Sepulveda Blvd Suite 700
+   Los Angeles, CA 90034 USA
+
+   Phone: +1.310.737.1663
+   Fax:   +1.310.737.1755
+   Email: me@cs.hmc.edu, Michael_Elkins@NAI.com
+
+
+   Raph Levien
+   University of California at Berkeley
+   579 Soda Hall
+   Berkeley, CA 94720 USA
+
+   Phone: +1.510.642.6509
+   EMail: raph@acm.org
+
+
+   Thomas Roessler
+   Nordstrasse 99
+   D-53111 Bonn, Germany
+
+   Phone: +49-228-638007
+   EMail: roessler@does-not-exist.org
+
+
+
+Elkins, et al.              Standards Track                    [Page 13]
+
+RFC 3156               MIME Security with OpenPGP            August 2001
+
+
+References
+
+   [1]   Callas, J., Donnerhacke, L., Finney, H. and R. Thayer, "OpenPGP
+         Message Format", RFC 2440, November 1998.
+
+   [2]   Galvin, J., Murphy, G., Crocker, S. and N. Freed, "Security
+         Multiparts for MIME: Multipart/Signed and Multipart/Encrypted",
+         RFC 1847, October 1995.
+
+   [3]   Freed, N. and N. Borenstein, "Multipurpose Internet Mail
+         Extensions (MIME) Part Two: Media Types", RFC 2046, November
+         1996.
+
+   [4]   Galvin, J., Murphy, G., Crocker, S. and N. Freed, "MIME Object
+         Security Services", RFC 1848, October 1995.
+
+   [5]   Atkins, D., Stallings, W. and P. Zimmermann, "PGP Message
+         Exchange Formats", RFC 1991, August 1996.
+
+   [6]   Elkins, M., "MIME Security with Pretty Good Privacy (PGP)", RFC
+         2015, October 1996.
+
+   [7]   Freed, N., "Gateways and MIME Security Multiparts", RFC 2480,
+         January 1999.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Elkins, et al.              Standards Track                    [Page 14]
+
+RFC 3156               MIME Security with OpenPGP            August 2001
+
+
+Full Copyright Statement
+
+   Copyright (C) The Internet Society (2001).  All Rights Reserved.
+
+   This document and translations of it may be copied and furnished to
+   others, and derivative works that comment on or otherwise explain it
+   or assist in its implementation may be prepared, copied, published
+   and distributed, in whole or in part, without restriction of any
+   kind, provided that the above copyright notice and this paragraph are
+   included on all such copies and derivative works.  However, this
+   document itself may not be modified in any way, such as by removing
+   the copyright notice or references to the Internet Society or other
+   Internet organizations, except as needed for the purpose of
+   developing Internet standards in which case the procedures for
+   copyrights defined in the Internet Standards process must be
+   followed, or as required to translate it into languages other than
+   English.
+
+   The limited permissions granted above are perpetual and will not be
+   revoked by the Internet Society or its successors or assigns.
+
+   This document and the information contained herein is provided on an
+   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
+   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
+   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
+   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
+   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
+
+Acknowledgement
+
+   Funding for the RFC Editor function is currently provided by the
+   Internet Society.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Elkins, et al.              Standards Track                    [Page 15]
+
diff -uNr gmime-1.90.0/strlib.c gmime/strlib.c
--- gmime-1.90.0/strlib.c	Fri Apr 26 03:39:21 2002
+++ gmime/strlib.c	Fri Jul 12 03:39:35 2002
@@ -292,10 +292,10 @@
  * @src: source string
  * @n: number of bytes to copy
  *
- * Copies the first @n characters of the string pointed to by @src to
- * the character array pointed to by @dest and null-terminates
- * @dest. The strings may not overlap and the destination string @dest
- * must be large enough to receive the copy.
+ * Copies at most @n-1 characters (@n being the size of the string
+ * buffer @dest) of the string pointed to by @src to the string
+ * pointed to by @dest and null-terminates @dest. The strings may not
+ * overlap.
  *
  * Returns the size of the resultant string, @dest.
  **/
@@ -305,7 +305,7 @@
 	register const char *s = src;
 	register char *d = dest;
 	
-	while (*s && n)
+	while (*s && n > 1)
 		*d++ = *s++, n--;
 	
 	*d = '\0';
@@ -415,11 +415,10 @@
  * @src: source string
  * @n: number of bytes to append
  *
- * Appends at most the first @n characters of the @src string to the
- * @dest string overwriting the '\0' character at the end of @dest and
- * null-terminates the resulting @dest. The strings may not overlap,
- * and the destination string dest must have enough space for the
- * result.
+ * Appends at most (@n - strlen (dest) - 1) characters (@n being the
+ * size of the string @dest) of the @src string to the @dest string
+ * overwriting the null character at the end of @dest and
+ * null-terminates the resulting @dest. The strings may not overlap.
  *
  * Returns the size of the resultant string, @dest.
  **/
@@ -432,7 +431,7 @@
 	while (*d)
 		d++;
 	
-	while (*s && n)
+	while (*s && n > 1)
 		*d++ = *s++, n--;
 	
 	*d = '\0';
